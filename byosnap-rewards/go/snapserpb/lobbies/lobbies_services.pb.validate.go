// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lobbies_services.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LobbiesSettings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LobbiesSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LobbiesSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LobbiesSettingsMultiError, or nil if none found.
func (m *LobbiesSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *LobbiesSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LobbiesLifetimeTtl

	// no validation rules for LobbiesMatchStartTtl

	// no validation rules for LobbiesDefaultMaxMembers

	// no validation rules for LobbiesMaxInvites

	// no validation rules for AllocationTarget

	// no validation rules for ReadyCheckEnabled

	// no validation rules for LobbiesInviteTtl

	// no validation rules for KickOnDisconnectEnabled

	if len(errors) > 0 {
		return LobbiesSettingsMultiError(errors)
	}

	return nil
}

// LobbiesSettingsMultiError is an error wrapping multiple validation errors
// returned by LobbiesSettings.ValidateAll() if the designated constraints
// aren't met.
type LobbiesSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LobbiesSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LobbiesSettingsMultiError) AllErrors() []error { return m }

// LobbiesSettingsValidationError is the validation error returned by
// LobbiesSettings.Validate if the designated constraints aren't met.
type LobbiesSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LobbiesSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LobbiesSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LobbiesSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LobbiesSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LobbiesSettingsValidationError) ErrorName() string { return "LobbiesSettingsValidationError" }

// Error satisfies the builtin error interface
func (e LobbiesSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLobbiesSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LobbiesSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LobbiesSettingsValidationError{}

// Validate checks the field values on GetSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSettingsResponseMultiError, or nil if none found.
func (m *GetSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLobbiesSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSettingsResponseValidationError{
					field:  "LobbiesSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSettingsResponseValidationError{
					field:  "LobbiesSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLobbiesSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSettingsResponseValidationError{
				field:  "LobbiesSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSettingsResponseMultiError(errors)
	}

	return nil
}

// GetSettingsResponseMultiError is an error wrapping multiple validation
// errors returned by GetSettingsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSettingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSettingsResponseMultiError) AllErrors() []error { return m }

// GetSettingsResponseValidationError is the validation error returned by
// GetSettingsResponse.Validate if the designated constraints aren't met.
type GetSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSettingsResponseValidationError) ErrorName() string {
	return "GetSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSettingsResponseValidationError{}

// Validate checks the field values on UpdateSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSettingsRequestMultiError, or nil if none found.
func (m *UpdateSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLobbiesSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSettingsRequestValidationError{
					field:  "LobbiesSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSettingsRequestValidationError{
					field:  "LobbiesSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLobbiesSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSettingsRequestValidationError{
				field:  "LobbiesSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateSettingsRequestMultiError(errors)
	}

	return nil
}

// UpdateSettingsRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateSettingsRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSettingsRequestMultiError) AllErrors() []error { return m }

// UpdateSettingsRequestValidationError is the validation error returned by
// UpdateSettingsRequest.Validate if the designated constraints aren't met.
type UpdateSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSettingsRequestValidationError) ErrorName() string {
	return "UpdateSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSettingsRequestValidationError{}

// Validate checks the field values on UpdateSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSettingsResponseMultiError, or nil if none found.
func (m *UpdateSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetLobbiesSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSettingsResponseValidationError{
					field:  "LobbiesSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSettingsResponseValidationError{
					field:  "LobbiesSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLobbiesSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSettingsResponseValidationError{
				field:  "LobbiesSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateSettingsResponseMultiError(errors)
	}

	return nil
}

// UpdateSettingsResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateSettingsResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSettingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSettingsResponseMultiError) AllErrors() []error { return m }

// UpdateSettingsResponseValidationError is the validation error returned by
// UpdateSettingsResponse.Validate if the designated constraints aren't met.
type UpdateSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSettingsResponseValidationError) ErrorName() string {
	return "UpdateSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSettingsResponseValidationError{}

// Validate checks the field values on ToggleEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ToggleEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ToggleEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ToggleEventRequestMultiError, or nil if none found.
func (m *ToggleEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ToggleEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventType

	if len(errors) > 0 {
		return ToggleEventRequestMultiError(errors)
	}

	return nil
}

// ToggleEventRequestMultiError is an error wrapping multiple validation errors
// returned by ToggleEventRequest.ValidateAll() if the designated constraints
// aren't met.
type ToggleEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ToggleEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ToggleEventRequestMultiError) AllErrors() []error { return m }

// ToggleEventRequestValidationError is the validation error returned by
// ToggleEventRequest.Validate if the designated constraints aren't met.
type ToggleEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ToggleEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ToggleEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ToggleEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ToggleEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ToggleEventRequestValidationError) ErrorName() string {
	return "ToggleEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ToggleEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sToggleEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ToggleEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ToggleEventRequestValidationError{}

// Validate checks the field values on GetEventsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetEventsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEventsResponseMultiError, or nil if none found.
func (m *GetEventsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEventsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetEventsResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetEventsResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEventsResponseValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetEventsResponseMultiError(errors)
	}

	return nil
}

// GetEventsResponseMultiError is an error wrapping multiple validation errors
// returned by GetEventsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetEventsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEventsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEventsResponseMultiError) AllErrors() []error { return m }

// GetEventsResponseValidationError is the validation error returned by
// GetEventsResponse.Validate if the designated constraints aren't met.
type GetEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventsResponseValidationError) ErrorName() string {
	return "GetEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventsResponseValidationError{}

// Validate checks the field values on EventInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EventInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EventInfoMultiError, or nil
// if none found.
func (m *EventInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *EventInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventType

	// no validation rules for Enabled

	// no validation rules for EventName

	// no validation rules for Description

	if len(errors) > 0 {
		return EventInfoMultiError(errors)
	}

	return nil
}

// EventInfoMultiError is an error wrapping multiple validation errors returned
// by EventInfo.ValidateAll() if the designated constraints aren't met.
type EventInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventInfoMultiError) AllErrors() []error { return m }

// EventInfoValidationError is the validation error returned by
// EventInfo.Validate if the designated constraints aren't met.
type EventInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventInfoValidationError) ErrorName() string { return "EventInfoValidationError" }

// Error satisfies the builtin error interface
func (e EventInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventInfoValidationError{}

// Validate checks the field values on SettingsData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SettingsData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SettingsData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SettingsDataMultiError, or
// nil if none found.
func (m *SettingsData) ValidateAll() error {
	return m.validate(true)
}

func (m *SettingsData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLobbiesSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SettingsDataValidationError{
					field:  "LobbiesSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SettingsDataValidationError{
					field:  "LobbiesSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLobbiesSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SettingsDataValidationError{
				field:  "LobbiesSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EventsSettings

	if len(errors) > 0 {
		return SettingsDataMultiError(errors)
	}

	return nil
}

// SettingsDataMultiError is an error wrapping multiple validation errors
// returned by SettingsData.ValidateAll() if the designated constraints aren't met.
type SettingsDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SettingsDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SettingsDataMultiError) AllErrors() []error { return m }

// SettingsDataValidationError is the validation error returned by
// SettingsData.Validate if the designated constraints aren't met.
type SettingsDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingsDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingsDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingsDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettingsDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingsDataValidationError) ErrorName() string { return "SettingsDataValidationError" }

// Error satisfies the builtin error interface
func (e SettingsDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettingsData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingsDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettingsDataValidationError{}

// Validate checks the field values on SettingsImportExportData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SettingsImportExportData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SettingsImportExportData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SettingsImportExportDataMultiError, or nil if none found.
func (m *SettingsImportExportData) ValidateAll() error {
	return m.validate(true)
}

func (m *SettingsImportExportData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SettingsImportExportDataValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SettingsImportExportDataValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SettingsImportExportDataValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ExportedAt

	if len(errors) > 0 {
		return SettingsImportExportDataMultiError(errors)
	}

	return nil
}

// SettingsImportExportDataMultiError is an error wrapping multiple validation
// errors returned by SettingsImportExportData.ValidateAll() if the designated
// constraints aren't met.
type SettingsImportExportDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SettingsImportExportDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SettingsImportExportDataMultiError) AllErrors() []error { return m }

// SettingsImportExportDataValidationError is the validation error returned by
// SettingsImportExportData.Validate if the designated constraints aren't met.
type SettingsImportExportDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingsImportExportDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingsImportExportDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingsImportExportDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettingsImportExportDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingsImportExportDataValidationError) ErrorName() string {
	return "SettingsImportExportDataValidationError"
}

// Error satisfies the builtin error interface
func (e SettingsImportExportDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettingsImportExportData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingsImportExportDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettingsImportExportDataValidationError{}

// Validate checks the field values on GetUserDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserDataRequestMultiError, or nil if none found.
func (m *GetUserDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 50 {
		err := GetUserDataRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetUserDataRequest_UserId_Pattern.MatchString(m.GetUserId()) {
		err := GetUserDataRequestValidationError{
			field:  "UserId",
			reason: "value does not match regex pattern \"(?i)^[a-z0-9-_]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserDataRequestMultiError(errors)
	}

	return nil
}

// GetUserDataRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserDataRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserDataRequestMultiError) AllErrors() []error { return m }

// GetUserDataRequestValidationError is the validation error returned by
// GetUserDataRequest.Validate if the designated constraints aren't met.
type GetUserDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserDataRequestValidationError) ErrorName() string {
	return "GetUserDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserDataRequestValidationError{}

var _GetUserDataRequest_UserId_Pattern = regexp.MustCompile("(?i)^[a-z0-9-_]*$")

// Validate checks the field values on GetUserDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserDataResponseMultiError, or nil if none found.
func (m *GetUserDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUserLobbies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserDataResponseValidationError{
						field:  fmt.Sprintf("UserLobbies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserDataResponseValidationError{
						field:  fmt.Sprintf("UserLobbies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserDataResponseValidationError{
					field:  fmt.Sprintf("UserLobbies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserDataResponseMultiError(errors)
	}

	return nil
}

// GetUserDataResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserDataResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserDataResponseMultiError) AllErrors() []error { return m }

// GetUserDataResponseValidationError is the validation error returned by
// GetUserDataResponse.Validate if the designated constraints aren't met.
type GetUserDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserDataResponseValidationError) ErrorName() string {
	return "GetUserDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserDataResponseValidationError{}

// Validate checks the field values on DeleteUserDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserDataRequestMultiError, or nil if none found.
func (m *DeleteUserDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 50 {
		err := DeleteUserDataRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DeleteUserDataRequest_UserId_Pattern.MatchString(m.GetUserId()) {
		err := DeleteUserDataRequestValidationError{
			field:  "UserId",
			reason: "value does not match regex pattern \"(?i)^[a-z0-9-_]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteUserDataRequestMultiError(errors)
	}

	return nil
}

// DeleteUserDataRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteUserDataRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserDataRequestMultiError) AllErrors() []error { return m }

// DeleteUserDataRequestValidationError is the validation error returned by
// DeleteUserDataRequest.Validate if the designated constraints aren't met.
type DeleteUserDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserDataRequestValidationError) ErrorName() string {
	return "DeleteUserDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserDataRequestValidationError{}

var _DeleteUserDataRequest_UserId_Pattern = regexp.MustCompile("(?i)^[a-z0-9-_]*$")
