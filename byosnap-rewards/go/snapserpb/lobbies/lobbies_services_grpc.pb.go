// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: lobbies_services.proto

package proto

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LobbiesService_CreateLobby_FullMethodName                = "/lobbies.LobbiesService/CreateLobby"
	LobbiesService_GetLobby_FullMethodName                   = "/lobbies.LobbiesService/GetLobby"
	LobbiesService_DeleteLobby_FullMethodName                = "/lobbies.LobbiesService/DeleteLobby"
	LobbiesService_ModifyLobby_FullMethodName                = "/lobbies.LobbiesService/ModifyLobby"
	LobbiesService_ListLobbies_FullMethodName                = "/lobbies.LobbiesService/ListLobbies"
	LobbiesService_ListLobbiesForMember_FullMethodName       = "/lobbies.LobbiesService/ListLobbiesForMember"
	LobbiesService_JoinLobby_FullMethodName                  = "/lobbies.LobbiesService/JoinLobby"
	LobbiesService_LeaveLobby_FullMethodName                 = "/lobbies.LobbiesService/LeaveLobby"
	LobbiesService_AddLobbyMember_FullMethodName             = "/lobbies.LobbiesService/AddLobbyMember"
	LobbiesService_RemoveLobbyMember_FullMethodName          = "/lobbies.LobbiesService/RemoveLobbyMember"
	LobbiesService_UpdateLobbyMemberMetadata_FullMethodName  = "/lobbies.LobbiesService/UpdateLobbyMemberMetadata"
	LobbiesService_UpdateLobbyMemberPlacement_FullMethodName = "/lobbies.LobbiesService/UpdateLobbyMemberPlacement"
	LobbiesService_ReadyMember_FullMethodName                = "/lobbies.LobbiesService/ReadyMember"
	LobbiesService_InviteLobbyMember_FullMethodName          = "/lobbies.LobbiesService/InviteLobbyMember"
	LobbiesService_AcceptLobbyInvite_FullMethodName          = "/lobbies.LobbiesService/AcceptLobbyInvite"
	LobbiesService_ListLobbyInvites_FullMethodName           = "/lobbies.LobbiesService/ListLobbyInvites"
	LobbiesService_ListLobbyMemberInvites_FullMethodName     = "/lobbies.LobbiesService/ListLobbyMemberInvites"
	LobbiesService_TransferOwnership_FullMethodName          = "/lobbies.LobbiesService/TransferOwnership"
	LobbiesService_StartMatch_FullMethodName                 = "/lobbies.LobbiesService/StartMatch"
	LobbiesService_GetSettings_FullMethodName                = "/lobbies.LobbiesService/GetSettings"
	LobbiesService_UpdateSettings_FullMethodName             = "/lobbies.LobbiesService/UpdateSettings"
	LobbiesService_GetEvents_FullMethodName                  = "/lobbies.LobbiesService/GetEvents"
	LobbiesService_EnableEvent_FullMethodName                = "/lobbies.LobbiesService/EnableEvent"
	LobbiesService_DisableEvent_FullMethodName               = "/lobbies.LobbiesService/DisableEvent"
	LobbiesService_ExportSettings_FullMethodName             = "/lobbies.LobbiesService/ExportSettings"
	LobbiesService_ImportSettings_FullMethodName             = "/lobbies.LobbiesService/ImportSettings"
	LobbiesService_ValidateImportSettings_FullMethodName     = "/lobbies.LobbiesService/ValidateImportSettings"
	LobbiesService_GetUserData_FullMethodName                = "/lobbies.LobbiesService/GetUserData"
	LobbiesService_DeleteUserData_FullMethodName             = "/lobbies.LobbiesService/DeleteUserData"
	LobbiesService_GetOpenApiSpec_FullMethodName             = "/lobbies.LobbiesService/GetOpenApiSpec"
)

// LobbiesServiceClient is the client API for LobbiesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LobbiesServiceClient interface {
	// Create Lobby
	//
	// Creates a lobby
	CreateLobby(ctx context.Context, in *CreateLobbyRequest, opts ...grpc.CallOption) (*CreateLobbyResponse, error)
	// Get Lobby
	//
	// Returns a lobby
	GetLobby(ctx context.Context, in *GetLobbyRequest, opts ...grpc.CallOption) (*GetLobbyResponse, error)
	// Delete Lobby
	//
	// Deletes a lobby
	DeleteLobby(ctx context.Context, in *DeleteLobbyRequest, opts ...grpc.CallOption) (*DeleteLobbyResponse, error)
	// Modify Lobby
	//
	// Modifies a lobby
	ModifyLobby(ctx context.Context, in *ModifyLobbyRequest, opts ...grpc.CallOption) (*ModifyLobbyResponse, error)
	// List Lobbies
	//
	// Returns a list of lobbies
	ListLobbies(ctx context.Context, in *ListLobbiesRequest, opts ...grpc.CallOption) (*ListLobbiesResponse, error)
	// List Lobbies for User
	//
	// Gets all Lobbies associated with a user
	ListLobbiesForMember(ctx context.Context, in *ListLobbiesForMemberRequest, opts ...grpc.CallOption) (*ListLobbiesForMemberResponse, error)
	// JoinLobby
	//
	// Joins a lobby
	JoinLobby(ctx context.Context, in *JoinLobbyRequest, opts ...grpc.CallOption) (*JoinLobbyResponse, error)
	// LeaveLobby
	//
	// Leaves a lobby
	LeaveLobby(ctx context.Context, in *LeaveLobbyRequest, opts ...grpc.CallOption) (*LeaveLobbyResponse, error)
	// AddLobbyMember
	//
	// Adds a member to a lobby
	AddLobbyMember(ctx context.Context, in *AddLobbyMemberRequest, opts ...grpc.CallOption) (*AddLobbyMemberResponse, error)
	// RemoveLobbyMember
	//
	// Removes a member from a lobby
	RemoveLobbyMember(ctx context.Context, in *RemoveLobbyMemberRequest, opts ...grpc.CallOption) (*RemoveLobbyMemberResponse, error)
	// UpdateLobbyMemberMetadata
	//
	// Updates the member metadata blob
	UpdateLobbyMemberMetadata(ctx context.Context, in *UpdateLobbyMemberMetadataRequest, opts ...grpc.CallOption) (*UpdateLobbyMemberMetadataResponse, error)
	// UpdateLobbyMember
	//
	// Updates the member
	UpdateLobbyMemberPlacement(ctx context.Context, in *UpdateLobbyMemberPlacementRequest, opts ...grpc.CallOption) (*UpdateLobbyMemberPlacementResponse, error)
	// ReadyMember
	//
	// Sets a member as ready
	ReadyMember(ctx context.Context, in *ReadyMemberRequest, opts ...grpc.CallOption) (*ReadyMemberResponse, error)
	// InviteLobbyMember
	//
	// Invites a member to a lobby
	InviteLobbyMember(ctx context.Context, in *InviteLobbyMemberRequest, opts ...grpc.CallOption) (*InviteLobbyMemberResponse, error)
	// AcceptLobbyInvite
	//
	// Accepts a lobby invite
	AcceptLobbyInvite(ctx context.Context, in *AcceptLobbyInviteRequest, opts ...grpc.CallOption) (*AcceptLobbyInviteResponse, error)
	// List Lobby Invites
	//
	// Lists lobby invites
	ListLobbyInvites(ctx context.Context, in *ListLobbyInvitesRequest, opts ...grpc.CallOption) (*ListLobbyInvitesResponse, error)
	// Get Invites for a User
	//
	// Lists lobby invites for a user
	ListLobbyMemberInvites(ctx context.Context, in *ListLobbyMemberInvitesRequest, opts ...grpc.CallOption) (*ListLobbyMemberInvitesResponse, error)
	// TransferOwnership
	//
	// Transfers ownership of a lobby
	TransferOwnership(ctx context.Context, in *TransferOwnershipRequest, opts ...grpc.CallOption) (*TransferOwnershipResponse, error)
	// StartMatch
	//
	// Starts a match in a lobby
	StartMatch(ctx context.Context, in *StartMatchRequest, opts ...grpc.CallOption) (*StartMatchResponse, error)
	// GetSettings
	//
	// Shows the user settings for admin tools
	GetSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSettingsResponse, error)
	// Update Settings
	//
	// Shows the user settings for admin tools
	UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*UpdateSettingsResponse, error)
	// GetEvents
	//
	// Returns a list of events that lobbies service has emitted
	GetEvents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetEventsResponse, error)
	// EnableEvent
	//
	// Enables an event
	EnableEvent(ctx context.Context, in *ToggleEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DisableEvent
	//
	// Disables an event
	DisableEvent(ctx context.Context, in *ToggleEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ExportSettings
	//
	// Exports the current settings of the lobbies service
	ExportSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SettingsImportExportData, error)
	ImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ValidateImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*SettingsImportExportData, error)
	// GetUserData
	//
	// Gets all data associated with a user
	GetUserData(ctx context.Context, in *GetUserDataRequest, opts ...grpc.CallOption) (*GetUserDataResponse, error)
	// DeleteUserData
	//
	// Deletes all data associated with a user
	DeleteUserData(ctx context.Context, in *DeleteUserDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetOpenApiSpec
	//
	// Returns the generated openapi swagger document
	GetOpenApiSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
}

type lobbiesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLobbiesServiceClient(cc grpc.ClientConnInterface) LobbiesServiceClient {
	return &lobbiesServiceClient{cc}
}

func (c *lobbiesServiceClient) CreateLobby(ctx context.Context, in *CreateLobbyRequest, opts ...grpc.CallOption) (*CreateLobbyResponse, error) {
	out := new(CreateLobbyResponse)
	err := c.cc.Invoke(ctx, LobbiesService_CreateLobby_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbiesServiceClient) GetLobby(ctx context.Context, in *GetLobbyRequest, opts ...grpc.CallOption) (*GetLobbyResponse, error) {
	out := new(GetLobbyResponse)
	err := c.cc.Invoke(ctx, LobbiesService_GetLobby_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbiesServiceClient) DeleteLobby(ctx context.Context, in *DeleteLobbyRequest, opts ...grpc.CallOption) (*DeleteLobbyResponse, error) {
	out := new(DeleteLobbyResponse)
	err := c.cc.Invoke(ctx, LobbiesService_DeleteLobby_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbiesServiceClient) ModifyLobby(ctx context.Context, in *ModifyLobbyRequest, opts ...grpc.CallOption) (*ModifyLobbyResponse, error) {
	out := new(ModifyLobbyResponse)
	err := c.cc.Invoke(ctx, LobbiesService_ModifyLobby_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbiesServiceClient) ListLobbies(ctx context.Context, in *ListLobbiesRequest, opts ...grpc.CallOption) (*ListLobbiesResponse, error) {
	out := new(ListLobbiesResponse)
	err := c.cc.Invoke(ctx, LobbiesService_ListLobbies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbiesServiceClient) ListLobbiesForMember(ctx context.Context, in *ListLobbiesForMemberRequest, opts ...grpc.CallOption) (*ListLobbiesForMemberResponse, error) {
	out := new(ListLobbiesForMemberResponse)
	err := c.cc.Invoke(ctx, LobbiesService_ListLobbiesForMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbiesServiceClient) JoinLobby(ctx context.Context, in *JoinLobbyRequest, opts ...grpc.CallOption) (*JoinLobbyResponse, error) {
	out := new(JoinLobbyResponse)
	err := c.cc.Invoke(ctx, LobbiesService_JoinLobby_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbiesServiceClient) LeaveLobby(ctx context.Context, in *LeaveLobbyRequest, opts ...grpc.CallOption) (*LeaveLobbyResponse, error) {
	out := new(LeaveLobbyResponse)
	err := c.cc.Invoke(ctx, LobbiesService_LeaveLobby_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbiesServiceClient) AddLobbyMember(ctx context.Context, in *AddLobbyMemberRequest, opts ...grpc.CallOption) (*AddLobbyMemberResponse, error) {
	out := new(AddLobbyMemberResponse)
	err := c.cc.Invoke(ctx, LobbiesService_AddLobbyMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbiesServiceClient) RemoveLobbyMember(ctx context.Context, in *RemoveLobbyMemberRequest, opts ...grpc.CallOption) (*RemoveLobbyMemberResponse, error) {
	out := new(RemoveLobbyMemberResponse)
	err := c.cc.Invoke(ctx, LobbiesService_RemoveLobbyMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbiesServiceClient) UpdateLobbyMemberMetadata(ctx context.Context, in *UpdateLobbyMemberMetadataRequest, opts ...grpc.CallOption) (*UpdateLobbyMemberMetadataResponse, error) {
	out := new(UpdateLobbyMemberMetadataResponse)
	err := c.cc.Invoke(ctx, LobbiesService_UpdateLobbyMemberMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbiesServiceClient) UpdateLobbyMemberPlacement(ctx context.Context, in *UpdateLobbyMemberPlacementRequest, opts ...grpc.CallOption) (*UpdateLobbyMemberPlacementResponse, error) {
	out := new(UpdateLobbyMemberPlacementResponse)
	err := c.cc.Invoke(ctx, LobbiesService_UpdateLobbyMemberPlacement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbiesServiceClient) ReadyMember(ctx context.Context, in *ReadyMemberRequest, opts ...grpc.CallOption) (*ReadyMemberResponse, error) {
	out := new(ReadyMemberResponse)
	err := c.cc.Invoke(ctx, LobbiesService_ReadyMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbiesServiceClient) InviteLobbyMember(ctx context.Context, in *InviteLobbyMemberRequest, opts ...grpc.CallOption) (*InviteLobbyMemberResponse, error) {
	out := new(InviteLobbyMemberResponse)
	err := c.cc.Invoke(ctx, LobbiesService_InviteLobbyMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbiesServiceClient) AcceptLobbyInvite(ctx context.Context, in *AcceptLobbyInviteRequest, opts ...grpc.CallOption) (*AcceptLobbyInviteResponse, error) {
	out := new(AcceptLobbyInviteResponse)
	err := c.cc.Invoke(ctx, LobbiesService_AcceptLobbyInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbiesServiceClient) ListLobbyInvites(ctx context.Context, in *ListLobbyInvitesRequest, opts ...grpc.CallOption) (*ListLobbyInvitesResponse, error) {
	out := new(ListLobbyInvitesResponse)
	err := c.cc.Invoke(ctx, LobbiesService_ListLobbyInvites_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbiesServiceClient) ListLobbyMemberInvites(ctx context.Context, in *ListLobbyMemberInvitesRequest, opts ...grpc.CallOption) (*ListLobbyMemberInvitesResponse, error) {
	out := new(ListLobbyMemberInvitesResponse)
	err := c.cc.Invoke(ctx, LobbiesService_ListLobbyMemberInvites_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbiesServiceClient) TransferOwnership(ctx context.Context, in *TransferOwnershipRequest, opts ...grpc.CallOption) (*TransferOwnershipResponse, error) {
	out := new(TransferOwnershipResponse)
	err := c.cc.Invoke(ctx, LobbiesService_TransferOwnership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbiesServiceClient) StartMatch(ctx context.Context, in *StartMatchRequest, opts ...grpc.CallOption) (*StartMatchResponse, error) {
	out := new(StartMatchResponse)
	err := c.cc.Invoke(ctx, LobbiesService_StartMatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbiesServiceClient) GetSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSettingsResponse, error) {
	out := new(GetSettingsResponse)
	err := c.cc.Invoke(ctx, LobbiesService_GetSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbiesServiceClient) UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*UpdateSettingsResponse, error) {
	out := new(UpdateSettingsResponse)
	err := c.cc.Invoke(ctx, LobbiesService_UpdateSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbiesServiceClient) GetEvents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetEventsResponse, error) {
	out := new(GetEventsResponse)
	err := c.cc.Invoke(ctx, LobbiesService_GetEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbiesServiceClient) EnableEvent(ctx context.Context, in *ToggleEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LobbiesService_EnableEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbiesServiceClient) DisableEvent(ctx context.Context, in *ToggleEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LobbiesService_DisableEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbiesServiceClient) ExportSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SettingsImportExportData, error) {
	out := new(SettingsImportExportData)
	err := c.cc.Invoke(ctx, LobbiesService_ExportSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbiesServiceClient) ImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LobbiesService_ImportSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbiesServiceClient) ValidateImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*SettingsImportExportData, error) {
	out := new(SettingsImportExportData)
	err := c.cc.Invoke(ctx, LobbiesService_ValidateImportSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbiesServiceClient) GetUserData(ctx context.Context, in *GetUserDataRequest, opts ...grpc.CallOption) (*GetUserDataResponse, error) {
	out := new(GetUserDataResponse)
	err := c.cc.Invoke(ctx, LobbiesService_GetUserData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbiesServiceClient) DeleteUserData(ctx context.Context, in *DeleteUserDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LobbiesService_DeleteUserData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbiesServiceClient) GetOpenApiSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, LobbiesService_GetOpenApiSpec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LobbiesServiceServer is the server API for LobbiesService service.
// All implementations must embed UnimplementedLobbiesServiceServer
// for forward compatibility
type LobbiesServiceServer interface {
	// Create Lobby
	//
	// Creates a lobby
	CreateLobby(context.Context, *CreateLobbyRequest) (*CreateLobbyResponse, error)
	// Get Lobby
	//
	// Returns a lobby
	GetLobby(context.Context, *GetLobbyRequest) (*GetLobbyResponse, error)
	// Delete Lobby
	//
	// Deletes a lobby
	DeleteLobby(context.Context, *DeleteLobbyRequest) (*DeleteLobbyResponse, error)
	// Modify Lobby
	//
	// Modifies a lobby
	ModifyLobby(context.Context, *ModifyLobbyRequest) (*ModifyLobbyResponse, error)
	// List Lobbies
	//
	// Returns a list of lobbies
	ListLobbies(context.Context, *ListLobbiesRequest) (*ListLobbiesResponse, error)
	// List Lobbies for User
	//
	// Gets all Lobbies associated with a user
	ListLobbiesForMember(context.Context, *ListLobbiesForMemberRequest) (*ListLobbiesForMemberResponse, error)
	// JoinLobby
	//
	// Joins a lobby
	JoinLobby(context.Context, *JoinLobbyRequest) (*JoinLobbyResponse, error)
	// LeaveLobby
	//
	// Leaves a lobby
	LeaveLobby(context.Context, *LeaveLobbyRequest) (*LeaveLobbyResponse, error)
	// AddLobbyMember
	//
	// Adds a member to a lobby
	AddLobbyMember(context.Context, *AddLobbyMemberRequest) (*AddLobbyMemberResponse, error)
	// RemoveLobbyMember
	//
	// Removes a member from a lobby
	RemoveLobbyMember(context.Context, *RemoveLobbyMemberRequest) (*RemoveLobbyMemberResponse, error)
	// UpdateLobbyMemberMetadata
	//
	// Updates the member metadata blob
	UpdateLobbyMemberMetadata(context.Context, *UpdateLobbyMemberMetadataRequest) (*UpdateLobbyMemberMetadataResponse, error)
	// UpdateLobbyMember
	//
	// Updates the member
	UpdateLobbyMemberPlacement(context.Context, *UpdateLobbyMemberPlacementRequest) (*UpdateLobbyMemberPlacementResponse, error)
	// ReadyMember
	//
	// Sets a member as ready
	ReadyMember(context.Context, *ReadyMemberRequest) (*ReadyMemberResponse, error)
	// InviteLobbyMember
	//
	// Invites a member to a lobby
	InviteLobbyMember(context.Context, *InviteLobbyMemberRequest) (*InviteLobbyMemberResponse, error)
	// AcceptLobbyInvite
	//
	// Accepts a lobby invite
	AcceptLobbyInvite(context.Context, *AcceptLobbyInviteRequest) (*AcceptLobbyInviteResponse, error)
	// List Lobby Invites
	//
	// Lists lobby invites
	ListLobbyInvites(context.Context, *ListLobbyInvitesRequest) (*ListLobbyInvitesResponse, error)
	// Get Invites for a User
	//
	// Lists lobby invites for a user
	ListLobbyMemberInvites(context.Context, *ListLobbyMemberInvitesRequest) (*ListLobbyMemberInvitesResponse, error)
	// TransferOwnership
	//
	// Transfers ownership of a lobby
	TransferOwnership(context.Context, *TransferOwnershipRequest) (*TransferOwnershipResponse, error)
	// StartMatch
	//
	// Starts a match in a lobby
	StartMatch(context.Context, *StartMatchRequest) (*StartMatchResponse, error)
	// GetSettings
	//
	// Shows the user settings for admin tools
	GetSettings(context.Context, *emptypb.Empty) (*GetSettingsResponse, error)
	// Update Settings
	//
	// Shows the user settings for admin tools
	UpdateSettings(context.Context, *UpdateSettingsRequest) (*UpdateSettingsResponse, error)
	// GetEvents
	//
	// Returns a list of events that lobbies service has emitted
	GetEvents(context.Context, *emptypb.Empty) (*GetEventsResponse, error)
	// EnableEvent
	//
	// Enables an event
	EnableEvent(context.Context, *ToggleEventRequest) (*emptypb.Empty, error)
	// DisableEvent
	//
	// Disables an event
	DisableEvent(context.Context, *ToggleEventRequest) (*emptypb.Empty, error)
	// ExportSettings
	//
	// Exports the current settings of the lobbies service
	ExportSettings(context.Context, *emptypb.Empty) (*SettingsImportExportData, error)
	ImportSettings(context.Context, *SettingsImportExportData) (*emptypb.Empty, error)
	ValidateImportSettings(context.Context, *SettingsImportExportData) (*SettingsImportExportData, error)
	// GetUserData
	//
	// Gets all data associated with a user
	GetUserData(context.Context, *GetUserDataRequest) (*GetUserDataResponse, error)
	// DeleteUserData
	//
	// Deletes all data associated with a user
	DeleteUserData(context.Context, *DeleteUserDataRequest) (*emptypb.Empty, error)
	// GetOpenApiSpec
	//
	// Returns the generated openapi swagger document
	GetOpenApiSpec(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error)
	mustEmbedUnimplementedLobbiesServiceServer()
}

// UnimplementedLobbiesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLobbiesServiceServer struct {
}

func (UnimplementedLobbiesServiceServer) CreateLobby(context.Context, *CreateLobbyRequest) (*CreateLobbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLobby not implemented")
}
func (UnimplementedLobbiesServiceServer) GetLobby(context.Context, *GetLobbyRequest) (*GetLobbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLobby not implemented")
}
func (UnimplementedLobbiesServiceServer) DeleteLobby(context.Context, *DeleteLobbyRequest) (*DeleteLobbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLobby not implemented")
}
func (UnimplementedLobbiesServiceServer) ModifyLobby(context.Context, *ModifyLobbyRequest) (*ModifyLobbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyLobby not implemented")
}
func (UnimplementedLobbiesServiceServer) ListLobbies(context.Context, *ListLobbiesRequest) (*ListLobbiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLobbies not implemented")
}
func (UnimplementedLobbiesServiceServer) ListLobbiesForMember(context.Context, *ListLobbiesForMemberRequest) (*ListLobbiesForMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLobbiesForMember not implemented")
}
func (UnimplementedLobbiesServiceServer) JoinLobby(context.Context, *JoinLobbyRequest) (*JoinLobbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinLobby not implemented")
}
func (UnimplementedLobbiesServiceServer) LeaveLobby(context.Context, *LeaveLobbyRequest) (*LeaveLobbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveLobby not implemented")
}
func (UnimplementedLobbiesServiceServer) AddLobbyMember(context.Context, *AddLobbyMemberRequest) (*AddLobbyMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLobbyMember not implemented")
}
func (UnimplementedLobbiesServiceServer) RemoveLobbyMember(context.Context, *RemoveLobbyMemberRequest) (*RemoveLobbyMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLobbyMember not implemented")
}
func (UnimplementedLobbiesServiceServer) UpdateLobbyMemberMetadata(context.Context, *UpdateLobbyMemberMetadataRequest) (*UpdateLobbyMemberMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLobbyMemberMetadata not implemented")
}
func (UnimplementedLobbiesServiceServer) UpdateLobbyMemberPlacement(context.Context, *UpdateLobbyMemberPlacementRequest) (*UpdateLobbyMemberPlacementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLobbyMemberPlacement not implemented")
}
func (UnimplementedLobbiesServiceServer) ReadyMember(context.Context, *ReadyMemberRequest) (*ReadyMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadyMember not implemented")
}
func (UnimplementedLobbiesServiceServer) InviteLobbyMember(context.Context, *InviteLobbyMemberRequest) (*InviteLobbyMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteLobbyMember not implemented")
}
func (UnimplementedLobbiesServiceServer) AcceptLobbyInvite(context.Context, *AcceptLobbyInviteRequest) (*AcceptLobbyInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptLobbyInvite not implemented")
}
func (UnimplementedLobbiesServiceServer) ListLobbyInvites(context.Context, *ListLobbyInvitesRequest) (*ListLobbyInvitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLobbyInvites not implemented")
}
func (UnimplementedLobbiesServiceServer) ListLobbyMemberInvites(context.Context, *ListLobbyMemberInvitesRequest) (*ListLobbyMemberInvitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLobbyMemberInvites not implemented")
}
func (UnimplementedLobbiesServiceServer) TransferOwnership(context.Context, *TransferOwnershipRequest) (*TransferOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferOwnership not implemented")
}
func (UnimplementedLobbiesServiceServer) StartMatch(context.Context, *StartMatchRequest) (*StartMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMatch not implemented")
}
func (UnimplementedLobbiesServiceServer) GetSettings(context.Context, *emptypb.Empty) (*GetSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettings not implemented")
}
func (UnimplementedLobbiesServiceServer) UpdateSettings(context.Context, *UpdateSettingsRequest) (*UpdateSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSettings not implemented")
}
func (UnimplementedLobbiesServiceServer) GetEvents(context.Context, *emptypb.Empty) (*GetEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}
func (UnimplementedLobbiesServiceServer) EnableEvent(context.Context, *ToggleEventRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableEvent not implemented")
}
func (UnimplementedLobbiesServiceServer) DisableEvent(context.Context, *ToggleEventRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableEvent not implemented")
}
func (UnimplementedLobbiesServiceServer) ExportSettings(context.Context, *emptypb.Empty) (*SettingsImportExportData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportSettings not implemented")
}
func (UnimplementedLobbiesServiceServer) ImportSettings(context.Context, *SettingsImportExportData) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportSettings not implemented")
}
func (UnimplementedLobbiesServiceServer) ValidateImportSettings(context.Context, *SettingsImportExportData) (*SettingsImportExportData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateImportSettings not implemented")
}
func (UnimplementedLobbiesServiceServer) GetUserData(context.Context, *GetUserDataRequest) (*GetUserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserData not implemented")
}
func (UnimplementedLobbiesServiceServer) DeleteUserData(context.Context, *DeleteUserDataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserData not implemented")
}
func (UnimplementedLobbiesServiceServer) GetOpenApiSpec(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenApiSpec not implemented")
}
func (UnimplementedLobbiesServiceServer) mustEmbedUnimplementedLobbiesServiceServer() {}

// UnsafeLobbiesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LobbiesServiceServer will
// result in compilation errors.
type UnsafeLobbiesServiceServer interface {
	mustEmbedUnimplementedLobbiesServiceServer()
}

func RegisterLobbiesServiceServer(s grpc.ServiceRegistrar, srv LobbiesServiceServer) {
	s.RegisterService(&LobbiesService_ServiceDesc, srv)
}

func _LobbiesService_CreateLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).CreateLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_CreateLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).CreateLobby(ctx, req.(*CreateLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbiesService_GetLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).GetLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_GetLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).GetLobby(ctx, req.(*GetLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbiesService_DeleteLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).DeleteLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_DeleteLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).DeleteLobby(ctx, req.(*DeleteLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbiesService_ModifyLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).ModifyLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_ModifyLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).ModifyLobby(ctx, req.(*ModifyLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbiesService_ListLobbies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLobbiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).ListLobbies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_ListLobbies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).ListLobbies(ctx, req.(*ListLobbiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbiesService_ListLobbiesForMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLobbiesForMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).ListLobbiesForMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_ListLobbiesForMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).ListLobbiesForMember(ctx, req.(*ListLobbiesForMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbiesService_JoinLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).JoinLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_JoinLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).JoinLobby(ctx, req.(*JoinLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbiesService_LeaveLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).LeaveLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_LeaveLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).LeaveLobby(ctx, req.(*LeaveLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbiesService_AddLobbyMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLobbyMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).AddLobbyMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_AddLobbyMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).AddLobbyMember(ctx, req.(*AddLobbyMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbiesService_RemoveLobbyMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLobbyMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).RemoveLobbyMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_RemoveLobbyMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).RemoveLobbyMember(ctx, req.(*RemoveLobbyMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbiesService_UpdateLobbyMemberMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLobbyMemberMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).UpdateLobbyMemberMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_UpdateLobbyMemberMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).UpdateLobbyMemberMetadata(ctx, req.(*UpdateLobbyMemberMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbiesService_UpdateLobbyMemberPlacement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLobbyMemberPlacementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).UpdateLobbyMemberPlacement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_UpdateLobbyMemberPlacement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).UpdateLobbyMemberPlacement(ctx, req.(*UpdateLobbyMemberPlacementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbiesService_ReadyMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadyMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).ReadyMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_ReadyMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).ReadyMember(ctx, req.(*ReadyMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbiesService_InviteLobbyMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteLobbyMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).InviteLobbyMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_InviteLobbyMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).InviteLobbyMember(ctx, req.(*InviteLobbyMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbiesService_AcceptLobbyInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptLobbyInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).AcceptLobbyInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_AcceptLobbyInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).AcceptLobbyInvite(ctx, req.(*AcceptLobbyInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbiesService_ListLobbyInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLobbyInvitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).ListLobbyInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_ListLobbyInvites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).ListLobbyInvites(ctx, req.(*ListLobbyInvitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbiesService_ListLobbyMemberInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLobbyMemberInvitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).ListLobbyMemberInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_ListLobbyMemberInvites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).ListLobbyMemberInvites(ctx, req.(*ListLobbyMemberInvitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbiesService_TransferOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).TransferOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_TransferOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).TransferOwnership(ctx, req.(*TransferOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbiesService_StartMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).StartMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_StartMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).StartMatch(ctx, req.(*StartMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbiesService_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_GetSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).GetSettings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbiesService_UpdateSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).UpdateSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_UpdateSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).UpdateSettings(ctx, req.(*UpdateSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbiesService_GetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).GetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_GetEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).GetEvents(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbiesService_EnableEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).EnableEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_EnableEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).EnableEvent(ctx, req.(*ToggleEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbiesService_DisableEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).DisableEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_DisableEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).DisableEvent(ctx, req.(*ToggleEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbiesService_ExportSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).ExportSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_ExportSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).ExportSettings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbiesService_ImportSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsImportExportData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).ImportSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_ImportSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).ImportSettings(ctx, req.(*SettingsImportExportData))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbiesService_ValidateImportSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsImportExportData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).ValidateImportSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_ValidateImportSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).ValidateImportSettings(ctx, req.(*SettingsImportExportData))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbiesService_GetUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).GetUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_GetUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).GetUserData(ctx, req.(*GetUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbiesService_DeleteUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).DeleteUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_DeleteUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).DeleteUserData(ctx, req.(*DeleteUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LobbiesService_GetOpenApiSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbiesServiceServer).GetOpenApiSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LobbiesService_GetOpenApiSpec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbiesServiceServer).GetOpenApiSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// LobbiesService_ServiceDesc is the grpc.ServiceDesc for LobbiesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LobbiesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lobbies.LobbiesService",
	HandlerType: (*LobbiesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLobby",
			Handler:    _LobbiesService_CreateLobby_Handler,
		},
		{
			MethodName: "GetLobby",
			Handler:    _LobbiesService_GetLobby_Handler,
		},
		{
			MethodName: "DeleteLobby",
			Handler:    _LobbiesService_DeleteLobby_Handler,
		},
		{
			MethodName: "ModifyLobby",
			Handler:    _LobbiesService_ModifyLobby_Handler,
		},
		{
			MethodName: "ListLobbies",
			Handler:    _LobbiesService_ListLobbies_Handler,
		},
		{
			MethodName: "ListLobbiesForMember",
			Handler:    _LobbiesService_ListLobbiesForMember_Handler,
		},
		{
			MethodName: "JoinLobby",
			Handler:    _LobbiesService_JoinLobby_Handler,
		},
		{
			MethodName: "LeaveLobby",
			Handler:    _LobbiesService_LeaveLobby_Handler,
		},
		{
			MethodName: "AddLobbyMember",
			Handler:    _LobbiesService_AddLobbyMember_Handler,
		},
		{
			MethodName: "RemoveLobbyMember",
			Handler:    _LobbiesService_RemoveLobbyMember_Handler,
		},
		{
			MethodName: "UpdateLobbyMemberMetadata",
			Handler:    _LobbiesService_UpdateLobbyMemberMetadata_Handler,
		},
		{
			MethodName: "UpdateLobbyMemberPlacement",
			Handler:    _LobbiesService_UpdateLobbyMemberPlacement_Handler,
		},
		{
			MethodName: "ReadyMember",
			Handler:    _LobbiesService_ReadyMember_Handler,
		},
		{
			MethodName: "InviteLobbyMember",
			Handler:    _LobbiesService_InviteLobbyMember_Handler,
		},
		{
			MethodName: "AcceptLobbyInvite",
			Handler:    _LobbiesService_AcceptLobbyInvite_Handler,
		},
		{
			MethodName: "ListLobbyInvites",
			Handler:    _LobbiesService_ListLobbyInvites_Handler,
		},
		{
			MethodName: "ListLobbyMemberInvites",
			Handler:    _LobbiesService_ListLobbyMemberInvites_Handler,
		},
		{
			MethodName: "TransferOwnership",
			Handler:    _LobbiesService_TransferOwnership_Handler,
		},
		{
			MethodName: "StartMatch",
			Handler:    _LobbiesService_StartMatch_Handler,
		},
		{
			MethodName: "GetSettings",
			Handler:    _LobbiesService_GetSettings_Handler,
		},
		{
			MethodName: "UpdateSettings",
			Handler:    _LobbiesService_UpdateSettings_Handler,
		},
		{
			MethodName: "GetEvents",
			Handler:    _LobbiesService_GetEvents_Handler,
		},
		{
			MethodName: "EnableEvent",
			Handler:    _LobbiesService_EnableEvent_Handler,
		},
		{
			MethodName: "DisableEvent",
			Handler:    _LobbiesService_DisableEvent_Handler,
		},
		{
			MethodName: "ExportSettings",
			Handler:    _LobbiesService_ExportSettings_Handler,
		},
		{
			MethodName: "ImportSettings",
			Handler:    _LobbiesService_ImportSettings_Handler,
		},
		{
			MethodName: "ValidateImportSettings",
			Handler:    _LobbiesService_ValidateImportSettings_Handler,
		},
		{
			MethodName: "GetUserData",
			Handler:    _LobbiesService_GetUserData_Handler,
		},
		{
			MethodName: "DeleteUserData",
			Handler:    _LobbiesService_DeleteUserData_Handler,
		},
		{
			MethodName: "GetOpenApiSpec",
			Handler:    _LobbiesService_GetOpenApiSpec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lobbies_services.proto",
}
