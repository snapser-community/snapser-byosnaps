// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lobbies_types.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Lobby with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Lobby) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Lobby with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LobbyMultiError, or nil if none found.
func (m *Lobby) ValidateAll() error {
	return m.validate(true)
}

func (m *Lobby) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Owner

	if all {
		switch v := interface{}(m.GetPrivate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LobbyValidationError{
					field:  "Private",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LobbyValidationError{
					field:  "Private",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrivate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LobbyValidationError{
				field:  "Private",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAllowPartyJoin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LobbyValidationError{
					field:  "AllowPartyJoin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LobbyValidationError{
					field:  "AllowPartyJoin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAllowPartyJoin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LobbyValidationError{
				field:  "AllowPartyJoin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MaxMembers

	// no validation rules for MemberCount

	// no validation rules for Password

	// no validation rules for InviteUrl

	{
		sorted_keys := make([]string, len(m.GetMembers()))
		i := 0
		for key := range m.GetMembers() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMembers()[key]
			_ = val

			// no validation rules for Members[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, LobbyValidationError{
							field:  fmt.Sprintf("Members[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, LobbyValidationError{
							field:  fmt.Sprintf("Members[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return LobbyValidationError{
						field:  fmt.Sprintf("Members[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if all {
		switch v := interface{}(m.GetSearchMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LobbyValidationError{
					field:  "SearchMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LobbyValidationError{
					field:  "SearchMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSearchMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LobbyValidationError{
				field:  "SearchMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AllocationMetadata

	if all {
		switch v := interface{}(m.GetAllocated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LobbyValidationError{
					field:  "Allocated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LobbyValidationError{
					field:  "Allocated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAllocated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LobbyValidationError{
				field:  "Allocated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPlacementSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LobbyValidationError{
					field:  "PlacementSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LobbyValidationError{
					field:  "PlacementSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlacementSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LobbyValidationError{
				field:  "PlacementSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LobbyMultiError(errors)
	}

	return nil
}

// LobbyMultiError is an error wrapping multiple validation errors returned by
// Lobby.ValidateAll() if the designated constraints aren't met.
type LobbyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LobbyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LobbyMultiError) AllErrors() []error { return m }

// LobbyValidationError is the validation error returned by Lobby.Validate if
// the designated constraints aren't met.
type LobbyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LobbyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LobbyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LobbyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LobbyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LobbyValidationError) ErrorName() string { return "LobbyValidationError" }

// Error satisfies the builtin error interface
func (e LobbyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLobby.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LobbyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LobbyValidationError{}

// Validate checks the field values on PlacementSettings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PlacementSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlacementSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlacementSettingsMultiError, or nil if none found.
func (m *PlacementSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *PlacementSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNumPlacements()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlacementSettingsValidationError{
					field:  "NumPlacements",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlacementSettingsValidationError{
					field:  "NumPlacements",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNumPlacements()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlacementSettingsValidationError{
				field:  "NumPlacements",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAllowMemberPlacementUpdates()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlacementSettingsValidationError{
					field:  "AllowMemberPlacementUpdates",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlacementSettingsValidationError{
					field:  "AllowMemberPlacementUpdates",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAllowMemberPlacementUpdates()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlacementSettingsValidationError{
				field:  "AllowMemberPlacementUpdates",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PlacementStrategy

	if all {
		switch v := interface{}(m.GetAllowPlacementUpdatesOutsideRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlacementSettingsValidationError{
					field:  "AllowPlacementUpdatesOutsideRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlacementSettingsValidationError{
					field:  "AllowPlacementUpdatesOutsideRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAllowPlacementUpdatesOutsideRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlacementSettingsValidationError{
				field:  "AllowPlacementUpdatesOutsideRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PlacementSettingsMultiError(errors)
	}

	return nil
}

// PlacementSettingsMultiError is an error wrapping multiple validation errors
// returned by PlacementSettings.ValidateAll() if the designated constraints
// aren't met.
type PlacementSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlacementSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlacementSettingsMultiError) AllErrors() []error { return m }

// PlacementSettingsValidationError is the validation error returned by
// PlacementSettings.Validate if the designated constraints aren't met.
type PlacementSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlacementSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlacementSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlacementSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlacementSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlacementSettingsValidationError) ErrorName() string {
	return "PlacementSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e PlacementSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlacementSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlacementSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlacementSettingsValidationError{}

// Validate checks the field values on Member with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Member) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Member with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MemberMultiError, or nil if none found.
func (m *Member) ValidateAll() error {
	return m.validate(true)
}

func (m *Member) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetReadyCheck()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberValidationError{
					field:  "ReadyCheck",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberValidationError{
					field:  "ReadyCheck",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReadyCheck()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberValidationError{
				field:  "ReadyCheck",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPlacement()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberValidationError{
					field:  "Placement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberValidationError{
					field:  "Placement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlacement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberValidationError{
				field:  "Placement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MemberMultiError(errors)
	}

	return nil
}

// MemberMultiError is an error wrapping multiple validation errors returned by
// Member.ValidateAll() if the designated constraints aren't met.
type MemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberMultiError) AllErrors() []error { return m }

// MemberValidationError is the validation error returned by Member.Validate if
// the designated constraints aren't met.
type MemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberValidationError) ErrorName() string { return "MemberValidationError" }

// Error satisfies the builtin error interface
func (e MemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberValidationError{}

// Validate checks the field values on Invite with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Invite) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Invite with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in InviteMultiError, or nil if none found.
func (m *Invite) ValidateAll() error {
	return m.validate(true)
}

func (m *Invite) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for InviteeId

	// no validation rules for InviterId

	// no validation rules for LobbyId

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InviteValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InviteValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InviteValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InviteMultiError(errors)
	}

	return nil
}

// InviteMultiError is an error wrapping multiple validation errors returned by
// Invite.ValidateAll() if the designated constraints aren't met.
type InviteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteMultiError) AllErrors() []error { return m }

// InviteValidationError is the validation error returned by Invite.Validate if
// the designated constraints aren't met.
type InviteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteValidationError) ErrorName() string { return "InviteValidationError" }

// Error satisfies the builtin error interface
func (e InviteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvite.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteValidationError{}

// Validate checks the field values on EventLobbiesMemberJoined with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EventLobbiesMemberJoined) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventLobbiesMemberJoined with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EventLobbiesMemberJoinedMultiError, or nil if none found.
func (m *EventLobbiesMemberJoined) ValidateAll() error {
	return m.validate(true)
}

func (m *EventLobbiesMemberJoined) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventType

	// no validation rules for PublishedAt

	// no validation rules for JoinedUserId

	if all {
		switch v := interface{}(m.GetJoinedUserMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventLobbiesMemberJoinedValidationError{
					field:  "JoinedUserMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventLobbiesMemberJoinedValidationError{
					field:  "JoinedUserMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJoinedUserMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventLobbiesMemberJoinedValidationError{
				field:  "JoinedUserMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPlacement()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventLobbiesMemberJoinedValidationError{
					field:  "Placement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventLobbiesMemberJoinedValidationError{
					field:  "Placement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlacement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventLobbiesMemberJoinedValidationError{
				field:  "Placement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LobbyId

	if len(errors) > 0 {
		return EventLobbiesMemberJoinedMultiError(errors)
	}

	return nil
}

// EventLobbiesMemberJoinedMultiError is an error wrapping multiple validation
// errors returned by EventLobbiesMemberJoined.ValidateAll() if the designated
// constraints aren't met.
type EventLobbiesMemberJoinedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventLobbiesMemberJoinedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventLobbiesMemberJoinedMultiError) AllErrors() []error { return m }

// EventLobbiesMemberJoinedValidationError is the validation error returned by
// EventLobbiesMemberJoined.Validate if the designated constraints aren't met.
type EventLobbiesMemberJoinedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventLobbiesMemberJoinedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventLobbiesMemberJoinedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventLobbiesMemberJoinedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventLobbiesMemberJoinedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventLobbiesMemberJoinedValidationError) ErrorName() string {
	return "EventLobbiesMemberJoinedValidationError"
}

// Error satisfies the builtin error interface
func (e EventLobbiesMemberJoinedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventLobbiesMemberJoined.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventLobbiesMemberJoinedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventLobbiesMemberJoinedValidationError{}

// Validate checks the field values on EventLobbiesMemberLeft with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EventLobbiesMemberLeft) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventLobbiesMemberLeft with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EventLobbiesMemberLeftMultiError, or nil if none found.
func (m *EventLobbiesMemberLeft) ValidateAll() error {
	return m.validate(true)
}

func (m *EventLobbiesMemberLeft) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventType

	// no validation rules for PublishedAt

	// no validation rules for LeftUserId

	// no validation rules for Reason

	if all {
		switch v := interface{}(m.GetLeftUserMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventLobbiesMemberLeftValidationError{
					field:  "LeftUserMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventLobbiesMemberLeftValidationError{
					field:  "LeftUserMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLeftUserMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventLobbiesMemberLeftValidationError{
				field:  "LeftUserMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LobbyId

	if len(errors) > 0 {
		return EventLobbiesMemberLeftMultiError(errors)
	}

	return nil
}

// EventLobbiesMemberLeftMultiError is an error wrapping multiple validation
// errors returned by EventLobbiesMemberLeft.ValidateAll() if the designated
// constraints aren't met.
type EventLobbiesMemberLeftMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventLobbiesMemberLeftMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventLobbiesMemberLeftMultiError) AllErrors() []error { return m }

// EventLobbiesMemberLeftValidationError is the validation error returned by
// EventLobbiesMemberLeft.Validate if the designated constraints aren't met.
type EventLobbiesMemberLeftValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventLobbiesMemberLeftValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventLobbiesMemberLeftValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventLobbiesMemberLeftValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventLobbiesMemberLeftValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventLobbiesMemberLeftValidationError) ErrorName() string {
	return "EventLobbiesMemberLeftValidationError"
}

// Error satisfies the builtin error interface
func (e EventLobbiesMemberLeftValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventLobbiesMemberLeft.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventLobbiesMemberLeftValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventLobbiesMemberLeftValidationError{}

// Validate checks the field values on EventLobbiesLobbyDisbanded with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EventLobbiesLobbyDisbanded) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventLobbiesLobbyDisbanded with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EventLobbiesLobbyDisbandedMultiError, or nil if none found.
func (m *EventLobbiesLobbyDisbanded) ValidateAll() error {
	return m.validate(true)
}

func (m *EventLobbiesLobbyDisbanded) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventType

	// no validation rules for PublishedAt

	// no validation rules for LobbyId

	// no validation rules for OwnerUserId

	if len(errors) > 0 {
		return EventLobbiesLobbyDisbandedMultiError(errors)
	}

	return nil
}

// EventLobbiesLobbyDisbandedMultiError is an error wrapping multiple
// validation errors returned by EventLobbiesLobbyDisbanded.ValidateAll() if
// the designated constraints aren't met.
type EventLobbiesLobbyDisbandedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventLobbiesLobbyDisbandedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventLobbiesLobbyDisbandedMultiError) AllErrors() []error { return m }

// EventLobbiesLobbyDisbandedValidationError is the validation error returned
// by EventLobbiesLobbyDisbanded.Validate if the designated constraints aren't met.
type EventLobbiesLobbyDisbandedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventLobbiesLobbyDisbandedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventLobbiesLobbyDisbandedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventLobbiesLobbyDisbandedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventLobbiesLobbyDisbandedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventLobbiesLobbyDisbandedValidationError) ErrorName() string {
	return "EventLobbiesLobbyDisbandedValidationError"
}

// Error satisfies the builtin error interface
func (e EventLobbiesLobbyDisbandedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventLobbiesLobbyDisbanded.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventLobbiesLobbyDisbandedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventLobbiesLobbyDisbandedValidationError{}

// Validate checks the field values on EventLobbiesOwnerChanged with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EventLobbiesOwnerChanged) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventLobbiesOwnerChanged with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EventLobbiesOwnerChangedMultiError, or nil if none found.
func (m *EventLobbiesOwnerChanged) ValidateAll() error {
	return m.validate(true)
}

func (m *EventLobbiesOwnerChanged) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventType

	// no validation rules for PublishedAt

	// no validation rules for LobbyId

	// no validation rules for OldOwnerUserId

	// no validation rules for NewOwnerUserId

	if len(errors) > 0 {
		return EventLobbiesOwnerChangedMultiError(errors)
	}

	return nil
}

// EventLobbiesOwnerChangedMultiError is an error wrapping multiple validation
// errors returned by EventLobbiesOwnerChanged.ValidateAll() if the designated
// constraints aren't met.
type EventLobbiesOwnerChangedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventLobbiesOwnerChangedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventLobbiesOwnerChangedMultiError) AllErrors() []error { return m }

// EventLobbiesOwnerChangedValidationError is the validation error returned by
// EventLobbiesOwnerChanged.Validate if the designated constraints aren't met.
type EventLobbiesOwnerChangedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventLobbiesOwnerChangedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventLobbiesOwnerChangedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventLobbiesOwnerChangedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventLobbiesOwnerChangedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventLobbiesOwnerChangedValidationError) ErrorName() string {
	return "EventLobbiesOwnerChangedValidationError"
}

// Error satisfies the builtin error interface
func (e EventLobbiesOwnerChangedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventLobbiesOwnerChanged.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventLobbiesOwnerChangedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventLobbiesOwnerChangedValidationError{}

// Validate checks the field values on EventLobbiesMemberReady with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EventLobbiesMemberReady) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventLobbiesMemberReady with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EventLobbiesMemberReadyMultiError, or nil if none found.
func (m *EventLobbiesMemberReady) ValidateAll() error {
	return m.validate(true)
}

func (m *EventLobbiesMemberReady) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventType

	// no validation rules for PublishedAt

	// no validation rules for UserId

	// no validation rules for IsReady

	// no validation rules for LobbyId

	if len(errors) > 0 {
		return EventLobbiesMemberReadyMultiError(errors)
	}

	return nil
}

// EventLobbiesMemberReadyMultiError is an error wrapping multiple validation
// errors returned by EventLobbiesMemberReady.ValidateAll() if the designated
// constraints aren't met.
type EventLobbiesMemberReadyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventLobbiesMemberReadyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventLobbiesMemberReadyMultiError) AllErrors() []error { return m }

// EventLobbiesMemberReadyValidationError is the validation error returned by
// EventLobbiesMemberReady.Validate if the designated constraints aren't met.
type EventLobbiesMemberReadyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventLobbiesMemberReadyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventLobbiesMemberReadyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventLobbiesMemberReadyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventLobbiesMemberReadyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventLobbiesMemberReadyValidationError) ErrorName() string {
	return "EventLobbiesMemberReadyValidationError"
}

// Error satisfies the builtin error interface
func (e EventLobbiesMemberReadyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventLobbiesMemberReady.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventLobbiesMemberReadyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventLobbiesMemberReadyValidationError{}

// Validate checks the field values on EventLobbiesMatchStarted with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EventLobbiesMatchStarted) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventLobbiesMatchStarted with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EventLobbiesMatchStartedMultiError, or nil if none found.
func (m *EventLobbiesMatchStarted) ValidateAll() error {
	return m.validate(true)
}

func (m *EventLobbiesMatchStarted) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventType

	// no validation rules for PublishedAt

	// no validation rules for LobbyId

	// no validation rules for ConnectionString

	// no validation rules for JoinCode

	if len(errors) > 0 {
		return EventLobbiesMatchStartedMultiError(errors)
	}

	return nil
}

// EventLobbiesMatchStartedMultiError is an error wrapping multiple validation
// errors returned by EventLobbiesMatchStarted.ValidateAll() if the designated
// constraints aren't met.
type EventLobbiesMatchStartedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventLobbiesMatchStartedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventLobbiesMatchStartedMultiError) AllErrors() []error { return m }

// EventLobbiesMatchStartedValidationError is the validation error returned by
// EventLobbiesMatchStarted.Validate if the designated constraints aren't met.
type EventLobbiesMatchStartedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventLobbiesMatchStartedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventLobbiesMatchStartedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventLobbiesMatchStartedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventLobbiesMatchStartedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventLobbiesMatchStartedValidationError) ErrorName() string {
	return "EventLobbiesMatchStartedValidationError"
}

// Error satisfies the builtin error interface
func (e EventLobbiesMatchStartedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventLobbiesMatchStarted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventLobbiesMatchStartedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventLobbiesMatchStartedValidationError{}

// Validate checks the field values on EventLobbiesMemberInvited with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EventLobbiesMemberInvited) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventLobbiesMemberInvited with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EventLobbiesMemberInvitedMultiError, or nil if none found.
func (m *EventLobbiesMemberInvited) ValidateAll() error {
	return m.validate(true)
}

func (m *EventLobbiesMemberInvited) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventType

	// no validation rules for PublishedAt

	// no validation rules for LobbyId

	// no validation rules for InviteeUserId

	// no validation rules for InviterUserId

	// no validation rules for InviteId

	if len(errors) > 0 {
		return EventLobbiesMemberInvitedMultiError(errors)
	}

	return nil
}

// EventLobbiesMemberInvitedMultiError is an error wrapping multiple validation
// errors returned by EventLobbiesMemberInvited.ValidateAll() if the
// designated constraints aren't met.
type EventLobbiesMemberInvitedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventLobbiesMemberInvitedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventLobbiesMemberInvitedMultiError) AllErrors() []error { return m }

// EventLobbiesMemberInvitedValidationError is the validation error returned by
// EventLobbiesMemberInvited.Validate if the designated constraints aren't met.
type EventLobbiesMemberInvitedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventLobbiesMemberInvitedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventLobbiesMemberInvitedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventLobbiesMemberInvitedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventLobbiesMemberInvitedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventLobbiesMemberInvitedValidationError) ErrorName() string {
	return "EventLobbiesMemberInvitedValidationError"
}

// Error satisfies the builtin error interface
func (e EventLobbiesMemberInvitedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventLobbiesMemberInvited.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventLobbiesMemberInvitedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventLobbiesMemberInvitedValidationError{}

// Validate checks the field values on EventLobbiesMemberMetadataUpdated with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *EventLobbiesMemberMetadataUpdated) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventLobbiesMemberMetadataUpdated
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// EventLobbiesMemberMetadataUpdatedMultiError, or nil if none found.
func (m *EventLobbiesMemberMetadataUpdated) ValidateAll() error {
	return m.validate(true)
}

func (m *EventLobbiesMemberMetadataUpdated) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventType

	// no validation rules for PublishedAt

	// no validation rules for LobbyId

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetUserMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventLobbiesMemberMetadataUpdatedValidationError{
					field:  "UserMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventLobbiesMemberMetadataUpdatedValidationError{
					field:  "UserMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventLobbiesMemberMetadataUpdatedValidationError{
				field:  "UserMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EventLobbiesMemberMetadataUpdatedMultiError(errors)
	}

	return nil
}

// EventLobbiesMemberMetadataUpdatedMultiError is an error wrapping multiple
// validation errors returned by
// EventLobbiesMemberMetadataUpdated.ValidateAll() if the designated
// constraints aren't met.
type EventLobbiesMemberMetadataUpdatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventLobbiesMemberMetadataUpdatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventLobbiesMemberMetadataUpdatedMultiError) AllErrors() []error { return m }

// EventLobbiesMemberMetadataUpdatedValidationError is the validation error
// returned by EventLobbiesMemberMetadataUpdated.Validate if the designated
// constraints aren't met.
type EventLobbiesMemberMetadataUpdatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventLobbiesMemberMetadataUpdatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventLobbiesMemberMetadataUpdatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventLobbiesMemberMetadataUpdatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventLobbiesMemberMetadataUpdatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventLobbiesMemberMetadataUpdatedValidationError) ErrorName() string {
	return "EventLobbiesMemberMetadataUpdatedValidationError"
}

// Error satisfies the builtin error interface
func (e EventLobbiesMemberMetadataUpdatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventLobbiesMemberMetadataUpdated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventLobbiesMemberMetadataUpdatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventLobbiesMemberMetadataUpdatedValidationError{}

// Validate checks the field values on EventLobbiesMemberPlacementUpdated with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *EventLobbiesMemberPlacementUpdated) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventLobbiesMemberPlacementUpdated
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// EventLobbiesMemberPlacementUpdatedMultiError, or nil if none found.
func (m *EventLobbiesMemberPlacementUpdated) ValidateAll() error {
	return m.validate(true)
}

func (m *EventLobbiesMemberPlacementUpdated) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventType

	// no validation rules for PublishedAt

	// no validation rules for LobbyId

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetPlacement()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventLobbiesMemberPlacementUpdatedValidationError{
					field:  "Placement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventLobbiesMemberPlacementUpdatedValidationError{
					field:  "Placement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlacement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventLobbiesMemberPlacementUpdatedValidationError{
				field:  "Placement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EventLobbiesMemberPlacementUpdatedMultiError(errors)
	}

	return nil
}

// EventLobbiesMemberPlacementUpdatedMultiError is an error wrapping multiple
// validation errors returned by
// EventLobbiesMemberPlacementUpdated.ValidateAll() if the designated
// constraints aren't met.
type EventLobbiesMemberPlacementUpdatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventLobbiesMemberPlacementUpdatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventLobbiesMemberPlacementUpdatedMultiError) AllErrors() []error { return m }

// EventLobbiesMemberPlacementUpdatedValidationError is the validation error
// returned by EventLobbiesMemberPlacementUpdated.Validate if the designated
// constraints aren't met.
type EventLobbiesMemberPlacementUpdatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventLobbiesMemberPlacementUpdatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventLobbiesMemberPlacementUpdatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventLobbiesMemberPlacementUpdatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventLobbiesMemberPlacementUpdatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventLobbiesMemberPlacementUpdatedValidationError) ErrorName() string {
	return "EventLobbiesMemberPlacementUpdatedValidationError"
}

// Error satisfies the builtin error interface
func (e EventLobbiesMemberPlacementUpdatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventLobbiesMemberPlacementUpdated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventLobbiesMemberPlacementUpdatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventLobbiesMemberPlacementUpdatedValidationError{}

// Validate checks the field values on EventLobbiesMatchStartError with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EventLobbiesMatchStartError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventLobbiesMatchStartError with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EventLobbiesMatchStartErrorMultiError, or nil if none found.
func (m *EventLobbiesMatchStartError) ValidateAll() error {
	return m.validate(true)
}

func (m *EventLobbiesMatchStartError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventType

	// no validation rules for PublishedAt

	// no validation rules for LobbyId

	// no validation rules for ErrorMessage

	if len(errors) > 0 {
		return EventLobbiesMatchStartErrorMultiError(errors)
	}

	return nil
}

// EventLobbiesMatchStartErrorMultiError is an error wrapping multiple
// validation errors returned by EventLobbiesMatchStartError.ValidateAll() if
// the designated constraints aren't met.
type EventLobbiesMatchStartErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventLobbiesMatchStartErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventLobbiesMatchStartErrorMultiError) AllErrors() []error { return m }

// EventLobbiesMatchStartErrorValidationError is the validation error returned
// by EventLobbiesMatchStartError.Validate if the designated constraints
// aren't met.
type EventLobbiesMatchStartErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventLobbiesMatchStartErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventLobbiesMatchStartErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventLobbiesMatchStartErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventLobbiesMatchStartErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventLobbiesMatchStartErrorValidationError) ErrorName() string {
	return "EventLobbiesMatchStartErrorValidationError"
}

// Error satisfies the builtin error interface
func (e EventLobbiesMatchStartErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventLobbiesMatchStartError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventLobbiesMatchStartErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventLobbiesMatchStartErrorValidationError{}

// Validate checks the field values on EventLobbiesMemberKicked with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EventLobbiesMemberKicked) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventLobbiesMemberKicked with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EventLobbiesMemberKickedMultiError, or nil if none found.
func (m *EventLobbiesMemberKicked) ValidateAll() error {
	return m.validate(true)
}

func (m *EventLobbiesMemberKicked) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventType

	// no validation rules for PublishedAt

	// no validation rules for LobbyId

	// no validation rules for UserId

	if len(errors) > 0 {
		return EventLobbiesMemberKickedMultiError(errors)
	}

	return nil
}

// EventLobbiesMemberKickedMultiError is an error wrapping multiple validation
// errors returned by EventLobbiesMemberKicked.ValidateAll() if the designated
// constraints aren't met.
type EventLobbiesMemberKickedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventLobbiesMemberKickedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventLobbiesMemberKickedMultiError) AllErrors() []error { return m }

// EventLobbiesMemberKickedValidationError is the validation error returned by
// EventLobbiesMemberKicked.Validate if the designated constraints aren't met.
type EventLobbiesMemberKickedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventLobbiesMemberKickedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventLobbiesMemberKickedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventLobbiesMemberKickedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventLobbiesMemberKickedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventLobbiesMemberKickedValidationError) ErrorName() string {
	return "EventLobbiesMemberKickedValidationError"
}

// Error satisfies the builtin error interface
func (e EventLobbiesMemberKickedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventLobbiesMemberKicked.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventLobbiesMemberKickedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventLobbiesMemberKickedValidationError{}

// Validate checks the field values on CreateLobbyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLobbyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLobbyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLobbyRequestMultiError, or nil if none found.
func (m *CreateLobbyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLobbyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Private

	// no validation rules for AllowPartyJoin

	// no validation rules for MaxMembers

	// no validation rules for Password

	// no validation rules for InviteUrl

	if all {
		switch v := interface{}(m.GetSearchMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateLobbyRequestValidationError{
					field:  "SearchMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateLobbyRequestValidationError{
					field:  "SearchMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSearchMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLobbyRequestValidationError{
				field:  "SearchMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOwnerMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateLobbyRequestValidationError{
					field:  "OwnerMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateLobbyRequestValidationError{
					field:  "OwnerMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwnerMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLobbyRequestValidationError{
				field:  "OwnerMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AllocationMetadata

	if all {
		switch v := interface{}(m.GetPlacementSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateLobbyRequestValidationError{
					field:  "PlacementSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateLobbyRequestValidationError{
					field:  "PlacementSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlacementSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLobbyRequestValidationError{
				field:  "PlacementSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOwnerPlacement()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateLobbyRequestValidationError{
					field:  "OwnerPlacement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateLobbyRequestValidationError{
					field:  "OwnerPlacement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwnerPlacement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLobbyRequestValidationError{
				field:  "OwnerPlacement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StartAfterSeconds

	if len(errors) > 0 {
		return CreateLobbyRequestMultiError(errors)
	}

	return nil
}

// CreateLobbyRequestMultiError is an error wrapping multiple validation errors
// returned by CreateLobbyRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateLobbyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLobbyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLobbyRequestMultiError) AllErrors() []error { return m }

// CreateLobbyRequestValidationError is the validation error returned by
// CreateLobbyRequest.Validate if the designated constraints aren't met.
type CreateLobbyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLobbyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLobbyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLobbyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLobbyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLobbyRequestValidationError) ErrorName() string {
	return "CreateLobbyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLobbyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLobbyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLobbyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLobbyRequestValidationError{}

// Validate checks the field values on CreateLobbyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLobbyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLobbyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLobbyResponseMultiError, or nil if none found.
func (m *CreateLobbyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLobbyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLobby()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateLobbyResponseValidationError{
					field:  "Lobby",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateLobbyResponseValidationError{
					field:  "Lobby",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLobby()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLobbyResponseValidationError{
				field:  "Lobby",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateLobbyResponseMultiError(errors)
	}

	return nil
}

// CreateLobbyResponseMultiError is an error wrapping multiple validation
// errors returned by CreateLobbyResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateLobbyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLobbyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLobbyResponseMultiError) AllErrors() []error { return m }

// CreateLobbyResponseValidationError is the validation error returned by
// CreateLobbyResponse.Validate if the designated constraints aren't met.
type CreateLobbyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLobbyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLobbyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLobbyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLobbyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLobbyResponseValidationError) ErrorName() string {
	return "CreateLobbyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLobbyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLobbyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLobbyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLobbyResponseValidationError{}

// Validate checks the field values on GetLobbyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetLobbyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLobbyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLobbyRequestMultiError, or nil if none found.
func (m *GetLobbyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLobbyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetLobbyRequestMultiError(errors)
	}

	return nil
}

// GetLobbyRequestMultiError is an error wrapping multiple validation errors
// returned by GetLobbyRequest.ValidateAll() if the designated constraints
// aren't met.
type GetLobbyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLobbyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLobbyRequestMultiError) AllErrors() []error { return m }

// GetLobbyRequestValidationError is the validation error returned by
// GetLobbyRequest.Validate if the designated constraints aren't met.
type GetLobbyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLobbyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLobbyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLobbyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLobbyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLobbyRequestValidationError) ErrorName() string { return "GetLobbyRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetLobbyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLobbyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLobbyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLobbyRequestValidationError{}

// Validate checks the field values on GetLobbyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetLobbyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLobbyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLobbyResponseMultiError, or nil if none found.
func (m *GetLobbyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLobbyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLobby()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLobbyResponseValidationError{
					field:  "Lobby",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLobbyResponseValidationError{
					field:  "Lobby",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLobby()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLobbyResponseValidationError{
				field:  "Lobby",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetLobbyResponseMultiError(errors)
	}

	return nil
}

// GetLobbyResponseMultiError is an error wrapping multiple validation errors
// returned by GetLobbyResponse.ValidateAll() if the designated constraints
// aren't met.
type GetLobbyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLobbyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLobbyResponseMultiError) AllErrors() []error { return m }

// GetLobbyResponseValidationError is the validation error returned by
// GetLobbyResponse.Validate if the designated constraints aren't met.
type GetLobbyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLobbyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLobbyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLobbyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLobbyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLobbyResponseValidationError) ErrorName() string { return "GetLobbyResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetLobbyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLobbyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLobbyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLobbyResponseValidationError{}

// Validate checks the field values on DeleteLobbyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteLobbyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLobbyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteLobbyRequestMultiError, or nil if none found.
func (m *DeleteLobbyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLobbyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Owner

	if len(errors) > 0 {
		return DeleteLobbyRequestMultiError(errors)
	}

	return nil
}

// DeleteLobbyRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteLobbyRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteLobbyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLobbyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLobbyRequestMultiError) AllErrors() []error { return m }

// DeleteLobbyRequestValidationError is the validation error returned by
// DeleteLobbyRequest.Validate if the designated constraints aren't met.
type DeleteLobbyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLobbyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLobbyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLobbyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLobbyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLobbyRequestValidationError) ErrorName() string {
	return "DeleteLobbyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLobbyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLobbyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLobbyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLobbyRequestValidationError{}

// Validate checks the field values on DeleteLobbyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteLobbyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLobbyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteLobbyResponseMultiError, or nil if none found.
func (m *DeleteLobbyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLobbyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteLobbyResponseMultiError(errors)
	}

	return nil
}

// DeleteLobbyResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteLobbyResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteLobbyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLobbyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLobbyResponseMultiError) AllErrors() []error { return m }

// DeleteLobbyResponseValidationError is the validation error returned by
// DeleteLobbyResponse.Validate if the designated constraints aren't met.
type DeleteLobbyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLobbyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLobbyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLobbyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLobbyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLobbyResponseValidationError) ErrorName() string {
	return "DeleteLobbyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLobbyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLobbyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLobbyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLobbyResponseValidationError{}

// Validate checks the field values on ModifyLobbyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyLobbyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyLobbyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyLobbyRequestMultiError, or nil if none found.
func (m *ModifyLobbyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyLobbyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 50 {
		err := ModifyLobbyRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ModifyLobbyRequest_Id_Pattern.MatchString(m.GetId()) {
		err := ModifyLobbyRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"(?i)^[a-z0-9-_]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetPrivate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModifyLobbyRequestValidationError{
					field:  "Private",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModifyLobbyRequestValidationError{
					field:  "Private",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrivate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModifyLobbyRequestValidationError{
				field:  "Private",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAllowPartyJoin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModifyLobbyRequestValidationError{
					field:  "AllowPartyJoin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModifyLobbyRequestValidationError{
					field:  "AllowPartyJoin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAllowPartyJoin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModifyLobbyRequestValidationError{
				field:  "AllowPartyJoin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MaxMembers

	// no validation rules for Password

	// no validation rules for InviteUrl

	if all {
		switch v := interface{}(m.GetSearchMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModifyLobbyRequestValidationError{
					field:  "SearchMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModifyLobbyRequestValidationError{
					field:  "SearchMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSearchMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModifyLobbyRequestValidationError{
				field:  "SearchMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AllocationMetadata

	// no validation rules for Owner

	if all {
		switch v := interface{}(m.GetPlacementSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModifyLobbyRequestValidationError{
					field:  "PlacementSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModifyLobbyRequestValidationError{
					field:  "PlacementSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlacementSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModifyLobbyRequestValidationError{
				field:  "PlacementSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ModifyLobbyRequestMultiError(errors)
	}

	return nil
}

// ModifyLobbyRequestMultiError is an error wrapping multiple validation errors
// returned by ModifyLobbyRequest.ValidateAll() if the designated constraints
// aren't met.
type ModifyLobbyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyLobbyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyLobbyRequestMultiError) AllErrors() []error { return m }

// ModifyLobbyRequestValidationError is the validation error returned by
// ModifyLobbyRequest.Validate if the designated constraints aren't met.
type ModifyLobbyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyLobbyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyLobbyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyLobbyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyLobbyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyLobbyRequestValidationError) ErrorName() string {
	return "ModifyLobbyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyLobbyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyLobbyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyLobbyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyLobbyRequestValidationError{}

var _ModifyLobbyRequest_Id_Pattern = regexp.MustCompile("(?i)^[a-z0-9-_]*$")

// Validate checks the field values on ModifyLobbyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyLobbyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyLobbyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyLobbyResponseMultiError, or nil if none found.
func (m *ModifyLobbyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyLobbyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLobby()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModifyLobbyResponseValidationError{
					field:  "Lobby",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModifyLobbyResponseValidationError{
					field:  "Lobby",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLobby()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModifyLobbyResponseValidationError{
				field:  "Lobby",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ModifyLobbyResponseMultiError(errors)
	}

	return nil
}

// ModifyLobbyResponseMultiError is an error wrapping multiple validation
// errors returned by ModifyLobbyResponse.ValidateAll() if the designated
// constraints aren't met.
type ModifyLobbyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyLobbyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyLobbyResponseMultiError) AllErrors() []error { return m }

// ModifyLobbyResponseValidationError is the validation error returned by
// ModifyLobbyResponse.Validate if the designated constraints aren't met.
type ModifyLobbyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyLobbyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyLobbyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyLobbyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyLobbyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyLobbyResponseValidationError) ErrorName() string {
	return "ModifyLobbyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyLobbyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyLobbyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyLobbyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyLobbyResponseValidationError{}

// Validate checks the field values on MetadataFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MetadataFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetadataFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetadataFilterMultiError,
// or nil if none found.
func (m *MetadataFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *MetadataFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := MetadataFilterValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetValue() == nil {
		err := MetadataFilterValidationError{
			field:  "Value",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MetadataFilterValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MetadataFilterValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetadataFilterValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _MetadataFilter_Op_InLookup[m.GetOp()]; !ok {
		err := MetadataFilterValidationError{
			field:  "Op",
			reason: "value must be in list [= LIKE > < *]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MetadataFilterMultiError(errors)
	}

	return nil
}

// MetadataFilterMultiError is an error wrapping multiple validation errors
// returned by MetadataFilter.ValidateAll() if the designated constraints
// aren't met.
type MetadataFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetadataFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetadataFilterMultiError) AllErrors() []error { return m }

// MetadataFilterValidationError is the validation error returned by
// MetadataFilter.Validate if the designated constraints aren't met.
type MetadataFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetadataFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetadataFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetadataFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetadataFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetadataFilterValidationError) ErrorName() string { return "MetadataFilterValidationError" }

// Error satisfies the builtin error interface
func (e MetadataFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetadataFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetadataFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetadataFilterValidationError{}

var _MetadataFilter_Op_InLookup = map[string]struct{}{
	"=":    {},
	"LIKE": {},
	">":    {},
	"<":    {},
	"*":    {},
}

// Validate checks the field values on SortParams with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SortParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SortParams with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SortParamsMultiError, or
// nil if none found.
func (m *SortParams) ValidateAll() error {
	return m.validate(true)
}

func (m *SortParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetField()) < 1 {
		err := SortParamsValidationError{
			field:  "Field",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _SortParams_Order_InLookup[m.GetOrder()]; !ok {
		err := SortParamsValidationError{
			field:  "Order",
			reason: "value must be in list [asc desc]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SortParamsMultiError(errors)
	}

	return nil
}

// SortParamsMultiError is an error wrapping multiple validation errors
// returned by SortParams.ValidateAll() if the designated constraints aren't met.
type SortParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SortParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SortParamsMultiError) AllErrors() []error { return m }

// SortParamsValidationError is the validation error returned by
// SortParams.Validate if the designated constraints aren't met.
type SortParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SortParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SortParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SortParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SortParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SortParamsValidationError) ErrorName() string { return "SortParamsValidationError" }

// Error satisfies the builtin error interface
func (e SortParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSortParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SortParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SortParamsValidationError{}

var _SortParams_Order_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

// Validate checks the field values on ListLobbiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLobbiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLobbiesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLobbiesRequestMultiError, or nil if none found.
func (m *ListLobbiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLobbiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetLimit() > 50 {
		err := ListLobbiesRequestValidationError{
			field:  "Limit",
			reason: "value must be less than or equal to 50",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Offset

	for idx, item := range m.GetMetadataFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLobbiesRequestValidationError{
						field:  fmt.Sprintf("MetadataFilters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLobbiesRequestValidationError{
						field:  fmt.Sprintf("MetadataFilters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLobbiesRequestValidationError{
					field:  fmt.Sprintf("MetadataFilters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSort()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListLobbiesRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListLobbiesRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSort()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListLobbiesRequestValidationError{
				field:  "Sort",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListLobbiesRequestMultiError(errors)
	}

	return nil
}

// ListLobbiesRequestMultiError is an error wrapping multiple validation errors
// returned by ListLobbiesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListLobbiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLobbiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLobbiesRequestMultiError) AllErrors() []error { return m }

// ListLobbiesRequestValidationError is the validation error returned by
// ListLobbiesRequest.Validate if the designated constraints aren't met.
type ListLobbiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLobbiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLobbiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLobbiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLobbiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLobbiesRequestValidationError) ErrorName() string {
	return "ListLobbiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLobbiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLobbiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLobbiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLobbiesRequestValidationError{}

// Validate checks the field values on ListLobbiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLobbiesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLobbiesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLobbiesResponseMultiError, or nil if none found.
func (m *ListLobbiesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLobbiesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLobbies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLobbiesResponseValidationError{
						field:  fmt.Sprintf("Lobbies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLobbiesResponseValidationError{
						field:  fmt.Sprintf("Lobbies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLobbiesResponseValidationError{
					field:  fmt.Sprintf("Lobbies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListLobbiesResponseMultiError(errors)
	}

	return nil
}

// ListLobbiesResponseMultiError is an error wrapping multiple validation
// errors returned by ListLobbiesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListLobbiesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLobbiesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLobbiesResponseMultiError) AllErrors() []error { return m }

// ListLobbiesResponseValidationError is the validation error returned by
// ListLobbiesResponse.Validate if the designated constraints aren't met.
type ListLobbiesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLobbiesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLobbiesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLobbiesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLobbiesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLobbiesResponseValidationError) ErrorName() string {
	return "ListLobbiesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLobbiesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLobbiesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLobbiesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLobbiesResponseValidationError{}

// Validate checks the field values on ListLobbiesForMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLobbiesForMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLobbiesForMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLobbiesForMemberRequestMultiError, or nil if none found.
func (m *ListLobbiesForMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLobbiesForMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 50 {
		err := ListLobbiesForMemberRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListLobbiesForMemberRequest_UserId_Pattern.MatchString(m.GetUserId()) {
		err := ListLobbiesForMemberRequestValidationError{
			field:  "UserId",
			reason: "value does not match regex pattern \"(?i)^[a-z0-9-_]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListLobbiesForMemberRequestMultiError(errors)
	}

	return nil
}

// ListLobbiesForMemberRequestMultiError is an error wrapping multiple
// validation errors returned by ListLobbiesForMemberRequest.ValidateAll() if
// the designated constraints aren't met.
type ListLobbiesForMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLobbiesForMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLobbiesForMemberRequestMultiError) AllErrors() []error { return m }

// ListLobbiesForMemberRequestValidationError is the validation error returned
// by ListLobbiesForMemberRequest.Validate if the designated constraints
// aren't met.
type ListLobbiesForMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLobbiesForMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLobbiesForMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLobbiesForMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLobbiesForMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLobbiesForMemberRequestValidationError) ErrorName() string {
	return "ListLobbiesForMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLobbiesForMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLobbiesForMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLobbiesForMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLobbiesForMemberRequestValidationError{}

var _ListLobbiesForMemberRequest_UserId_Pattern = regexp.MustCompile("(?i)^[a-z0-9-_]*$")

// Validate checks the field values on ListLobbiesForMemberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLobbiesForMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLobbiesForMemberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLobbiesForMemberResponseMultiError, or nil if none found.
func (m *ListLobbiesForMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLobbiesForMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLobbies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLobbiesForMemberResponseValidationError{
						field:  fmt.Sprintf("Lobbies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLobbiesForMemberResponseValidationError{
						field:  fmt.Sprintf("Lobbies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLobbiesForMemberResponseValidationError{
					field:  fmt.Sprintf("Lobbies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListLobbiesForMemberResponseMultiError(errors)
	}

	return nil
}

// ListLobbiesForMemberResponseMultiError is an error wrapping multiple
// validation errors returned by ListLobbiesForMemberResponse.ValidateAll() if
// the designated constraints aren't met.
type ListLobbiesForMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLobbiesForMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLobbiesForMemberResponseMultiError) AllErrors() []error { return m }

// ListLobbiesForMemberResponseValidationError is the validation error returned
// by ListLobbiesForMemberResponse.Validate if the designated constraints
// aren't met.
type ListLobbiesForMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLobbiesForMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLobbiesForMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLobbiesForMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLobbiesForMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLobbiesForMemberResponseValidationError) ErrorName() string {
	return "ListLobbiesForMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLobbiesForMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLobbiesForMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLobbiesForMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLobbiesForMemberResponseValidationError{}

// Validate checks the field values on JoinLobbyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JoinLobbyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinLobbyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinLobbyRequestMultiError, or nil if none found.
func (m *JoinLobbyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinLobbyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LobbyId

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JoinLobbyRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JoinLobbyRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinLobbyRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Password

	// no validation rules for PartyId

	if all {
		switch v := interface{}(m.GetPlacement()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JoinLobbyRequestValidationError{
					field:  "Placement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JoinLobbyRequestValidationError{
					field:  "Placement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlacement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinLobbyRequestValidationError{
				field:  "Placement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return JoinLobbyRequestMultiError(errors)
	}

	return nil
}

// JoinLobbyRequestMultiError is an error wrapping multiple validation errors
// returned by JoinLobbyRequest.ValidateAll() if the designated constraints
// aren't met.
type JoinLobbyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinLobbyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinLobbyRequestMultiError) AllErrors() []error { return m }

// JoinLobbyRequestValidationError is the validation error returned by
// JoinLobbyRequest.Validate if the designated constraints aren't met.
type JoinLobbyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinLobbyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinLobbyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinLobbyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinLobbyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinLobbyRequestValidationError) ErrorName() string { return "JoinLobbyRequestValidationError" }

// Error satisfies the builtin error interface
func (e JoinLobbyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinLobbyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinLobbyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinLobbyRequestValidationError{}

// Validate checks the field values on JoinLobbyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JoinLobbyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinLobbyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinLobbyResponseMultiError, or nil if none found.
func (m *JoinLobbyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinLobbyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLobby()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JoinLobbyResponseValidationError{
					field:  "Lobby",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JoinLobbyResponseValidationError{
					field:  "Lobby",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLobby()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinLobbyResponseValidationError{
				field:  "Lobby",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return JoinLobbyResponseMultiError(errors)
	}

	return nil
}

// JoinLobbyResponseMultiError is an error wrapping multiple validation errors
// returned by JoinLobbyResponse.ValidateAll() if the designated constraints
// aren't met.
type JoinLobbyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinLobbyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinLobbyResponseMultiError) AllErrors() []error { return m }

// JoinLobbyResponseValidationError is the validation error returned by
// JoinLobbyResponse.Validate if the designated constraints aren't met.
type JoinLobbyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinLobbyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinLobbyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinLobbyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinLobbyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinLobbyResponseValidationError) ErrorName() string {
	return "JoinLobbyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e JoinLobbyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinLobbyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinLobbyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinLobbyResponseValidationError{}

// Validate checks the field values on LeaveLobbyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LeaveLobbyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaveLobbyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LeaveLobbyRequestMultiError, or nil if none found.
func (m *LeaveLobbyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaveLobbyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LobbyId

	// no validation rules for UserId

	if len(errors) > 0 {
		return LeaveLobbyRequestMultiError(errors)
	}

	return nil
}

// LeaveLobbyRequestMultiError is an error wrapping multiple validation errors
// returned by LeaveLobbyRequest.ValidateAll() if the designated constraints
// aren't met.
type LeaveLobbyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaveLobbyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaveLobbyRequestMultiError) AllErrors() []error { return m }

// LeaveLobbyRequestValidationError is the validation error returned by
// LeaveLobbyRequest.Validate if the designated constraints aren't met.
type LeaveLobbyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaveLobbyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaveLobbyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaveLobbyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaveLobbyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaveLobbyRequestValidationError) ErrorName() string {
	return "LeaveLobbyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LeaveLobbyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaveLobbyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaveLobbyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaveLobbyRequestValidationError{}

// Validate checks the field values on LeaveLobbyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LeaveLobbyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaveLobbyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LeaveLobbyResponseMultiError, or nil if none found.
func (m *LeaveLobbyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaveLobbyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return LeaveLobbyResponseMultiError(errors)
	}

	return nil
}

// LeaveLobbyResponseMultiError is an error wrapping multiple validation errors
// returned by LeaveLobbyResponse.ValidateAll() if the designated constraints
// aren't met.
type LeaveLobbyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaveLobbyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaveLobbyResponseMultiError) AllErrors() []error { return m }

// LeaveLobbyResponseValidationError is the validation error returned by
// LeaveLobbyResponse.Validate if the designated constraints aren't met.
type LeaveLobbyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaveLobbyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaveLobbyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaveLobbyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaveLobbyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaveLobbyResponseValidationError) ErrorName() string {
	return "LeaveLobbyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LeaveLobbyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaveLobbyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaveLobbyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaveLobbyResponseValidationError{}

// Validate checks the field values on AddLobbyMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddLobbyMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddLobbyMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddLobbyMemberRequestMultiError, or nil if none found.
func (m *AddLobbyMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddLobbyMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LobbyId

	// no validation rules for UserId

	// no validation rules for RequesterId

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddLobbyMemberRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddLobbyMemberRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddLobbyMemberRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddLobbyMemberRequestMultiError(errors)
	}

	return nil
}

// AddLobbyMemberRequestMultiError is an error wrapping multiple validation
// errors returned by AddLobbyMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type AddLobbyMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddLobbyMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddLobbyMemberRequestMultiError) AllErrors() []error { return m }

// AddLobbyMemberRequestValidationError is the validation error returned by
// AddLobbyMemberRequest.Validate if the designated constraints aren't met.
type AddLobbyMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddLobbyMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddLobbyMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddLobbyMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddLobbyMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddLobbyMemberRequestValidationError) ErrorName() string {
	return "AddLobbyMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddLobbyMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddLobbyMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddLobbyMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddLobbyMemberRequestValidationError{}

// Validate checks the field values on AddLobbyMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddLobbyMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddLobbyMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddLobbyMemberResponseMultiError, or nil if none found.
func (m *AddLobbyMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddLobbyMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLobby()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddLobbyMemberResponseValidationError{
					field:  "Lobby",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddLobbyMemberResponseValidationError{
					field:  "Lobby",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLobby()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddLobbyMemberResponseValidationError{
				field:  "Lobby",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddLobbyMemberResponseMultiError(errors)
	}

	return nil
}

// AddLobbyMemberResponseMultiError is an error wrapping multiple validation
// errors returned by AddLobbyMemberResponse.ValidateAll() if the designated
// constraints aren't met.
type AddLobbyMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddLobbyMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddLobbyMemberResponseMultiError) AllErrors() []error { return m }

// AddLobbyMemberResponseValidationError is the validation error returned by
// AddLobbyMemberResponse.Validate if the designated constraints aren't met.
type AddLobbyMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddLobbyMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddLobbyMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddLobbyMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddLobbyMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddLobbyMemberResponseValidationError) ErrorName() string {
	return "AddLobbyMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddLobbyMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddLobbyMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddLobbyMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddLobbyMemberResponseValidationError{}

// Validate checks the field values on RemoveLobbyMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveLobbyMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveLobbyMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveLobbyMemberRequestMultiError, or nil if none found.
func (m *RemoveLobbyMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveLobbyMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LobbyId

	// no validation rules for UserId

	// no validation rules for RequesterId

	if len(errors) > 0 {
		return RemoveLobbyMemberRequestMultiError(errors)
	}

	return nil
}

// RemoveLobbyMemberRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveLobbyMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveLobbyMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveLobbyMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveLobbyMemberRequestMultiError) AllErrors() []error { return m }

// RemoveLobbyMemberRequestValidationError is the validation error returned by
// RemoveLobbyMemberRequest.Validate if the designated constraints aren't met.
type RemoveLobbyMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveLobbyMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveLobbyMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveLobbyMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveLobbyMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveLobbyMemberRequestValidationError) ErrorName() string {
	return "RemoveLobbyMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveLobbyMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveLobbyMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveLobbyMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveLobbyMemberRequestValidationError{}

// Validate checks the field values on RemoveLobbyMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveLobbyMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveLobbyMemberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveLobbyMemberResponseMultiError, or nil if none found.
func (m *RemoveLobbyMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveLobbyMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLobby()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveLobbyMemberResponseValidationError{
					field:  "Lobby",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveLobbyMemberResponseValidationError{
					field:  "Lobby",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLobby()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveLobbyMemberResponseValidationError{
				field:  "Lobby",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemoveLobbyMemberResponseMultiError(errors)
	}

	return nil
}

// RemoveLobbyMemberResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveLobbyMemberResponse.ValidateAll() if the
// designated constraints aren't met.
type RemoveLobbyMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveLobbyMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveLobbyMemberResponseMultiError) AllErrors() []error { return m }

// RemoveLobbyMemberResponseValidationError is the validation error returned by
// RemoveLobbyMemberResponse.Validate if the designated constraints aren't met.
type RemoveLobbyMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveLobbyMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveLobbyMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveLobbyMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveLobbyMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveLobbyMemberResponseValidationError) ErrorName() string {
	return "RemoveLobbyMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveLobbyMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveLobbyMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveLobbyMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveLobbyMemberResponseValidationError{}

// Validate checks the field values on UpdateLobbyMemberMetadataRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateLobbyMemberMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLobbyMemberMetadataRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateLobbyMemberMetadataRequestMultiError, or nil if none found.
func (m *UpdateLobbyMemberMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLobbyMemberMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LobbyId

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateLobbyMemberMetadataRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateLobbyMemberMetadataRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLobbyMemberMetadataRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateLobbyMemberMetadataRequestMultiError(errors)
	}

	return nil
}

// UpdateLobbyMemberMetadataRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateLobbyMemberMetadataRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateLobbyMemberMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLobbyMemberMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLobbyMemberMetadataRequestMultiError) AllErrors() []error { return m }

// UpdateLobbyMemberMetadataRequestValidationError is the validation error
// returned by UpdateLobbyMemberMetadataRequest.Validate if the designated
// constraints aren't met.
type UpdateLobbyMemberMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLobbyMemberMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLobbyMemberMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLobbyMemberMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLobbyMemberMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLobbyMemberMetadataRequestValidationError) ErrorName() string {
	return "UpdateLobbyMemberMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLobbyMemberMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLobbyMemberMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLobbyMemberMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLobbyMemberMetadataRequestValidationError{}

// Validate checks the field values on UpdateLobbyMemberMetadataResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateLobbyMemberMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLobbyMemberMetadataResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateLobbyMemberMetadataResponseMultiError, or nil if none found.
func (m *UpdateLobbyMemberMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLobbyMemberMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateLobbyMemberMetadataResponseMultiError(errors)
	}

	return nil
}

// UpdateLobbyMemberMetadataResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateLobbyMemberMetadataResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateLobbyMemberMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLobbyMemberMetadataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLobbyMemberMetadataResponseMultiError) AllErrors() []error { return m }

// UpdateLobbyMemberMetadataResponseValidationError is the validation error
// returned by UpdateLobbyMemberMetadataResponse.Validate if the designated
// constraints aren't met.
type UpdateLobbyMemberMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLobbyMemberMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLobbyMemberMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLobbyMemberMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLobbyMemberMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLobbyMemberMetadataResponseValidationError) ErrorName() string {
	return "UpdateLobbyMemberMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLobbyMemberMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLobbyMemberMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLobbyMemberMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLobbyMemberMetadataResponseValidationError{}

// Validate checks the field values on UpdateLobbyMemberPlacementRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateLobbyMemberPlacementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLobbyMemberPlacementRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateLobbyMemberPlacementRequestMultiError, or nil if none found.
func (m *UpdateLobbyMemberPlacementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLobbyMemberPlacementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LobbyId

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetPlacement()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateLobbyMemberPlacementRequestValidationError{
					field:  "Placement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateLobbyMemberPlacementRequestValidationError{
					field:  "Placement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlacement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLobbyMemberPlacementRequestValidationError{
				field:  "Placement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateLobbyMemberPlacementRequestMultiError(errors)
	}

	return nil
}

// UpdateLobbyMemberPlacementRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateLobbyMemberPlacementRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateLobbyMemberPlacementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLobbyMemberPlacementRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLobbyMemberPlacementRequestMultiError) AllErrors() []error { return m }

// UpdateLobbyMemberPlacementRequestValidationError is the validation error
// returned by UpdateLobbyMemberPlacementRequest.Validate if the designated
// constraints aren't met.
type UpdateLobbyMemberPlacementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLobbyMemberPlacementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLobbyMemberPlacementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLobbyMemberPlacementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLobbyMemberPlacementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLobbyMemberPlacementRequestValidationError) ErrorName() string {
	return "UpdateLobbyMemberPlacementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLobbyMemberPlacementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLobbyMemberPlacementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLobbyMemberPlacementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLobbyMemberPlacementRequestValidationError{}

// Validate checks the field values on UpdateLobbyMemberPlacementResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateLobbyMemberPlacementResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLobbyMemberPlacementResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateLobbyMemberPlacementResponseMultiError, or nil if none found.
func (m *UpdateLobbyMemberPlacementResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLobbyMemberPlacementResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateLobbyMemberPlacementResponseMultiError(errors)
	}

	return nil
}

// UpdateLobbyMemberPlacementResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateLobbyMemberPlacementResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateLobbyMemberPlacementResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLobbyMemberPlacementResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLobbyMemberPlacementResponseMultiError) AllErrors() []error { return m }

// UpdateLobbyMemberPlacementResponseValidationError is the validation error
// returned by UpdateLobbyMemberPlacementResponse.Validate if the designated
// constraints aren't met.
type UpdateLobbyMemberPlacementResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLobbyMemberPlacementResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLobbyMemberPlacementResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLobbyMemberPlacementResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLobbyMemberPlacementResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLobbyMemberPlacementResponseValidationError) ErrorName() string {
	return "UpdateLobbyMemberPlacementResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLobbyMemberPlacementResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLobbyMemberPlacementResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLobbyMemberPlacementResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLobbyMemberPlacementResponseValidationError{}

// Validate checks the field values on ReadyMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadyMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadyMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadyMemberRequestMultiError, or nil if none found.
func (m *ReadyMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadyMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LobbyId

	// no validation rules for UserId

	// no validation rules for Ready

	if len(errors) > 0 {
		return ReadyMemberRequestMultiError(errors)
	}

	return nil
}

// ReadyMemberRequestMultiError is an error wrapping multiple validation errors
// returned by ReadyMemberRequest.ValidateAll() if the designated constraints
// aren't met.
type ReadyMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadyMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadyMemberRequestMultiError) AllErrors() []error { return m }

// ReadyMemberRequestValidationError is the validation error returned by
// ReadyMemberRequest.Validate if the designated constraints aren't met.
type ReadyMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadyMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadyMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadyMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadyMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadyMemberRequestValidationError) ErrorName() string {
	return "ReadyMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadyMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadyMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadyMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadyMemberRequestValidationError{}

// Validate checks the field values on ReadyMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadyMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadyMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadyMemberResponseMultiError, or nil if none found.
func (m *ReadyMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadyMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLobby()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadyMemberResponseValidationError{
					field:  "Lobby",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadyMemberResponseValidationError{
					field:  "Lobby",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLobby()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadyMemberResponseValidationError{
				field:  "Lobby",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadyMemberResponseMultiError(errors)
	}

	return nil
}

// ReadyMemberResponseMultiError is an error wrapping multiple validation
// errors returned by ReadyMemberResponse.ValidateAll() if the designated
// constraints aren't met.
type ReadyMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadyMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadyMemberResponseMultiError) AllErrors() []error { return m }

// ReadyMemberResponseValidationError is the validation error returned by
// ReadyMemberResponse.Validate if the designated constraints aren't met.
type ReadyMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadyMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadyMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadyMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadyMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadyMemberResponseValidationError) ErrorName() string {
	return "ReadyMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadyMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadyMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadyMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadyMemberResponseValidationError{}

// Validate checks the field values on InviteLobbyMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InviteLobbyMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InviteLobbyMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InviteLobbyMemberRequestMultiError, or nil if none found.
func (m *InviteLobbyMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InviteLobbyMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LobbyId

	// no validation rules for InviteeId

	// no validation rules for InviterId

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InviteLobbyMemberRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InviteLobbyMemberRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InviteLobbyMemberRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InviteLobbyMemberRequestMultiError(errors)
	}

	return nil
}

// InviteLobbyMemberRequestMultiError is an error wrapping multiple validation
// errors returned by InviteLobbyMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type InviteLobbyMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteLobbyMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteLobbyMemberRequestMultiError) AllErrors() []error { return m }

// InviteLobbyMemberRequestValidationError is the validation error returned by
// InviteLobbyMemberRequest.Validate if the designated constraints aren't met.
type InviteLobbyMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteLobbyMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteLobbyMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteLobbyMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteLobbyMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteLobbyMemberRequestValidationError) ErrorName() string {
	return "InviteLobbyMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InviteLobbyMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteLobbyMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteLobbyMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteLobbyMemberRequestValidationError{}

// Validate checks the field values on InviteLobbyMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InviteLobbyMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InviteLobbyMemberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InviteLobbyMemberResponseMultiError, or nil if none found.
func (m *InviteLobbyMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InviteLobbyMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInvite()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InviteLobbyMemberResponseValidationError{
					field:  "Invite",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InviteLobbyMemberResponseValidationError{
					field:  "Invite",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInvite()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InviteLobbyMemberResponseValidationError{
				field:  "Invite",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InviteLobbyMemberResponseMultiError(errors)
	}

	return nil
}

// InviteLobbyMemberResponseMultiError is an error wrapping multiple validation
// errors returned by InviteLobbyMemberResponse.ValidateAll() if the
// designated constraints aren't met.
type InviteLobbyMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteLobbyMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteLobbyMemberResponseMultiError) AllErrors() []error { return m }

// InviteLobbyMemberResponseValidationError is the validation error returned by
// InviteLobbyMemberResponse.Validate if the designated constraints aren't met.
type InviteLobbyMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteLobbyMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteLobbyMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteLobbyMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteLobbyMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteLobbyMemberResponseValidationError) ErrorName() string {
	return "InviteLobbyMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InviteLobbyMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteLobbyMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteLobbyMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteLobbyMemberResponseValidationError{}

// Validate checks the field values on AcceptLobbyInviteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptLobbyInviteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptLobbyInviteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptLobbyInviteRequestMultiError, or nil if none found.
func (m *AcceptLobbyInviteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptLobbyInviteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetInviteId()); l < 1 || l > 50 {
		err := AcceptLobbyInviteRequestValidationError{
			field:  "InviteId",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AcceptLobbyInviteRequest_InviteId_Pattern.MatchString(m.GetInviteId()) {
		err := AcceptLobbyInviteRequestValidationError{
			field:  "InviteId",
			reason: "value does not match regex pattern \"(?i)^[a-z0-9-]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 50 {
		err := AcceptLobbyInviteRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AcceptLobbyInviteRequest_UserId_Pattern.MatchString(m.GetUserId()) {
		err := AcceptLobbyInviteRequestValidationError{
			field:  "UserId",
			reason: "value does not match regex pattern \"(?i)^[a-z0-9-_]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AcceptLobbyInviteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AcceptLobbyInviteRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AcceptLobbyInviteRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AcceptLobbyInviteRequestMultiError(errors)
	}

	return nil
}

// AcceptLobbyInviteRequestMultiError is an error wrapping multiple validation
// errors returned by AcceptLobbyInviteRequest.ValidateAll() if the designated
// constraints aren't met.
type AcceptLobbyInviteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptLobbyInviteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptLobbyInviteRequestMultiError) AllErrors() []error { return m }

// AcceptLobbyInviteRequestValidationError is the validation error returned by
// AcceptLobbyInviteRequest.Validate if the designated constraints aren't met.
type AcceptLobbyInviteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptLobbyInviteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptLobbyInviteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptLobbyInviteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptLobbyInviteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptLobbyInviteRequestValidationError) ErrorName() string {
	return "AcceptLobbyInviteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptLobbyInviteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptLobbyInviteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptLobbyInviteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptLobbyInviteRequestValidationError{}

var _AcceptLobbyInviteRequest_InviteId_Pattern = regexp.MustCompile("(?i)^[a-z0-9-]*$")

var _AcceptLobbyInviteRequest_UserId_Pattern = regexp.MustCompile("(?i)^[a-z0-9-_]*$")

// Validate checks the field values on AcceptLobbyInviteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptLobbyInviteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptLobbyInviteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptLobbyInviteResponseMultiError, or nil if none found.
func (m *AcceptLobbyInviteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptLobbyInviteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLobby()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AcceptLobbyInviteResponseValidationError{
					field:  "Lobby",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AcceptLobbyInviteResponseValidationError{
					field:  "Lobby",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLobby()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AcceptLobbyInviteResponseValidationError{
				field:  "Lobby",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AcceptLobbyInviteResponseMultiError(errors)
	}

	return nil
}

// AcceptLobbyInviteResponseMultiError is an error wrapping multiple validation
// errors returned by AcceptLobbyInviteResponse.ValidateAll() if the
// designated constraints aren't met.
type AcceptLobbyInviteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptLobbyInviteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptLobbyInviteResponseMultiError) AllErrors() []error { return m }

// AcceptLobbyInviteResponseValidationError is the validation error returned by
// AcceptLobbyInviteResponse.Validate if the designated constraints aren't met.
type AcceptLobbyInviteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptLobbyInviteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptLobbyInviteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptLobbyInviteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptLobbyInviteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptLobbyInviteResponseValidationError) ErrorName() string {
	return "AcceptLobbyInviteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptLobbyInviteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptLobbyInviteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptLobbyInviteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptLobbyInviteResponseValidationError{}

// Validate checks the field values on ListLobbyInvitesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLobbyInvitesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLobbyInvitesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLobbyInvitesRequestMultiError, or nil if none found.
func (m *ListLobbyInvitesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLobbyInvitesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LobbyId

	// no validation rules for Owner

	if len(errors) > 0 {
		return ListLobbyInvitesRequestMultiError(errors)
	}

	return nil
}

// ListLobbyInvitesRequestMultiError is an error wrapping multiple validation
// errors returned by ListLobbyInvitesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListLobbyInvitesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLobbyInvitesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLobbyInvitesRequestMultiError) AllErrors() []error { return m }

// ListLobbyInvitesRequestValidationError is the validation error returned by
// ListLobbyInvitesRequest.Validate if the designated constraints aren't met.
type ListLobbyInvitesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLobbyInvitesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLobbyInvitesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLobbyInvitesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLobbyInvitesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLobbyInvitesRequestValidationError) ErrorName() string {
	return "ListLobbyInvitesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLobbyInvitesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLobbyInvitesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLobbyInvitesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLobbyInvitesRequestValidationError{}

// Validate checks the field values on ListLobbyInvitesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLobbyInvitesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLobbyInvitesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLobbyInvitesResponseMultiError, or nil if none found.
func (m *ListLobbyInvitesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLobbyInvitesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInvites() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLobbyInvitesResponseValidationError{
						field:  fmt.Sprintf("Invites[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLobbyInvitesResponseValidationError{
						field:  fmt.Sprintf("Invites[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLobbyInvitesResponseValidationError{
					field:  fmt.Sprintf("Invites[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListLobbyInvitesResponseMultiError(errors)
	}

	return nil
}

// ListLobbyInvitesResponseMultiError is an error wrapping multiple validation
// errors returned by ListLobbyInvitesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListLobbyInvitesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLobbyInvitesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLobbyInvitesResponseMultiError) AllErrors() []error { return m }

// ListLobbyInvitesResponseValidationError is the validation error returned by
// ListLobbyInvitesResponse.Validate if the designated constraints aren't met.
type ListLobbyInvitesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLobbyInvitesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLobbyInvitesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLobbyInvitesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLobbyInvitesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLobbyInvitesResponseValidationError) ErrorName() string {
	return "ListLobbyInvitesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLobbyInvitesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLobbyInvitesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLobbyInvitesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLobbyInvitesResponseValidationError{}

// Validate checks the field values on ListLobbyMemberInvitesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLobbyMemberInvitesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLobbyMemberInvitesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListLobbyMemberInvitesRequestMultiError, or nil if none found.
func (m *ListLobbyMemberInvitesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLobbyMemberInvitesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return ListLobbyMemberInvitesRequestMultiError(errors)
	}

	return nil
}

// ListLobbyMemberInvitesRequestMultiError is an error wrapping multiple
// validation errors returned by ListLobbyMemberInvitesRequest.ValidateAll()
// if the designated constraints aren't met.
type ListLobbyMemberInvitesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLobbyMemberInvitesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLobbyMemberInvitesRequestMultiError) AllErrors() []error { return m }

// ListLobbyMemberInvitesRequestValidationError is the validation error
// returned by ListLobbyMemberInvitesRequest.Validate if the designated
// constraints aren't met.
type ListLobbyMemberInvitesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLobbyMemberInvitesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLobbyMemberInvitesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLobbyMemberInvitesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLobbyMemberInvitesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLobbyMemberInvitesRequestValidationError) ErrorName() string {
	return "ListLobbyMemberInvitesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLobbyMemberInvitesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLobbyMemberInvitesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLobbyMemberInvitesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLobbyMemberInvitesRequestValidationError{}

// Validate checks the field values on ListLobbyMemberInvitesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLobbyMemberInvitesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLobbyMemberInvitesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListLobbyMemberInvitesResponseMultiError, or nil if none found.
func (m *ListLobbyMemberInvitesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLobbyMemberInvitesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInvites() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLobbyMemberInvitesResponseValidationError{
						field:  fmt.Sprintf("Invites[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLobbyMemberInvitesResponseValidationError{
						field:  fmt.Sprintf("Invites[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLobbyMemberInvitesResponseValidationError{
					field:  fmt.Sprintf("Invites[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListLobbyMemberInvitesResponseMultiError(errors)
	}

	return nil
}

// ListLobbyMemberInvitesResponseMultiError is an error wrapping multiple
// validation errors returned by ListLobbyMemberInvitesResponse.ValidateAll()
// if the designated constraints aren't met.
type ListLobbyMemberInvitesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLobbyMemberInvitesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLobbyMemberInvitesResponseMultiError) AllErrors() []error { return m }

// ListLobbyMemberInvitesResponseValidationError is the validation error
// returned by ListLobbyMemberInvitesResponse.Validate if the designated
// constraints aren't met.
type ListLobbyMemberInvitesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLobbyMemberInvitesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLobbyMemberInvitesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLobbyMemberInvitesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLobbyMemberInvitesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLobbyMemberInvitesResponseValidationError) ErrorName() string {
	return "ListLobbyMemberInvitesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLobbyMemberInvitesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLobbyMemberInvitesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLobbyMemberInvitesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLobbyMemberInvitesResponseValidationError{}

// Validate checks the field values on TransferOwnershipRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferOwnershipRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferOwnershipRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferOwnershipRequestMultiError, or nil if none found.
func (m *TransferOwnershipRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferOwnershipRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LobbyId

	// no validation rules for CurrentOwner

	// no validation rules for NewOwner

	if len(errors) > 0 {
		return TransferOwnershipRequestMultiError(errors)
	}

	return nil
}

// TransferOwnershipRequestMultiError is an error wrapping multiple validation
// errors returned by TransferOwnershipRequest.ValidateAll() if the designated
// constraints aren't met.
type TransferOwnershipRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferOwnershipRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferOwnershipRequestMultiError) AllErrors() []error { return m }

// TransferOwnershipRequestValidationError is the validation error returned by
// TransferOwnershipRequest.Validate if the designated constraints aren't met.
type TransferOwnershipRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferOwnershipRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferOwnershipRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferOwnershipRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferOwnershipRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferOwnershipRequestValidationError) ErrorName() string {
	return "TransferOwnershipRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TransferOwnershipRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferOwnershipRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferOwnershipRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferOwnershipRequestValidationError{}

// Validate checks the field values on TransferOwnershipResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferOwnershipResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferOwnershipResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferOwnershipResponseMultiError, or nil if none found.
func (m *TransferOwnershipResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferOwnershipResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLobby()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransferOwnershipResponseValidationError{
					field:  "Lobby",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransferOwnershipResponseValidationError{
					field:  "Lobby",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLobby()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransferOwnershipResponseValidationError{
				field:  "Lobby",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransferOwnershipResponseMultiError(errors)
	}

	return nil
}

// TransferOwnershipResponseMultiError is an error wrapping multiple validation
// errors returned by TransferOwnershipResponse.ValidateAll() if the
// designated constraints aren't met.
type TransferOwnershipResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferOwnershipResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferOwnershipResponseMultiError) AllErrors() []error { return m }

// TransferOwnershipResponseValidationError is the validation error returned by
// TransferOwnershipResponse.Validate if the designated constraints aren't met.
type TransferOwnershipResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferOwnershipResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferOwnershipResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferOwnershipResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferOwnershipResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferOwnershipResponseValidationError) ErrorName() string {
	return "TransferOwnershipResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TransferOwnershipResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferOwnershipResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferOwnershipResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferOwnershipResponseValidationError{}

// Validate checks the field values on StartMatchRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StartMatchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartMatchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartMatchRequestMultiError, or nil if none found.
func (m *StartMatchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMatchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LobbyId

	// no validation rules for Owner

	// no validation rules for Region

	// no validation rules for FleetName

	// no validation rules for StartAt

	if len(errors) > 0 {
		return StartMatchRequestMultiError(errors)
	}

	return nil
}

// StartMatchRequestMultiError is an error wrapping multiple validation errors
// returned by StartMatchRequest.ValidateAll() if the designated constraints
// aren't met.
type StartMatchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMatchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMatchRequestMultiError) AllErrors() []error { return m }

// StartMatchRequestValidationError is the validation error returned by
// StartMatchRequest.Validate if the designated constraints aren't met.
type StartMatchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMatchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMatchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartMatchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMatchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMatchRequestValidationError) ErrorName() string {
	return "StartMatchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartMatchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMatchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMatchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMatchRequestValidationError{}

// Validate checks the field values on StartMatchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartMatchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartMatchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartMatchResponseMultiError, or nil if none found.
func (m *StartMatchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartMatchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLobby()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartMatchResponseValidationError{
					field:  "Lobby",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartMatchResponseValidationError{
					field:  "Lobby",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLobby()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartMatchResponseValidationError{
				field:  "Lobby",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StartMatchResponseMultiError(errors)
	}

	return nil
}

// StartMatchResponseMultiError is an error wrapping multiple validation errors
// returned by StartMatchResponse.ValidateAll() if the designated constraints
// aren't met.
type StartMatchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartMatchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartMatchResponseMultiError) AllErrors() []error { return m }

// StartMatchResponseValidationError is the validation error returned by
// StartMatchResponse.Validate if the designated constraints aren't met.
type StartMatchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartMatchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartMatchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartMatchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartMatchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartMatchResponseValidationError) ErrorName() string {
	return "StartMatchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartMatchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartMatchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartMatchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartMatchResponseValidationError{}
