
syntax = "proto3";

package parties;
option go_package = "github.com/snapser-engine/services/parties/proto";

import "google/protobuf/struct.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/wrappers.proto";


/* Service Requests & Responses */
message CreatePartyRequest {
  string party_name = 1 [
    (google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Name of the party"
      type: STRING
    }
  ];

  google.protobuf.Struct search_properties = 2 [
    (google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "A Json document that will be indexed for full text searching"
      type: OBJECT
    }
  ];

  int64 max_players = 3 [
    (google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The max number of players to allow in the party"
      type: INTEGER
    }
  ];

  string status = 4 [
    (google.api.field_behavior) = OPTIONAL,
    (validate.rules).string = {
      in: [
        "",
        "PARTY_STATUS_OPEN",
        "PARTY_STATUS_FULL",
        "PARTY_STATUS_IN_GAME"
      ]
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The status of the party. Defaults to open. Valid names: PARTY_STATUS_OPEN, PARTY_STATUS_FULL, PARTY_STATUS_IN_GAME"
      type: STRING
    }
  ];

  string visibility = 5 [
    (google.api.field_behavior) = OPTIONAL,
    (validate.rules).string = {
      in: [
        "",
        "PARTY_VISIBILITY_PUBLIC",
        "PARTY_VISIBILITY_PRIVATE",
        "PARTY_VISIBILITY_INVITE_ONLY",
        "PARTY_VISIBILITY_FRIENDS_ONLY"
      ]
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The visibility of the party. Defaults to private. Valid names: PARTY_VISIBILITY_PUBLIC, PARTY_VISIBILITY_PRIVATE, PARTY_VISIBILITY_INVITE_ONLY, PARTY_VISIBILITY_FRIENDS_ONLY"
      type: STRING
    }
  ];

  string owner_id = 6 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-_]*$"
    },
    (google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The owner of the party. If using auth, this must match the user_id in the auth token"
      type: STRING
    }
  ];

  google.protobuf.Struct metadata = 7 [
    (google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "A Json document of metadata to be stored with the party"
      type: OBJECT
    }
  ];

  google.protobuf.Struct owner_metadata = 8 [
    (google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "A Json document of metadata to be stored with the player that created the party"
      type: OBJECT
    }
  ];

  PartySettings settings = 10 [
    (google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Settings for the party"
      type: OBJECT
    }
  ];
}

message CreatePartyResponse {
  Party party = 1;
}

message GetPartyRequest {
  string party_id = 1;
}

message GetPartyResponse {
  Party party = 1;
}

message UpdatePartyRequest {
  string party_id = 1 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-_]*$"
    },
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the party"
      type: STRING
    }
  ];
  string party_name = 2 [
    (google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Name of the party"
      type: STRING
    }
  ];

  google.protobuf.Struct search_properties = 3 [
    (google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "A Json document that will be indexed for full text searching"
      type: OBJECT
    }
  ];

  int64 max_players = 4 [
    (google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The max number of players to allow in the party"
      type: INTEGER
    }
  ];

  string status = 5 [
    (google.api.field_behavior) = OPTIONAL,
    (validate.rules).string = {
      in: [
        "",
        "PARTY_STATUS_OPEN",
        "PARTY_STATUS_FULL",
        "PARTY_STATUS_IN_GAME"
      ]
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The status of the party. Defaults to open. Valid names: PARTY_STATUS_OPEN, PARTY_STATUS_FULL, PARTY_STATUS_IN_GAME"
      type: STRING
    }
  ];

  string visibility = 6 [
    (google.api.field_behavior) = OPTIONAL,
    (validate.rules).string = {
      in: [
        "",
        "PARTY_VISIBILITY_PUBLIC",
        "PARTY_VISIBILITY_PRIVATE",
        "PARTY_VISIBILITY_INVITE_ONLY",
        "PARTY_VISIBILITY_FRIENDS_ONLY"
      ]
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The visibility of the party. Defaults to private. Valid names: PARTY_VISIBILITY_PUBLIC, PARTY_VISIBILITY_PRIVATE, PARTY_VISIBILITY_INVITE_ONLY, PARTY_VISIBILITY_FRIENDS_ONLY"
      type: STRING
    }
  ];

  string owner_id = 7 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-_]*$"
    },
    (google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The owner of the party. If using auth, this must match the user_id in the auth token"
      type: STRING
    }
  ];

  google.protobuf.Struct metadata = 8 [
    (google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "A Json document of metadata to be stored with the party"
      type: OBJECT
    }
  ];

  PartySettings settings = 9 [
    (google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Settings for the party"
      type: OBJECT
    }
  ];
}

message UpdatePartyResponse {
  bool success = 1;
}

message UpdatePartyPlayerMetadataRequest {
  string party_id = 1 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-_]*$"
    },
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the party"
      type: STRING
    }
  ];
  string user_id = 2 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-_]*$"
    },
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the user"
      type: STRING
    }
  ];
  google.protobuf.Struct metadata = 3 [
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "A Json document of metadata to be stored with the player"
      type: OBJECT
    }
  ];
}

message UpdatePartyPlayerMetadataResponse {
  bool success = 1;
}

message SearchPartiesResponse {
  repeated Party parties = 1;
}

message SearchPartiesRequest {
  string name = 1 [
    (google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Returns guilds that have the name matching this field"
      type: STRING
    }
  ];
  uint32 limit = 2 [
    (google.api.field_behavior) = OPTIONAL,
    (validate.rules).uint32 = {lte: 50},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Number of results returned. The maximum allowed is 50, defaults to 10 if not provided."
      type: INTEGER
    }
  ];
  uint32 offset = 3 [
    (google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Number of results to skip from the start of the result set"
      type: INTEGER
    }];
  repeated MetadataFilter metadata_filters = 4 [
    (google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Metadata filters"
      type: ARRAY
    }
  ];
  SortParams sort = 5 [
    (google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Sort params"
      type: OBJECT
    }
  ];
}

message MetadataFilter {
  string key = 1 [
    (validate.rules).string = {min_len: 1},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Field inside metadata to be filtered on"
      type: STRING
    }
  ];

  google.protobuf.Value value = 2 [
    (validate.rules).message = {required: true},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Value for comparison"}
  ];

  string op = 3 [
    (validate.rules).string = {
      in: [
        "=",
        "LIKE",
        ">",
        "<",
        "*"
      ]
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Operator for the comparison. Valid values - LIKE, =, <>, >, <"
      type: STRING
    }
  ];
}

message SortParams {
  string field = 1 [
    (validate.rules).string = {min_len: 1},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Field on which the results are to be sorted"
      type: STRING
    }
  ];
  string order = 2 [
    (validate.rules).string = {
      in: [
        "asc",
        "desc"
      ]
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Order of sorting. Valid values - asc, desc"
      type: STRING
    }
  ];
}


message JoinPartyRequest {
  string party_id = 1 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-_]*$"
    },
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the party"
      type: STRING
    }
  ];

  string user_id = 2 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-]*$"
    },
    (google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the user joining the party. If using auth, this must match the user_id in the auth token"
      type: STRING
    }
  ];

  google.protobuf.Struct metadata = 3 [
    (google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "A Json document of metadata to be stored with player"
      type: OBJECT
    }
  ];
}

message JoinPartyResponse {
  bool success = 1;
  Party party = 2;
}

message LeavePartyRequest {
  string party_id = 1 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-_]*$"
    },
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the party"
      type: STRING
    }
  ];

  string user_id = 2 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-]*$"
    },
    (google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the user leaving the party. If using auth, this must match the user_id in the auth token"
      type: STRING
    }
  ];
}

message LeavePartyResponse {
  bool success = 1;
}

message DeletePartyRequest {
  string party_id = 1 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-_]*$"
    },
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the party"
      type: STRING
    }
  ];

  string owner_id = 2 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-]*$"
    },
    (google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the owner of the party. If using auth, this must match the user_id in the auth token"
      type: STRING
    }
  ];
}

message DeletePartyResponse {
  bool success = 1;
}

message KickUserRequest {
  string party_id = 1 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-_]*$"
    },
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the party"
      type: STRING
    }
  ];
  string user_id = 2 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-_]*$"
    },
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the user to kick"
      type: STRING
    }
  ];
  string owner_id = 3 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-]*$"
    },
    (google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the owner of the party. If using auth, this must match the user_id in the auth token"
      type: STRING
    }
  ];
}

message KickUserResponse {
  bool success = 1;
}

message BanUserRequest {
  string party_id = 1 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-_]*$"
    },
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the party"
      type: STRING
    }
  ];
  string user_id = 2 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-_]*$"
    },
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the user to ban"
      type: STRING
    }
  ];
  string owner_id = 3 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-]*$"
    },
    (google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the owner of the party. If using auth, this must match the user_id in the auth token"
      type: STRING
    }
  ];

  google.protobuf.Struct metadata = 4 [
    (google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "A Json document of metadata to be stored with the banned player"
      type: OBJECT
    }
  ];
}

message BanUserResponse {
  bool success = 1;
}

message UnbanUserRequest {
  string party_id = 1 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-_]*$"
    },
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the party"
      type: STRING
    }
  ];
  string user_id = 2 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-_]*$"
    },
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the user to ban"
      type: STRING
    }
  ];
  string owner_id = 3 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-]*$"
    },
    (google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the owner of the party. If using auth, this must match the user_id in the auth token"
      type: STRING
    }
  ];
}

message UnbanUserResponse {
  bool success = 1;
}

message RequestToJoinPartyRequest {
  string party_id = 1 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-_]*$"
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the party"
      type: STRING
    }
  ];
  string user_id = 3 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-]*$"
    },
    (google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the user joining the party. If using auth, this must match the user_id in the auth token"
      type: STRING
    }
  ];
  google.protobuf.Struct metadata = 4 [
    (google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "A Json document of metadata to be stored with player"
      type: OBJECT
    }
  ];
}

message RequestToJoinPartyResponse {
  bool success = 1;
  Request request = 2;
}

message InviteUserRequest {
  string party_id = 1 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-_]*$",
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the party",
      type: STRING
    }
  ];
  string invitee_id = 2 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-_]*$",
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the user to invite",
      type: STRING
    }
  ];
  string user_id = 3 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-_]*$",
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the user in the party creating the invite. If using auth, this must match the user_id in the auth token",
      type: STRING
    }
  ];
}

message InviteUserResponse {
  bool success = 1;
  Request invite = 2;
}

message ListPartyInvitesRequest {
  string party_id = 1 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-_]*$",
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the party",
      type: STRING
    }
  ];
  string user_id = 2 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-_]*$",
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the user making the request. The user must be in the party to list invites of the party. If using auth, this must match the user_id in the auth token",
      type: STRING
    }
  ];
}

message ListPartyInvitesResponse {
  repeated Request invites = 1;
}

message ListPartyRequestsRequest {
  string party_id = 1 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-_]*$",
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the party",
      type: STRING
    }
  ];
  string user_id = 2 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-_]*$",
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the user making the request. The user must be in the party to list requests of the party. If using auth, this must match the user_id in the auth token",
      type: STRING
    }
  ];
}

message ListPartyRequestsResponse {
  repeated Request requests = 1;
}

message ListPartiesForUserRequest {
  string user_id = 1 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-_]*$",
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the user",
      type: STRING
    }
  ];
}

message ListPartiesForUserResponse {
  repeated Party parties = 1;
}

message ApprovePartyRequestRequest {
  string request_id = 1 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-]*$",
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the request",
      type: STRING
    }
  ];
  string user_id = 2 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-_]*$",
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the user approving the request. The user must be the owner to approve. If using auth, this must match the user_id in the auth token",
      type: STRING
    }
  ];
}

message ApprovePartyRequestResponse {
  bool success = 1;
}

message AcceptInviteRequest {
  string invite_id = 1 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-]*$",
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the invite",
      type: STRING
    }
  ];
  string user_id = 2 [
    (validate.rules).string = {
      min_len: 1,
      max_len: 50,
      pattern: "(?i)^[a-z0-9-_]*$",
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "ID of the user approving the request. The user must be the owner to approve. If using auth, this must match the user_id in the auth token",
      type: STRING
    }
  ];
}

message AcceptInviteResponse {
  bool success = 1;
}
/* Message Types and Enums */

message Party {
  string id = 1;
  string party_name = 2;
  string connection_string = 3;
  int64 created_at = 4;
  int64 updated_at = 5;
  string owner = 6;
  google.protobuf.Struct search_properties = 7;
  int64 max_players = 8;
  map<string, google.protobuf.Struct> players = 9;
  PartyStatus status = 10;
  PartyVisibility visibility = 11;
  map<string, google.protobuf.Struct> banned_players = 12;
  google.protobuf.Struct metadata = 13;
  string type = 14;
  PartySettings settings = 15;
}

// PartyStatus represents the status of a party.
enum PartyStatus {
    // PARTY_STATUS_UNKNOWN indicates an unknown status.
    PARTY_STATUS_UNKNOWN = 0;

    // PARTY_STATUS_OPEN indicates the party is open for anyone to join.
    PARTY_STATUS_OPEN = 1;

    // PARTY_STATUS_FULL indicates the party is full and cannot accept new members.
    PARTY_STATUS_FULL = 2;

    // PARTY_STATUS_IN_GAME indicates the party is currently in a game.
    PARTY_STATUS_IN_GAME = 3;
}

// PartyVisibility represents the visibility level of a party.
enum PartyVisibility {
    // PARTY_VISIBILITY_UNKNOWN indicates an unknown visibility.
    PARTY_VISIBILITY_UNKNOWN = 0;

    // PARTY_VISIBILITY_PUBLIC indicates the party is visible to everyone.
    PARTY_VISIBILITY_PUBLIC = 1;

    // PARTY_VISIBILITY_PRIVATE indicates the party is private.
    PARTY_VISIBILITY_PRIVATE = 2;

    // PARTY_VISIBILITY_INVITE_ONLY indicates the party is visible by invite only.
    PARTY_VISIBILITY_INVITE_ONLY = 3;

    // PARTY_VISIBILITY_FRIENDS_ONLY indicates the party is only visible to friends.
    PARTY_VISIBILITY_FRIENDS_ONLY = 4;
}

// PartySettings represents the configurable settings of a party.
message PartySettings {
  // AllowMemberMatchmaking indicates if party members can queue/dequeue on behalf of the party.
  google.protobuf.BoolValue allow_member_matchmaking = 1;
  // AllowMemberJoinInGame indicates if party members can join the party while the party is in a game.
  google.protobuf.BoolValue allow_member_join_in_game= 2;
  // AllowPartyUpdatesInGame indicates if the party can be updated while the party is in a game.
  google.protobuf.BoolValue allow_party_updates_in_game= 3;
}

message Request {
    string id = 1;
    string invitee_id = 2;
    string requester_id = 3;
    string sender_id = 4;
    string party_id = 5;
    int64 created_at = 6;
    RequestStatus status = 7;
    RequestChannel channel = 8;
    string type = 9;
    google.protobuf.Struct metadata = 10;
}

enum RequestStatus {
    REQUEST_STATUS_UNKNOWN = 0;
    REQUEST_STATUS_PENDING = 1;
    REQUEST_STATUS_ACCEPTED = 2;
    REQUEST_STATUS_DECLINED = 3;
}

enum RequestChannel {
    REQUEST_CHANNEL_UNKNOWN = 0;
}

/* Service Events & Pub/Sub */
enum PartiesEventType {
  UNKNOWN_EVENT_TYPE = 0;
  PARTY_JOINED = 1;
  PARTY_LEFT = 2;
  PARTY_DELETED = 3;
  PARTY_PLAYER_METADATA_UPDATED = 4;
  PARTY_UPDATED = 5;
  PARTY_USER_INVITED = 6;
}

message EventPartyJoined {
  PartiesEventType event_type = 1;
  int64 published_at = 2;
  string joined_user_id = 3;
  google.protobuf.Struct joined_user_metadata = 4;
  string party_id = 5;
}

message EventPartyLeft {
  PartiesEventType event_type = 1;
  int64 published_at = 2;
  string left_user_id = 3;
  string reason = 4;
  google.protobuf.Struct left_user_metadata = 5;
  string party_id = 6;
}

message EventPartyDeleted {
  PartiesEventType event_type = 1;
  int64 published_at = 2;
  string party_id = 3;
  string reason = 4;
}

message EventPartyPlayerMetadataUpdated {
  PartiesEventType event_type = 1;
  int64 published_at = 2;
  string party_id = 3;
  string user_id = 4;
  google.protobuf.Struct metadata = 5;
}

message EventPartyUpdated {
  PartiesEventType event_type = 1;
  int64 published_at = 2;
  Party party = 3;
  string party_id = 4;
}

message EventPartyUserInvited {
  PartiesEventType event_type = 1;
  int64 published_at = 2;
  string party_id = 3;
  string invitee_id = 4;
  string inviter_id = 5;
  string invite_id = 6;
}