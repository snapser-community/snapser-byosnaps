// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: eventbus_types.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EventTypes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EventTypes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventTypes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EventTypesMultiError, or
// nil if none found.
func (m *EventTypes) ValidateAll() error {
	return m.validate(true)
}

func (m *EventTypes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEventTypes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventTypesValidationError{
						field:  fmt.Sprintf("EventTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventTypesValidationError{
						field:  fmt.Sprintf("EventTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventTypesValidationError{
					field:  fmt.Sprintf("EventTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EventTypesMultiError(errors)
	}

	return nil
}

// EventTypesMultiError is an error wrapping multiple validation errors
// returned by EventTypes.ValidateAll() if the designated constraints aren't met.
type EventTypesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventTypesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventTypesMultiError) AllErrors() []error { return m }

// EventTypesValidationError is the validation error returned by
// EventTypes.Validate if the designated constraints aren't met.
type EventTypesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventTypesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventTypesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventTypesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventTypesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventTypesValidationError) ErrorName() string { return "EventTypesValidationError" }

// Error satisfies the builtin error interface
func (e EventTypesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventTypes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventTypesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventTypesValidationError{}

// Validate checks the field values on SnapserEventType with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SnapserEventType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SnapserEventType with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SnapserEventTypeMultiError, or nil if none found.
func (m *SnapserEventType) ValidateAll() error {
	return m.validate(true)
}

func (m *SnapserEventType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	// no validation rules for Subject

	// no validation rules for Description

	// no validation rules for MessageType

	// no validation rules for EventTypeEnumValue

	if len(errors) > 0 {
		return SnapserEventTypeMultiError(errors)
	}

	return nil
}

// SnapserEventTypeMultiError is an error wrapping multiple validation errors
// returned by SnapserEventType.ValidateAll() if the designated constraints
// aren't met.
type SnapserEventTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SnapserEventTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SnapserEventTypeMultiError) AllErrors() []error { return m }

// SnapserEventTypeValidationError is the validation error returned by
// SnapserEventType.Validate if the designated constraints aren't met.
type SnapserEventTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SnapserEventTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SnapserEventTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SnapserEventTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SnapserEventTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SnapserEventTypeValidationError) ErrorName() string { return "SnapserEventTypeValidationError" }

// Error satisfies the builtin error interface
func (e SnapserEventTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSnapserEventType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SnapserEventTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SnapserEventTypeValidationError{}

// Validate checks the field values on ByoWebhookRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ByoWebhookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ByoWebhookRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ByoWebhookRequestMultiError, or nil if none found.
func (m *ByoWebhookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ByoWebhookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MessageType

	// no validation rules for Timestamp

	switch m.Message.(type) {

	case *ByoWebhookRequest_ByoSnapEvent:

		if all {
			switch v := interface{}(m.GetByoSnapEvent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ByoWebhookRequestValidationError{
						field:  "ByoSnapEvent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ByoWebhookRequestValidationError{
						field:  "ByoSnapEvent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetByoSnapEvent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ByoWebhookRequestValidationError{
					field:  "ByoSnapEvent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ByoWebhookRequestMultiError(errors)
	}

	return nil
}

// ByoWebhookRequestMultiError is an error wrapping multiple validation errors
// returned by ByoWebhookRequest.ValidateAll() if the designated constraints
// aren't met.
type ByoWebhookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ByoWebhookRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ByoWebhookRequestMultiError) AllErrors() []error { return m }

// ByoWebhookRequestValidationError is the validation error returned by
// ByoWebhookRequest.Validate if the designated constraints aren't met.
type ByoWebhookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ByoWebhookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ByoWebhookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ByoWebhookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ByoWebhookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ByoWebhookRequestValidationError) ErrorName() string {
	return "ByoWebhookRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ByoWebhookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sByoWebhookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ByoWebhookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ByoWebhookRequestValidationError{}

// Validate checks the field values on ByoSnapEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ByoSnapEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ByoSnapEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ByoSnapEventMultiError, or
// nil if none found.
func (m *ByoSnapEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *ByoSnapEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	// no validation rules for ServiceName

	// no validation rules for Payload

	if len(errors) > 0 {
		return ByoSnapEventMultiError(errors)
	}

	return nil
}

// ByoSnapEventMultiError is an error wrapping multiple validation errors
// returned by ByoSnapEvent.ValidateAll() if the designated constraints aren't met.
type ByoSnapEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ByoSnapEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ByoSnapEventMultiError) AllErrors() []error { return m }

// ByoSnapEventValidationError is the validation error returned by
// ByoSnapEvent.Validate if the designated constraints aren't met.
type ByoSnapEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ByoSnapEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ByoSnapEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ByoSnapEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ByoSnapEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ByoSnapEventValidationError) ErrorName() string { return "ByoSnapEventValidationError" }

// Error satisfies the builtin error interface
func (e ByoSnapEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sByoSnapEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ByoSnapEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ByoSnapEventValidationError{}

// Validate checks the field values on RegisterEventTypesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterEventTypesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterEventTypesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterEventTypesRequestMultiError, or nil if none found.
func (m *RegisterEventTypesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterEventTypesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServiceName()) > 100 {
		err := RegisterEventTypesRequestValidationError{
			field:  "ServiceName",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RegisterEventTypesRequest_ServiceName_Pattern.MatchString(m.GetServiceName()) {
		err := RegisterEventTypesRequestValidationError{
			field:  "ServiceName",
			reason: "value does not match regex pattern \"(?i)^[a-z]([a-z0-9-_]*[a-z0-9])?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetEventTypes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RegisterEventTypesRequestValidationError{
						field:  fmt.Sprintf("EventTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RegisterEventTypesRequestValidationError{
						field:  fmt.Sprintf("EventTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RegisterEventTypesRequestValidationError{
					field:  fmt.Sprintf("EventTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RegisterEventTypesRequestMultiError(errors)
	}

	return nil
}

// RegisterEventTypesRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterEventTypesRequest.ValidateAll() if the
// designated constraints aren't met.
type RegisterEventTypesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterEventTypesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterEventTypesRequestMultiError) AllErrors() []error { return m }

// RegisterEventTypesRequestValidationError is the validation error returned by
// RegisterEventTypesRequest.Validate if the designated constraints aren't met.
type RegisterEventTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterEventTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterEventTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterEventTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterEventTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterEventTypesRequestValidationError) ErrorName() string {
	return "RegisterEventTypesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterEventTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterEventTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterEventTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterEventTypesRequestValidationError{}

var _RegisterEventTypesRequest_ServiceName_Pattern = regexp.MustCompile("(?i)^[a-z]([a-z0-9-_]*[a-z0-9])?$")

// Validate checks the field values on RegisterEventTypesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterEventTypesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterEventTypesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterEventTypesResponseMultiError, or nil if none found.
func (m *RegisterEventTypesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterEventTypesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RegisterEventTypesResponseMultiError(errors)
	}

	return nil
}

// RegisterEventTypesResponseMultiError is an error wrapping multiple
// validation errors returned by RegisterEventTypesResponse.ValidateAll() if
// the designated constraints aren't met.
type RegisterEventTypesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterEventTypesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterEventTypesResponseMultiError) AllErrors() []error { return m }

// RegisterEventTypesResponseValidationError is the validation error returned
// by RegisterEventTypesResponse.Validate if the designated constraints aren't met.
type RegisterEventTypesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterEventTypesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterEventTypesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterEventTypesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterEventTypesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterEventTypesResponseValidationError) ErrorName() string {
	return "RegisterEventTypesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterEventTypesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterEventTypesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterEventTypesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterEventTypesResponseValidationError{}

// Validate checks the field values on PublishEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishEventRequestMultiError, or nil if none found.
func (m *PublishEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	// no validation rules for Subject

	// no validation rules for EventTypeId

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishEventRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishEventRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishEventRequestValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Payload

	if len(errors) > 0 {
		return PublishEventRequestMultiError(errors)
	}

	return nil
}

// PublishEventRequestMultiError is an error wrapping multiple validation
// errors returned by PublishEventRequest.ValidateAll() if the designated
// constraints aren't met.
type PublishEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishEventRequestMultiError) AllErrors() []error { return m }

// PublishEventRequestValidationError is the validation error returned by
// PublishEventRequest.Validate if the designated constraints aren't met.
type PublishEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishEventRequestValidationError) ErrorName() string {
	return "PublishEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublishEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishEventRequestValidationError{}

// Validate checks the field values on PublishEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishEventResponseMultiError, or nil if none found.
func (m *PublishEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sequence

	if len(errors) > 0 {
		return PublishEventResponseMultiError(errors)
	}

	return nil
}

// PublishEventResponseMultiError is an error wrapping multiple validation
// errors returned by PublishEventResponse.ValidateAll() if the designated
// constraints aren't met.
type PublishEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishEventResponseMultiError) AllErrors() []error { return m }

// PublishEventResponseValidationError is the validation error returned by
// PublishEventResponse.Validate if the designated constraints aren't met.
type PublishEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishEventResponseValidationError) ErrorName() string {
	return "PublishEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublishEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishEventResponseValidationError{}
