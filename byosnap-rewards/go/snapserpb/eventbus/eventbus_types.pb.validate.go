// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: eventbus_types.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EventTypes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EventTypes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventTypes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EventTypesMultiError, or
// nil if none found.
func (m *EventTypes) ValidateAll() error {
	return m.validate(true)
}

func (m *EventTypes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEventTypes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventTypesValidationError{
						field:  fmt.Sprintf("EventTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventTypesValidationError{
						field:  fmt.Sprintf("EventTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventTypesValidationError{
					field:  fmt.Sprintf("EventTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EventTypesMultiError(errors)
	}

	return nil
}

// EventTypesMultiError is an error wrapping multiple validation errors
// returned by EventTypes.ValidateAll() if the designated constraints aren't met.
type EventTypesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventTypesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventTypesMultiError) AllErrors() []error { return m }

// EventTypesValidationError is the validation error returned by
// EventTypes.Validate if the designated constraints aren't met.
type EventTypesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventTypesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventTypesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventTypesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventTypesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventTypesValidationError) ErrorName() string { return "EventTypesValidationError" }

// Error satisfies the builtin error interface
func (e EventTypesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventTypes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventTypesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventTypesValidationError{}

// Validate checks the field values on SnapserEventType with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SnapserEventType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SnapserEventType with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SnapserEventTypeMultiError, or nil if none found.
func (m *SnapserEventType) ValidateAll() error {
	return m.validate(true)
}

func (m *SnapserEventType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	// no validation rules for Subject

	// no validation rules for Description

	// no validation rules for MessageType

	// no validation rules for EventTypeEnumValue

	if len(errors) > 0 {
		return SnapserEventTypeMultiError(errors)
	}

	return nil
}

// SnapserEventTypeMultiError is an error wrapping multiple validation errors
// returned by SnapserEventType.ValidateAll() if the designated constraints
// aren't met.
type SnapserEventTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SnapserEventTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SnapserEventTypeMultiError) AllErrors() []error { return m }

// SnapserEventTypeValidationError is the validation error returned by
// SnapserEventType.Validate if the designated constraints aren't met.
type SnapserEventTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SnapserEventTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SnapserEventTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SnapserEventTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SnapserEventTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SnapserEventTypeValidationError) ErrorName() string { return "SnapserEventTypeValidationError" }

// Error satisfies the builtin error interface
func (e SnapserEventTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSnapserEventType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SnapserEventTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SnapserEventTypeValidationError{}

// Validate checks the field values on ByoWebhookRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ByoWebhookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ByoWebhookRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ByoWebhookRequestMultiError, or nil if none found.
func (m *ByoWebhookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ByoWebhookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MessageType

	// no validation rules for Timestamp

	switch m.Message.(type) {

	case *ByoWebhookRequest_ByoSnapEvent:

		if all {
			switch v := interface{}(m.GetByoSnapEvent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ByoWebhookRequestValidationError{
						field:  "ByoSnapEvent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ByoWebhookRequestValidationError{
						field:  "ByoSnapEvent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetByoSnapEvent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ByoWebhookRequestValidationError{
					field:  "ByoSnapEvent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ByoWebhookRequestMultiError(errors)
	}

	return nil
}

// ByoWebhookRequestMultiError is an error wrapping multiple validation errors
// returned by ByoWebhookRequest.ValidateAll() if the designated constraints
// aren't met.
type ByoWebhookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ByoWebhookRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ByoWebhookRequestMultiError) AllErrors() []error { return m }

// ByoWebhookRequestValidationError is the validation error returned by
// ByoWebhookRequest.Validate if the designated constraints aren't met.
type ByoWebhookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ByoWebhookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ByoWebhookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ByoWebhookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ByoWebhookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ByoWebhookRequestValidationError) ErrorName() string {
	return "ByoWebhookRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ByoWebhookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sByoWebhookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ByoWebhookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ByoWebhookRequestValidationError{}

// Validate checks the field values on ByoSnapEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ByoSnapEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ByoSnapEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ByoSnapEventMultiError, or
// nil if none found.
func (m *ByoSnapEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *ByoSnapEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	// no validation rules for ServiceName

	// no validation rules for Payload

	if len(errors) > 0 {
		return ByoSnapEventMultiError(errors)
	}

	return nil
}

// ByoSnapEventMultiError is an error wrapping multiple validation errors
// returned by ByoSnapEvent.ValidateAll() if the designated constraints aren't met.
type ByoSnapEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ByoSnapEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ByoSnapEventMultiError) AllErrors() []error { return m }

// ByoSnapEventValidationError is the validation error returned by
// ByoSnapEvent.Validate if the designated constraints aren't met.
type ByoSnapEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ByoSnapEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ByoSnapEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ByoSnapEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ByoSnapEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ByoSnapEventValidationError) ErrorName() string { return "ByoSnapEventValidationError" }

// Error satisfies the builtin error interface
func (e ByoSnapEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sByoSnapEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ByoSnapEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ByoSnapEventValidationError{}

// Validate checks the field values on RegisterByoEventTypesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterByoEventTypesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterByoEventTypesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterByoEventTypesRequestMultiError, or nil if none found.
func (m *RegisterByoEventTypesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterByoEventTypesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetByosnapId()) > 100 {
		err := RegisterByoEventTypesRequestValidationError{
			field:  "ByosnapId",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RegisterByoEventTypesRequest_ByosnapId_Pattern.MatchString(m.GetByosnapId()) {
		err := RegisterByoEventTypesRequestValidationError{
			field:  "ByosnapId",
			reason: "value does not match regex pattern \"(?i)^[a-z]([a-z0-9-_]*[a-z0-9])?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetEventTypes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RegisterByoEventTypesRequestValidationError{
						field:  fmt.Sprintf("EventTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RegisterByoEventTypesRequestValidationError{
						field:  fmt.Sprintf("EventTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RegisterByoEventTypesRequestValidationError{
					field:  fmt.Sprintf("EventTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RegisterByoEventTypesRequestMultiError(errors)
	}

	return nil
}

// RegisterByoEventTypesRequestMultiError is an error wrapping multiple
// validation errors returned by RegisterByoEventTypesRequest.ValidateAll() if
// the designated constraints aren't met.
type RegisterByoEventTypesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterByoEventTypesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterByoEventTypesRequestMultiError) AllErrors() []error { return m }

// RegisterByoEventTypesRequestValidationError is the validation error returned
// by RegisterByoEventTypesRequest.Validate if the designated constraints
// aren't met.
type RegisterByoEventTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterByoEventTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterByoEventTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterByoEventTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterByoEventTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterByoEventTypesRequestValidationError) ErrorName() string {
	return "RegisterByoEventTypesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterByoEventTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterByoEventTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterByoEventTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterByoEventTypesRequestValidationError{}

var _RegisterByoEventTypesRequest_ByosnapId_Pattern = regexp.MustCompile("(?i)^[a-z]([a-z0-9-_]*[a-z0-9])?$")

// Validate checks the field values on RegisterByoEventTypesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterByoEventTypesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterByoEventTypesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RegisterByoEventTypesResponseMultiError, or nil if none found.
func (m *RegisterByoEventTypesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterByoEventTypesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RegisterByoEventTypesResponseMultiError(errors)
	}

	return nil
}

// RegisterByoEventTypesResponseMultiError is an error wrapping multiple
// validation errors returned by RegisterByoEventTypesResponse.ValidateAll()
// if the designated constraints aren't met.
type RegisterByoEventTypesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterByoEventTypesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterByoEventTypesResponseMultiError) AllErrors() []error { return m }

// RegisterByoEventTypesResponseValidationError is the validation error
// returned by RegisterByoEventTypesResponse.Validate if the designated
// constraints aren't met.
type RegisterByoEventTypesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterByoEventTypesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterByoEventTypesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterByoEventTypesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterByoEventTypesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterByoEventTypesResponseValidationError) ErrorName() string {
	return "RegisterByoEventTypesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterByoEventTypesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterByoEventTypesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterByoEventTypesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterByoEventTypesResponseValidationError{}

// Validate checks the field values on PublishByoEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishByoEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishByoEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishByoEventRequestMultiError, or nil if none found.
func (m *PublishByoEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishByoEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetByosnapId()); l < 1 || l > 100 {
		err := PublishByoEventRequestValidationError{
			field:  "ByosnapId",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_PublishByoEventRequest_ByosnapId_Pattern.MatchString(m.GetByosnapId()) {
		err := PublishByoEventRequestValidationError{
			field:  "ByosnapId",
			reason: "value does not match regex pattern \"(?i)^[a-z]([a-z0-9-_]*[a-z0-9])?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetSubject()); l < 1 || l > 100 {
		err := PublishByoEventRequestValidationError{
			field:  "Subject",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_PublishByoEventRequest_Subject_Pattern.MatchString(m.GetSubject()) {
		err := PublishByoEventRequestValidationError{
			field:  "Subject",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9-_.]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEventTypeId() <= 0 {
		err := PublishByoEventRequestValidationError{
			field:  "EventTypeId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRecipients()) > 100 {
		err := PublishByoEventRequestValidationError{
			field:  "Recipients",
			reason: "value must contain no more than 100 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRecipients() {
		_, _ = idx, item

		if l := utf8.RuneCountInString(item); l < 1 || l > 50 {
			err := PublishByoEventRequestValidationError{
				field:  fmt.Sprintf("Recipients[%v]", idx),
				reason: "value length must be between 1 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishByoEventRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishByoEventRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishByoEventRequestValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetPayload()) > 1048576 {
		err := PublishByoEventRequestValidationError{
			field:  "Payload",
			reason: "value length must be at most 1048576 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PublishByoEventRequestMultiError(errors)
	}

	return nil
}

// PublishByoEventRequestMultiError is an error wrapping multiple validation
// errors returned by PublishByoEventRequest.ValidateAll() if the designated
// constraints aren't met.
type PublishByoEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishByoEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishByoEventRequestMultiError) AllErrors() []error { return m }

// PublishByoEventRequestValidationError is the validation error returned by
// PublishByoEventRequest.Validate if the designated constraints aren't met.
type PublishByoEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishByoEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishByoEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishByoEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishByoEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishByoEventRequestValidationError) ErrorName() string {
	return "PublishByoEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublishByoEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishByoEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishByoEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishByoEventRequestValidationError{}

var _PublishByoEventRequest_ByosnapId_Pattern = regexp.MustCompile("(?i)^[a-z]([a-z0-9-_]*[a-z0-9])?$")

var _PublishByoEventRequest_Subject_Pattern = regexp.MustCompile("^[a-zA-Z0-9-_.]+$")

// Validate checks the field values on PublishByoEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishByoEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishByoEventResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishByoEventResponseMultiError, or nil if none found.
func (m *PublishByoEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishByoEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sequence

	if len(errors) > 0 {
		return PublishByoEventResponseMultiError(errors)
	}

	return nil
}

// PublishByoEventResponseMultiError is an error wrapping multiple validation
// errors returned by PublishByoEventResponse.ValidateAll() if the designated
// constraints aren't met.
type PublishByoEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishByoEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishByoEventResponseMultiError) AllErrors() []error { return m }

// PublishByoEventResponseValidationError is the validation error returned by
// PublishByoEventResponse.Validate if the designated constraints aren't met.
type PublishByoEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishByoEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishByoEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishByoEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishByoEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishByoEventResponseValidationError) ErrorName() string {
	return "PublishByoEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublishByoEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishByoEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishByoEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishByoEventResponseValidationError{}
