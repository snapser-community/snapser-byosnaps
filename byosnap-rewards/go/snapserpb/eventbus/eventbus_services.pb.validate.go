// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: eventbus_services.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SettingsImportExportData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SettingsImportExportData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SettingsImportExportData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SettingsImportExportDataMultiError, or nil if none found.
func (m *SettingsImportExportData) ValidateAll() error {
	return m.validate(true)
}

func (m *SettingsImportExportData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SettingsImportExportDataValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SettingsImportExportDataValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SettingsImportExportDataValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ExportedAt

	if len(errors) > 0 {
		return SettingsImportExportDataMultiError(errors)
	}

	return nil
}

// SettingsImportExportDataMultiError is an error wrapping multiple validation
// errors returned by SettingsImportExportData.ValidateAll() if the designated
// constraints aren't met.
type SettingsImportExportDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SettingsImportExportDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SettingsImportExportDataMultiError) AllErrors() []error { return m }

// SettingsImportExportDataValidationError is the validation error returned by
// SettingsImportExportData.Validate if the designated constraints aren't met.
type SettingsImportExportDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingsImportExportDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingsImportExportDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingsImportExportDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettingsImportExportDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingsImportExportDataValidationError) ErrorName() string {
	return "SettingsImportExportDataValidationError"
}

// Error satisfies the builtin error interface
func (e SettingsImportExportDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettingsImportExportData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingsImportExportDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettingsImportExportDataValidationError{}

// Validate checks the field values on EventbusSettings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EventbusSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventbusSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EventbusSettingsMultiError, or nil if none found.
func (m *EventbusSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *EventbusSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConsumers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventbusSettingsValidationError{
						field:  fmt.Sprintf("Consumers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventbusSettingsValidationError{
						field:  fmt.Sprintf("Consumers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventbusSettingsValidationError{
					field:  fmt.Sprintf("Consumers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EventbusSettingsMultiError(errors)
	}

	return nil
}

// EventbusSettingsMultiError is an error wrapping multiple validation errors
// returned by EventbusSettings.ValidateAll() if the designated constraints
// aren't met.
type EventbusSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventbusSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventbusSettingsMultiError) AllErrors() []error { return m }

// EventbusSettingsValidationError is the validation error returned by
// EventbusSettings.Validate if the designated constraints aren't met.
type EventbusSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventbusSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventbusSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventbusSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventbusSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventbusSettingsValidationError) ErrorName() string { return "EventbusSettingsValidationError" }

// Error satisfies the builtin error interface
func (e EventbusSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventbusSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventbusSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventbusSettingsValidationError{}

// Validate checks the field values on MultiEnvEventbusSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MultiEnvEventbusSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MultiEnvEventbusSettings with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MultiEnvEventbusSettingsMultiError, or nil if none found.
func (m *MultiEnvEventbusSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *MultiEnvEventbusSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDev()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MultiEnvEventbusSettingsValidationError{
					field:  "Dev",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MultiEnvEventbusSettingsValidationError{
					field:  "Dev",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDev()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MultiEnvEventbusSettingsValidationError{
				field:  "Dev",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MultiEnvEventbusSettingsValidationError{
					field:  "Stage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MultiEnvEventbusSettingsValidationError{
					field:  "Stage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MultiEnvEventbusSettingsValidationError{
				field:  "Stage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MultiEnvEventbusSettingsValidationError{
					field:  "Prod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MultiEnvEventbusSettingsValidationError{
					field:  "Prod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MultiEnvEventbusSettingsValidationError{
				field:  "Prod",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MultiEnvEventbusSettingsMultiError(errors)
	}

	return nil
}

// MultiEnvEventbusSettingsMultiError is an error wrapping multiple validation
// errors returned by MultiEnvEventbusSettings.ValidateAll() if the designated
// constraints aren't met.
type MultiEnvEventbusSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MultiEnvEventbusSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MultiEnvEventbusSettingsMultiError) AllErrors() []error { return m }

// MultiEnvEventbusSettingsValidationError is the validation error returned by
// MultiEnvEventbusSettings.Validate if the designated constraints aren't met.
type MultiEnvEventbusSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiEnvEventbusSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiEnvEventbusSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiEnvEventbusSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiEnvEventbusSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiEnvEventbusSettingsValidationError) ErrorName() string {
	return "MultiEnvEventbusSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e MultiEnvEventbusSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiEnvEventbusSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiEnvEventbusSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiEnvEventbusSettingsValidationError{}

// Validate checks the field values on GetEventTypesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEventTypesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEventTypesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEventTypesRequestMultiError, or nil if none found.
func (m *GetEventTypesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEventTypesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetEventTypesRequestMultiError(errors)
	}

	return nil
}

// GetEventTypesRequestMultiError is an error wrapping multiple validation
// errors returned by GetEventTypesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetEventTypesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEventTypesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEventTypesRequestMultiError) AllErrors() []error { return m }

// GetEventTypesRequestValidationError is the validation error returned by
// GetEventTypesRequest.Validate if the designated constraints aren't met.
type GetEventTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventTypesRequestValidationError) ErrorName() string {
	return "GetEventTypesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEventTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventTypesRequestValidationError{}

// Validate checks the field values on GetEventTypesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEventTypesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEventTypesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEventTypesResponseMultiError, or nil if none found.
func (m *GetEventTypesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEventTypesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEventTypes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetEventTypesResponseValidationError{
						field:  fmt.Sprintf("EventTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetEventTypesResponseValidationError{
						field:  fmt.Sprintf("EventTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEventTypesResponseValidationError{
					field:  fmt.Sprintf("EventTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetEventTypesResponseMultiError(errors)
	}

	return nil
}

// GetEventTypesResponseMultiError is an error wrapping multiple validation
// errors returned by GetEventTypesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetEventTypesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEventTypesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEventTypesResponseMultiError) AllErrors() []error { return m }

// GetEventTypesResponseValidationError is the validation error returned by
// GetEventTypesResponse.Validate if the designated constraints aren't met.
type GetEventTypesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventTypesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventTypesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventTypesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventTypesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventTypesResponseValidationError) ErrorName() string {
	return "GetEventTypesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEventTypesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventTypesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventTypesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventTypesResponseValidationError{}

// Validate checks the field values on DeleteConsumerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteConsumerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteConsumerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteConsumerRequestMultiError, or nil if none found.
func (m *DeleteConsumerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteConsumerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if _, ok := _DeleteConsumerRequest_Environment_InLookup[m.GetEnvironment()]; !ok {
		err := DeleteConsumerRequestValidationError{
			field:  "Environment",
			reason: "value must be in list [dev stage prod]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteConsumerRequestMultiError(errors)
	}

	return nil
}

// DeleteConsumerRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteConsumerRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteConsumerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteConsumerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteConsumerRequestMultiError) AllErrors() []error { return m }

// DeleteConsumerRequestValidationError is the validation error returned by
// DeleteConsumerRequest.Validate if the designated constraints aren't met.
type DeleteConsumerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteConsumerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteConsumerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteConsumerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteConsumerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteConsumerRequestValidationError) ErrorName() string {
	return "DeleteConsumerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteConsumerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteConsumerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteConsumerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteConsumerRequestValidationError{}

var _DeleteConsumerRequest_Environment_InLookup = map[string]struct{}{
	"dev":   {},
	"stage": {},
	"prod":  {},
}

// Validate checks the field values on DeleteConsumerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteConsumerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteConsumerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteConsumerResponseMultiError, or nil if none found.
func (m *DeleteConsumerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteConsumerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteConsumerResponseMultiError(errors)
	}

	return nil
}

// DeleteConsumerResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteConsumerResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteConsumerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteConsumerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteConsumerResponseMultiError) AllErrors() []error { return m }

// DeleteConsumerResponseValidationError is the validation error returned by
// DeleteConsumerResponse.Validate if the designated constraints aren't met.
type DeleteConsumerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteConsumerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteConsumerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteConsumerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteConsumerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteConsumerResponseValidationError) ErrorName() string {
	return "DeleteConsumerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteConsumerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteConsumerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteConsumerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteConsumerResponseValidationError{}

// Validate checks the field values on GetConsumersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConsumersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsumersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConsumersRequestMultiError, or nil if none found.
func (m *GetConsumersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsumersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _GetConsumersRequest_Environment_InLookup[m.GetEnvironment()]; !ok {
		err := GetConsumersRequestValidationError{
			field:  "Environment",
			reason: "value must be in list [dev stage prod]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetConsumersRequestMultiError(errors)
	}

	return nil
}

// GetConsumersRequestMultiError is an error wrapping multiple validation
// errors returned by GetConsumersRequest.ValidateAll() if the designated
// constraints aren't met.
type GetConsumersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsumersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsumersRequestMultiError) AllErrors() []error { return m }

// GetConsumersRequestValidationError is the validation error returned by
// GetConsumersRequest.Validate if the designated constraints aren't met.
type GetConsumersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsumersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsumersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsumersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsumersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsumersRequestValidationError) ErrorName() string {
	return "GetConsumersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsumersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsumersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsumersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsumersRequestValidationError{}

var _GetConsumersRequest_Environment_InLookup = map[string]struct{}{
	"dev":   {},
	"stage": {},
	"prod":  {},
}

// Validate checks the field values on GetConsumersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConsumersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsumersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConsumersResponseMultiError, or nil if none found.
func (m *GetConsumersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsumersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConsumers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetConsumersResponseValidationError{
						field:  fmt.Sprintf("Consumers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetConsumersResponseValidationError{
						field:  fmt.Sprintf("Consumers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetConsumersResponseValidationError{
					field:  fmt.Sprintf("Consumers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetConsumersResponseMultiError(errors)
	}

	return nil
}

// GetConsumersResponseMultiError is an error wrapping multiple validation
// errors returned by GetConsumersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetConsumersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsumersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsumersResponseMultiError) AllErrors() []error { return m }

// GetConsumersResponseValidationError is the validation error returned by
// GetConsumersResponse.Validate if the designated constraints aren't met.
type GetConsumersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsumersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsumersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsumersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsumersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsumersResponseValidationError) ErrorName() string {
	return "GetConsumersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsumersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsumersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsumersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsumersResponseValidationError{}

// Validate checks the field values on AddConsumerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddConsumerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddConsumerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddConsumerRequestMultiError, or nil if none found.
func (m *AddConsumerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddConsumerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if _, ok := _AddConsumerRequest_Environment_InLookup[m.GetEnvironment()]; !ok {
		err := AddConsumerRequestValidationError{
			field:  "Environment",
			reason: "value must be in list [dev stage prod]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetConsumer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddConsumerRequestValidationError{
					field:  "Consumer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddConsumerRequestValidationError{
					field:  "Consumer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConsumer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddConsumerRequestValidationError{
				field:  "Consumer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetByosnapID() != "" {

		if utf8.RuneCountInString(m.GetByosnapID()) > 100 {
			err := AddConsumerRequestValidationError{
				field:  "ByosnapID",
				reason: "value length must be at most 100 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_AddConsumerRequest_ByosnapID_Pattern.MatchString(m.GetByosnapID()) {
			err := AddConsumerRequestValidationError{
				field:  "ByosnapID",
				reason: "value does not match regex pattern \"(?i)^[a-z]([a-z0-9-_]*[a-z0-9])?$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return AddConsumerRequestMultiError(errors)
	}

	return nil
}

// AddConsumerRequestMultiError is an error wrapping multiple validation errors
// returned by AddConsumerRequest.ValidateAll() if the designated constraints
// aren't met.
type AddConsumerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddConsumerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddConsumerRequestMultiError) AllErrors() []error { return m }

// AddConsumerRequestValidationError is the validation error returned by
// AddConsumerRequest.Validate if the designated constraints aren't met.
type AddConsumerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddConsumerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddConsumerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddConsumerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddConsumerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddConsumerRequestValidationError) ErrorName() string {
	return "AddConsumerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddConsumerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddConsumerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddConsumerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddConsumerRequestValidationError{}

var _AddConsumerRequest_Environment_InLookup = map[string]struct{}{
	"dev":   {},
	"stage": {},
	"prod":  {},
}

var _AddConsumerRequest_ByosnapID_Pattern = regexp.MustCompile("(?i)^[a-z]([a-z0-9-_]*[a-z0-9])?$")

// Validate checks the field values on AddConsumerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddConsumerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddConsumerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddConsumerResponseMultiError, or nil if none found.
func (m *AddConsumerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddConsumerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConsumer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddConsumerResponseValidationError{
					field:  "Consumer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddConsumerResponseValidationError{
					field:  "Consumer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConsumer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddConsumerResponseValidationError{
				field:  "Consumer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddConsumerResponseMultiError(errors)
	}

	return nil
}

// AddConsumerResponseMultiError is an error wrapping multiple validation
// errors returned by AddConsumerResponse.ValidateAll() if the designated
// constraints aren't met.
type AddConsumerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddConsumerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddConsumerResponseMultiError) AllErrors() []error { return m }

// AddConsumerResponseValidationError is the validation error returned by
// AddConsumerResponse.Validate if the designated constraints aren't met.
type AddConsumerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddConsumerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddConsumerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddConsumerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddConsumerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddConsumerResponseValidationError) ErrorName() string {
	return "AddConsumerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddConsumerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddConsumerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddConsumerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddConsumerResponseValidationError{}

// Validate checks the field values on UpdateConsumerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConsumerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConsumerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConsumerRequestMultiError, or nil if none found.
func (m *UpdateConsumerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConsumerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if _, ok := _UpdateConsumerRequest_Environment_InLookup[m.GetEnvironment()]; !ok {
		err := UpdateConsumerRequestValidationError{
			field:  "Environment",
			reason: "value must be in list [dev stage prod]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetConsumer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateConsumerRequestValidationError{
					field:  "Consumer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateConsumerRequestValidationError{
					field:  "Consumer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConsumer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateConsumerRequestValidationError{
				field:  "Consumer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateConsumerRequestMultiError(errors)
	}

	return nil
}

// UpdateConsumerRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateConsumerRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateConsumerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConsumerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConsumerRequestMultiError) AllErrors() []error { return m }

// UpdateConsumerRequestValidationError is the validation error returned by
// UpdateConsumerRequest.Validate if the designated constraints aren't met.
type UpdateConsumerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConsumerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConsumerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConsumerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConsumerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConsumerRequestValidationError) ErrorName() string {
	return "UpdateConsumerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConsumerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConsumerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConsumerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConsumerRequestValidationError{}

var _UpdateConsumerRequest_Environment_InLookup = map[string]struct{}{
	"dev":   {},
	"stage": {},
	"prod":  {},
}

// Validate checks the field values on UpdateConsumerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConsumerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConsumerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConsumerResponseMultiError, or nil if none found.
func (m *UpdateConsumerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConsumerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConsumer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateConsumerResponseValidationError{
					field:  "Consumer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateConsumerResponseValidationError{
					field:  "Consumer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConsumer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateConsumerResponseValidationError{
				field:  "Consumer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateConsumerResponseMultiError(errors)
	}

	return nil
}

// UpdateConsumerResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateConsumerResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateConsumerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConsumerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConsumerResponseMultiError) AllErrors() []error { return m }

// UpdateConsumerResponseValidationError is the validation error returned by
// UpdateConsumerResponse.Validate if the designated constraints aren't met.
type UpdateConsumerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConsumerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConsumerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConsumerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConsumerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConsumerResponseValidationError) ErrorName() string {
	return "UpdateConsumerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConsumerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConsumerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConsumerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConsumerResponseValidationError{}

// Validate checks the field values on Consumer with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Consumer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Consumer with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConsumerMultiError, or nil
// if none found.
func (m *Consumer) ValidateAll() error {
	return m.validate(true)
}

func (m *Consumer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	switch m.ConsumerType.(type) {

	case *Consumer_Webhook:

		if all {
			switch v := interface{}(m.GetWebhook()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConsumerValidationError{
						field:  "Webhook",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConsumerValidationError{
						field:  "Webhook",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWebhook()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConsumerValidationError{
					field:  "Webhook",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Consumer_Websocket:

		if all {
			switch v := interface{}(m.GetWebsocket()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConsumerValidationError{
						field:  "Websocket",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConsumerValidationError{
						field:  "Websocket",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWebsocket()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConsumerValidationError{
					field:  "Websocket",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConsumerMultiError(errors)
	}

	return nil
}

// ConsumerMultiError is an error wrapping multiple validation errors returned
// by Consumer.ValidateAll() if the designated constraints aren't met.
type ConsumerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsumerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsumerMultiError) AllErrors() []error { return m }

// ConsumerValidationError is the validation error returned by
// Consumer.Validate if the designated constraints aren't met.
type ConsumerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsumerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsumerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsumerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsumerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsumerValidationError) ErrorName() string { return "ConsumerValidationError" }

// Error satisfies the builtin error interface
func (e ConsumerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsumer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsumerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsumerValidationError{}

// Validate checks the field values on WebhookConsumer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WebhookConsumer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WebhookConsumer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WebhookConsumerMultiError, or nil if none found.
func (m *WebhookConsumer) ValidateAll() error {
	return m.validate(true)
}

func (m *WebhookConsumer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ConsumerId

	// no validation rules for Url

	// no validation rules for Secret

	if all {
		switch v := interface{}(m.GetLastRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WebhookConsumerValidationError{
					field:  "LastRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WebhookConsumerValidationError{
					field:  "LastRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WebhookConsumerValidationError{
				field:  "LastRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WebhookConsumerMultiError(errors)
	}

	return nil
}

// WebhookConsumerMultiError is an error wrapping multiple validation errors
// returned by WebhookConsumer.ValidateAll() if the designated constraints
// aren't met.
type WebhookConsumerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebhookConsumerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebhookConsumerMultiError) AllErrors() []error { return m }

// WebhookConsumerValidationError is the validation error returned by
// WebhookConsumer.Validate if the designated constraints aren't met.
type WebhookConsumerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebhookConsumerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebhookConsumerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebhookConsumerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebhookConsumerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebhookConsumerValidationError) ErrorName() string { return "WebhookConsumerValidationError" }

// Error satisfies the builtin error interface
func (e WebhookConsumerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebhookConsumer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebhookConsumerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebhookConsumerValidationError{}

// Validate checks the field values on WebsocketConsumer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WebsocketConsumer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WebsocketConsumer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WebsocketConsumerMultiError, or nil if none found.
func (m *WebsocketConsumer) ValidateAll() error {
	return m.validate(true)
}

func (m *WebsocketConsumer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return WebsocketConsumerMultiError(errors)
	}

	return nil
}

// WebsocketConsumerMultiError is an error wrapping multiple validation errors
// returned by WebsocketConsumer.ValidateAll() if the designated constraints
// aren't met.
type WebsocketConsumerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebsocketConsumerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebsocketConsumerMultiError) AllErrors() []error { return m }

// WebsocketConsumerValidationError is the validation error returned by
// WebsocketConsumer.Validate if the designated constraints aren't met.
type WebsocketConsumerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebsocketConsumerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebsocketConsumerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebsocketConsumerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebsocketConsumerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebsocketConsumerValidationError) ErrorName() string {
	return "WebsocketConsumerValidationError"
}

// Error satisfies the builtin error interface
func (e WebsocketConsumerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebsocketConsumer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebsocketConsumerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebsocketConsumerValidationError{}

// Validate checks the field values on WebhookRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WebhookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WebhookRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WebhookRequestMultiError,
// or nil if none found.
func (m *WebhookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WebhookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ConsumerId

	// no validation rules for Date

	// no validation rules for Url

	// no validation rules for ResponseCode

	// no validation rules for ResponseBody

	// no validation rules for Err

	// no validation rules for DurationMillis

	if len(errors) > 0 {
		return WebhookRequestMultiError(errors)
	}

	return nil
}

// WebhookRequestMultiError is an error wrapping multiple validation errors
// returned by WebhookRequest.ValidateAll() if the designated constraints
// aren't met.
type WebhookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebhookRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebhookRequestMultiError) AllErrors() []error { return m }

// WebhookRequestValidationError is the validation error returned by
// WebhookRequest.Validate if the designated constraints aren't met.
type WebhookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebhookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebhookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebhookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebhookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebhookRequestValidationError) ErrorName() string { return "WebhookRequestValidationError" }

// Error satisfies the builtin error interface
func (e WebhookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebhookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebhookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebhookRequestValidationError{}

// Validate checks the field values on EventConsumersChanged with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EventConsumersChanged) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventConsumersChanged with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EventConsumersChangedMultiError, or nil if none found.
func (m *EventConsumersChanged) ValidateAll() error {
	return m.validate(true)
}

func (m *EventConsumersChanged) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConsumers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventConsumersChangedValidationError{
						field:  fmt.Sprintf("Consumers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventConsumersChangedValidationError{
						field:  fmt.Sprintf("Consumers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventConsumersChangedValidationError{
					field:  fmt.Sprintf("Consumers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EventConsumersChangedMultiError(errors)
	}

	return nil
}

// EventConsumersChangedMultiError is an error wrapping multiple validation
// errors returned by EventConsumersChanged.ValidateAll() if the designated
// constraints aren't met.
type EventConsumersChangedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventConsumersChangedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventConsumersChangedMultiError) AllErrors() []error { return m }

// EventConsumersChangedValidationError is the validation error returned by
// EventConsumersChanged.Validate if the designated constraints aren't met.
type EventConsumersChangedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventConsumersChangedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventConsumersChangedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventConsumersChangedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventConsumersChangedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventConsumersChangedValidationError) ErrorName() string {
	return "EventConsumersChangedValidationError"
}

// Error satisfies the builtin error interface
func (e EventConsumersChangedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventConsumersChanged.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventConsumersChangedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventConsumersChangedValidationError{}

// Validate checks the field values on GetUserDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserDataRequestMultiError, or nil if none found.
func (m *GetUserDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 50 {
		err := GetUserDataRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetUserDataRequest_UserId_Pattern.MatchString(m.GetUserId()) {
		err := GetUserDataRequestValidationError{
			field:  "UserId",
			reason: "value does not match regex pattern \"(?i)^[a-z0-9-_]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserDataRequestMultiError(errors)
	}

	return nil
}

// GetUserDataRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserDataRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserDataRequestMultiError) AllErrors() []error { return m }

// GetUserDataRequestValidationError is the validation error returned by
// GetUserDataRequest.Validate if the designated constraints aren't met.
type GetUserDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserDataRequestValidationError) ErrorName() string {
	return "GetUserDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserDataRequestValidationError{}

var _GetUserDataRequest_UserId_Pattern = regexp.MustCompile("(?i)^[a-z0-9-_]*$")

// Validate checks the field values on GetUserDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserDataResponseMultiError, or nil if none found.
func (m *GetUserDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserDataResponseMultiError(errors)
	}

	return nil
}

// GetUserDataResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserDataResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserDataResponseMultiError) AllErrors() []error { return m }

// GetUserDataResponseValidationError is the validation error returned by
// GetUserDataResponse.Validate if the designated constraints aren't met.
type GetUserDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserDataResponseValidationError) ErrorName() string {
	return "GetUserDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserDataResponseValidationError{}

// Validate checks the field values on DeleteUserDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserDataRequestMultiError, or nil if none found.
func (m *DeleteUserDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 50 {
		err := DeleteUserDataRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DeleteUserDataRequest_UserId_Pattern.MatchString(m.GetUserId()) {
		err := DeleteUserDataRequestValidationError{
			field:  "UserId",
			reason: "value does not match regex pattern \"(?i)^[a-z0-9-_]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteUserDataRequestMultiError(errors)
	}

	return nil
}

// DeleteUserDataRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteUserDataRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserDataRequestMultiError) AllErrors() []error { return m }

// DeleteUserDataRequestValidationError is the validation error returned by
// DeleteUserDataRequest.Validate if the designated constraints aren't met.
type DeleteUserDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserDataRequestValidationError) ErrorName() string {
	return "DeleteUserDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserDataRequestValidationError{}

var _DeleteUserDataRequest_UserId_Pattern = regexp.MustCompile("(?i)^[a-z0-9-_]*$")

// Validate checks the field values on DeleteUserDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserDataResponseMultiError, or nil if none found.
func (m *DeleteUserDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteUserDataResponseMultiError(errors)
	}

	return nil
}

// DeleteUserDataResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteUserDataResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserDataResponseMultiError) AllErrors() []error { return m }

// DeleteUserDataResponseValidationError is the validation error returned by
// DeleteUserDataResponse.Validate if the designated constraints aren't met.
type DeleteUserDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserDataResponseValidationError) ErrorName() string {
	return "DeleteUserDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserDataResponseValidationError{}
