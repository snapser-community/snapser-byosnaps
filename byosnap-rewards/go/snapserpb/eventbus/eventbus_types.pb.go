// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v5.26.1
// source: eventbus_types.proto

package proto

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageType int32

const (
	MessageType_MESSAGE_TYPE_UNSPECIFIED MessageType = 0
	MessageType_MESSAGE_TYPE_SNAP_EVENT  MessageType = 1
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "MESSAGE_TYPE_UNSPECIFIED",
		1: "MESSAGE_TYPE_SNAP_EVENT",
	}
	MessageType_value = map[string]int32{
		"MESSAGE_TYPE_UNSPECIFIED": 0,
		"MESSAGE_TYPE_SNAP_EVENT":  1,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_eventbus_types_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_eventbus_types_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_eventbus_types_proto_rawDescGZIP(), []int{0}
}

type EventTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventTypes []*SnapserEventType `protobuf:"bytes,1,rep,name=event_types,json=eventTypes,proto3" json:"event_types,omitempty"`
}

func (x *EventTypes) Reset() {
	*x = EventTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventbus_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTypes) ProtoMessage() {}

func (x *EventTypes) ProtoReflect() protoreflect.Message {
	mi := &file_eventbus_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTypes.ProtoReflect.Descriptor instead.
func (*EventTypes) Descriptor() ([]byte, []int) {
	return file_eventbus_types_proto_rawDescGZIP(), []int{0}
}

func (x *EventTypes) GetEventTypes() []*SnapserEventType {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

// SnapserEventType describes a "message" event type, this is what SnapserEvent will have as a payload
// 99% of the time.
type SnapserEventType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Service that this event is associated with. Along with event_type_id and the event type enum
	// located in the service proto this is used to unmarshal the event payload
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// NATS subject for the event type like "auth.anon.user.added". This must be unique across all services.
	// This is 1:1 with proto message events like EventAuthAnonUserAdded
	Subject string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	// A short one line description used to describe when the event is fired.
	// This is used initially in the admin UI when selecting events.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Unsure if this will be used, but this will contain a string that can be used to
	// identify the message type, i.e., "auth.EventAuthAnonUserAdded" - which corresponds to the
	// EventAuthAnonUserAdded  message in the auth package
	// It may be useful for clients that aren't fully implementing protobuf Any
	MessageType string `protobuf:"bytes,4,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	// The index value of the enum in the proto file. This is used to identify the event type
	EventTypeEnumValue uint32 `protobuf:"varint,5,opt,name=event_type_enum_value,json=eventTypeEnumValue,proto3" json:"event_type_enum_value,omitempty"`
}

func (x *SnapserEventType) Reset() {
	*x = SnapserEventType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventbus_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapserEventType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapserEventType) ProtoMessage() {}

func (x *SnapserEventType) ProtoReflect() protoreflect.Message {
	mi := &file_eventbus_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapserEventType.ProtoReflect.Descriptor instead.
func (*SnapserEventType) Descriptor() ([]byte, []int) {
	return file_eventbus_types_proto_rawDescGZIP(), []int{1}
}

func (x *SnapserEventType) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *SnapserEventType) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *SnapserEventType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SnapserEventType) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *SnapserEventType) GetEventTypeEnumValue() uint32 {
	if x != nil {
		return x.EventTypeEnumValue
	}
	return 0
}

// Outgoing message wrapper
type ByoWebhookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// allows the client to easily route the message to the correct subsystem
	MessageType MessageType `protobuf:"varint,1,opt,name=message_type,json=messageType,proto3,enum=eventbus.MessageType" json:"message_type,omitempty"`
	// server time when the message was sent
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// outgoing payload
	//
	// Types that are assignable to Message:
	//
	//	*ByoWebhookRequest_ByoSnapEvent
	Message isByoWebhookRequest_Message `protobuf_oneof:"message"`
}

func (x *ByoWebhookRequest) Reset() {
	*x = ByoWebhookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventbus_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByoWebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByoWebhookRequest) ProtoMessage() {}

func (x *ByoWebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventbus_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByoWebhookRequest.ProtoReflect.Descriptor instead.
func (*ByoWebhookRequest) Descriptor() ([]byte, []int) {
	return file_eventbus_types_proto_rawDescGZIP(), []int{2}
}

func (x *ByoWebhookRequest) GetMessageType() MessageType {
	if x != nil {
		return x.MessageType
	}
	return MessageType_MESSAGE_TYPE_UNSPECIFIED
}

func (x *ByoWebhookRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (m *ByoWebhookRequest) GetMessage() isByoWebhookRequest_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ByoWebhookRequest) GetByoSnapEvent() *ByoSnapEvent {
	if x, ok := x.GetMessage().(*ByoWebhookRequest_ByoSnapEvent); ok {
		return x.ByoSnapEvent
	}
	return nil
}

type isByoWebhookRequest_Message interface {
	isByoWebhookRequest_Message()
}

type ByoWebhookRequest_ByoSnapEvent struct {
	ByoSnapEvent *ByoSnapEvent `protobuf:"bytes,10,opt,name=byo_snap_event,json=byoSnapEvent,proto3,oneof"`
}

func (*ByoWebhookRequest_ByoSnapEvent) isByoWebhookRequest_Message() {}

type ByoSnapEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId     uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	Payload     []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *ByoSnapEvent) Reset() {
	*x = ByoSnapEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventbus_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByoSnapEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByoSnapEvent) ProtoMessage() {}

func (x *ByoSnapEvent) ProtoReflect() protoreflect.Message {
	mi := &file_eventbus_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByoSnapEvent.ProtoReflect.Descriptor instead.
func (*ByoSnapEvent) Descriptor() ([]byte, []int) {
	return file_eventbus_types_proto_rawDescGZIP(), []int{3}
}

func (x *ByoSnapEvent) GetEventId() uint32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *ByoSnapEvent) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ByoSnapEvent) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type RegisterByoEventTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path param
	ByosnapId  string              `protobuf:"bytes,1,opt,name=byosnap_id,json=byosnapId,proto3" json:"byosnap_id,omitempty"`
	EventTypes []*SnapserEventType `protobuf:"bytes,2,rep,name=event_types,json=eventTypes,proto3" json:"event_types,omitempty"`
}

func (x *RegisterByoEventTypesRequest) Reset() {
	*x = RegisterByoEventTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventbus_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterByoEventTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterByoEventTypesRequest) ProtoMessage() {}

func (x *RegisterByoEventTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventbus_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterByoEventTypesRequest.ProtoReflect.Descriptor instead.
func (*RegisterByoEventTypesRequest) Descriptor() ([]byte, []int) {
	return file_eventbus_types_proto_rawDescGZIP(), []int{4}
}

func (x *RegisterByoEventTypesRequest) GetByosnapId() string {
	if x != nil {
		return x.ByosnapId
	}
	return ""
}

func (x *RegisterByoEventTypesRequest) GetEventTypes() []*SnapserEventType {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

type RegisterByoEventTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *RegisterByoEventTypesResponse) Reset() {
	*x = RegisterByoEventTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventbus_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterByoEventTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterByoEventTypesResponse) ProtoMessage() {}

func (x *RegisterByoEventTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eventbus_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterByoEventTypesResponse.ProtoReflect.Descriptor instead.
func (*RegisterByoEventTypesResponse) Descriptor() ([]byte, []int) {
	return file_eventbus_types_proto_rawDescGZIP(), []int{5}
}

func (x *RegisterByoEventTypesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type PublishByoEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ByosnapId string `protobuf:"bytes,1,opt,name=byosnap_id,json=byosnapId,proto3" json:"byosnap_id,omitempty"`
	Subject   string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	// A positive number that can be used to identify the payload.
	EventTypeId uint32     `protobuf:"varint,3,opt,name=event_type_id,json=eventTypeId,proto3" json:"event_type_id,omitempty"`
	Recipients  []string   `protobuf:"bytes,4,rep,name=recipients,proto3" json:"recipients,omitempty"`
	Message     *anypb.Any `protobuf:"bytes,10,opt,name=message,proto3" json:"message,omitempty"`
	Payload     []byte     `protobuf:"bytes,11,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *PublishByoEventRequest) Reset() {
	*x = PublishByoEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventbus_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishByoEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishByoEventRequest) ProtoMessage() {}

func (x *PublishByoEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventbus_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishByoEventRequest.ProtoReflect.Descriptor instead.
func (*PublishByoEventRequest) Descriptor() ([]byte, []int) {
	return file_eventbus_types_proto_rawDescGZIP(), []int{6}
}

func (x *PublishByoEventRequest) GetByosnapId() string {
	if x != nil {
		return x.ByosnapId
	}
	return ""
}

func (x *PublishByoEventRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *PublishByoEventRequest) GetEventTypeId() uint32 {
	if x != nil {
		return x.EventTypeId
	}
	return 0
}

func (x *PublishByoEventRequest) GetRecipients() []string {
	if x != nil {
		return x.Recipients
	}
	return nil
}

func (x *PublishByoEventRequest) GetMessage() *anypb.Any {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *PublishByoEventRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type PublishByoEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *PublishByoEventResponse) Reset() {
	*x = PublishByoEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventbus_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishByoEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishByoEventResponse) ProtoMessage() {}

func (x *PublishByoEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eventbus_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishByoEventResponse.ProtoReflect.Descriptor instead.
func (*PublishByoEventResponse) Descriptor() ([]byte, []int) {
	return file_eventbus_types_proto_rawDescGZIP(), []int{7}
}

func (x *PublishByoEventResponse) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

var File_eventbus_types_proto protoreflect.FileDescriptor

var file_eventbus_types_proto_rawDesc = []byte{
	0x0a, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x62, 0x75, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x62, 0x75, 0x73,
	0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x49, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x62, 0x75, 0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x22, 0xc7, 0x01, 0x0a, 0x10, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x11, 0x42,
	0x79, 0x6f, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x62, 0x75,
	0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3e, 0x0a, 0x0e, 0x62, 0x79, 0x6f, 0x5f,
	0x73, 0x6e, 0x61, 0x70, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x62, 0x75, 0x73, 0x2e, 0x42, 0x79, 0x6f, 0x53,
	0x6e, 0x61, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x79, 0x6f, 0x53,
	0x6e, 0x61, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x66, 0x0a, 0x0c, 0x42, 0x79, 0x6f, 0x53, 0x6e, 0x61, 0x70, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x1c,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x79, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x0a,
	0x62, 0x79, 0x6f, 0x73, 0x6e, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4b, 0x92, 0x41, 0x18, 0x32, 0x12, 0x41, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x42,
	0x59, 0x4f, 0x53, 0x6e, 0x61, 0x70, 0x20, 0x49, 0x44, 0x9a, 0x02, 0x01, 0x07, 0xfa, 0x42, 0x2d,
	0x72, 0x2b, 0x10, 0x01, 0x18, 0x64, 0x32, 0x25, 0x5e, 0x62, 0x79, 0x6f, 0x73, 0x6e, 0x61, 0x70,
	0x2d, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f,
	0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x52, 0x09, 0x62,
	0x79, 0x6f, 0x73, 0x6e, 0x61, 0x70, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x62, 0x75, 0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x39, 0x0a, 0x1d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x42, 0x79, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0xfc, 0x05, 0x0a, 0x16, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x42, 0x79, 0x6f, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xc8, 0x01, 0x0a, 0x0a,
	0x62, 0x79, 0x6f, 0x73, 0x6e, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0xa8, 0x01, 0x92, 0x41, 0x72, 0x32, 0x6c, 0x41, 0x20, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x20,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x69,
	0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x20,
	0x54, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x60, 0x62, 0x79, 0x6f, 0x73, 0x6e, 0x61, 0x70, 0x2d, 0x60, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x42, 0x59, 0x4f,
	0x53, 0x6e, 0x61, 0x70, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x2d, 0x72, 0x2b,
	0x10, 0x01, 0x18, 0x64, 0x32, 0x25, 0x5e, 0x62, 0x79, 0x6f, 0x73, 0x6e, 0x61, 0x70, 0x2d, 0x5b,
	0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a,
	0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x52, 0x09, 0x62, 0x79, 0x6f,
	0x73, 0x6e, 0x61, 0x70, 0x49, 0x64, 0x12, 0xa8, 0x01, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x8d, 0x01, 0x92, 0x41, 0x6b, 0x32, 0x65,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x20, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x20, 0x41, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x20, 0x6f,
	0x66, 0x20, 0x60, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2e, 0x62, 0x79, 0x6f, 0x2e, 0x7b,
	0x62, 0x79, 0x6f, 0x73, 0x6e, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x60, 0x20, 0x69, 0x73, 0x20,
	0x61, 0x64, 0x64, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x19, 0x72,
	0x17, 0x10, 0x01, 0x18, 0x64, 0x32, 0x11, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30,
	0x2d, 0x39, 0x2d, 0x5f, 0x2e, 0x5d, 0x2b, 0x24, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x6e, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4a, 0x92, 0x41, 0x40, 0x32, 0x3a, 0x41,
	0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x64, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x9a, 0x02, 0x01, 0x03, 0xfa, 0x42, 0x04,
	0x2a, 0x02, 0x20, 0x00, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x12, 0x7a, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x5a, 0x92, 0x41, 0x47, 0x32, 0x41, 0x55, 0x73, 0x65, 0x72,
	0x2f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x49, 0x44, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74,
	0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x79, 0x20,
	0x61, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x9a, 0x02, 0x01,
	0x01, 0xfa, 0x42, 0x0d, 0x92, 0x01, 0x0a, 0x10, 0x64, 0x22, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18,
	0x32, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x50, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x36,
	0x92, 0x41, 0x2a, 0x32, 0x28, 0x54, 0x68, 0x65, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73, 0xfa, 0x42, 0x06,
	0x7a, 0x04, 0x18, 0x80, 0x80, 0x40, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0x86, 0x01, 0x0a, 0x17, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x42, 0x79, 0x6f, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x4f, 0x92,
	0x41, 0x4c, 0x32, 0x46, 0x54, 0x68, 0x65, 0x20, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x73, 0x20, 0x61, 0x74, 0x20, 0x31, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x67, 0x69, 0x76,
	0x65, 0x6e, 0x20, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2a, 0x48, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x10, 0x01, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x62, 0x75,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eventbus_types_proto_rawDescOnce sync.Once
	file_eventbus_types_proto_rawDescData = file_eventbus_types_proto_rawDesc
)

func file_eventbus_types_proto_rawDescGZIP() []byte {
	file_eventbus_types_proto_rawDescOnce.Do(func() {
		file_eventbus_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_eventbus_types_proto_rawDescData)
	})
	return file_eventbus_types_proto_rawDescData
}

var file_eventbus_types_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_eventbus_types_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_eventbus_types_proto_goTypes = []interface{}{
	(MessageType)(0),                      // 0: eventbus.MessageType
	(*EventTypes)(nil),                    // 1: eventbus.EventTypes
	(*SnapserEventType)(nil),              // 2: eventbus.SnapserEventType
	(*ByoWebhookRequest)(nil),             // 3: eventbus.ByoWebhookRequest
	(*ByoSnapEvent)(nil),                  // 4: eventbus.ByoSnapEvent
	(*RegisterByoEventTypesRequest)(nil),  // 5: eventbus.RegisterByoEventTypesRequest
	(*RegisterByoEventTypesResponse)(nil), // 6: eventbus.RegisterByoEventTypesResponse
	(*PublishByoEventRequest)(nil),        // 7: eventbus.PublishByoEventRequest
	(*PublishByoEventResponse)(nil),       // 8: eventbus.PublishByoEventResponse
	(*anypb.Any)(nil),                     // 9: google.protobuf.Any
}
var file_eventbus_types_proto_depIdxs = []int32{
	2, // 0: eventbus.EventTypes.event_types:type_name -> eventbus.SnapserEventType
	0, // 1: eventbus.ByoWebhookRequest.message_type:type_name -> eventbus.MessageType
	4, // 2: eventbus.ByoWebhookRequest.byo_snap_event:type_name -> eventbus.ByoSnapEvent
	2, // 3: eventbus.RegisterByoEventTypesRequest.event_types:type_name -> eventbus.SnapserEventType
	9, // 4: eventbus.PublishByoEventRequest.message:type_name -> google.protobuf.Any
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_eventbus_types_proto_init() }
func file_eventbus_types_proto_init() {
	if File_eventbus_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_eventbus_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventbus_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapserEventType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventbus_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByoWebhookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventbus_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByoSnapEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventbus_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterByoEventTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventbus_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterByoEventTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventbus_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishByoEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventbus_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishByoEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_eventbus_types_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ByoWebhookRequest_ByoSnapEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eventbus_types_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eventbus_types_proto_goTypes,
		DependencyIndexes: file_eventbus_types_proto_depIdxs,
		EnumInfos:         file_eventbus_types_proto_enumTypes,
		MessageInfos:      file_eventbus_types_proto_msgTypes,
	}.Build()
	File_eventbus_types_proto = out.File
	file_eventbus_types_proto_rawDesc = nil
	file_eventbus_types_proto_goTypes = nil
	file_eventbus_types_proto_depIdxs = nil
}
