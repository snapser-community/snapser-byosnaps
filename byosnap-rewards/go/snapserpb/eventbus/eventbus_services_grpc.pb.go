// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.1
// source: eventbus_services.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EventbusService_GetConsumers_FullMethodName           = "/eventbus.EventbusService/GetConsumers"
	EventbusService_AddConsumer_FullMethodName            = "/eventbus.EventbusService/AddConsumer"
	EventbusService_DeleteConsumer_FullMethodName         = "/eventbus.EventbusService/DeleteConsumer"
	EventbusService_UpdateConsumer_FullMethodName         = "/eventbus.EventbusService/UpdateConsumer"
	EventbusService_GetEventTypes_FullMethodName          = "/eventbus.EventbusService/GetEventTypes"
	EventbusService_GetUserData_FullMethodName            = "/eventbus.EventbusService/GetUserData"
	EventbusService_DeleteUserData_FullMethodName         = "/eventbus.EventbusService/DeleteUserData"
	EventbusService_ExportSettings_FullMethodName         = "/eventbus.EventbusService/ExportSettings"
	EventbusService_ImportSettings_FullMethodName         = "/eventbus.EventbusService/ImportSettings"
	EventbusService_ValidateImportSettings_FullMethodName = "/eventbus.EventbusService/ValidateImportSettings"
	EventbusService_RegisterEventTypes_FullMethodName     = "/eventbus.EventbusService/RegisterEventTypes"
	EventbusService_PublishEvent_FullMethodName           = "/eventbus.EventbusService/PublishEvent"
)

// EventbusServiceClient is the client API for EventbusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventbusServiceClient interface {
	GetConsumers(ctx context.Context, in *GetConsumersRequest, opts ...grpc.CallOption) (*GetConsumersResponse, error)
	AddConsumer(ctx context.Context, in *AddConsumerRequest, opts ...grpc.CallOption) (*AddConsumerResponse, error)
	DeleteConsumer(ctx context.Context, in *DeleteConsumerRequest, opts ...grpc.CallOption) (*DeleteConsumerResponse, error)
	UpdateConsumer(ctx context.Context, in *UpdateConsumerRequest, opts ...grpc.CallOption) (*UpdateConsumerResponse, error)
	GetEventTypes(ctx context.Context, in *GetEventTypesRequest, opts ...grpc.CallOption) (*GetEventTypesResponse, error)
	GetUserData(ctx context.Context, in *GetUserDataRequest, opts ...grpc.CallOption) (*GetUserDataResponse, error)
	DeleteUserData(ctx context.Context, in *DeleteUserDataRequest, opts ...grpc.CallOption) (*DeleteUserDataResponse, error)
	ExportSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SettingsImportExportData, error)
	ImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ValidateImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*SettingsImportExportData, error)
	RegisterEventTypes(ctx context.Context, in *RegisterEventTypesRequest, opts ...grpc.CallOption) (*RegisterEventTypesResponse, error)
	PublishEvent(ctx context.Context, in *PublishEventRequest, opts ...grpc.CallOption) (*PublishEventResponse, error)
}

type eventbusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventbusServiceClient(cc grpc.ClientConnInterface) EventbusServiceClient {
	return &eventbusServiceClient{cc}
}

func (c *eventbusServiceClient) GetConsumers(ctx context.Context, in *GetConsumersRequest, opts ...grpc.CallOption) (*GetConsumersResponse, error) {
	out := new(GetConsumersResponse)
	err := c.cc.Invoke(ctx, EventbusService_GetConsumers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventbusServiceClient) AddConsumer(ctx context.Context, in *AddConsumerRequest, opts ...grpc.CallOption) (*AddConsumerResponse, error) {
	out := new(AddConsumerResponse)
	err := c.cc.Invoke(ctx, EventbusService_AddConsumer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventbusServiceClient) DeleteConsumer(ctx context.Context, in *DeleteConsumerRequest, opts ...grpc.CallOption) (*DeleteConsumerResponse, error) {
	out := new(DeleteConsumerResponse)
	err := c.cc.Invoke(ctx, EventbusService_DeleteConsumer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventbusServiceClient) UpdateConsumer(ctx context.Context, in *UpdateConsumerRequest, opts ...grpc.CallOption) (*UpdateConsumerResponse, error) {
	out := new(UpdateConsumerResponse)
	err := c.cc.Invoke(ctx, EventbusService_UpdateConsumer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventbusServiceClient) GetEventTypes(ctx context.Context, in *GetEventTypesRequest, opts ...grpc.CallOption) (*GetEventTypesResponse, error) {
	out := new(GetEventTypesResponse)
	err := c.cc.Invoke(ctx, EventbusService_GetEventTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventbusServiceClient) GetUserData(ctx context.Context, in *GetUserDataRequest, opts ...grpc.CallOption) (*GetUserDataResponse, error) {
	out := new(GetUserDataResponse)
	err := c.cc.Invoke(ctx, EventbusService_GetUserData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventbusServiceClient) DeleteUserData(ctx context.Context, in *DeleteUserDataRequest, opts ...grpc.CallOption) (*DeleteUserDataResponse, error) {
	out := new(DeleteUserDataResponse)
	err := c.cc.Invoke(ctx, EventbusService_DeleteUserData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventbusServiceClient) ExportSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SettingsImportExportData, error) {
	out := new(SettingsImportExportData)
	err := c.cc.Invoke(ctx, EventbusService_ExportSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventbusServiceClient) ImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EventbusService_ImportSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventbusServiceClient) ValidateImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*SettingsImportExportData, error) {
	out := new(SettingsImportExportData)
	err := c.cc.Invoke(ctx, EventbusService_ValidateImportSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventbusServiceClient) RegisterEventTypes(ctx context.Context, in *RegisterEventTypesRequest, opts ...grpc.CallOption) (*RegisterEventTypesResponse, error) {
	out := new(RegisterEventTypesResponse)
	err := c.cc.Invoke(ctx, EventbusService_RegisterEventTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventbusServiceClient) PublishEvent(ctx context.Context, in *PublishEventRequest, opts ...grpc.CallOption) (*PublishEventResponse, error) {
	out := new(PublishEventResponse)
	err := c.cc.Invoke(ctx, EventbusService_PublishEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventbusServiceServer is the server API for EventbusService service.
// All implementations must embed UnimplementedEventbusServiceServer
// for forward compatibility
type EventbusServiceServer interface {
	GetConsumers(context.Context, *GetConsumersRequest) (*GetConsumersResponse, error)
	AddConsumer(context.Context, *AddConsumerRequest) (*AddConsumerResponse, error)
	DeleteConsumer(context.Context, *DeleteConsumerRequest) (*DeleteConsumerResponse, error)
	UpdateConsumer(context.Context, *UpdateConsumerRequest) (*UpdateConsumerResponse, error)
	GetEventTypes(context.Context, *GetEventTypesRequest) (*GetEventTypesResponse, error)
	GetUserData(context.Context, *GetUserDataRequest) (*GetUserDataResponse, error)
	DeleteUserData(context.Context, *DeleteUserDataRequest) (*DeleteUserDataResponse, error)
	ExportSettings(context.Context, *emptypb.Empty) (*SettingsImportExportData, error)
	ImportSettings(context.Context, *SettingsImportExportData) (*emptypb.Empty, error)
	ValidateImportSettings(context.Context, *SettingsImportExportData) (*SettingsImportExportData, error)
	RegisterEventTypes(context.Context, *RegisterEventTypesRequest) (*RegisterEventTypesResponse, error)
	PublishEvent(context.Context, *PublishEventRequest) (*PublishEventResponse, error)
	mustEmbedUnimplementedEventbusServiceServer()
}

// UnimplementedEventbusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventbusServiceServer struct {
}

func (UnimplementedEventbusServiceServer) GetConsumers(context.Context, *GetConsumersRequest) (*GetConsumersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsumers not implemented")
}
func (UnimplementedEventbusServiceServer) AddConsumer(context.Context, *AddConsumerRequest) (*AddConsumerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddConsumer not implemented")
}
func (UnimplementedEventbusServiceServer) DeleteConsumer(context.Context, *DeleteConsumerRequest) (*DeleteConsumerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConsumer not implemented")
}
func (UnimplementedEventbusServiceServer) UpdateConsumer(context.Context, *UpdateConsumerRequest) (*UpdateConsumerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConsumer not implemented")
}
func (UnimplementedEventbusServiceServer) GetEventTypes(context.Context, *GetEventTypesRequest) (*GetEventTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventTypes not implemented")
}
func (UnimplementedEventbusServiceServer) GetUserData(context.Context, *GetUserDataRequest) (*GetUserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserData not implemented")
}
func (UnimplementedEventbusServiceServer) DeleteUserData(context.Context, *DeleteUserDataRequest) (*DeleteUserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserData not implemented")
}
func (UnimplementedEventbusServiceServer) ExportSettings(context.Context, *emptypb.Empty) (*SettingsImportExportData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportSettings not implemented")
}
func (UnimplementedEventbusServiceServer) ImportSettings(context.Context, *SettingsImportExportData) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportSettings not implemented")
}
func (UnimplementedEventbusServiceServer) ValidateImportSettings(context.Context, *SettingsImportExportData) (*SettingsImportExportData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateImportSettings not implemented")
}
func (UnimplementedEventbusServiceServer) RegisterEventTypes(context.Context, *RegisterEventTypesRequest) (*RegisterEventTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterEventTypes not implemented")
}
func (UnimplementedEventbusServiceServer) PublishEvent(context.Context, *PublishEventRequest) (*PublishEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishEvent not implemented")
}
func (UnimplementedEventbusServiceServer) mustEmbedUnimplementedEventbusServiceServer() {}

// UnsafeEventbusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventbusServiceServer will
// result in compilation errors.
type UnsafeEventbusServiceServer interface {
	mustEmbedUnimplementedEventbusServiceServer()
}

func RegisterEventbusServiceServer(s grpc.ServiceRegistrar, srv EventbusServiceServer) {
	s.RegisterService(&EventbusService_ServiceDesc, srv)
}

func _EventbusService_GetConsumers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsumersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventbusServiceServer).GetConsumers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventbusService_GetConsumers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventbusServiceServer).GetConsumers(ctx, req.(*GetConsumersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventbusService_AddConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddConsumerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventbusServiceServer).AddConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventbusService_AddConsumer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventbusServiceServer).AddConsumer(ctx, req.(*AddConsumerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventbusService_DeleteConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConsumerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventbusServiceServer).DeleteConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventbusService_DeleteConsumer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventbusServiceServer).DeleteConsumer(ctx, req.(*DeleteConsumerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventbusService_UpdateConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConsumerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventbusServiceServer).UpdateConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventbusService_UpdateConsumer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventbusServiceServer).UpdateConsumer(ctx, req.(*UpdateConsumerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventbusService_GetEventTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventbusServiceServer).GetEventTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventbusService_GetEventTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventbusServiceServer).GetEventTypes(ctx, req.(*GetEventTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventbusService_GetUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventbusServiceServer).GetUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventbusService_GetUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventbusServiceServer).GetUserData(ctx, req.(*GetUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventbusService_DeleteUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventbusServiceServer).DeleteUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventbusService_DeleteUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventbusServiceServer).DeleteUserData(ctx, req.(*DeleteUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventbusService_ExportSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventbusServiceServer).ExportSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventbusService_ExportSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventbusServiceServer).ExportSettings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventbusService_ImportSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsImportExportData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventbusServiceServer).ImportSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventbusService_ImportSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventbusServiceServer).ImportSettings(ctx, req.(*SettingsImportExportData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventbusService_ValidateImportSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsImportExportData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventbusServiceServer).ValidateImportSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventbusService_ValidateImportSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventbusServiceServer).ValidateImportSettings(ctx, req.(*SettingsImportExportData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventbusService_RegisterEventTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterEventTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventbusServiceServer).RegisterEventTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventbusService_RegisterEventTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventbusServiceServer).RegisterEventTypes(ctx, req.(*RegisterEventTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventbusService_PublishEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventbusServiceServer).PublishEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventbusService_PublishEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventbusServiceServer).PublishEvent(ctx, req.(*PublishEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventbusService_ServiceDesc is the grpc.ServiceDesc for EventbusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventbusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eventbus.EventbusService",
	HandlerType: (*EventbusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConsumers",
			Handler:    _EventbusService_GetConsumers_Handler,
		},
		{
			MethodName: "AddConsumer",
			Handler:    _EventbusService_AddConsumer_Handler,
		},
		{
			MethodName: "DeleteConsumer",
			Handler:    _EventbusService_DeleteConsumer_Handler,
		},
		{
			MethodName: "UpdateConsumer",
			Handler:    _EventbusService_UpdateConsumer_Handler,
		},
		{
			MethodName: "GetEventTypes",
			Handler:    _EventbusService_GetEventTypes_Handler,
		},
		{
			MethodName: "GetUserData",
			Handler:    _EventbusService_GetUserData_Handler,
		},
		{
			MethodName: "DeleteUserData",
			Handler:    _EventbusService_DeleteUserData_Handler,
		},
		{
			MethodName: "ExportSettings",
			Handler:    _EventbusService_ExportSettings_Handler,
		},
		{
			MethodName: "ImportSettings",
			Handler:    _EventbusService_ImportSettings_Handler,
		},
		{
			MethodName: "ValidateImportSettings",
			Handler:    _EventbusService_ValidateImportSettings_Handler,
		},
		{
			MethodName: "RegisterEventTypes",
			Handler:    _EventbusService_RegisterEventTypes_Handler,
		},
		{
			MethodName: "PublishEvent",
			Handler:    _EventbusService_PublishEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eventbus_services.proto",
}
