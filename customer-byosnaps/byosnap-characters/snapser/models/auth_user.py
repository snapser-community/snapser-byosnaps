# coding: utf-8

"""
    characters

    Your custom SDK

    The version of the OpenAPI document: characters: v3 SDK
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint, conlist
from snapser.models.auth_login_type_type import AuthLoginTypeType

class AuthUser(BaseModel):
    """
    AuthUser
    """
    created: Optional[StrictBool] = Field(None, description="Whether user was created or not")
    created_at: Optional[conint()] = Field(None, description="Unix timestamp of when the user was created")
    first_login: Optional[conint()] = Field(None, description="Unix timestamp of when the user was first logged in")
    id: Optional[StrictStr] = Field(None, description="User ID for the user")
    is_banned: Optional[StrictBool] = Field(None, description="Whether user is banned or not")
    is_suspended: Optional[StrictBool] = Field(None, description="Whether user is suspended or not")
    is_verified: Optional[StrictBool] = Field(None, description="Whether user is verified or not")
    login_types: Optional[conlist(AuthLoginTypeType)] = Field(None, description="Login types")
    refreshed_at: Optional[conint()] = Field(None, description="Unix timestamp of when the session was last refreshed (If applicable)")
    session_token: Optional[StrictStr] = Field(None, description="Session token of the user (If applicable)")
    suspended_until: Optional[conint()] = Field(None, description="Unix timestamp of when the user is suspended until")
    tags: Optional[conlist(StrictStr)] = Field(None, description="Different tags attached to the user like flagged")
    token_validity_seconds: Optional[conint()] = Field(None, description="Validity of the token in seconds (If applicable)")
    __properties = ["created", "created_at", "first_login", "id", "is_banned", "is_suspended", "is_verified", "login_types", "refreshed_at", "session_token", "suspended_until", "tags", "token_validity_seconds"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AuthUser:
        """Create an instance of AuthUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AuthUser:
        """Create an instance of AuthUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AuthUser.parse_obj(obj)

        _obj = AuthUser.parse_obj({
            "created": obj.get("created"),
            "created_at": obj.get("created_at"),
            "first_login": obj.get("first_login"),
            "id": obj.get("id"),
            "is_banned": obj.get("is_banned"),
            "is_suspended": obj.get("is_suspended"),
            "is_verified": obj.get("is_verified"),
            "login_types": obj.get("login_types"),
            "refreshed_at": obj.get("refreshed_at"),
            "session_token": obj.get("session_token"),
            "suspended_until": obj.get("suspended_until"),
            "tags": obj.get("tags"),
            "token_validity_seconds": obj.get("token_validity_seconds")
        })
        return _obj


