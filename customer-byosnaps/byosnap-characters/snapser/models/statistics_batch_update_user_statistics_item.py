# coding: utf-8

"""
    characters

    Your custom SDK

    The version of the OpenAPI document: characters: v3 SDK
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr, conint

class StatisticsBatchUpdateUserStatisticsItem(BaseModel):
    """
    StatisticsBatchUpdateUserStatisticsItem
    """
    idx: conint() = Field(..., description="Index used to determine the order in which operations are executed")
    key: StrictStr = Field(..., description="Name of the user statistic")
    operation: StrictStr = Field(..., description="Operation to be performed (increment / set)")
    value: StrictStr = Field(..., description="Value that the statistic should be set to / incremented by")
    __properties = ["idx", "key", "operation", "value"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StatisticsBatchUpdateUserStatisticsItem:
        """Create an instance of StatisticsBatchUpdateUserStatisticsItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StatisticsBatchUpdateUserStatisticsItem:
        """Create an instance of StatisticsBatchUpdateUserStatisticsItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StatisticsBatchUpdateUserStatisticsItem.parse_obj(obj)

        _obj = StatisticsBatchUpdateUserStatisticsItem.parse_obj({
            "idx": obj.get("idx"),
            "key": obj.get("key"),
            "operation": obj.get("operation"),
            "value": obj.get("value")
        })
        return _obj


