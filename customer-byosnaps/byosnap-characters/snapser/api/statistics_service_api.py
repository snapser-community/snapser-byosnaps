# coding: utf-8

"""
    characters

    Your custom SDK

    The version of the OpenAPI document: characters: v3 SDK
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictStr, conlist

from snapser.models.batch_update_user_statistics_request import BatchUpdateUserStatisticsRequest
from snapser.models.increment_user_statistic_request import IncrementUserStatisticRequest
from snapser.models.set_user_statistic_request import SetUserStatisticRequest
from snapser.models.statistics_batch_get_user_statistics_response import StatisticsBatchGetUserStatisticsResponse
from snapser.models.statistics_batch_set_user_statistics_request import StatisticsBatchSetUserStatisticsRequest
from snapser.models.statistics_batch_set_user_statistics_response import StatisticsBatchSetUserStatisticsResponse
from snapser.models.statistics_batch_update_user_statistics_response import StatisticsBatchUpdateUserStatisticsResponse
from snapser.models.statistics_get_user_statistics_response import StatisticsGetUserStatisticsResponse
from snapser.models.statistics_is_user_in_segment_response import StatisticsIsUserInSegmentResponse
from snapser.models.statistics_user_statistic import StatisticsUserStatistic

from snapser.api_client import ApiClient
from snapser.api_response import ApiResponse
from snapser.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class StatisticsServiceApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def statistics_internal_batch_get_user_statistics(self, user_id : Annotated[conlist(StrictStr), Field(..., description="ID(s) of the user(s) to get statistics for")], gateway : Annotated[StrictStr, Field(..., description="Gateway")], **kwargs) -> StatisticsBatchGetUserStatisticsResponse:  # noqa: E501
        """User Statistics (App Auth)  # noqa: E501

        Fetches user statistics for multiple users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.statistics_internal_batch_get_user_statistics(user_id, gateway, async_req=True)
        >>> result = thread.get()

        :param user_id: ID(s) of the user(s) to get statistics for (required)
        :type user_id: List[str]
        :param gateway: Gateway (required)
        :type gateway: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: StatisticsBatchGetUserStatisticsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the statistics_internal_batch_get_user_statistics_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.statistics_internal_batch_get_user_statistics_with_http_info(user_id, gateway, **kwargs)  # noqa: E501

    @validate_arguments
    def statistics_internal_batch_get_user_statistics_with_http_info(self, user_id : Annotated[conlist(StrictStr), Field(..., description="ID(s) of the user(s) to get statistics for")], gateway : Annotated[StrictStr, Field(..., description="Gateway")], **kwargs) -> ApiResponse:  # noqa: E501
        """User Statistics (App Auth)  # noqa: E501

        Fetches user statistics for multiple users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.statistics_internal_batch_get_user_statistics_with_http_info(user_id, gateway, async_req=True)
        >>> result = thread.get()

        :param user_id: ID(s) of the user(s) to get statistics for (required)
        :type user_id: List[str]
        :param gateway: Gateway (required)
        :type gateway: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(StatisticsBatchGetUserStatisticsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_id',
            'gateway'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method statistics_internal_batch_get_user_statistics" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('user_id') is not None:  # noqa: E501
            _query_params.append(('user_id', _params['user_id']))
            _collection_formats['user_id'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['gateway']:
            _header_params['Gateway'] = _params['gateway']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "StatisticsBatchGetUserStatisticsResponse",
        }

        return self.api_client.call_api(
            '/v1/statistics/batch/user-stats', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def statistics_internal_batch_set_user_statistics(self, gateway : Annotated[StrictStr, Field(..., description="Gateway")], body : StatisticsBatchSetUserStatisticsRequest, **kwargs) -> StatisticsBatchSetUserStatisticsResponse:  # noqa: E501
        """User Statistics (App Auth)  # noqa: E501

        Sets user statistics in bulk for multiple users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.statistics_internal_batch_set_user_statistics(gateway, body, async_req=True)
        >>> result = thread.get()

        :param gateway: Gateway (required)
        :type gateway: str
        :param body: (required)
        :type body: StatisticsBatchSetUserStatisticsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: StatisticsBatchSetUserStatisticsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the statistics_internal_batch_set_user_statistics_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.statistics_internal_batch_set_user_statistics_with_http_info(gateway, body, **kwargs)  # noqa: E501

    @validate_arguments
    def statistics_internal_batch_set_user_statistics_with_http_info(self, gateway : Annotated[StrictStr, Field(..., description="Gateway")], body : StatisticsBatchSetUserStatisticsRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """User Statistics (App Auth)  # noqa: E501

        Sets user statistics in bulk for multiple users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.statistics_internal_batch_set_user_statistics_with_http_info(gateway, body, async_req=True)
        >>> result = thread.get()

        :param gateway: Gateway (required)
        :type gateway: str
        :param body: (required)
        :type body: StatisticsBatchSetUserStatisticsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(StatisticsBatchSetUserStatisticsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'gateway',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method statistics_internal_batch_set_user_statistics" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['gateway']:
            _header_params['Gateway'] = _params['gateway']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "StatisticsBatchSetUserStatisticsResponse",
        }

        return self.api_client.call_api(
            '/v1/statistics/batch/user-stats', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def statistics_internal_batch_update_user_statistics(self, user_id : Annotated[StrictStr, Field(..., description="User ID of the user for whom the stats are being updated")], gateway : Annotated[StrictStr, Field(..., description="Gateway")], body : BatchUpdateUserStatisticsRequest, **kwargs) -> StatisticsBatchUpdateUserStatisticsResponse:  # noqa: E501
        """User Statistics  # noqa: E501

        Updates user statistics in bulk  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.statistics_internal_batch_update_user_statistics(user_id, gateway, body, async_req=True)
        >>> result = thread.get()

        :param user_id: User ID of the user for whom the stats are being updated (required)
        :type user_id: str
        :param gateway: Gateway (required)
        :type gateway: str
        :param body: (required)
        :type body: BatchUpdateUserStatisticsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: StatisticsBatchUpdateUserStatisticsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the statistics_internal_batch_update_user_statistics_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.statistics_internal_batch_update_user_statistics_with_http_info(user_id, gateway, body, **kwargs)  # noqa: E501

    @validate_arguments
    def statistics_internal_batch_update_user_statistics_with_http_info(self, user_id : Annotated[StrictStr, Field(..., description="User ID of the user for whom the stats are being updated")], gateway : Annotated[StrictStr, Field(..., description="Gateway")], body : BatchUpdateUserStatisticsRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """User Statistics  # noqa: E501

        Updates user statistics in bulk  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.statistics_internal_batch_update_user_statistics_with_http_info(user_id, gateway, body, async_req=True)
        >>> result = thread.get()

        :param user_id: User ID of the user for whom the stats are being updated (required)
        :type user_id: str
        :param gateway: Gateway (required)
        :type gateway: str
        :param body: (required)
        :type body: BatchUpdateUserStatisticsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(StatisticsBatchUpdateUserStatisticsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_id',
            'gateway',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method statistics_internal_batch_update_user_statistics" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_id']:
            _path_params['user_id'] = _params['user_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['gateway']:
            _header_params['Gateway'] = _params['gateway']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "StatisticsBatchUpdateUserStatisticsResponse",
        }

        return self.api_client.call_api(
            '/v1/statistics/batch/user-stats/{user_id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def statistics_internal_get_user_statistic(self, user_id : Annotated[StrictStr, Field(..., description="User ID of the user")], key : Annotated[StrictStr, Field(..., description="Name of the user statistic")], gateway : Annotated[StrictStr, Field(..., description="Gateway")], **kwargs) -> StatisticsUserStatistic:  # noqa: E501
        """User Statistic  # noqa: E501

        Gets a specific user statistic by user id and stat key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.statistics_internal_get_user_statistic(user_id, key, gateway, async_req=True)
        >>> result = thread.get()

        :param user_id: User ID of the user (required)
        :type user_id: str
        :param key: Name of the user statistic (required)
        :type key: str
        :param gateway: Gateway (required)
        :type gateway: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: StatisticsUserStatistic
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the statistics_internal_get_user_statistic_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.statistics_internal_get_user_statistic_with_http_info(user_id, key, gateway, **kwargs)  # noqa: E501

    @validate_arguments
    def statistics_internal_get_user_statistic_with_http_info(self, user_id : Annotated[StrictStr, Field(..., description="User ID of the user")], key : Annotated[StrictStr, Field(..., description="Name of the user statistic")], gateway : Annotated[StrictStr, Field(..., description="Gateway")], **kwargs) -> ApiResponse:  # noqa: E501
        """User Statistic  # noqa: E501

        Gets a specific user statistic by user id and stat key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.statistics_internal_get_user_statistic_with_http_info(user_id, key, gateway, async_req=True)
        >>> result = thread.get()

        :param user_id: User ID of the user (required)
        :type user_id: str
        :param key: Name of the user statistic (required)
        :type key: str
        :param gateway: Gateway (required)
        :type gateway: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(StatisticsUserStatistic, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_id',
            'key',
            'gateway'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method statistics_internal_get_user_statistic" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_id']:
            _path_params['user_id'] = _params['user_id']

        if _params['key']:
            _path_params['key'] = _params['key']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['gateway']:
            _header_params['Gateway'] = _params['gateway']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "StatisticsUserStatistic",
        }

        return self.api_client.call_api(
            '/v1/statistics/user-stats/{user_id}/{key}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def statistics_internal_get_user_statistics(self, user_id : Annotated[StrictStr, Field(..., description="User ID of the user")], gateway : Annotated[StrictStr, Field(..., description="Gateway")], **kwargs) -> StatisticsGetUserStatisticsResponse:  # noqa: E501
        """User Statistics  # noqa: E501

        Get all user statistics for user or stat  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.statistics_internal_get_user_statistics(user_id, gateway, async_req=True)
        >>> result = thread.get()

        :param user_id: User ID of the user (required)
        :type user_id: str
        :param gateway: Gateway (required)
        :type gateway: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: StatisticsGetUserStatisticsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the statistics_internal_get_user_statistics_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.statistics_internal_get_user_statistics_with_http_info(user_id, gateway, **kwargs)  # noqa: E501

    @validate_arguments
    def statistics_internal_get_user_statistics_with_http_info(self, user_id : Annotated[StrictStr, Field(..., description="User ID of the user")], gateway : Annotated[StrictStr, Field(..., description="Gateway")], **kwargs) -> ApiResponse:  # noqa: E501
        """User Statistics  # noqa: E501

        Get all user statistics for user or stat  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.statistics_internal_get_user_statistics_with_http_info(user_id, gateway, async_req=True)
        >>> result = thread.get()

        :param user_id: User ID of the user (required)
        :type user_id: str
        :param gateway: Gateway (required)
        :type gateway: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(StatisticsGetUserStatisticsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_id',
            'gateway'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method statistics_internal_get_user_statistics" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_id']:
            _path_params['user_id'] = _params['user_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['gateway']:
            _header_params['Gateway'] = _params['gateway']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "StatisticsGetUserStatisticsResponse",
        }

        return self.api_client.call_api(
            '/v1/statistics/settings/user-stats/{user_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def statistics_internal_increment_user_statistic(self, user_id : Annotated[StrictStr, Field(..., description="User ID of the user who's stats are being requested")], key : Annotated[StrictStr, Field(..., description="Name of the user statistic")], gateway : Annotated[StrictStr, Field(..., description="Gateway")], body : IncrementUserStatisticRequest, **kwargs) -> StatisticsUserStatistic:  # noqa: E501
        """User Statistic  # noqa: E501

        Increments a user statistic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.statistics_internal_increment_user_statistic(user_id, key, gateway, body, async_req=True)
        >>> result = thread.get()

        :param user_id: User ID of the user who's stats are being requested (required)
        :type user_id: str
        :param key: Name of the user statistic (required)
        :type key: str
        :param gateway: Gateway (required)
        :type gateway: str
        :param body: (required)
        :type body: IncrementUserStatisticRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: StatisticsUserStatistic
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the statistics_internal_increment_user_statistic_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.statistics_internal_increment_user_statistic_with_http_info(user_id, key, gateway, body, **kwargs)  # noqa: E501

    @validate_arguments
    def statistics_internal_increment_user_statistic_with_http_info(self, user_id : Annotated[StrictStr, Field(..., description="User ID of the user who's stats are being requested")], key : Annotated[StrictStr, Field(..., description="Name of the user statistic")], gateway : Annotated[StrictStr, Field(..., description="Gateway")], body : IncrementUserStatisticRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """User Statistic  # noqa: E501

        Increments a user statistic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.statistics_internal_increment_user_statistic_with_http_info(user_id, key, gateway, body, async_req=True)
        >>> result = thread.get()

        :param user_id: User ID of the user who's stats are being requested (required)
        :type user_id: str
        :param key: Name of the user statistic (required)
        :type key: str
        :param gateway: Gateway (required)
        :type gateway: str
        :param body: (required)
        :type body: IncrementUserStatisticRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(StatisticsUserStatistic, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_id',
            'key',
            'gateway',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method statistics_internal_increment_user_statistic" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_id']:
            _path_params['user_id'] = _params['user_id']

        if _params['key']:
            _path_params['key'] = _params['key']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['gateway']:
            _header_params['Gateway'] = _params['gateway']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "StatisticsUserStatistic",
        }

        return self.api_client.call_api(
            '/v1/statistics/user-stats/{user_id}/{key}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def statistics_internal_is_user_in_segment(self, segment_name : Annotated[StrictStr, Field(..., description="Name of the segment")], user_id : Annotated[StrictStr, Field(..., description="User ID of the user")], gateway : Annotated[StrictStr, Field(..., description="Gateway")], **kwargs) -> StatisticsIsUserInSegmentResponse:  # noqa: E501
        """User Segment  # noqa: E501

        Checks if user is in segment or not  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.statistics_internal_is_user_in_segment(segment_name, user_id, gateway, async_req=True)
        >>> result = thread.get()

        :param segment_name: Name of the segment (required)
        :type segment_name: str
        :param user_id: User ID of the user (required)
        :type user_id: str
        :param gateway: Gateway (required)
        :type gateway: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: StatisticsIsUserInSegmentResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the statistics_internal_is_user_in_segment_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.statistics_internal_is_user_in_segment_with_http_info(segment_name, user_id, gateway, **kwargs)  # noqa: E501

    @validate_arguments
    def statistics_internal_is_user_in_segment_with_http_info(self, segment_name : Annotated[StrictStr, Field(..., description="Name of the segment")], user_id : Annotated[StrictStr, Field(..., description="User ID of the user")], gateway : Annotated[StrictStr, Field(..., description="Gateway")], **kwargs) -> ApiResponse:  # noqa: E501
        """User Segment  # noqa: E501

        Checks if user is in segment or not  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.statistics_internal_is_user_in_segment_with_http_info(segment_name, user_id, gateway, async_req=True)
        >>> result = thread.get()

        :param segment_name: Name of the segment (required)
        :type segment_name: str
        :param user_id: User ID of the user (required)
        :type user_id: str
        :param gateway: Gateway (required)
        :type gateway: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(StatisticsIsUserInSegmentResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'segment_name',
            'user_id',
            'gateway'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method statistics_internal_is_user_in_segment" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['segment_name']:
            _path_params['segment_name'] = _params['segment_name']

        if _params['user_id']:
            _path_params['user_id'] = _params['user_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['gateway']:
            _header_params['Gateway'] = _params['gateway']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "StatisticsIsUserInSegmentResponse",
        }

        return self.api_client.call_api(
            '/v1/statistics/segments/{segment_name}/users/{user_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def statistics_internal_set_user_statistic(self, user_id : Annotated[StrictStr, Field(..., description="User ID of the user who's stats are being requested")], key : Annotated[StrictStr, Field(..., description="Name of the user statistic")], gateway : Annotated[StrictStr, Field(..., description="Gateway")], body : SetUserStatisticRequest, **kwargs) -> StatisticsUserStatistic:  # noqa: E501
        """User Statistic  # noqa: E501

        Sets a user statistic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.statistics_internal_set_user_statistic(user_id, key, gateway, body, async_req=True)
        >>> result = thread.get()

        :param user_id: User ID of the user who's stats are being requested (required)
        :type user_id: str
        :param key: Name of the user statistic (required)
        :type key: str
        :param gateway: Gateway (required)
        :type gateway: str
        :param body: (required)
        :type body: SetUserStatisticRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: StatisticsUserStatistic
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the statistics_internal_set_user_statistic_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.statistics_internal_set_user_statistic_with_http_info(user_id, key, gateway, body, **kwargs)  # noqa: E501

    @validate_arguments
    def statistics_internal_set_user_statistic_with_http_info(self, user_id : Annotated[StrictStr, Field(..., description="User ID of the user who's stats are being requested")], key : Annotated[StrictStr, Field(..., description="Name of the user statistic")], gateway : Annotated[StrictStr, Field(..., description="Gateway")], body : SetUserStatisticRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """User Statistic  # noqa: E501

        Sets a user statistic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.statistics_internal_set_user_statistic_with_http_info(user_id, key, gateway, body, async_req=True)
        >>> result = thread.get()

        :param user_id: User ID of the user who's stats are being requested (required)
        :type user_id: str
        :param key: Name of the user statistic (required)
        :type key: str
        :param gateway: Gateway (required)
        :type gateway: str
        :param body: (required)
        :type body: SetUserStatisticRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(StatisticsUserStatistic, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_id',
            'key',
            'gateway',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method statistics_internal_set_user_statistic" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_id']:
            _path_params['user_id'] = _params['user_id']

        if _params['key']:
            _path_params['key'] = _params['key']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['gateway']:
            _header_params['Gateway'] = _params['gateway']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "StatisticsUserStatistic",
        }

        return self.api_client.call_api(
            '/v1/statistics/user-stats/{user_id}/{key}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
