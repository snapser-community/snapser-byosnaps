/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v1 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using SnapserInternal.Client;
using SnapserInternal.Model;

namespace SnapserInternal.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthServiceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Anonymous Login
        /// </summary>
        /// <remarks>
        /// Logs in the user with an arbitrary identifier specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthAnonLoginResponse</returns>
        AuthAnonLoginResponse AuthInternalAnonLogin(AuthAnonLoginRequest body);

        /// <summary>
        /// Anonymous Login
        /// </summary>
        /// <remarks>
        /// Logs in the user with an arbitrary identifier specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthAnonLoginResponse</returns>
        ApiResponse<AuthAnonLoginResponse> AuthInternalAnonLoginWithHttpInfo(AuthAnonLoginRequest body);
        /// <summary>
        /// Token
        /// </summary>
        /// <remarks>
        /// Verifies the session token and returns appropriate response based on the type
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of app trying to verify the session token. Only acceptable value is &#39;photon&#39;</param>
        /// <param name="sessionToken">Session token of the user (optional)</param>
        /// <param name="clientSecret">Shared secret used to verify the request (optional)</param>
        /// <returns>ApiHttpBody</returns>
        ApiHttpBody AuthInternalAppVerify(string type, string sessionToken = default(string), string clientSecret = default(string));

        /// <summary>
        /// Token
        /// </summary>
        /// <remarks>
        /// Verifies the session token and returns appropriate response based on the type
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of app trying to verify the session token. Only acceptable value is &#39;photon&#39;</param>
        /// <param name="sessionToken">Session token of the user (optional)</param>
        /// <param name="clientSecret">Shared secret used to verify the request (optional)</param>
        /// <returns>ApiResponse of ApiHttpBody</returns>
        ApiResponse<ApiHttpBody> AuthInternalAppVerifyWithHttpInfo(string type, string sessionToken = default(string), string clientSecret = default(string));
        /// <summary>
        /// Apple Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the apple credential token specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthAppleLoginResponse</returns>
        AuthAppleLoginResponse AuthInternalAppleLogin(AuthAppleLoginRequest body);

        /// <summary>
        /// Apple Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the apple credential token specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthAppleLoginResponse</returns>
        ApiResponse<AuthAppleLoginResponse> AuthInternalAppleLoginWithHttpInfo(AuthAppleLoginRequest body);
        /// <summary>
        /// Associate Multiple Logins
        /// </summary>
        /// <remarks>
        /// Associates two logins based on their session tokens
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object AuthInternalAssociateLogins(AuthAssociateLoginsRequest body);

        /// <summary>
        /// Associate Multiple Logins
        /// </summary>
        /// <remarks>
        /// Associates two logins based on their session tokens
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AuthInternalAssociateLoginsWithHttpInfo(AuthAssociateLoginsRequest body);
        /// <summary>
        /// Disassociate
        /// </summary>
        /// <remarks>
        /// Disassociates the specified login from a user
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">UserID of the user to be unbanned</param>
        /// <param name="gateway">Gateway</param>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object AuthInternalDisassociateLogin(string userId, string gateway, DisassociateLoginRequest body);

        /// <summary>
        /// Disassociate
        /// </summary>
        /// <remarks>
        /// Disassociates the specified login from a user
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">UserID of the user to be unbanned</param>
        /// <param name="gateway">Gateway</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AuthInternalDisassociateLoginWithHttpInfo(string userId, string gateway, DisassociateLoginRequest body);
        /// <summary>
        /// Discord Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the discord token specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthDiscordLoginResponse</returns>
        AuthDiscordLoginResponse AuthInternalDiscordLogin(AuthDiscordLoginRequest body);

        /// <summary>
        /// Discord Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the discord token specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthDiscordLoginResponse</returns>
        ApiResponse<AuthDiscordLoginResponse> AuthInternalDiscordLoginWithHttpInfo(AuthDiscordLoginRequest body);
        /// <summary>
        /// Email Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the email and OTP specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthEmailLoginResponse</returns>
        AuthEmailLoginResponse AuthInternalEmailLogin(AuthEmailLoginRequest body);

        /// <summary>
        /// Email Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the email and OTP specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthEmailLoginResponse</returns>
        ApiResponse<AuthEmailLoginResponse> AuthInternalEmailLoginWithHttpInfo(AuthEmailLoginRequest body);
        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the email and password specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthEmailPasswordLoginResponse</returns>
        AuthEmailPasswordLoginResponse AuthInternalEmailPasswordLogin(AuthEmailPasswordLoginRequest body);

        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the email and password specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthEmailPasswordLoginResponse</returns>
        ApiResponse<AuthEmailPasswordLoginResponse> AuthInternalEmailPasswordLoginWithHttpInfo(AuthEmailPasswordLoginRequest body);
        /// <summary>
        /// Epic Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the epic credentials specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthEpicLoginResponse</returns>
        AuthEpicLoginResponse AuthInternalEpicLogin(AuthEpicLoginRequest body);

        /// <summary>
        /// Epic Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the epic credentials specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthEpicLoginResponse</returns>
        ApiResponse<AuthEpicLoginResponse> AuthInternalEpicLoginWithHttpInfo(AuthEpicLoginRequest body);
        /// <summary>
        /// Facebook Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the facebook credential token specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthFacebookLoginResponse</returns>
        AuthFacebookLoginResponse AuthInternalFacebookLogin(AuthFacebookLoginRequest body);

        /// <summary>
        /// Facebook Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the facebook credential token specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthFacebookLoginResponse</returns>
        ApiResponse<AuthFacebookLoginResponse> AuthInternalFacebookLoginWithHttpInfo(AuthFacebookLoginRequest body);
        /// <summary>
        /// Get User Ids
        /// </summary>
        /// <remarks>
        /// Get UserIDs by login IDs and login types
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginIds">Comma separated login IDs of the user to be retrieved</param>
        /// <param name="loginType">Login type to search by. Values must be one of &#39;email&#39;, &#39;anon&#39;, &#39;apple&#39;, &#39;facebook&#39;, &#39;google&#39;, &#39;steam&#39;, &#39;xbox&#39;, &#39;epic&#39;</param>
        /// <param name="gateway">Gateway</param>
        /// <returns>AuthGetUserIdsByLoginIdsResponse</returns>
        AuthGetUserIdsByLoginIdsResponse AuthInternalGetUserIdsByLoginIds(string loginIds, string loginType, string gateway);

        /// <summary>
        /// Get User Ids
        /// </summary>
        /// <remarks>
        /// Get UserIDs by login IDs and login types
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginIds">Comma separated login IDs of the user to be retrieved</param>
        /// <param name="loginType">Login type to search by. Values must be one of &#39;email&#39;, &#39;anon&#39;, &#39;apple&#39;, &#39;facebook&#39;, &#39;google&#39;, &#39;steam&#39;, &#39;xbox&#39;, &#39;epic&#39;</param>
        /// <param name="gateway">Gateway</param>
        /// <returns>ApiResponse of AuthGetUserIdsByLoginIdsResponse</returns>
        ApiResponse<AuthGetUserIdsByLoginIdsResponse> AuthInternalGetUserIdsByLoginIdsWithHttpInfo(string loginIds, string loginType, string gateway);
        /// <summary>
        /// Username Password Login
        /// </summary>
        /// <remarks>
        /// Checks if the username is available
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username to check</param>
        /// <returns>AuthGetUsernameAvailabilityResponse</returns>
        AuthGetUsernameAvailabilityResponse AuthInternalGetUsernameAvailability(string username);

        /// <summary>
        /// Username Password Login
        /// </summary>
        /// <remarks>
        /// Checks if the username is available
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username to check</param>
        /// <returns>ApiResponse of AuthGetUsernameAvailabilityResponse</returns>
        ApiResponse<AuthGetUsernameAvailabilityResponse> AuthInternalGetUsernameAvailabilityWithHttpInfo(string username);
        /// <summary>
        /// Google Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the google credential token specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthGoogleLoginResponse</returns>
        AuthGoogleLoginResponse AuthInternalGoogleLogin(AuthGoogleLoginRequest body);

        /// <summary>
        /// Google Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the google credential token specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthGoogleLoginResponse</returns>
        ApiResponse<AuthGoogleLoginResponse> AuthInternalGoogleLoginWithHttpInfo(AuthGoogleLoginRequest body);
        /// <summary>
        /// Logout User
        /// </summary>
        /// <remarks>
        /// Ends the current session of the user
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Session token to logout</param>
        /// <param name="gateway">Gateway</param>
        /// <returns>Object</returns>
        Object AuthInternalLogout(string token, string gateway);

        /// <summary>
        /// Logout User
        /// </summary>
        /// <remarks>
        /// Ends the current session of the user
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Session token to logout</param>
        /// <param name="gateway">Gateway</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AuthInternalLogoutWithHttpInfo(string token, string gateway);
        /// <summary>
        /// Email Login
        /// </summary>
        /// <remarks>
        /// Generates an OTP and sends it to the email for logging in
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object AuthInternalOtp(AuthOtpRequest body);

        /// <summary>
        /// Email Login
        /// </summary>
        /// <remarks>
        /// Generates an OTP and sends it to the email for logging in
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AuthInternalOtpWithHttpInfo(AuthOtpRequest body);
        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Sends an email to the user for account recovery
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object AuthInternalRecoverEmailAccount(AuthRecoverEmailAccountRequest body);

        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Sends an email to the user for account recovery
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AuthInternalRecoverEmailAccountWithHttpInfo(AuthRecoverEmailAccountRequest body);
        /// <summary>
        /// Token
        /// </summary>
        /// <remarks>
        /// Refreshes the session and returns a new session token with refreshed validity
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gateway">Gateway</param>
        /// <param name="body"></param>
        /// <returns>AuthRefreshResponse</returns>
        AuthRefreshResponse AuthInternalRefresh(string gateway, AuthRefreshRequest body);

        /// <summary>
        /// Token
        /// </summary>
        /// <remarks>
        /// Refreshes the session and returns a new session token with refreshed validity
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gateway">Gateway</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthRefreshResponse</returns>
        ApiResponse<AuthRefreshResponse> AuthInternalRefreshWithHttpInfo(string gateway, AuthRefreshRequest body);
        /// <summary>
        /// Steam Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the steam token specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthSteamLoginResponse</returns>
        [Obsolete]
        AuthSteamLoginResponse AuthInternalSteamLogin(AuthSteamLoginRequest body);

        /// <summary>
        /// Steam Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the steam token specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthSteamLoginResponse</returns>
        [Obsolete]
        ApiResponse<AuthSteamLoginResponse> AuthInternalSteamLoginWithHttpInfo(AuthSteamLoginRequest body);
        /// <summary>
        /// Steam Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the steam open ID token specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthSteamLoginResponse</returns>
        AuthSteamLoginResponse AuthInternalSteamOpenIdLogin(AuthSteamOpenIdLoginRequest body);

        /// <summary>
        /// Steam Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the steam open ID token specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthSteamLoginResponse</returns>
        ApiResponse<AuthSteamLoginResponse> AuthInternalSteamOpenIdLoginWithHttpInfo(AuthSteamOpenIdLoginRequest body);
        /// <summary>
        /// Steam Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the steam session ticket specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthSteamLoginResponse</returns>
        AuthSteamLoginResponse AuthInternalSteamSessionTicketLogin(AuthSteamSessionTicketLoginRequest body);

        /// <summary>
        /// Steam Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the steam session ticket specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthSteamLoginResponse</returns>
        ApiResponse<AuthSteamLoginResponse> AuthInternalSteamSessionTicketLoginWithHttpInfo(AuthSteamSessionTicketLoginRequest body);
        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Updates the email and password of the user
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object AuthInternalUpdateEmailPassword(AuthUpdateEmailPasswordRequest body);

        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Updates the email and password of the user
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AuthInternalUpdateEmailPasswordWithHttpInfo(AuthUpdateEmailPasswordRequest body);
        /// <summary>
        /// Username Password Login
        /// </summary>
        /// <remarks>
        /// Updates the username and password of the user
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gateway">Gateway</param>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object AuthInternalUpdateUsernamePassword(string gateway, AuthUpdateUsernamePasswordRequest body);

        /// <summary>
        /// Username Password Login
        /// </summary>
        /// <remarks>
        /// Updates the username and password of the user
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gateway">Gateway</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AuthInternalUpdateUsernamePasswordWithHttpInfo(string gateway, AuthUpdateUsernamePasswordRequest body);
        /// <summary>
        /// Username Password Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the username and password specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthUsernamePasswordLoginResponse</returns>
        AuthUsernamePasswordLoginResponse AuthInternalUsernamePasswordLogin(AuthUsernamePasswordLoginRequest body);

        /// <summary>
        /// Username Password Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the username and password specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthUsernamePasswordLoginResponse</returns>
        ApiResponse<AuthUsernamePasswordLoginResponse> AuthInternalUsernamePasswordLoginWithHttpInfo(AuthUsernamePasswordLoginRequest body);
        /// <summary>
        /// Token
        /// </summary>
        /// <remarks>
        /// Validates the session of the user and returns the user info
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthValidateResponse</returns>
        AuthValidateResponse AuthInternalValidate(AuthValidateRequest body);

        /// <summary>
        /// Token
        /// </summary>
        /// <remarks>
        /// Validates the session of the user and returns the user info
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthValidateResponse</returns>
        ApiResponse<AuthValidateResponse> AuthInternalValidateWithHttpInfo(AuthValidateRequest body);
        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Verifies the email and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthVerifyEmailResponse</returns>
        AuthVerifyEmailResponse AuthInternalVerifyEmail(AuthVerifyEmailRequest body);

        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Verifies the email and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthVerifyEmailResponse</returns>
        ApiResponse<AuthVerifyEmailResponse> AuthInternalVerifyEmailWithHttpInfo(AuthVerifyEmailRequest body);
        /// <summary>
        /// Xbox Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the xbox token specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthXboxLoginResponse</returns>
        AuthXboxLoginResponse AuthInternalXboxLogin(AuthXboxLoginRequest body);

        /// <summary>
        /// Xbox Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the xbox token specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthXboxLoginResponse</returns>
        ApiResponse<AuthXboxLoginResponse> AuthInternalXboxLoginWithHttpInfo(AuthXboxLoginRequest body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthServiceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Anonymous Login
        /// </summary>
        /// <remarks>
        /// Logs in the user with an arbitrary identifier specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthAnonLoginResponse</returns>
        System.Threading.Tasks.Task<AuthAnonLoginResponse> AuthInternalAnonLoginAsync(AuthAnonLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Anonymous Login
        /// </summary>
        /// <remarks>
        /// Logs in the user with an arbitrary identifier specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthAnonLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthAnonLoginResponse>> AuthInternalAnonLoginWithHttpInfoAsync(AuthAnonLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Token
        /// </summary>
        /// <remarks>
        /// Verifies the session token and returns appropriate response based on the type
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of app trying to verify the session token. Only acceptable value is &#39;photon&#39;</param>
        /// <param name="sessionToken">Session token of the user (optional)</param>
        /// <param name="clientSecret">Shared secret used to verify the request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiHttpBody</returns>
        System.Threading.Tasks.Task<ApiHttpBody> AuthInternalAppVerifyAsync(string type, string sessionToken = default(string), string clientSecret = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Token
        /// </summary>
        /// <remarks>
        /// Verifies the session token and returns appropriate response based on the type
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of app trying to verify the session token. Only acceptable value is &#39;photon&#39;</param>
        /// <param name="sessionToken">Session token of the user (optional)</param>
        /// <param name="clientSecret">Shared secret used to verify the request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiHttpBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiHttpBody>> AuthInternalAppVerifyWithHttpInfoAsync(string type, string sessionToken = default(string), string clientSecret = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Apple Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the apple credential token specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthAppleLoginResponse</returns>
        System.Threading.Tasks.Task<AuthAppleLoginResponse> AuthInternalAppleLoginAsync(AuthAppleLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Apple Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the apple credential token specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthAppleLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthAppleLoginResponse>> AuthInternalAppleLoginWithHttpInfoAsync(AuthAppleLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Associate Multiple Logins
        /// </summary>
        /// <remarks>
        /// Associates two logins based on their session tokens
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AuthInternalAssociateLoginsAsync(AuthAssociateLoginsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Associate Multiple Logins
        /// </summary>
        /// <remarks>
        /// Associates two logins based on their session tokens
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuthInternalAssociateLoginsWithHttpInfoAsync(AuthAssociateLoginsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Disassociate
        /// </summary>
        /// <remarks>
        /// Disassociates the specified login from a user
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">UserID of the user to be unbanned</param>
        /// <param name="gateway">Gateway</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AuthInternalDisassociateLoginAsync(string userId, string gateway, DisassociateLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Disassociate
        /// </summary>
        /// <remarks>
        /// Disassociates the specified login from a user
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">UserID of the user to be unbanned</param>
        /// <param name="gateway">Gateway</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuthInternalDisassociateLoginWithHttpInfoAsync(string userId, string gateway, DisassociateLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Discord Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the discord token specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthDiscordLoginResponse</returns>
        System.Threading.Tasks.Task<AuthDiscordLoginResponse> AuthInternalDiscordLoginAsync(AuthDiscordLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Discord Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the discord token specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthDiscordLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthDiscordLoginResponse>> AuthInternalDiscordLoginWithHttpInfoAsync(AuthDiscordLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Email Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the email and OTP specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthEmailLoginResponse</returns>
        System.Threading.Tasks.Task<AuthEmailLoginResponse> AuthInternalEmailLoginAsync(AuthEmailLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Email Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the email and OTP specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthEmailLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthEmailLoginResponse>> AuthInternalEmailLoginWithHttpInfoAsync(AuthEmailLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the email and password specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthEmailPasswordLoginResponse</returns>
        System.Threading.Tasks.Task<AuthEmailPasswordLoginResponse> AuthInternalEmailPasswordLoginAsync(AuthEmailPasswordLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the email and password specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthEmailPasswordLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthEmailPasswordLoginResponse>> AuthInternalEmailPasswordLoginWithHttpInfoAsync(AuthEmailPasswordLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Epic Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the epic credentials specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthEpicLoginResponse</returns>
        System.Threading.Tasks.Task<AuthEpicLoginResponse> AuthInternalEpicLoginAsync(AuthEpicLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Epic Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the epic credentials specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthEpicLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthEpicLoginResponse>> AuthInternalEpicLoginWithHttpInfoAsync(AuthEpicLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Facebook Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the facebook credential token specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthFacebookLoginResponse</returns>
        System.Threading.Tasks.Task<AuthFacebookLoginResponse> AuthInternalFacebookLoginAsync(AuthFacebookLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Facebook Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the facebook credential token specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthFacebookLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthFacebookLoginResponse>> AuthInternalFacebookLoginWithHttpInfoAsync(AuthFacebookLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get User Ids
        /// </summary>
        /// <remarks>
        /// Get UserIDs by login IDs and login types
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginIds">Comma separated login IDs of the user to be retrieved</param>
        /// <param name="loginType">Login type to search by. Values must be one of &#39;email&#39;, &#39;anon&#39;, &#39;apple&#39;, &#39;facebook&#39;, &#39;google&#39;, &#39;steam&#39;, &#39;xbox&#39;, &#39;epic&#39;</param>
        /// <param name="gateway">Gateway</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthGetUserIdsByLoginIdsResponse</returns>
        System.Threading.Tasks.Task<AuthGetUserIdsByLoginIdsResponse> AuthInternalGetUserIdsByLoginIdsAsync(string loginIds, string loginType, string gateway, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get User Ids
        /// </summary>
        /// <remarks>
        /// Get UserIDs by login IDs and login types
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginIds">Comma separated login IDs of the user to be retrieved</param>
        /// <param name="loginType">Login type to search by. Values must be one of &#39;email&#39;, &#39;anon&#39;, &#39;apple&#39;, &#39;facebook&#39;, &#39;google&#39;, &#39;steam&#39;, &#39;xbox&#39;, &#39;epic&#39;</param>
        /// <param name="gateway">Gateway</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthGetUserIdsByLoginIdsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthGetUserIdsByLoginIdsResponse>> AuthInternalGetUserIdsByLoginIdsWithHttpInfoAsync(string loginIds, string loginType, string gateway, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Username Password Login
        /// </summary>
        /// <remarks>
        /// Checks if the username is available
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username to check</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthGetUsernameAvailabilityResponse</returns>
        System.Threading.Tasks.Task<AuthGetUsernameAvailabilityResponse> AuthInternalGetUsernameAvailabilityAsync(string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Username Password Login
        /// </summary>
        /// <remarks>
        /// Checks if the username is available
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username to check</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthGetUsernameAvailabilityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthGetUsernameAvailabilityResponse>> AuthInternalGetUsernameAvailabilityWithHttpInfoAsync(string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Google Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the google credential token specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthGoogleLoginResponse</returns>
        System.Threading.Tasks.Task<AuthGoogleLoginResponse> AuthInternalGoogleLoginAsync(AuthGoogleLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Google Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the google credential token specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthGoogleLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthGoogleLoginResponse>> AuthInternalGoogleLoginWithHttpInfoAsync(AuthGoogleLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Logout User
        /// </summary>
        /// <remarks>
        /// Ends the current session of the user
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Session token to logout</param>
        /// <param name="gateway">Gateway</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AuthInternalLogoutAsync(string token, string gateway, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Logout User
        /// </summary>
        /// <remarks>
        /// Ends the current session of the user
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Session token to logout</param>
        /// <param name="gateway">Gateway</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuthInternalLogoutWithHttpInfoAsync(string token, string gateway, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Email Login
        /// </summary>
        /// <remarks>
        /// Generates an OTP and sends it to the email for logging in
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AuthInternalOtpAsync(AuthOtpRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Email Login
        /// </summary>
        /// <remarks>
        /// Generates an OTP and sends it to the email for logging in
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuthInternalOtpWithHttpInfoAsync(AuthOtpRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Sends an email to the user for account recovery
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AuthInternalRecoverEmailAccountAsync(AuthRecoverEmailAccountRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Sends an email to the user for account recovery
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuthInternalRecoverEmailAccountWithHttpInfoAsync(AuthRecoverEmailAccountRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Token
        /// </summary>
        /// <remarks>
        /// Refreshes the session and returns a new session token with refreshed validity
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gateway">Gateway</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthRefreshResponse</returns>
        System.Threading.Tasks.Task<AuthRefreshResponse> AuthInternalRefreshAsync(string gateway, AuthRefreshRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Token
        /// </summary>
        /// <remarks>
        /// Refreshes the session and returns a new session token with refreshed validity
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gateway">Gateway</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthRefreshResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthRefreshResponse>> AuthInternalRefreshWithHttpInfoAsync(string gateway, AuthRefreshRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Steam Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the steam token specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthSteamLoginResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<AuthSteamLoginResponse> AuthInternalSteamLoginAsync(AuthSteamLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Steam Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the steam token specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthSteamLoginResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<AuthSteamLoginResponse>> AuthInternalSteamLoginWithHttpInfoAsync(AuthSteamLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Steam Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the steam open ID token specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthSteamLoginResponse</returns>
        System.Threading.Tasks.Task<AuthSteamLoginResponse> AuthInternalSteamOpenIdLoginAsync(AuthSteamOpenIdLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Steam Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the steam open ID token specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthSteamLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthSteamLoginResponse>> AuthInternalSteamOpenIdLoginWithHttpInfoAsync(AuthSteamOpenIdLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Steam Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the steam session ticket specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthSteamLoginResponse</returns>
        System.Threading.Tasks.Task<AuthSteamLoginResponse> AuthInternalSteamSessionTicketLoginAsync(AuthSteamSessionTicketLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Steam Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the steam session ticket specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthSteamLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthSteamLoginResponse>> AuthInternalSteamSessionTicketLoginWithHttpInfoAsync(AuthSteamSessionTicketLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Updates the email and password of the user
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AuthInternalUpdateEmailPasswordAsync(AuthUpdateEmailPasswordRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Updates the email and password of the user
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuthInternalUpdateEmailPasswordWithHttpInfoAsync(AuthUpdateEmailPasswordRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Username Password Login
        /// </summary>
        /// <remarks>
        /// Updates the username and password of the user
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gateway">Gateway</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AuthInternalUpdateUsernamePasswordAsync(string gateway, AuthUpdateUsernamePasswordRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Username Password Login
        /// </summary>
        /// <remarks>
        /// Updates the username and password of the user
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gateway">Gateway</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuthInternalUpdateUsernamePasswordWithHttpInfoAsync(string gateway, AuthUpdateUsernamePasswordRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Username Password Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the username and password specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthUsernamePasswordLoginResponse</returns>
        System.Threading.Tasks.Task<AuthUsernamePasswordLoginResponse> AuthInternalUsernamePasswordLoginAsync(AuthUsernamePasswordLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Username Password Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the username and password specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthUsernamePasswordLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthUsernamePasswordLoginResponse>> AuthInternalUsernamePasswordLoginWithHttpInfoAsync(AuthUsernamePasswordLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Token
        /// </summary>
        /// <remarks>
        /// Validates the session of the user and returns the user info
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthValidateResponse</returns>
        System.Threading.Tasks.Task<AuthValidateResponse> AuthInternalValidateAsync(AuthValidateRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Token
        /// </summary>
        /// <remarks>
        /// Validates the session of the user and returns the user info
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthValidateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthValidateResponse>> AuthInternalValidateWithHttpInfoAsync(AuthValidateRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Verifies the email and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthVerifyEmailResponse</returns>
        System.Threading.Tasks.Task<AuthVerifyEmailResponse> AuthInternalVerifyEmailAsync(AuthVerifyEmailRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Verifies the email and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthVerifyEmailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthVerifyEmailResponse>> AuthInternalVerifyEmailWithHttpInfoAsync(AuthVerifyEmailRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Xbox Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the xbox token specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthXboxLoginResponse</returns>
        System.Threading.Tasks.Task<AuthXboxLoginResponse> AuthInternalXboxLoginAsync(AuthXboxLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Xbox Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the xbox token specified and returns a session
        /// </remarks>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthXboxLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthXboxLoginResponse>> AuthInternalXboxLoginWithHttpInfoAsync(AuthXboxLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthServiceApi : IAuthServiceApiSync, IAuthServiceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthServiceApi : IDisposable, IAuthServiceApi
    {
        private SnapserInternal.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthServiceApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AuthServiceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthServiceApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AuthServiceApi(string basePath)
        {
            this.Configuration = SnapserInternal.Client.Configuration.MergeConfigurations(
                SnapserInternal.Client.GlobalConfiguration.Instance,
                new SnapserInternal.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new SnapserInternal.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = SnapserInternal.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthServiceApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AuthServiceApi(SnapserInternal.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SnapserInternal.Client.Configuration.MergeConfigurations(
                SnapserInternal.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new SnapserInternal.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = SnapserInternal.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthServiceApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AuthServiceApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthServiceApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AuthServiceApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = SnapserInternal.Client.Configuration.MergeConfigurations(
                SnapserInternal.Client.GlobalConfiguration.Instance,
                new SnapserInternal.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new SnapserInternal.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = SnapserInternal.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthServiceApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AuthServiceApi(HttpClient client, SnapserInternal.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = SnapserInternal.Client.Configuration.MergeConfigurations(
                SnapserInternal.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new SnapserInternal.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = SnapserInternal.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthServiceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AuthServiceApi(SnapserInternal.Client.ISynchronousClient client, SnapserInternal.Client.IAsynchronousClient asyncClient, SnapserInternal.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SnapserInternal.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public SnapserInternal.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SnapserInternal.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SnapserInternal.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SnapserInternal.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SnapserInternal.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Anonymous Login Logs in the user with an arbitrary identifier specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthAnonLoginResponse</returns>
        public AuthAnonLoginResponse AuthInternalAnonLogin(AuthAnonLoginRequest body)
        {
            SnapserInternal.Client.ApiResponse<AuthAnonLoginResponse> localVarResponse = AuthInternalAnonLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Anonymous Login Logs in the user with an arbitrary identifier specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthAnonLoginResponse</returns>
        public SnapserInternal.Client.ApiResponse<AuthAnonLoginResponse> AuthInternalAnonLoginWithHttpInfo(AuthAnonLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalAnonLogin");

            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthAnonLoginResponse>("/v1/auth/login/anon", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalAnonLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Anonymous Login Logs in the user with an arbitrary identifier specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthAnonLoginResponse</returns>
        public async System.Threading.Tasks.Task<AuthAnonLoginResponse> AuthInternalAnonLoginAsync(AuthAnonLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapserInternal.Client.ApiResponse<AuthAnonLoginResponse> localVarResponse = await AuthInternalAnonLoginWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Anonymous Login Logs in the user with an arbitrary identifier specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthAnonLoginResponse)</returns>
        public async System.Threading.Tasks.Task<SnapserInternal.Client.ApiResponse<AuthAnonLoginResponse>> AuthInternalAnonLoginWithHttpInfoAsync(AuthAnonLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalAnonLogin");


            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<AuthAnonLoginResponse>("/v1/auth/login/anon", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalAnonLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Token Verifies the session token and returns appropriate response based on the type
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of app trying to verify the session token. Only acceptable value is &#39;photon&#39;</param>
        /// <param name="sessionToken">Session token of the user (optional)</param>
        /// <param name="clientSecret">Shared secret used to verify the request (optional)</param>
        /// <returns>ApiHttpBody</returns>
        public ApiHttpBody AuthInternalAppVerify(string type, string sessionToken = default(string), string clientSecret = default(string))
        {
            SnapserInternal.Client.ApiResponse<ApiHttpBody> localVarResponse = AuthInternalAppVerifyWithHttpInfo(type, sessionToken, clientSecret);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Token Verifies the session token and returns appropriate response based on the type
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of app trying to verify the session token. Only acceptable value is &#39;photon&#39;</param>
        /// <param name="sessionToken">Session token of the user (optional)</param>
        /// <param name="clientSecret">Shared secret used to verify the request (optional)</param>
        /// <returns>ApiResponse of ApiHttpBody</returns>
        public SnapserInternal.Client.ApiResponse<ApiHttpBody> AuthInternalAppVerifyWithHttpInfo(string type, string sessionToken = default(string), string clientSecret = default(string))
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'type' when calling AuthServiceApi->AuthInternalAppVerify");

            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("type", SnapserInternal.Client.ClientUtils.ParameterToString(type)); // path parameter
            if (sessionToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(SnapserInternal.Client.ClientUtils.ParameterToMultiMap("", "session_token", sessionToken));
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(SnapserInternal.Client.ClientUtils.ParameterToMultiMap("", "client_secret", clientSecret));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<ApiHttpBody>("/v1/auth/app-verify/{type}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalAppVerify", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Token Verifies the session token and returns appropriate response based on the type
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of app trying to verify the session token. Only acceptable value is &#39;photon&#39;</param>
        /// <param name="sessionToken">Session token of the user (optional)</param>
        /// <param name="clientSecret">Shared secret used to verify the request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiHttpBody</returns>
        public async System.Threading.Tasks.Task<ApiHttpBody> AuthInternalAppVerifyAsync(string type, string sessionToken = default(string), string clientSecret = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapserInternal.Client.ApiResponse<ApiHttpBody> localVarResponse = await AuthInternalAppVerifyWithHttpInfoAsync(type, sessionToken, clientSecret, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Token Verifies the session token and returns appropriate response based on the type
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of app trying to verify the session token. Only acceptable value is &#39;photon&#39;</param>
        /// <param name="sessionToken">Session token of the user (optional)</param>
        /// <param name="clientSecret">Shared secret used to verify the request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiHttpBody)</returns>
        public async System.Threading.Tasks.Task<SnapserInternal.Client.ApiResponse<ApiHttpBody>> AuthInternalAppVerifyWithHttpInfoAsync(string type, string sessionToken = default(string), string clientSecret = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'type' when calling AuthServiceApi->AuthInternalAppVerify");


            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("type", SnapserInternal.Client.ClientUtils.ParameterToString(type)); // path parameter
            if (sessionToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(SnapserInternal.Client.ClientUtils.ParameterToMultiMap("", "session_token", sessionToken));
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(SnapserInternal.Client.ClientUtils.ParameterToMultiMap("", "client_secret", clientSecret));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ApiHttpBody>("/v1/auth/app-verify/{type}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalAppVerify", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Apple Login Logs in the user based on the apple credential token specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthAppleLoginResponse</returns>
        public AuthAppleLoginResponse AuthInternalAppleLogin(AuthAppleLoginRequest body)
        {
            SnapserInternal.Client.ApiResponse<AuthAppleLoginResponse> localVarResponse = AuthInternalAppleLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Apple Login Logs in the user based on the apple credential token specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthAppleLoginResponse</returns>
        public SnapserInternal.Client.ApiResponse<AuthAppleLoginResponse> AuthInternalAppleLoginWithHttpInfo(AuthAppleLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalAppleLogin");

            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthAppleLoginResponse>("/v1/auth/login/apple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalAppleLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Apple Login Logs in the user based on the apple credential token specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthAppleLoginResponse</returns>
        public async System.Threading.Tasks.Task<AuthAppleLoginResponse> AuthInternalAppleLoginAsync(AuthAppleLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapserInternal.Client.ApiResponse<AuthAppleLoginResponse> localVarResponse = await AuthInternalAppleLoginWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Apple Login Logs in the user based on the apple credential token specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthAppleLoginResponse)</returns>
        public async System.Threading.Tasks.Task<SnapserInternal.Client.ApiResponse<AuthAppleLoginResponse>> AuthInternalAppleLoginWithHttpInfoAsync(AuthAppleLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalAppleLogin");


            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<AuthAppleLoginResponse>("/v1/auth/login/apple", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalAppleLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate Multiple Logins Associates two logins based on their session tokens
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object AuthInternalAssociateLogins(AuthAssociateLoginsRequest body)
        {
            SnapserInternal.Client.ApiResponse<Object> localVarResponse = AuthInternalAssociateLoginsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Associate Multiple Logins Associates two logins based on their session tokens
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public SnapserInternal.Client.ApiResponse<Object> AuthInternalAssociateLoginsWithHttpInfo(AuthAssociateLoginsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalAssociateLogins");

            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/auth/associate-logins", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalAssociateLogins", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate Multiple Logins Associates two logins based on their session tokens
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AuthInternalAssociateLoginsAsync(AuthAssociateLoginsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapserInternal.Client.ApiResponse<Object> localVarResponse = await AuthInternalAssociateLoginsWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Associate Multiple Logins Associates two logins based on their session tokens
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SnapserInternal.Client.ApiResponse<Object>> AuthInternalAssociateLoginsWithHttpInfoAsync(AuthAssociateLoginsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalAssociateLogins");


            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v1/auth/associate-logins", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalAssociateLogins", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disassociate Disassociates the specified login from a user
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">UserID of the user to be unbanned</param>
        /// <param name="gateway">Gateway</param>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object AuthInternalDisassociateLogin(string userId, string gateway, DisassociateLoginRequest body)
        {
            SnapserInternal.Client.ApiResponse<Object> localVarResponse = AuthInternalDisassociateLoginWithHttpInfo(userId, gateway, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Disassociate Disassociates the specified login from a user
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">UserID of the user to be unbanned</param>
        /// <param name="gateway">Gateway</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public SnapserInternal.Client.ApiResponse<Object> AuthInternalDisassociateLoginWithHttpInfo(string userId, string gateway, DisassociateLoginRequest body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'userId' when calling AuthServiceApi->AuthInternalDisassociateLogin");

            // verify the required parameter 'gateway' is set
            if (gateway == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'gateway' when calling AuthServiceApi->AuthInternalDisassociateLogin");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalDisassociateLogin");

            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", SnapserInternal.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Gateway", SnapserInternal.Client.ClientUtils.ParameterToString(gateway)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/auth/users/{user_id}/disassociation", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalDisassociateLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disassociate Disassociates the specified login from a user
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">UserID of the user to be unbanned</param>
        /// <param name="gateway">Gateway</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AuthInternalDisassociateLoginAsync(string userId, string gateway, DisassociateLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapserInternal.Client.ApiResponse<Object> localVarResponse = await AuthInternalDisassociateLoginWithHttpInfoAsync(userId, gateway, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Disassociate Disassociates the specified login from a user
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">UserID of the user to be unbanned</param>
        /// <param name="gateway">Gateway</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SnapserInternal.Client.ApiResponse<Object>> AuthInternalDisassociateLoginWithHttpInfoAsync(string userId, string gateway, DisassociateLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'userId' when calling AuthServiceApi->AuthInternalDisassociateLogin");

            // verify the required parameter 'gateway' is set
            if (gateway == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'gateway' when calling AuthServiceApi->AuthInternalDisassociateLogin");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalDisassociateLogin");


            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", SnapserInternal.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Gateway", SnapserInternal.Client.ClientUtils.ParameterToString(gateway)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/auth/users/{user_id}/disassociation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalDisassociateLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Discord Login Logs in the user based on the discord token specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthDiscordLoginResponse</returns>
        public AuthDiscordLoginResponse AuthInternalDiscordLogin(AuthDiscordLoginRequest body)
        {
            SnapserInternal.Client.ApiResponse<AuthDiscordLoginResponse> localVarResponse = AuthInternalDiscordLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Discord Login Logs in the user based on the discord token specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthDiscordLoginResponse</returns>
        public SnapserInternal.Client.ApiResponse<AuthDiscordLoginResponse> AuthInternalDiscordLoginWithHttpInfo(AuthDiscordLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalDiscordLogin");

            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthDiscordLoginResponse>("/v1/auth/discord/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalDiscordLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Discord Login Logs in the user based on the discord token specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthDiscordLoginResponse</returns>
        public async System.Threading.Tasks.Task<AuthDiscordLoginResponse> AuthInternalDiscordLoginAsync(AuthDiscordLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapserInternal.Client.ApiResponse<AuthDiscordLoginResponse> localVarResponse = await AuthInternalDiscordLoginWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Discord Login Logs in the user based on the discord token specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthDiscordLoginResponse)</returns>
        public async System.Threading.Tasks.Task<SnapserInternal.Client.ApiResponse<AuthDiscordLoginResponse>> AuthInternalDiscordLoginWithHttpInfoAsync(AuthDiscordLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalDiscordLogin");


            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<AuthDiscordLoginResponse>("/v1/auth/discord/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalDiscordLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email Login Logs in the user based on the email and OTP specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthEmailLoginResponse</returns>
        public AuthEmailLoginResponse AuthInternalEmailLogin(AuthEmailLoginRequest body)
        {
            SnapserInternal.Client.ApiResponse<AuthEmailLoginResponse> localVarResponse = AuthInternalEmailLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email Login Logs in the user based on the email and OTP specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthEmailLoginResponse</returns>
        public SnapserInternal.Client.ApiResponse<AuthEmailLoginResponse> AuthInternalEmailLoginWithHttpInfo(AuthEmailLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalEmailLogin");

            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthEmailLoginResponse>("/v1/auth/login/email", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalEmailLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email Login Logs in the user based on the email and OTP specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthEmailLoginResponse</returns>
        public async System.Threading.Tasks.Task<AuthEmailLoginResponse> AuthInternalEmailLoginAsync(AuthEmailLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapserInternal.Client.ApiResponse<AuthEmailLoginResponse> localVarResponse = await AuthInternalEmailLoginWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email Login Logs in the user based on the email and OTP specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthEmailLoginResponse)</returns>
        public async System.Threading.Tasks.Task<SnapserInternal.Client.ApiResponse<AuthEmailLoginResponse>> AuthInternalEmailLoginWithHttpInfoAsync(AuthEmailLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalEmailLogin");


            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<AuthEmailLoginResponse>("/v1/auth/login/email", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalEmailLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email Password Login Logs in the user based on the email and password specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthEmailPasswordLoginResponse</returns>
        public AuthEmailPasswordLoginResponse AuthInternalEmailPasswordLogin(AuthEmailPasswordLoginRequest body)
        {
            SnapserInternal.Client.ApiResponse<AuthEmailPasswordLoginResponse> localVarResponse = AuthInternalEmailPasswordLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email Password Login Logs in the user based on the email and password specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthEmailPasswordLoginResponse</returns>
        public SnapserInternal.Client.ApiResponse<AuthEmailPasswordLoginResponse> AuthInternalEmailPasswordLoginWithHttpInfo(AuthEmailPasswordLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalEmailPasswordLogin");

            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthEmailPasswordLoginResponse>("/v1/auth/email-password/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalEmailPasswordLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email Password Login Logs in the user based on the email and password specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthEmailPasswordLoginResponse</returns>
        public async System.Threading.Tasks.Task<AuthEmailPasswordLoginResponse> AuthInternalEmailPasswordLoginAsync(AuthEmailPasswordLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapserInternal.Client.ApiResponse<AuthEmailPasswordLoginResponse> localVarResponse = await AuthInternalEmailPasswordLoginWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email Password Login Logs in the user based on the email and password specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthEmailPasswordLoginResponse)</returns>
        public async System.Threading.Tasks.Task<SnapserInternal.Client.ApiResponse<AuthEmailPasswordLoginResponse>> AuthInternalEmailPasswordLoginWithHttpInfoAsync(AuthEmailPasswordLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalEmailPasswordLogin");


            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<AuthEmailPasswordLoginResponse>("/v1/auth/email-password/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalEmailPasswordLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Epic Login Logs in the user based on the epic credentials specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthEpicLoginResponse</returns>
        public AuthEpicLoginResponse AuthInternalEpicLogin(AuthEpicLoginRequest body)
        {
            SnapserInternal.Client.ApiResponse<AuthEpicLoginResponse> localVarResponse = AuthInternalEpicLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Epic Login Logs in the user based on the epic credentials specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthEpicLoginResponse</returns>
        public SnapserInternal.Client.ApiResponse<AuthEpicLoginResponse> AuthInternalEpicLoginWithHttpInfo(AuthEpicLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalEpicLogin");

            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthEpicLoginResponse>("/v1/auth/login/epic", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalEpicLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Epic Login Logs in the user based on the epic credentials specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthEpicLoginResponse</returns>
        public async System.Threading.Tasks.Task<AuthEpicLoginResponse> AuthInternalEpicLoginAsync(AuthEpicLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapserInternal.Client.ApiResponse<AuthEpicLoginResponse> localVarResponse = await AuthInternalEpicLoginWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Epic Login Logs in the user based on the epic credentials specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthEpicLoginResponse)</returns>
        public async System.Threading.Tasks.Task<SnapserInternal.Client.ApiResponse<AuthEpicLoginResponse>> AuthInternalEpicLoginWithHttpInfoAsync(AuthEpicLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalEpicLogin");


            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<AuthEpicLoginResponse>("/v1/auth/login/epic", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalEpicLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Facebook Login Logs in the user based on the facebook credential token specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthFacebookLoginResponse</returns>
        public AuthFacebookLoginResponse AuthInternalFacebookLogin(AuthFacebookLoginRequest body)
        {
            SnapserInternal.Client.ApiResponse<AuthFacebookLoginResponse> localVarResponse = AuthInternalFacebookLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Facebook Login Logs in the user based on the facebook credential token specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthFacebookLoginResponse</returns>
        public SnapserInternal.Client.ApiResponse<AuthFacebookLoginResponse> AuthInternalFacebookLoginWithHttpInfo(AuthFacebookLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalFacebookLogin");

            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthFacebookLoginResponse>("/v1/auth/login/facebook", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalFacebookLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Facebook Login Logs in the user based on the facebook credential token specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthFacebookLoginResponse</returns>
        public async System.Threading.Tasks.Task<AuthFacebookLoginResponse> AuthInternalFacebookLoginAsync(AuthFacebookLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapserInternal.Client.ApiResponse<AuthFacebookLoginResponse> localVarResponse = await AuthInternalFacebookLoginWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Facebook Login Logs in the user based on the facebook credential token specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthFacebookLoginResponse)</returns>
        public async System.Threading.Tasks.Task<SnapserInternal.Client.ApiResponse<AuthFacebookLoginResponse>> AuthInternalFacebookLoginWithHttpInfoAsync(AuthFacebookLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalFacebookLogin");


            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<AuthFacebookLoginResponse>("/v1/auth/login/facebook", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalFacebookLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Ids Get UserIDs by login IDs and login types
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginIds">Comma separated login IDs of the user to be retrieved</param>
        /// <param name="loginType">Login type to search by. Values must be one of &#39;email&#39;, &#39;anon&#39;, &#39;apple&#39;, &#39;facebook&#39;, &#39;google&#39;, &#39;steam&#39;, &#39;xbox&#39;, &#39;epic&#39;</param>
        /// <param name="gateway">Gateway</param>
        /// <returns>AuthGetUserIdsByLoginIdsResponse</returns>
        public AuthGetUserIdsByLoginIdsResponse AuthInternalGetUserIdsByLoginIds(string loginIds, string loginType, string gateway)
        {
            SnapserInternal.Client.ApiResponse<AuthGetUserIdsByLoginIdsResponse> localVarResponse = AuthInternalGetUserIdsByLoginIdsWithHttpInfo(loginIds, loginType, gateway);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Ids Get UserIDs by login IDs and login types
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginIds">Comma separated login IDs of the user to be retrieved</param>
        /// <param name="loginType">Login type to search by. Values must be one of &#39;email&#39;, &#39;anon&#39;, &#39;apple&#39;, &#39;facebook&#39;, &#39;google&#39;, &#39;steam&#39;, &#39;xbox&#39;, &#39;epic&#39;</param>
        /// <param name="gateway">Gateway</param>
        /// <returns>ApiResponse of AuthGetUserIdsByLoginIdsResponse</returns>
        public SnapserInternal.Client.ApiResponse<AuthGetUserIdsByLoginIdsResponse> AuthInternalGetUserIdsByLoginIdsWithHttpInfo(string loginIds, string loginType, string gateway)
        {
            // verify the required parameter 'loginIds' is set
            if (loginIds == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'loginIds' when calling AuthServiceApi->AuthInternalGetUserIdsByLoginIds");

            // verify the required parameter 'loginType' is set
            if (loginType == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'loginType' when calling AuthServiceApi->AuthInternalGetUserIdsByLoginIds");

            // verify the required parameter 'gateway' is set
            if (gateway == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'gateway' when calling AuthServiceApi->AuthInternalGetUserIdsByLoginIds");

            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(SnapserInternal.Client.ClientUtils.ParameterToMultiMap("", "login_ids", loginIds));
            localVarRequestOptions.QueryParameters.Add(SnapserInternal.Client.ClientUtils.ParameterToMultiMap("", "login_type", loginType));
            localVarRequestOptions.HeaderParameters.Add("Gateway", SnapserInternal.Client.ClientUtils.ParameterToString(gateway)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<AuthGetUserIdsByLoginIdsResponse>("/v1/auth/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalGetUserIdsByLoginIds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Ids Get UserIDs by login IDs and login types
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginIds">Comma separated login IDs of the user to be retrieved</param>
        /// <param name="loginType">Login type to search by. Values must be one of &#39;email&#39;, &#39;anon&#39;, &#39;apple&#39;, &#39;facebook&#39;, &#39;google&#39;, &#39;steam&#39;, &#39;xbox&#39;, &#39;epic&#39;</param>
        /// <param name="gateway">Gateway</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthGetUserIdsByLoginIdsResponse</returns>
        public async System.Threading.Tasks.Task<AuthGetUserIdsByLoginIdsResponse> AuthInternalGetUserIdsByLoginIdsAsync(string loginIds, string loginType, string gateway, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapserInternal.Client.ApiResponse<AuthGetUserIdsByLoginIdsResponse> localVarResponse = await AuthInternalGetUserIdsByLoginIdsWithHttpInfoAsync(loginIds, loginType, gateway, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Ids Get UserIDs by login IDs and login types
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginIds">Comma separated login IDs of the user to be retrieved</param>
        /// <param name="loginType">Login type to search by. Values must be one of &#39;email&#39;, &#39;anon&#39;, &#39;apple&#39;, &#39;facebook&#39;, &#39;google&#39;, &#39;steam&#39;, &#39;xbox&#39;, &#39;epic&#39;</param>
        /// <param name="gateway">Gateway</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthGetUserIdsByLoginIdsResponse)</returns>
        public async System.Threading.Tasks.Task<SnapserInternal.Client.ApiResponse<AuthGetUserIdsByLoginIdsResponse>> AuthInternalGetUserIdsByLoginIdsWithHttpInfoAsync(string loginIds, string loginType, string gateway, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'loginIds' is set
            if (loginIds == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'loginIds' when calling AuthServiceApi->AuthInternalGetUserIdsByLoginIds");

            // verify the required parameter 'loginType' is set
            if (loginType == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'loginType' when calling AuthServiceApi->AuthInternalGetUserIdsByLoginIds");

            // verify the required parameter 'gateway' is set
            if (gateway == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'gateway' when calling AuthServiceApi->AuthInternalGetUserIdsByLoginIds");


            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(SnapserInternal.Client.ClientUtils.ParameterToMultiMap("", "login_ids", loginIds));
            localVarRequestOptions.QueryParameters.Add(SnapserInternal.Client.ClientUtils.ParameterToMultiMap("", "login_type", loginType));
            localVarRequestOptions.HeaderParameters.Add("Gateway", SnapserInternal.Client.ClientUtils.ParameterToString(gateway)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AuthGetUserIdsByLoginIdsResponse>("/v1/auth/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalGetUserIdsByLoginIds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Username Password Login Checks if the username is available
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username to check</param>
        /// <returns>AuthGetUsernameAvailabilityResponse</returns>
        public AuthGetUsernameAvailabilityResponse AuthInternalGetUsernameAvailability(string username)
        {
            SnapserInternal.Client.ApiResponse<AuthGetUsernameAvailabilityResponse> localVarResponse = AuthInternalGetUsernameAvailabilityWithHttpInfo(username);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Username Password Login Checks if the username is available
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username to check</param>
        /// <returns>ApiResponse of AuthGetUsernameAvailabilityResponse</returns>
        public SnapserInternal.Client.ApiResponse<AuthGetUsernameAvailabilityResponse> AuthInternalGetUsernameAvailabilityWithHttpInfo(string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'username' when calling AuthServiceApi->AuthInternalGetUsernameAvailability");

            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(SnapserInternal.Client.ClientUtils.ParameterToMultiMap("", "username", username));


            // make the HTTP request
            var localVarResponse = this.Client.Get<AuthGetUsernameAvailabilityResponse>("/v1/auth/username-password/availability", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalGetUsernameAvailability", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Username Password Login Checks if the username is available
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username to check</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthGetUsernameAvailabilityResponse</returns>
        public async System.Threading.Tasks.Task<AuthGetUsernameAvailabilityResponse> AuthInternalGetUsernameAvailabilityAsync(string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapserInternal.Client.ApiResponse<AuthGetUsernameAvailabilityResponse> localVarResponse = await AuthInternalGetUsernameAvailabilityWithHttpInfoAsync(username, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Username Password Login Checks if the username is available
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username to check</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthGetUsernameAvailabilityResponse)</returns>
        public async System.Threading.Tasks.Task<SnapserInternal.Client.ApiResponse<AuthGetUsernameAvailabilityResponse>> AuthInternalGetUsernameAvailabilityWithHttpInfoAsync(string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'username' when calling AuthServiceApi->AuthInternalGetUsernameAvailability");


            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(SnapserInternal.Client.ClientUtils.ParameterToMultiMap("", "username", username));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AuthGetUsernameAvailabilityResponse>("/v1/auth/username-password/availability", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalGetUsernameAvailability", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Google Login Logs in the user based on the google credential token specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthGoogleLoginResponse</returns>
        public AuthGoogleLoginResponse AuthInternalGoogleLogin(AuthGoogleLoginRequest body)
        {
            SnapserInternal.Client.ApiResponse<AuthGoogleLoginResponse> localVarResponse = AuthInternalGoogleLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Google Login Logs in the user based on the google credential token specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthGoogleLoginResponse</returns>
        public SnapserInternal.Client.ApiResponse<AuthGoogleLoginResponse> AuthInternalGoogleLoginWithHttpInfo(AuthGoogleLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalGoogleLogin");

            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthGoogleLoginResponse>("/v1/auth/login/google", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalGoogleLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Google Login Logs in the user based on the google credential token specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthGoogleLoginResponse</returns>
        public async System.Threading.Tasks.Task<AuthGoogleLoginResponse> AuthInternalGoogleLoginAsync(AuthGoogleLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapserInternal.Client.ApiResponse<AuthGoogleLoginResponse> localVarResponse = await AuthInternalGoogleLoginWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Google Login Logs in the user based on the google credential token specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthGoogleLoginResponse)</returns>
        public async System.Threading.Tasks.Task<SnapserInternal.Client.ApiResponse<AuthGoogleLoginResponse>> AuthInternalGoogleLoginWithHttpInfoAsync(AuthGoogleLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalGoogleLogin");


            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<AuthGoogleLoginResponse>("/v1/auth/login/google", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalGoogleLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Logout User Ends the current session of the user
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Session token to logout</param>
        /// <param name="gateway">Gateway</param>
        /// <returns>Object</returns>
        public Object AuthInternalLogout(string token, string gateway)
        {
            SnapserInternal.Client.ApiResponse<Object> localVarResponse = AuthInternalLogoutWithHttpInfo(token, gateway);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Logout User Ends the current session of the user
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Session token to logout</param>
        /// <param name="gateway">Gateway</param>
        /// <returns>ApiResponse of Object</returns>
        public SnapserInternal.Client.ApiResponse<Object> AuthInternalLogoutWithHttpInfo(string token, string gateway)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'token' when calling AuthServiceApi->AuthInternalLogout");

            // verify the required parameter 'gateway' is set
            if (gateway == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'gateway' when calling AuthServiceApi->AuthInternalLogout");

            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("token", SnapserInternal.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Gateway", SnapserInternal.Client.ClientUtils.ParameterToString(gateway)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/auth/logout/{token}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalLogout", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Logout User Ends the current session of the user
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Session token to logout</param>
        /// <param name="gateway">Gateway</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AuthInternalLogoutAsync(string token, string gateway, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapserInternal.Client.ApiResponse<Object> localVarResponse = await AuthInternalLogoutWithHttpInfoAsync(token, gateway, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Logout User Ends the current session of the user
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Session token to logout</param>
        /// <param name="gateway">Gateway</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SnapserInternal.Client.ApiResponse<Object>> AuthInternalLogoutWithHttpInfoAsync(string token, string gateway, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'token' when calling AuthServiceApi->AuthInternalLogout");

            // verify the required parameter 'gateway' is set
            if (gateway == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'gateway' when calling AuthServiceApi->AuthInternalLogout");


            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("token", SnapserInternal.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Gateway", SnapserInternal.Client.ClientUtils.ParameterToString(gateway)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/auth/logout/{token}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalLogout", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email Login Generates an OTP and sends it to the email for logging in
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object AuthInternalOtp(AuthOtpRequest body)
        {
            SnapserInternal.Client.ApiResponse<Object> localVarResponse = AuthInternalOtpWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email Login Generates an OTP and sends it to the email for logging in
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public SnapserInternal.Client.ApiResponse<Object> AuthInternalOtpWithHttpInfo(AuthOtpRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalOtp");

            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/auth/otp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalOtp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email Login Generates an OTP and sends it to the email for logging in
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AuthInternalOtpAsync(AuthOtpRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapserInternal.Client.ApiResponse<Object> localVarResponse = await AuthInternalOtpWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email Login Generates an OTP and sends it to the email for logging in
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SnapserInternal.Client.ApiResponse<Object>> AuthInternalOtpWithHttpInfoAsync(AuthOtpRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalOtp");


            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/auth/otp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalOtp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email Password Login Sends an email to the user for account recovery
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object AuthInternalRecoverEmailAccount(AuthRecoverEmailAccountRequest body)
        {
            SnapserInternal.Client.ApiResponse<Object> localVarResponse = AuthInternalRecoverEmailAccountWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email Password Login Sends an email to the user for account recovery
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public SnapserInternal.Client.ApiResponse<Object> AuthInternalRecoverEmailAccountWithHttpInfo(AuthRecoverEmailAccountRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalRecoverEmailAccount");

            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/auth/email-password/account-recovery", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalRecoverEmailAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email Password Login Sends an email to the user for account recovery
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AuthInternalRecoverEmailAccountAsync(AuthRecoverEmailAccountRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapserInternal.Client.ApiResponse<Object> localVarResponse = await AuthInternalRecoverEmailAccountWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email Password Login Sends an email to the user for account recovery
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SnapserInternal.Client.ApiResponse<Object>> AuthInternalRecoverEmailAccountWithHttpInfoAsync(AuthRecoverEmailAccountRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalRecoverEmailAccount");


            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/auth/email-password/account-recovery", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalRecoverEmailAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Token Refreshes the session and returns a new session token with refreshed validity
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gateway">Gateway</param>
        /// <param name="body"></param>
        /// <returns>AuthRefreshResponse</returns>
        public AuthRefreshResponse AuthInternalRefresh(string gateway, AuthRefreshRequest body)
        {
            SnapserInternal.Client.ApiResponse<AuthRefreshResponse> localVarResponse = AuthInternalRefreshWithHttpInfo(gateway, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Token Refreshes the session and returns a new session token with refreshed validity
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gateway">Gateway</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthRefreshResponse</returns>
        public SnapserInternal.Client.ApiResponse<AuthRefreshResponse> AuthInternalRefreshWithHttpInfo(string gateway, AuthRefreshRequest body)
        {
            // verify the required parameter 'gateway' is set
            if (gateway == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'gateway' when calling AuthServiceApi->AuthInternalRefresh");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalRefresh");

            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Gateway", SnapserInternal.Client.ClientUtils.ParameterToString(gateway)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<AuthRefreshResponse>("/v1/auth/refresh", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalRefresh", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Token Refreshes the session and returns a new session token with refreshed validity
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gateway">Gateway</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthRefreshResponse</returns>
        public async System.Threading.Tasks.Task<AuthRefreshResponse> AuthInternalRefreshAsync(string gateway, AuthRefreshRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapserInternal.Client.ApiResponse<AuthRefreshResponse> localVarResponse = await AuthInternalRefreshWithHttpInfoAsync(gateway, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Token Refreshes the session and returns a new session token with refreshed validity
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gateway">Gateway</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthRefreshResponse)</returns>
        public async System.Threading.Tasks.Task<SnapserInternal.Client.ApiResponse<AuthRefreshResponse>> AuthInternalRefreshWithHttpInfoAsync(string gateway, AuthRefreshRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'gateway' is set
            if (gateway == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'gateway' when calling AuthServiceApi->AuthInternalRefresh");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalRefresh");


            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Gateway", SnapserInternal.Client.ClientUtils.ParameterToString(gateway)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<AuthRefreshResponse>("/v1/auth/refresh", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalRefresh", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Steam Login Logs in the user based on the steam token specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthSteamLoginResponse</returns>
        [Obsolete]
        public AuthSteamLoginResponse AuthInternalSteamLogin(AuthSteamLoginRequest body)
        {
            SnapserInternal.Client.ApiResponse<AuthSteamLoginResponse> localVarResponse = AuthInternalSteamLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Steam Login Logs in the user based on the steam token specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthSteamLoginResponse</returns>
        [Obsolete]
        public SnapserInternal.Client.ApiResponse<AuthSteamLoginResponse> AuthInternalSteamLoginWithHttpInfo(AuthSteamLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalSteamLogin");

            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthSteamLoginResponse>("/v1/auth/login/steam", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalSteamLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Steam Login Logs in the user based on the steam token specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthSteamLoginResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<AuthSteamLoginResponse> AuthInternalSteamLoginAsync(AuthSteamLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapserInternal.Client.ApiResponse<AuthSteamLoginResponse> localVarResponse = await AuthInternalSteamLoginWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Steam Login Logs in the user based on the steam token specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthSteamLoginResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<SnapserInternal.Client.ApiResponse<AuthSteamLoginResponse>> AuthInternalSteamLoginWithHttpInfoAsync(AuthSteamLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalSteamLogin");


            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<AuthSteamLoginResponse>("/v1/auth/login/steam", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalSteamLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Steam Login Logs in the user based on the steam open ID token specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthSteamLoginResponse</returns>
        public AuthSteamLoginResponse AuthInternalSteamOpenIdLogin(AuthSteamOpenIdLoginRequest body)
        {
            SnapserInternal.Client.ApiResponse<AuthSteamLoginResponse> localVarResponse = AuthInternalSteamOpenIdLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Steam Login Logs in the user based on the steam open ID token specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthSteamLoginResponse</returns>
        public SnapserInternal.Client.ApiResponse<AuthSteamLoginResponse> AuthInternalSteamOpenIdLoginWithHttpInfo(AuthSteamOpenIdLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalSteamOpenIdLogin");

            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthSteamLoginResponse>("/v1/auth/steam/openid/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalSteamOpenIdLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Steam Login Logs in the user based on the steam open ID token specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthSteamLoginResponse</returns>
        public async System.Threading.Tasks.Task<AuthSteamLoginResponse> AuthInternalSteamOpenIdLoginAsync(AuthSteamOpenIdLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapserInternal.Client.ApiResponse<AuthSteamLoginResponse> localVarResponse = await AuthInternalSteamOpenIdLoginWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Steam Login Logs in the user based on the steam open ID token specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthSteamLoginResponse)</returns>
        public async System.Threading.Tasks.Task<SnapserInternal.Client.ApiResponse<AuthSteamLoginResponse>> AuthInternalSteamOpenIdLoginWithHttpInfoAsync(AuthSteamOpenIdLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalSteamOpenIdLogin");


            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<AuthSteamLoginResponse>("/v1/auth/steam/openid/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalSteamOpenIdLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Steam Login Logs in the user based on the steam session ticket specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthSteamLoginResponse</returns>
        public AuthSteamLoginResponse AuthInternalSteamSessionTicketLogin(AuthSteamSessionTicketLoginRequest body)
        {
            SnapserInternal.Client.ApiResponse<AuthSteamLoginResponse> localVarResponse = AuthInternalSteamSessionTicketLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Steam Login Logs in the user based on the steam session ticket specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthSteamLoginResponse</returns>
        public SnapserInternal.Client.ApiResponse<AuthSteamLoginResponse> AuthInternalSteamSessionTicketLoginWithHttpInfo(AuthSteamSessionTicketLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalSteamSessionTicketLogin");

            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthSteamLoginResponse>("/v1/auth/steam/session-ticket/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalSteamSessionTicketLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Steam Login Logs in the user based on the steam session ticket specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthSteamLoginResponse</returns>
        public async System.Threading.Tasks.Task<AuthSteamLoginResponse> AuthInternalSteamSessionTicketLoginAsync(AuthSteamSessionTicketLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapserInternal.Client.ApiResponse<AuthSteamLoginResponse> localVarResponse = await AuthInternalSteamSessionTicketLoginWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Steam Login Logs in the user based on the steam session ticket specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthSteamLoginResponse)</returns>
        public async System.Threading.Tasks.Task<SnapserInternal.Client.ApiResponse<AuthSteamLoginResponse>> AuthInternalSteamSessionTicketLoginWithHttpInfoAsync(AuthSteamSessionTicketLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalSteamSessionTicketLogin");


            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<AuthSteamLoginResponse>("/v1/auth/steam/session-ticket/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalSteamSessionTicketLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email Password Login Updates the email and password of the user
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object AuthInternalUpdateEmailPassword(AuthUpdateEmailPasswordRequest body)
        {
            SnapserInternal.Client.ApiResponse<Object> localVarResponse = AuthInternalUpdateEmailPasswordWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email Password Login Updates the email and password of the user
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public SnapserInternal.Client.ApiResponse<Object> AuthInternalUpdateEmailPasswordWithHttpInfo(AuthUpdateEmailPasswordRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalUpdateEmailPassword");

            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/auth/email-password/password", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalUpdateEmailPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email Password Login Updates the email and password of the user
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AuthInternalUpdateEmailPasswordAsync(AuthUpdateEmailPasswordRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapserInternal.Client.ApiResponse<Object> localVarResponse = await AuthInternalUpdateEmailPasswordWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email Password Login Updates the email and password of the user
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SnapserInternal.Client.ApiResponse<Object>> AuthInternalUpdateEmailPasswordWithHttpInfoAsync(AuthUpdateEmailPasswordRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalUpdateEmailPassword");


            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v1/auth/email-password/password", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalUpdateEmailPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Username Password Login Updates the username and password of the user
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gateway">Gateway</param>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object AuthInternalUpdateUsernamePassword(string gateway, AuthUpdateUsernamePasswordRequest body)
        {
            SnapserInternal.Client.ApiResponse<Object> localVarResponse = AuthInternalUpdateUsernamePasswordWithHttpInfo(gateway, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Username Password Login Updates the username and password of the user
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gateway">Gateway</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public SnapserInternal.Client.ApiResponse<Object> AuthInternalUpdateUsernamePasswordWithHttpInfo(string gateway, AuthUpdateUsernamePasswordRequest body)
        {
            // verify the required parameter 'gateway' is set
            if (gateway == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'gateway' when calling AuthServiceApi->AuthInternalUpdateUsernamePassword");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalUpdateUsernamePassword");

            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Gateway", SnapserInternal.Client.ClientUtils.ParameterToString(gateway)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/auth/username-password/password", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalUpdateUsernamePassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Username Password Login Updates the username and password of the user
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gateway">Gateway</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AuthInternalUpdateUsernamePasswordAsync(string gateway, AuthUpdateUsernamePasswordRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapserInternal.Client.ApiResponse<Object> localVarResponse = await AuthInternalUpdateUsernamePasswordWithHttpInfoAsync(gateway, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Username Password Login Updates the username and password of the user
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gateway">Gateway</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<SnapserInternal.Client.ApiResponse<Object>> AuthInternalUpdateUsernamePasswordWithHttpInfoAsync(string gateway, AuthUpdateUsernamePasswordRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'gateway' is set
            if (gateway == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'gateway' when calling AuthServiceApi->AuthInternalUpdateUsernamePassword");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalUpdateUsernamePassword");


            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Gateway", SnapserInternal.Client.ClientUtils.ParameterToString(gateway)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v1/auth/username-password/password", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalUpdateUsernamePassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Username Password Login Logs in the user based on the username and password specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthUsernamePasswordLoginResponse</returns>
        public AuthUsernamePasswordLoginResponse AuthInternalUsernamePasswordLogin(AuthUsernamePasswordLoginRequest body)
        {
            SnapserInternal.Client.ApiResponse<AuthUsernamePasswordLoginResponse> localVarResponse = AuthInternalUsernamePasswordLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Username Password Login Logs in the user based on the username and password specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthUsernamePasswordLoginResponse</returns>
        public SnapserInternal.Client.ApiResponse<AuthUsernamePasswordLoginResponse> AuthInternalUsernamePasswordLoginWithHttpInfo(AuthUsernamePasswordLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalUsernamePasswordLogin");

            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthUsernamePasswordLoginResponse>("/v1/auth/username-password/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalUsernamePasswordLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Username Password Login Logs in the user based on the username and password specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthUsernamePasswordLoginResponse</returns>
        public async System.Threading.Tasks.Task<AuthUsernamePasswordLoginResponse> AuthInternalUsernamePasswordLoginAsync(AuthUsernamePasswordLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapserInternal.Client.ApiResponse<AuthUsernamePasswordLoginResponse> localVarResponse = await AuthInternalUsernamePasswordLoginWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Username Password Login Logs in the user based on the username and password specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthUsernamePasswordLoginResponse)</returns>
        public async System.Threading.Tasks.Task<SnapserInternal.Client.ApiResponse<AuthUsernamePasswordLoginResponse>> AuthInternalUsernamePasswordLoginWithHttpInfoAsync(AuthUsernamePasswordLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalUsernamePasswordLogin");


            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<AuthUsernamePasswordLoginResponse>("/v1/auth/username-password/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalUsernamePasswordLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Token Validates the session of the user and returns the user info
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthValidateResponse</returns>
        public AuthValidateResponse AuthInternalValidate(AuthValidateRequest body)
        {
            SnapserInternal.Client.ApiResponse<AuthValidateResponse> localVarResponse = AuthInternalValidateWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Token Validates the session of the user and returns the user info
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthValidateResponse</returns>
        public SnapserInternal.Client.ApiResponse<AuthValidateResponse> AuthInternalValidateWithHttpInfo(AuthValidateRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalValidate");

            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthValidateResponse>("/v1/auth/validate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalValidate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Token Validates the session of the user and returns the user info
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthValidateResponse</returns>
        public async System.Threading.Tasks.Task<AuthValidateResponse> AuthInternalValidateAsync(AuthValidateRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapserInternal.Client.ApiResponse<AuthValidateResponse> localVarResponse = await AuthInternalValidateWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Token Validates the session of the user and returns the user info
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthValidateResponse)</returns>
        public async System.Threading.Tasks.Task<SnapserInternal.Client.ApiResponse<AuthValidateResponse>> AuthInternalValidateWithHttpInfoAsync(AuthValidateRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalValidate");


            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthValidateResponse>("/v1/auth/validate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalValidate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email Password Login Verifies the email and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthVerifyEmailResponse</returns>
        public AuthVerifyEmailResponse AuthInternalVerifyEmail(AuthVerifyEmailRequest body)
        {
            SnapserInternal.Client.ApiResponse<AuthVerifyEmailResponse> localVarResponse = AuthInternalVerifyEmailWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email Password Login Verifies the email and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthVerifyEmailResponse</returns>
        public SnapserInternal.Client.ApiResponse<AuthVerifyEmailResponse> AuthInternalVerifyEmailWithHttpInfo(AuthVerifyEmailRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalVerifyEmail");

            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthVerifyEmailResponse>("/v1/auth/email-password/verification", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalVerifyEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email Password Login Verifies the email and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthVerifyEmailResponse</returns>
        public async System.Threading.Tasks.Task<AuthVerifyEmailResponse> AuthInternalVerifyEmailAsync(AuthVerifyEmailRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapserInternal.Client.ApiResponse<AuthVerifyEmailResponse> localVarResponse = await AuthInternalVerifyEmailWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email Password Login Verifies the email and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthVerifyEmailResponse)</returns>
        public async System.Threading.Tasks.Task<SnapserInternal.Client.ApiResponse<AuthVerifyEmailResponse>> AuthInternalVerifyEmailWithHttpInfoAsync(AuthVerifyEmailRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalVerifyEmail");


            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthVerifyEmailResponse>("/v1/auth/email-password/verification", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalVerifyEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Xbox Login Logs in the user based on the xbox token specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthXboxLoginResponse</returns>
        public AuthXboxLoginResponse AuthInternalXboxLogin(AuthXboxLoginRequest body)
        {
            SnapserInternal.Client.ApiResponse<AuthXboxLoginResponse> localVarResponse = AuthInternalXboxLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Xbox Login Logs in the user based on the xbox token specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthXboxLoginResponse</returns>
        public SnapserInternal.Client.ApiResponse<AuthXboxLoginResponse> AuthInternalXboxLoginWithHttpInfo(AuthXboxLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalXboxLogin");

            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthXboxLoginResponse>("/v1/auth/login/xbox", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalXboxLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Xbox Login Logs in the user based on the xbox token specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthXboxLoginResponse</returns>
        public async System.Threading.Tasks.Task<AuthXboxLoginResponse> AuthInternalXboxLoginAsync(AuthXboxLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapserInternal.Client.ApiResponse<AuthXboxLoginResponse> localVarResponse = await AuthInternalXboxLoginWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Xbox Login Logs in the user based on the xbox token specified and returns a session
        /// </summary>
        /// <exception cref="SnapserInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthXboxLoginResponse)</returns>
        public async System.Threading.Tasks.Task<SnapserInternal.Client.ApiResponse<AuthXboxLoginResponse>> AuthInternalXboxLoginWithHttpInfoAsync(AuthXboxLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new SnapserInternal.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AuthInternalXboxLogin");


            SnapserInternal.Client.RequestOptions localVarRequestOptions = new SnapserInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SnapserInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SnapserInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<AuthXboxLoginResponse>("/v1/auth/login/xbox", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthInternalXboxLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
