openapi: 3.0.1
info:
  description: Your custom SDK
  title: my-dev-cluster
  version: "my-dev-cluster: v9 SDK"
servers:
- url: /
tags:
- name: AuthService
- name: ProfilesService
paths:
  /v1/auth/app-verify/{type}:
    get:
      description: Verifies the session token and returns appropriate response based
        on the type
      operationId: auth.Internal.AppVerify
      parameters:
      - description: Type of app trying to verify the session token. Only acceptable
          value is 'photon'
        explode: false
        in: path
        name: type
        required: true
        schema:
          type: string
        style: simple
      - description: Session token of the user
        explode: true
        in: query
        name: session_token
        required: false
        schema:
          type: string
        style: form
      - description: Shared secret used to verify the request
        explode: true
        in: query
        name: client_secret
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiHttpBody'
          description: A successful response.
      summary: Token
      tags:
      - AuthService
      x-snapser-auth-passthrough: true
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    servers:
    - url: http://service-auth:8090
  /v1/auth/associate-logins:
    put:
      description: Associates two logins based on their session tokens
      operationId: auth.Internal.AssociateLogins
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authAssociateLoginsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: A successful response.
      summary: Associate Multiple Logins
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-snapser-auth-passthrough: true
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    servers:
    - url: http://service-auth:8090
  /v1/auth/discord/login:
    put:
      description: Logs in the user based on the discord token specified and returns
        a session
      operationId: auth.Internal.DiscordLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authDiscordLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authDiscordLoginResponse'
          description: A successful response.
      summary: Discord Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-snapser-auth-passthrough: true
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    servers:
    - url: http://service-auth:8090
  /v1/auth/email-password/account-recovery:
    post:
      description: Sends an email to the user for account recovery
      operationId: auth.Internal.RecoverEmailAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authRecoverEmailAccountRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: A successful response.
      summary: Email Password Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-snapser-auth-passthrough: true
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    servers:
    - url: http://service-auth:8090
  /v1/auth/email-password/login:
    put:
      description: Logs in the user based on the email and password specified and
        returns a session
      operationId: auth.Internal.EmailPasswordLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authEmailPasswordLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authEmailPasswordLoginResponse'
          description: A successful response.
      summary: Email Password Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-snapser-auth-passthrough: true
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    servers:
    - url: http://service-auth:8090
  /v1/auth/email-password/password:
    put:
      description: Updates the email and password of the user
      operationId: auth.Internal.UpdateEmailPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authUpdateEmailPasswordRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: A successful response.
      summary: Email Password Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-snapser-auth-passthrough: true
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    servers:
    - url: http://service-auth:8090
  /v1/auth/email-password/verification:
    post:
      description: Verifies the email and returns a session
      operationId: auth.Internal.VerifyEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authVerifyEmailRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authVerifyEmailResponse'
          description: A successful response.
      summary: Email Password Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-snapser-auth-passthrough: true
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    servers:
    - url: http://service-auth:8090
  /v1/auth/login/anon:
    put:
      description: Logs in the user with an arbitrary identifier specified and returns
        a session
      operationId: auth.Internal.AnonLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authAnonLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authAnonLoginResponse'
          description: A successful response.
      summary: Anonymous Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-snapser-auth-passthrough: true
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    servers:
    - url: http://service-auth:8090
  /v1/auth/login/apple:
    put:
      description: Logs in the user based on the apple credential token specified
        and returns a session
      operationId: auth.Internal.AppleLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authAppleLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authAppleLoginResponse'
          description: A successful response.
      summary: Apple Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-snapser-auth-passthrough: true
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    servers:
    - url: http://service-auth:8090
  /v1/auth/login/email:
    put:
      description: Logs in the user based on the email and OTP specified and returns
        a session
      operationId: auth.Internal.EmailLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authEmailLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authEmailLoginResponse'
          description: A successful response.
      summary: Email Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-snapser-auth-passthrough: true
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    servers:
    - url: http://service-auth:8090
  /v1/auth/login/epic:
    put:
      description: Logs in the user based on the epic credentials specified and returns
        a session
      operationId: auth.Internal.EpicLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authEpicLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authEpicLoginResponse'
          description: A successful response.
      summary: Epic Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-snapser-auth-passthrough: true
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    servers:
    - url: http://service-auth:8090
  /v1/auth/login/facebook:
    put:
      description: Logs in the user based on the facebook credential token specified
        and returns a session
      operationId: auth.Internal.FacebookLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authFacebookLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authFacebookLoginResponse'
          description: A successful response.
      summary: Facebook Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-snapser-auth-passthrough: true
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    servers:
    - url: http://service-auth:8090
  /v1/auth/login/google:
    put:
      description: Logs in the user based on the google credential token specified
        and returns a session
      operationId: auth.Internal.GoogleLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authGoogleLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authGoogleLoginResponse'
          description: A successful response.
      summary: Google Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-snapser-auth-passthrough: true
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    servers:
    - url: http://service-auth:8090
  /v1/auth/login/steam:
    put:
      deprecated: true
      description: Logs in the user based on the steam token specified and returns
        a session
      operationId: auth.Internal.SteamLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authSteamLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authSteamLoginResponse'
          description: A successful response.
      summary: Steam Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-snapser-auth-passthrough: true
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    servers:
    - url: http://service-auth:8090
  /v1/auth/login/xbox:
    put:
      description: Logs in the user based on the xbox token specified and returns
        a session
      operationId: auth.Internal.XboxLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authXboxLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authXboxLoginResponse'
          description: A successful response.
      summary: Xbox Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-snapser-auth-passthrough: true
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    servers:
    - url: http://service-auth:8090
  /v1/auth/logout/{token}:
    delete:
      description: Ends the current session of the user
      operationId: auth.Internal.Logout
      parameters:
      - description: Session token to logout
        explode: false
        in: path
        name: token
        required: true
        schema:
          type: string
        style: simple
      - description: Gateway
        explode: false
        in: header
        name: Gateway
        required: true
        schema:
          default: internal
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: A successful response.
      summary: Logout User
      tags:
      - AuthService
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    servers:
    - url: http://service-auth:8090
  /v1/auth/otp:
    post:
      description: Generates an OTP and sends it to the email for logging in
      operationId: auth.Internal.Otp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authOtpRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: A successful response.
      summary: Email Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-snapser-auth-passthrough: true
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    servers:
    - url: http://service-auth:8090
  /v1/auth/refresh:
    patch:
      description: Refreshes the session and returns a new session token with refreshed
        validity
      operationId: auth.Internal.Refresh
      parameters:
      - description: Gateway
        explode: false
        in: header
        name: Gateway
        required: true
        schema:
          default: internal
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authRefreshRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authRefreshResponse'
          description: A successful response.
      summary: Token
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    servers:
    - url: http://service-auth:8090
  /v1/auth/steam/openid/login:
    put:
      description: Logs in the user based on the steam open ID token specified and
        returns a session
      operationId: auth.Internal.SteamOpenIdLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authSteamOpenIdLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authSteamLoginResponse'
          description: A successful response.
      summary: Steam Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-snapser-auth-passthrough: true
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    servers:
    - url: http://service-auth:8090
  /v1/auth/steam/session-ticket/login:
    put:
      description: Logs in the user based on the steam session ticket specified and
        returns a session
      operationId: auth.Internal.SteamSessionTicketLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authSteamSessionTicketLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authSteamLoginResponse'
          description: A successful response.
      summary: Steam Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-snapser-auth-passthrough: true
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    servers:
    - url: http://service-auth:8090
  /v1/auth/username-password/availability:
    get:
      description: Checks if the username is available
      operationId: auth.Internal.GetUsernameAvailability
      parameters:
      - description: Username to check
        explode: true
        in: query
        name: username
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authGetUsernameAvailabilityResponse'
          description: A successful response.
      summary: Username Password Login
      tags:
      - AuthService
      x-snapser-auth-passthrough: true
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    servers:
    - url: http://service-auth:8090
  /v1/auth/username-password/login:
    put:
      description: Logs in the user based on the username and password specified and
        returns a session
      operationId: auth.Internal.UsernamePasswordLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authUsernamePasswordLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authUsernamePasswordLoginResponse'
          description: A successful response.
      summary: Username Password Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-snapser-auth-passthrough: true
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    servers:
    - url: http://service-auth:8090
  /v1/auth/username-password/password:
    put:
      description: Updates the username and password of the user
      operationId: auth.Internal.UpdateUsernamePassword
      parameters:
      - description: Gateway
        explode: false
        in: header
        name: Gateway
        required: true
        schema:
          default: internal
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authUpdateUsernamePasswordRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: A successful response.
      summary: Username Password Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    servers:
    - url: http://service-auth:8090
  /v1/auth/users:
    get:
      description: Get UserIDs by login IDs and login types
      operationId: auth.Internal.GetUserIdsByLoginIds
      parameters:
      - description: Comma separated login IDs of the user to be retrieved
        explode: true
        in: query
        name: login_ids
        required: true
        schema:
          type: string
        style: form
      - description: "Login type to search by. Values must be one of 'email', 'anon',\
          \ 'apple', 'facebook', 'google', 'steam', 'xbox', 'epic'"
        explode: true
        in: query
        name: login_type
        required: true
        schema:
          type: string
        style: form
      - description: Gateway
        explode: false
        in: header
        name: Gateway
        required: true
        schema:
          default: internal
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authGetUserIdsByLoginIdsResponse'
          description: A successful response.
      summary: Get User Ids
      tags:
      - AuthService
      x-snapser-auth-types:
      - api-key
      - internal
    servers:
    - url: http://service-auth:8090
  /v1/auth/users/{user_id}/disassociation:
    post:
      description: Disassociates the specified login from a user
      operationId: auth.Internal.DisassociateLogin
      parameters:
      - description: UserID of the user to be unbanned
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: Gateway
        explode: false
        in: header
        name: Gateway
        required: true
        schema:
          default: internal
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisassociateLogin_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: A successful response.
      summary: Disassociate
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    servers:
    - url: http://service-auth:8090
  /v1/auth/validate:
    post:
      description: Validates the session of the user and returns the user info
      operationId: auth.Internal.Validate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authValidateRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authValidateResponse'
          description: A successful response.
      summary: Token
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-snapser-auth-passthrough: true
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    servers:
    - url: http://service-auth:8090
  /v1/profiles/batch/profiles:
    get:
      description: Gets a list of user profiles
      operationId: profiles.Internal.BatchGetProfiles
      parameters:
      - description: User IDs to fetch profiles for
        explode: true
        in: query
        name: user_id
        required: true
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Gateway
        explode: false
        in: header
        name: Gateway
        required: true
        schema:
          default: internal
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/profilesBatchGetProfilesResponse'
          description: A successful response.
      summary: User Profile
      tags:
      - ProfilesService
      x-snapser-auth-types:
      - api-key
      - internal
    servers:
    - url: http://service-profiles:8090
  /v1/profiles/search:
    post:
      description: Searches for user profiles
      operationId: profiles.Internal.SearchProfiles
      parameters:
      - description: Gateway
        explode: false
        in: header
        name: Gateway
        required: true
        schema:
          default: internal
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/profilesSearchProfilesRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/profilesSearchProfilesResponse'
          description: A successful response.
      summary: Search
      tags:
      - ProfilesService
      x-codegen-request-body-name: body
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    servers:
    - url: http://service-profiles:8090
  /v1/profiles/user/{user_id}:
    delete:
      description: Deletes a user's profile
      operationId: profiles.Internal.DeleteProfile
      parameters:
      - description: User ID of the user who's profile is being deleted
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: Gateway
        explode: false
        in: header
        name: Gateway
        required: true
        schema:
          default: internal
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: A successful response.
      summary: User Profile
      tags:
      - ProfilesService
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    get:
      description: Gets a user's profile
      operationId: profiles.Internal.GetProfile
      parameters:
      - description: User ID of the user who's profile is being viewed
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: Gateway
        explode: false
        in: header
        name: Gateway
        required: true
        schema:
          default: internal
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/profilesGetProfileResponse'
          description: A successful response.
      summary: User Profile
      tags:
      - ProfilesService
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    patch:
      description: Patches a user's profile
      operationId: profiles.Internal.PatchProfile
      parameters:
      - description: User ID of the user who's profile is being patched
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: Gateway
        explode: false
        in: header
        name: Gateway
        required: true
        schema:
          default: internal
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchProfile_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/profilesPatchProfileResponse'
          description: A successful response.
      summary: User Profile
      tags:
      - ProfilesService
      x-codegen-request-body-name: body
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    put:
      description: Insert or update a user's profile
      operationId: profiles.Internal.UpsertProfile
      parameters:
      - description: User ID of the user who's profile is being upserted
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      - description: Gateway
        explode: false
        in: header
        name: Gateway
        required: true
        schema:
          default: internal
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertProfile_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: A successful response.
      summary: User Profile
      tags:
      - ProfilesService
      x-codegen-request-body-name: body
      x-snapser-auth-types:
      - user
      - api-key
      - internal
    servers:
    - url: http://service-profiles:8090
components:
  schemas:
    DisassociateLogin_request:
      properties:
        login_type:
          description: Login type
          type: string
      required:
      - login_type
      type: object
    PatchProfile_request:
      properties:
        profile:
          description: JSON representation of the profile being patched
          type: object
      required:
      - profile
      type: object
    SearchFieldOperator:
      default: UNSPECIFIED_OPERATOR
      enum:
      - UNSPECIFIED_OPERATOR
      - EQUALS
      - NOT_EQUALS
      - CONTAINS
      type: string
    UpsertProfile_request:
      properties:
        profile:
          description: JSON representation of the profile being upserted
          type: object
      required:
      - profile
      type: object
    apiHttpBody:
      description: |-
        Message that represents an arbitrary HTTP body. It should only be used for
        payload formats that can't be represented as JSON, such as raw binary or
        an HTML page.


        This message can be used both in streaming and non-streaming API methods in
        the request as well as the response.

        It can be used as a top-level request field, which is convenient if one
        wants to extract parameters from either the URL or HTTP template into the
        request fields and also want access to the raw HTTP body.

        Example:

            message GetResourceRequest {
              // A unique request id.
              string request_id = 1;

              // The raw HTTP body is bound to this field.
              google.api.HttpBody http_body = 2;

            }

            service ResourceService {
              rpc GetResource(GetResourceRequest)
                returns (google.api.HttpBody);
              rpc UpdateResource(google.api.HttpBody)
                returns (google.protobuf.Empty);

            }

        Example with streaming methods:

            service CaldavService {
              rpc GetCalendar(stream google.api.HttpBody)
                returns (stream google.api.HttpBody);
              rpc UpdateCalendar(stream google.api.HttpBody)
                returns (stream google.api.HttpBody);

            }

        Use of this type only changes how the request and response bodies are
        handled, all other features will continue to work unchanged.
      example:
        extensions:
        - '@type': '@type'
        - '@type': '@type'
        content_type: content_type
        data: data
      properties:
        content_type:
          description: The HTTP Content-Type header value specifying the content type
            of the body.
          type: string
        data:
          description: The HTTP request/response body as raw binary.
          format: byte
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
        extensions:
          description: |-
            Application specific response metadata. Must be set in the first response
            for streaming APIs.
          items:
            $ref: '#/components/schemas/protobufAny'
          type: array
      type: object
    authAnonLoginRequest:
      properties:
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        username:
          description: User's login ID
          type: string
      required:
      - username
      type: object
    authAnonLoginResponse:
      example:
        user:
          token_validity_seconds: 5
          created: true
          created_at: 0
          is_suspended: true
          is_verified: true
          first_login: 6
          tags:
          - tags
          - tags
          session_token: session_token
          refreshed_at: 1
          suspended_until: 5
          id: id
          is_banned: true
          login_types:
          - null
          - null
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authAppleLoginRequest:
      properties:
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        token:
          description: Apple token generated on the client
          type: string
      required:
      - token
      type: object
    authAppleLoginResponse:
      example:
        user:
          token_validity_seconds: 5
          created: true
          created_at: 0
          is_suspended: true
          is_verified: true
          first_login: 6
          tags:
          - tags
          - tags
          session_token: session_token
          refreshed_at: 1
          suspended_until: 5
          id: id
          is_banned: true
          login_types:
          - null
          - null
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authAssociateLoginsRequest:
      properties:
        discard_user_token:
          description: Token of the user to discard
          type: string
        keep_user_token:
          description: Token of the user to keep
          type: string
      required:
      - discard_user_token
      - keep_user_token
      type: object
    authDiscordLoginRequest:
      properties:
        access_token:
          description: Discord access token generated on the client. One of code or
            access_token is required
          type: string
        code:
          description: Discord code generated on the client. One of code or access_token
            is required
          type: string
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
      type: object
    authDiscordLoginResponse:
      example:
        access_token: access_token
        user:
          token_validity_seconds: 5
          created: true
          created_at: 0
          is_suspended: true
          is_verified: true
          first_login: 6
          tags:
          - tags
          - tags
          session_token: session_token
          refreshed_at: 1
          suspended_until: 5
          id: id
          is_banned: true
          login_types:
          - null
          - null
      properties:
        access_token:
          type: string
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authEmailLoginRequest:
      properties:
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        email:
          description: Email address used as login
          type: string
        otp:
          description: OTP code received by the user
          type: string
      required:
      - email
      - otp
      type: object
    authEmailLoginResponse:
      example:
        user:
          token_validity_seconds: 5
          created: true
          created_at: 0
          is_suspended: true
          is_verified: true
          first_login: 6
          tags:
          - tags
          - tags
          session_token: session_token
          refreshed_at: 1
          suspended_until: 5
          id: id
          is_banned: true
          login_types:
          - null
          - null
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authEmailPasswordLoginRequest:
      properties:
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        email:
          description: Email address used as login
          type: string
        password:
          description: Password used for login
          type: string
      required:
      - email
      - password
      type: object
    authEmailPasswordLoginResponse:
      example:
        email_verification_required: true
        user:
          token_validity_seconds: 5
          created: true
          created_at: 0
          is_suspended: true
          is_verified: true
          first_login: 6
          tags:
          - tags
          - tags
          session_token: session_token
          refreshed_at: 1
          suspended_until: 5
          id: id
          is_banned: true
          login_types:
          - null
          - null
      properties:
        email_verification_required:
          description: Whether email verification is required or not
          type: boolean
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authEpicLoginRequest:
      properties:
        code:
          description: code generated on the client
          type: string
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        exchange_code:
          description: exchange_code generated on the client
          type: string
        grant_type:
          description: token generated on the client
          type: string
        password:
          description: exchange_code generated on the client
          type: string
        username:
          description: exchange_code generated on the client
          type: string
      required:
      - grant_type
      type: object
    authEpicLoginResponse:
      example:
        user:
          token_validity_seconds: 5
          created: true
          created_at: 0
          is_suspended: true
          is_verified: true
          first_login: 6
          tags:
          - tags
          - tags
          session_token: session_token
          refreshed_at: 1
          suspended_until: 5
          id: id
          is_banned: true
          login_types:
          - null
          - null
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authFacebookLoginRequest:
      properties:
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        token:
          description: Facebook token generated on the client
          type: string
      required:
      - token
      type: object
    authFacebookLoginResponse:
      example:
        user:
          token_validity_seconds: 5
          created: true
          created_at: 0
          is_suspended: true
          is_verified: true
          first_login: 6
          tags:
          - tags
          - tags
          session_token: session_token
          refreshed_at: 1
          suspended_until: 5
          id: id
          is_banned: true
          login_types:
          - null
          - null
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authGetUserIdsByLoginIdsResponse:
      example:
        user_ids:
          key: user_ids
      properties:
        user_ids:
          additionalProperties:
            type: string
          type: object
      type: object
    authGetUsernameAvailabilityResponse:
      example:
        available: true
      properties:
        available:
          description: Whether the username is available or not
          type: boolean
      type: object
    authGoogleLoginRequest:
      properties:
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        token:
          description: Google IDtoken generated on the client
          type: string
      required:
      - token
      type: object
    authGoogleLoginResponse:
      example:
        user:
          token_validity_seconds: 5
          created: true
          created_at: 0
          is_suspended: true
          is_verified: true
          first_login: 6
          tags:
          - tags
          - tags
          session_token: session_token
          refreshed_at: 1
          suspended_until: 5
          id: id
          is_banned: true
          login_types:
          - null
          - null
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authLoginTypeType:
      default: UNSPECIFIED_LOGIN_TYPE
      enum:
      - UNSPECIFIED_LOGIN_TYPE
      - EMAIL
      - PASSWORD
      - ANON
      - FACEBOOK
      - GOOGLE
      - APPLE
      - STEAM
      - XBOX
      - EPIC
      - APP
      - DISCORD
      - EMAIL_PASSWORD
      - USERNAME_PASSWORD
      type: string
    authOtpRequest:
      properties:
        email:
          description: Email address to send OTP to
          type: string
        validate_user_exists:
          description: "If set to true, OTP won't be sent if user doesn't exist"
          type: boolean
      required:
      - email
      type: object
    authRecoverEmailAccountRequest:
      properties:
        email:
          description: Email address to recover
          type: string
      required:
      - email
      type: object
    authRefreshRequest:
      properties:
        session_token:
          description: Session token to refresh
          type: string
      required:
      - session_token
      type: object
    authRefreshResponse:
      example:
        user:
          token_validity_seconds: 5
          created: true
          created_at: 0
          is_suspended: true
          is_verified: true
          first_login: 6
          tags:
          - tags
          - tags
          session_token: session_token
          refreshed_at: 1
          suspended_until: 5
          id: id
          is_banned: true
          login_types:
          - null
          - null
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authSteamLoginRequest:
      properties:
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        openid_parameters:
          additionalProperties:
            type: string
          description: Key value pairs of the openid parameters
          type: object
      required:
      - openid_parameters
      type: object
    authSteamLoginResponse:
      example:
        user:
          token_validity_seconds: 5
          created: true
          created_at: 0
          is_suspended: true
          is_verified: true
          first_login: 6
          tags:
          - tags
          - tags
          session_token: session_token
          refreshed_at: 1
          suspended_until: 5
          id: id
          is_banned: true
          login_types:
          - null
          - null
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authSteamOpenIdLoginRequest:
      properties:
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        openid_parameters:
          additionalProperties:
            type: string
          description: Key value pairs of the openid parameters
          type: object
      required:
      - openid_parameters
      type: object
    authSteamSessionTicketLoginRequest:
      properties:
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        identity:
          description: Identity string used to generate session ticket (if applicable)
          type: string
        session_ticket:
          description: Session ticket generated on the client
          type: string
      required:
      - session_ticket
      type: object
    authUpdateEmailPasswordRequest:
      properties:
        email:
          description: Email address to update
          type: string
        new_password:
          description: New password to be set
          type: string
        old_password:
          description: Old password to be verified. One of old_password or recovery_code
            is required
          type: string
        recovery_code:
          description: Recovery code received by the user. One of old_password or
            recovery_code is required
          type: string
      required:
      - email
      - new_password
      type: object
    authUpdateUsernamePasswordRequest:
      properties:
        new_password:
          description: New password to be set
          type: string
        old_password:
          description: Old password to be verified
          type: string
        username:
          description: User's login ID
          type: string
      required:
      - new_password
      - old_password
      - username
      type: object
    authUser:
      example:
        token_validity_seconds: 5
        created: true
        created_at: 0
        is_suspended: true
        is_verified: true
        first_login: 6
        tags:
        - tags
        - tags
        session_token: session_token
        refreshed_at: 1
        suspended_until: 5
        id: id
        is_banned: true
        login_types:
        - null
        - null
      properties:
        created:
          description: Whether user was created or not
          type: boolean
        created_at:
          description: Unix timestamp of when the user was created
          format: int64
          type: integer
        first_login:
          description: Unix timestamp of when the user was first logged in
          format: int64
          type: integer
        id:
          description: User ID for the user
          type: string
        is_banned:
          description: Whether user is banned or not
          type: boolean
        is_suspended:
          description: Whether user is suspended or not
          type: boolean
        is_verified:
          description: Whether user is verified or not
          type: boolean
        login_types:
          description: Login types
          items:
            $ref: '#/components/schemas/authLoginTypeType'
          type: array
        refreshed_at:
          description: Unix timestamp of when the session was last refreshed (If applicable)
          format: int64
          type: integer
        session_token:
          description: Session token of the user (If applicable)
          type: string
        suspended_until:
          description: Unix timestamp of when the user is suspended until
          format: int64
          type: integer
        tags:
          description: Different tags attached to the user like flagged
          items:
            type: string
          type: array
        token_validity_seconds:
          description: Validity of the token in seconds (If applicable)
          format: int64
          type: integer
      type: object
    authUsernamePasswordLoginRequest:
      properties:
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        password:
          description: Password used for login
          type: string
        username:
          description: User's login ID
          type: string
      required:
      - password
      - username
      type: object
    authUsernamePasswordLoginResponse:
      example:
        user:
          token_validity_seconds: 5
          created: true
          created_at: 0
          is_suspended: true
          is_verified: true
          first_login: 6
          tags:
          - tags
          - tags
          session_token: session_token
          refreshed_at: 1
          suspended_until: 5
          id: id
          is_banned: true
          login_types:
          - null
          - null
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authValidateRequest:
      properties:
        method:
          description: "HTTP method of the request to your backend (OPTIONAL: required\
            \ to validate user auth restrictions)"
          type: string
        path:
          description: "Path of the request to your backend (OPTIONAL: required to\
            \ validate user auth restrictions)"
          type: string
        session_token:
          description: Session token to validate
          type: string
      required:
      - session_token
      type: object
    authValidateResponse:
      example:
        user:
          token_validity_seconds: 5
          created: true
          created_at: 0
          is_suspended: true
          is_verified: true
          first_login: 6
          tags:
          - tags
          - tags
          session_token: session_token
          refreshed_at: 1
          suspended_until: 5
          id: id
          is_banned: true
          login_types:
          - null
          - null
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authVerifyEmailRequest:
      properties:
        email:
          description: Email address to verify
          type: string
        verification_code:
          description: Verification code received by the user
          type: string
      required:
      - email
      - verification_code
      type: object
    authVerifyEmailResponse:
      example:
        user:
          token_validity_seconds: 5
          created: true
          created_at: 0
          is_suspended: true
          is_verified: true
          first_login: 6
          tags:
          - tags
          - tags
          session_token: session_token
          refreshed_at: 1
          suspended_until: 5
          id: id
          is_banned: true
          login_types:
          - null
          - null
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authXboxLoginRequest:
      properties:
        code:
          description: code generated on the client
          type: string
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        redirect_url:
          description: redirect url for client
          type: string
      required:
      - code
      - redirect_url
      type: object
    authXboxLoginResponse:
      example:
        user:
          token_validity_seconds: 5
          created: true
          created_at: 0
          is_suspended: true
          is_verified: true
          first_login: 6
          tags:
          - tags
          - tags
          session_token: session_token
          refreshed_at: 1
          suspended_until: 5
          id: id
          is_banned: true
          login_types:
          - null
          - null
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    profilesBatchGetProfilesResponse:
      example:
        profiles:
          key: "{}"
        responses:
        - request:
            user_id: user_id
          response: "{}"
          success: true
          message: message
        - request:
            user_id: user_id
          response: "{}"
          success: true
          message: message
      properties:
        profiles:
          additionalProperties:
            type: object
          type: object
        responses:
          description: List of responses for each user ID
          items:
            $ref: '#/components/schemas/profilesBatchGetProfilesSingleResponse'
          type: array
      type: object
    profilesBatchGetProfilesSingleResponse:
      example:
        request:
          user_id: user_id
        response: "{}"
        success: true
        message: message
      properties:
        message:
          type: string
        request:
          $ref: '#/components/schemas/profilesGetProfileRequest'
        response:
          type: object
        success:
          type: boolean
      type: object
    profilesGetProfileRequest:
      example:
        user_id: user_id
      properties:
        user_id:
          description: User ID of the user who's profile is being viewed
          type: string
      required:
      - user_id
      title: Service Requests & Responses
      type: object
    profilesGetProfileResponse:
      example:
        profile: "{}"
      properties:
        profile:
          description: JSON representation of the user's profile visible to the logged
            in user
          type: object
      type: object
    profilesPatchProfileResponse:
      example:
        profile: "{}"
      properties:
        profile:
          description: JSON representation of the user's profile after the patch
          type: object
      type: object
    profilesSearchField:
      properties:
        key:
          description: Key of the field to search by
          type: string
        operator:
          $ref: '#/components/schemas/SearchFieldOperator'
        value:
          description: Value of the field to search by
          type: string
      title: Message Types and Enums
      type: object
    profilesSearchProfilesRequest:
      properties:
        limit:
          description: Maximum number of profiles to return
          format: int32
          type: integer
        offset:
          description: Number of profiles to skip before returning results
          format: int32
          type: integer
        search_fields:
          description: List of search fields to filter profiles by
          items:
            $ref: '#/components/schemas/profilesSearchField'
          type: array
      type: object
    profilesSearchProfilesResponse:
      example:
        profiles:
          key: "{}"
      properties:
        profiles:
          additionalProperties:
            type: object
          description: Map of user IDs to their respective profiles
          type: object
      type: object
    protobufAny:
      additionalProperties:
        type: object
      description: |-
        `Any` contains an arbitrary serialized protocol buffer message along with a
        URL that describes the type of the serialized message.

        Protobuf library provides support to pack/unpack Any values in the form
        of utility functions or additional generated methods of the Any type.

        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }
            // or ...
            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
              foo = any.unpack(Foo.getDefaultInstance());
            }

         Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

         Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use
        'type.googleapis.com/full.type.name' as the type URL and the unpack
        methods only use the fully qualified type name after the last '/'
        in the type URL, for example "foo.bar.com/x/y.z" will yield type
        name "y.z".

        JSON
        ====
        The JSON representation of an `Any` value uses the regular
        representation of the deserialized, embedded message, with an
        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON
        representation, that representation will be embedded adding a field
        `value` which holds the custom JSON in addition to the `@type`
        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
      example:
        '@type': '@type'
      properties:
        '@type':
          description: |-
            A URL/resource name that uniquely identifies the type of the serialized
            protocol buffer message. This string must contain at least
            one "/" character. The last segment of the URL's path must represent
            the fully qualified name of the type (as in
            `path/google.protobuf.Duration`). The name should be in a canonical form
            (e.g., leading "." is not accepted).

            In practice, teams usually precompile into the binary all types that they
            expect it to use in the context of Any. However, for URLs which use the
            scheme `http`, `https`, or no scheme, one can optionally set up a type
            server that maps type URLs to message definitions as follows:

            * If no scheme is provided, `https` is assumed.
            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official
            protobuf release, and it is not used for type URLs beginning with
            type.googleapis.com. As of May 2023, there are no widely used type server
            implementations and no plans to implement one.

            Schemes other than `http`, `https` (or the empty scheme) might be
            used with implementation specific semantics.
          type: string
      type: object
    protobufNullValue:
      default: NULL_VALUE
      description: |-
        `NullValue` is a singleton enumeration to represent the null value for the
        `Value` type union.

        The JSON representation for `NullValue` is JSON `null`.

         - NULL_VALUE: Null value.
      enum:
      - NULL_VALUE
      type: string
x-original-swagger-version: "2.0"
