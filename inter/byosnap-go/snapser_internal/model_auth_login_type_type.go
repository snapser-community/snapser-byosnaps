/*
my-dev-cluster

Your custom SDK

API version: my-dev-cluster: v1 SDK
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package snapserInternal

import (
	"encoding/json"
	"fmt"
)

// AuthLoginTypeType the model 'AuthLoginTypeType'
type AuthLoginTypeType string

// List of authLoginTypeType
const (
	UNSPECIFIED_LOGIN_TYPE AuthLoginTypeType = "UNSPECIFIED_LOGIN_TYPE"
	EMAIL AuthLoginTypeType = "EMAIL"
	PASSWORD AuthLoginTypeType = "PASSWORD"
	ANON AuthLoginTypeType = "ANON"
	FACEBOOK AuthLoginTypeType = "FACEBOOK"
	GOOGLE AuthLoginTypeType = "GOOGLE"
	APPLE AuthLoginTypeType = "APPLE"
	STEAM AuthLoginTypeType = "STEAM"
	XBOX AuthLoginTypeType = "XBOX"
	EPIC AuthLoginTypeType = "EPIC"
	APP AuthLoginTypeType = "APP"
	DISCORD AuthLoginTypeType = "DISCORD"
	EMAIL_PASSWORD AuthLoginTypeType = "EMAIL_PASSWORD"
	USERNAME_PASSWORD AuthLoginTypeType = "USERNAME_PASSWORD"
)

// All allowed values of AuthLoginTypeType enum
var AllowedAuthLoginTypeTypeEnumValues = []AuthLoginTypeType{
	"UNSPECIFIED_LOGIN_TYPE",
	"EMAIL",
	"PASSWORD",
	"ANON",
	"FACEBOOK",
	"GOOGLE",
	"APPLE",
	"STEAM",
	"XBOX",
	"EPIC",
	"APP",
	"DISCORD",
	"EMAIL_PASSWORD",
	"USERNAME_PASSWORD",
}

func (v *AuthLoginTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthLoginTypeType(value)
	for _, existing := range AllowedAuthLoginTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthLoginTypeType", value)
}

// NewAuthLoginTypeTypeFromValue returns a pointer to a valid AuthLoginTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthLoginTypeTypeFromValue(v string) (*AuthLoginTypeType, error) {
	ev := AuthLoginTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthLoginTypeType: valid values are %v", v, AllowedAuthLoginTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthLoginTypeType) IsValid() bool {
	for _, existing := range AllowedAuthLoginTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to authLoginTypeType value
func (v AuthLoginTypeType) Ptr() *AuthLoginTypeType {
	return &v
}

type NullableAuthLoginTypeType struct {
	value *AuthLoginTypeType
	isSet bool
}

func (v NullableAuthLoginTypeType) Get() *AuthLoginTypeType {
	return v.value
}

func (v *NullableAuthLoginTypeType) Set(val *AuthLoginTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthLoginTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthLoginTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthLoginTypeType(val *AuthLoginTypeType) *NullableAuthLoginTypeType {
	return &NullableAuthLoginTypeType{value: val, isSet: true}
}

func (v NullableAuthLoginTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthLoginTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

