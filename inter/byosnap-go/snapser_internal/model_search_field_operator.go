/*
my-dev-cluster

Your custom SDK

API version: my-dev-cluster: v1 SDK
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package snapserInternal

import (
	"encoding/json"
	"fmt"
)

// SearchFieldOperator the model 'SearchFieldOperator'
type SearchFieldOperator string

// List of SearchFieldOperator
const (
	UNSPECIFIED_OPERATOR SearchFieldOperator = "UNSPECIFIED_OPERATOR"
	EQUALS SearchFieldOperator = "EQUALS"
	NOT_EQUALS SearchFieldOperator = "NOT_EQUALS"
	CONTAINS SearchFieldOperator = "CONTAINS"
)

// All allowed values of SearchFieldOperator enum
var AllowedSearchFieldOperatorEnumValues = []SearchFieldOperator{
	"UNSPECIFIED_OPERATOR",
	"EQUALS",
	"NOT_EQUALS",
	"CONTAINS",
}

func (v *SearchFieldOperator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SearchFieldOperator(value)
	for _, existing := range AllowedSearchFieldOperatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SearchFieldOperator", value)
}

// NewSearchFieldOperatorFromValue returns a pointer to a valid SearchFieldOperator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSearchFieldOperatorFromValue(v string) (*SearchFieldOperator, error) {
	ev := SearchFieldOperator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SearchFieldOperator: valid values are %v", v, AllowedSearchFieldOperatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SearchFieldOperator) IsValid() bool {
	for _, existing := range AllowedSearchFieldOperatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SearchFieldOperator value
func (v SearchFieldOperator) Ptr() *SearchFieldOperator {
	return &v
}

type NullableSearchFieldOperator struct {
	value *SearchFieldOperator
	isSet bool
}

func (v NullableSearchFieldOperator) Get() *SearchFieldOperator {
	return v.value
}

func (v *NullableSearchFieldOperator) Set(val *SearchFieldOperator) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchFieldOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchFieldOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchFieldOperator(val *SearchFieldOperator) *NullableSearchFieldOperator {
	return &NullableSearchFieldOperator{value: val, isSet: true}
}

func (v NullableSearchFieldOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchFieldOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

