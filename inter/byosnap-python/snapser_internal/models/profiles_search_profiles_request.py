# coding: utf-8

"""
    my-dev-cluster

    Your custom SDK

    The version of the OpenAPI document: my-dev-cluster: v1 SDK
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conint, conlist
from snapser_internal.models.profiles_search_field import ProfilesSearchField

class ProfilesSearchProfilesRequest(BaseModel):
    """
    ProfilesSearchProfilesRequest
    """
    limit: Optional[conint()] = Field(None, description="Maximum number of profiles to return")
    offset: Optional[conint()] = Field(None, description="Number of profiles to skip before returning results")
    search_fields: Optional[conlist(ProfilesSearchField)] = Field(None, description="List of search fields to filter profiles by")
    __properties = ["limit", "offset", "search_fields"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProfilesSearchProfilesRequest:
        """Create an instance of ProfilesSearchProfilesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in search_fields (list)
        _items = []
        if self.search_fields:
            for _item in self.search_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['search_fields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProfilesSearchProfilesRequest:
        """Create an instance of ProfilesSearchProfilesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProfilesSearchProfilesRequest.parse_obj(obj)

        _obj = ProfilesSearchProfilesRequest.parse_obj({
            "limit": obj.get("limit"),
            "offset": obj.get("offset"),
            "search_fields": [ProfilesSearchField.from_dict(_item) for _item in obj.get("search_fields")] if obj.get("search_fields") is not None else None
        })
        return _obj


