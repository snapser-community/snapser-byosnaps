# coding: utf-8

"""
    juhi-dev

    Your custom SDK

    The version of the OpenAPI document: juhi-dev: v4 SDK
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from snapser_internal.models.auth_login_metadata import AuthLoginMetadata

class AuthSteamSessionTicketLoginRequest(BaseModel):
    """
    AuthSteamSessionTicketLoginRequest
    """
    create_user: Optional[StrictBool] = Field(None, description="Whether to create a user, if it does not exist")
    identity: Optional[StrictStr] = Field(None, description="Identity string used to generate session ticket (if applicable)")
    login_metadata: Optional[AuthLoginMetadata] = None
    session_ticket: StrictStr = Field(..., description="Session ticket generated on the client")
    __properties = ["create_user", "identity", "login_metadata", "session_ticket"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AuthSteamSessionTicketLoginRequest:
        """Create an instance of AuthSteamSessionTicketLoginRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of login_metadata
        if self.login_metadata:
            _dict['login_metadata'] = self.login_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AuthSteamSessionTicketLoginRequest:
        """Create an instance of AuthSteamSessionTicketLoginRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AuthSteamSessionTicketLoginRequest.parse_obj(obj)

        _obj = AuthSteamSessionTicketLoginRequest.parse_obj({
            "create_user": obj.get("create_user"),
            "identity": obj.get("identity"),
            "login_metadata": AuthLoginMetadata.from_dict(obj.get("login_metadata")) if obj.get("login_metadata") is not None else None,
            "session_ticket": obj.get("session_ticket")
        })
        return _obj


