# coding: utf-8

"""
    characters

    Your custom SDK

    The version of the OpenAPI document: characters: v3 SDK
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, conlist
from snapser.models.statistics_batch_set_user_statistics_single_response import StatisticsBatchSetUserStatisticsSingleResponse
from snapser.models.statistics_user_statistic import StatisticsUserStatistic

class StatisticsBatchSetUserStatisticsResponse(BaseModel):
    """
    StatisticsBatchSetUserStatisticsResponse
    """
    responses: Optional[conlist(StatisticsBatchSetUserStatisticsSingleResponse)] = None
    user_statistics: Optional[conlist(StatisticsUserStatistic)] = None
    __properties = ["responses", "user_statistics"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StatisticsBatchSetUserStatisticsResponse:
        """Create an instance of StatisticsBatchSetUserStatisticsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in responses (list)
        _items = []
        if self.responses:
            for _item in self.responses:
                if _item:
                    _items.append(_item.to_dict())
            _dict['responses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in user_statistics (list)
        _items = []
        if self.user_statistics:
            for _item in self.user_statistics:
                if _item:
                    _items.append(_item.to_dict())
            _dict['user_statistics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StatisticsBatchSetUserStatisticsResponse:
        """Create an instance of StatisticsBatchSetUserStatisticsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StatisticsBatchSetUserStatisticsResponse.parse_obj(obj)

        _obj = StatisticsBatchSetUserStatisticsResponse.parse_obj({
            "responses": [StatisticsBatchSetUserStatisticsSingleResponse.from_dict(_item) for _item in obj.get("responses")] if obj.get("responses") is not None else None,
            "user_statistics": [StatisticsUserStatistic.from_dict(_item) for _item in obj.get("user_statistics")] if obj.get("user_statistics") is not None else None
        })
        return _obj


