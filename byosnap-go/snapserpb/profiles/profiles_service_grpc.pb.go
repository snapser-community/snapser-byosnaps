// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: profiles_service.proto

package proto

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProfilesServiceClient is the client API for ProfilesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfilesServiceClient interface {
	// GetProfile
	//
	// GetProfile returns the profile for a user
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error)
	// UpsertProfile
	//
	// UpsertProfile inserts or updates the profile info for a user
	UpsertProfile(ctx context.Context, in *UpsertProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteProfile
	//
	// DeleteProfile deletes the profile info for a user
	DeleteProfile(ctx context.Context, in *DeleteProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetSettings
	//
	// GetSettings returns the settings in the profile service
	GetKeys(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetKeysResponse, error)
	// AddKey
	//
	// AddKey adds a new key to be stored with user profiles
	AddKey(ctx context.Context, in *AddKeyRequest, opts ...grpc.CallOption) (*AddKeyResponse, error)
	// EditKey
	//
	// EditKey edits an existing key metadata in the profile service
	EditKey(ctx context.Context, in *EditKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteKey
	//
	// DeleteKey deletes keys available for the users
	DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteUserData
	//
	// DeleteUserData deletes the profile data for a user
	DeleteUserData(ctx context.Context, in *DeleteUserDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetUserData
	//
	// GetUserData returns the user's profile data
	GetUserData(ctx context.Context, in *GetUserDataRequest, opts ...grpc.CallOption) (*GetUserDataResponse, error)
	// GetOpenApiSpec
	//
	// Returns the generated openapi swagger document
	GetOpenApiSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	ExportSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SettingsImportExportData, error)
	ImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type profilesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProfilesServiceClient(cc grpc.ClientConnInterface) ProfilesServiceClient {
	return &profilesServiceClient{cc}
}

func (c *profilesServiceClient) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error) {
	out := new(GetProfileResponse)
	err := c.cc.Invoke(ctx, "/profiles.ProfilesService/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesServiceClient) UpsertProfile(ctx context.Context, in *UpsertProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/profiles.ProfilesService/UpsertProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesServiceClient) DeleteProfile(ctx context.Context, in *DeleteProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/profiles.ProfilesService/DeleteProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesServiceClient) GetKeys(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetKeysResponse, error) {
	out := new(GetKeysResponse)
	err := c.cc.Invoke(ctx, "/profiles.ProfilesService/GetKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesServiceClient) AddKey(ctx context.Context, in *AddKeyRequest, opts ...grpc.CallOption) (*AddKeyResponse, error) {
	out := new(AddKeyResponse)
	err := c.cc.Invoke(ctx, "/profiles.ProfilesService/AddKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesServiceClient) EditKey(ctx context.Context, in *EditKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/profiles.ProfilesService/EditKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesServiceClient) DeleteKey(ctx context.Context, in *DeleteKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/profiles.ProfilesService/DeleteKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesServiceClient) DeleteUserData(ctx context.Context, in *DeleteUserDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/profiles.ProfilesService/DeleteUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesServiceClient) GetUserData(ctx context.Context, in *GetUserDataRequest, opts ...grpc.CallOption) (*GetUserDataResponse, error) {
	out := new(GetUserDataResponse)
	err := c.cc.Invoke(ctx, "/profiles.ProfilesService/GetUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesServiceClient) GetOpenApiSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/profiles.ProfilesService/GetOpenApiSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesServiceClient) ExportSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SettingsImportExportData, error) {
	out := new(SettingsImportExportData)
	err := c.cc.Invoke(ctx, "/profiles.ProfilesService/ExportSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesServiceClient) ImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/profiles.ProfilesService/ImportSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfilesServiceServer is the server API for ProfilesService service.
// All implementations must embed UnimplementedProfilesServiceServer
// for forward compatibility
type ProfilesServiceServer interface {
	// GetProfile
	//
	// GetProfile returns the profile for a user
	GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error)
	// UpsertProfile
	//
	// UpsertProfile inserts or updates the profile info for a user
	UpsertProfile(context.Context, *UpsertProfileRequest) (*emptypb.Empty, error)
	// DeleteProfile
	//
	// DeleteProfile deletes the profile info for a user
	DeleteProfile(context.Context, *DeleteProfileRequest) (*emptypb.Empty, error)
	// GetSettings
	//
	// GetSettings returns the settings in the profile service
	GetKeys(context.Context, *emptypb.Empty) (*GetKeysResponse, error)
	// AddKey
	//
	// AddKey adds a new key to be stored with user profiles
	AddKey(context.Context, *AddKeyRequest) (*AddKeyResponse, error)
	// EditKey
	//
	// EditKey edits an existing key metadata in the profile service
	EditKey(context.Context, *EditKeyRequest) (*emptypb.Empty, error)
	// DeleteKey
	//
	// DeleteKey deletes keys available for the users
	DeleteKey(context.Context, *DeleteKeyRequest) (*emptypb.Empty, error)
	// DeleteUserData
	//
	// DeleteUserData deletes the profile data for a user
	DeleteUserData(context.Context, *DeleteUserDataRequest) (*emptypb.Empty, error)
	// GetUserData
	//
	// GetUserData returns the user's profile data
	GetUserData(context.Context, *GetUserDataRequest) (*GetUserDataResponse, error)
	// GetOpenApiSpec
	//
	// Returns the generated openapi swagger document
	GetOpenApiSpec(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error)
	ExportSettings(context.Context, *emptypb.Empty) (*SettingsImportExportData, error)
	ImportSettings(context.Context, *SettingsImportExportData) (*emptypb.Empty, error)
	mustEmbedUnimplementedProfilesServiceServer()
}

// UnimplementedProfilesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProfilesServiceServer struct {
}

func (UnimplementedProfilesServiceServer) GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedProfilesServiceServer) UpsertProfile(context.Context, *UpsertProfileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertProfile not implemented")
}
func (UnimplementedProfilesServiceServer) DeleteProfile(context.Context, *DeleteProfileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfile not implemented")
}
func (UnimplementedProfilesServiceServer) GetKeys(context.Context, *emptypb.Empty) (*GetKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeys not implemented")
}
func (UnimplementedProfilesServiceServer) AddKey(context.Context, *AddKeyRequest) (*AddKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKey not implemented")
}
func (UnimplementedProfilesServiceServer) EditKey(context.Context, *EditKeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditKey not implemented")
}
func (UnimplementedProfilesServiceServer) DeleteKey(context.Context, *DeleteKeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKey not implemented")
}
func (UnimplementedProfilesServiceServer) DeleteUserData(context.Context, *DeleteUserDataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserData not implemented")
}
func (UnimplementedProfilesServiceServer) GetUserData(context.Context, *GetUserDataRequest) (*GetUserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserData not implemented")
}
func (UnimplementedProfilesServiceServer) GetOpenApiSpec(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenApiSpec not implemented")
}
func (UnimplementedProfilesServiceServer) ExportSettings(context.Context, *emptypb.Empty) (*SettingsImportExportData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportSettings not implemented")
}
func (UnimplementedProfilesServiceServer) ImportSettings(context.Context, *SettingsImportExportData) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportSettings not implemented")
}
func (UnimplementedProfilesServiceServer) mustEmbedUnimplementedProfilesServiceServer() {}

// UnsafeProfilesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfilesServiceServer will
// result in compilation errors.
type UnsafeProfilesServiceServer interface {
	mustEmbedUnimplementedProfilesServiceServer()
}

func RegisterProfilesServiceServer(s grpc.ServiceRegistrar, srv ProfilesServiceServer) {
	s.RegisterService(&ProfilesService_ServiceDesc, srv)
}

func _ProfilesService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.ProfilesService/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServiceServer).GetProfile(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfilesService_UpsertProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServiceServer).UpsertProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.ProfilesService/UpsertProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServiceServer).UpsertProfile(ctx, req.(*UpsertProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfilesService_DeleteProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServiceServer).DeleteProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.ProfilesService/DeleteProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServiceServer).DeleteProfile(ctx, req.(*DeleteProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfilesService_GetKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServiceServer).GetKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.ProfilesService/GetKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServiceServer).GetKeys(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfilesService_AddKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServiceServer).AddKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.ProfilesService/AddKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServiceServer).AddKey(ctx, req.(*AddKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfilesService_EditKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServiceServer).EditKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.ProfilesService/EditKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServiceServer).EditKey(ctx, req.(*EditKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfilesService_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServiceServer).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.ProfilesService/DeleteKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServiceServer).DeleteKey(ctx, req.(*DeleteKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfilesService_DeleteUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServiceServer).DeleteUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.ProfilesService/DeleteUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServiceServer).DeleteUserData(ctx, req.(*DeleteUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfilesService_GetUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServiceServer).GetUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.ProfilesService/GetUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServiceServer).GetUserData(ctx, req.(*GetUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfilesService_GetOpenApiSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServiceServer).GetOpenApiSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.ProfilesService/GetOpenApiSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServiceServer).GetOpenApiSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfilesService_ExportSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServiceServer).ExportSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.ProfilesService/ExportSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServiceServer).ExportSettings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfilesService_ImportSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsImportExportData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServiceServer).ImportSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.ProfilesService/ImportSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServiceServer).ImportSettings(ctx, req.(*SettingsImportExportData))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfilesService_ServiceDesc is the grpc.ServiceDesc for ProfilesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfilesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "profiles.ProfilesService",
	HandlerType: (*ProfilesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProfile",
			Handler:    _ProfilesService_GetProfile_Handler,
		},
		{
			MethodName: "UpsertProfile",
			Handler:    _ProfilesService_UpsertProfile_Handler,
		},
		{
			MethodName: "DeleteProfile",
			Handler:    _ProfilesService_DeleteProfile_Handler,
		},
		{
			MethodName: "GetKeys",
			Handler:    _ProfilesService_GetKeys_Handler,
		},
		{
			MethodName: "AddKey",
			Handler:    _ProfilesService_AddKey_Handler,
		},
		{
			MethodName: "EditKey",
			Handler:    _ProfilesService_EditKey_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _ProfilesService_DeleteKey_Handler,
		},
		{
			MethodName: "DeleteUserData",
			Handler:    _ProfilesService_DeleteUserData_Handler,
		},
		{
			MethodName: "GetUserData",
			Handler:    _ProfilesService_GetUserData_Handler,
		},
		{
			MethodName: "GetOpenApiSpec",
			Handler:    _ProfilesService_GetOpenApiSpec_Handler,
		},
		{
			MethodName: "ExportSettings",
			Handler:    _ProfilesService_ExportSettings_Handler,
		},
		{
			MethodName: "ImportSettings",
			Handler:    _ProfilesService_ImportSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "profiles_service.proto",
}
