// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: auth_services.proto

package proto

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	// InviteUser
	//
	// InviteUser Invites a new user based on the email specified
	InviteUser(ctx context.Context, in *InviteUserRequest, opts ...grpc.CallOption) (*InviteUserResponse, error)
	GetEmailsByUserIds(ctx context.Context, in *GetEmailsByUserIdsRequest, opts ...grpc.CallOption) (*GetEmailsByUserIdsResponse, error)
	// GetUser
	//
	// GetUser Retrieves a user based on username or user_id
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	BanUser(ctx context.Context, in *BanUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnbanUser(ctx context.Context, in *UnbanUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetUsers
	//
	// GetUsers Retrieves multiple users based on username
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	// DeleteUser
	//
	// DeleteUser Deletes the user based on a user ID
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetUserData
	GetUserData(ctx context.Context, in *GetUserDataRequest, opts ...grpc.CallOption) (*GetUserDataResponse, error)
	// DeleteUserData
	DeleteUserData(ctx context.Context, in *DeleteUserDataRequest, opts ...grpc.CallOption) (*DeleteUserDataResponse, error)
	// Otp
	//
	// Generates an OTP and sends to the email for login
	Otp(ctx context.Context, in *OtpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// EmailLogin
	//
	// EmailLogin Logs in the user based on the OTP credentials specified and returns a session
	EmailLogin(ctx context.Context, in *EmailLoginRequest, opts ...grpc.CallOption) (*EmailLoginResponse, error)
	// PasswordLogin
	//
	// PasswordLogin Logs in the user based on the username password credentials specified and returns a session
	PasswordLogin(ctx context.Context, in *PasswordLoginRequest, opts ...grpc.CallOption) (*PasswordLoginResponse, error)
	// AnonLogin
	//
	// AnonLogin Logs in the user based on the anon auth specified and returns a session
	AnonLogin(ctx context.Context, in *AnonLoginRequest, opts ...grpc.CallOption) (*AnonLoginResponse, error)
	// AppleLogin
	//
	// Logs in the user based on the apple credential token specified and returns a session
	AppleLogin(ctx context.Context, in *AppleLoginRequest, opts ...grpc.CallOption) (*AppleLoginResponse, error)
	// FacebookLogin
	//
	// Logs in the user based on the facebook credential token specified and returns a session
	FacebookLogin(ctx context.Context, in *FacebookLoginRequest, opts ...grpc.CallOption) (*FacebookLoginResponse, error)
	// GoogleLogin
	//
	// Logs in the user based on the google credential token specified and returns a session
	GoogleLogin(ctx context.Context, in *GoogleLoginRequest, opts ...grpc.CallOption) (*GoogleLoginResponse, error)
	// SteamLogin
	//
	// Logs in the user based on the steam token specified and returns a session
	SteamLogin(ctx context.Context, in *SteamLoginRequest, opts ...grpc.CallOption) (*SteamLoginResponse, error)
	// XboxLogin
	//
	// Logs in the user based on the steam token specified and returns a session
	XboxLogin(ctx context.Context, in *XboxLoginRequest, opts ...grpc.CallOption) (*XboxLoginResponse, error)
	// EpicLogin
	//
	// Logs in the user based on the steam token specified and returns a session
	EpicLogin(ctx context.Context, in *EpicLoginRequest, opts ...grpc.CallOption) (*EpicLoginResponse, error)
	// AssociateLogins
	//
	// AssociateLogins associates two logins based on their session tokens
	AssociateLogins(ctx context.Context, in *AssociateLoginsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Refresh
	//
	// Refreshes the session
	Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error)
	// Logout
	//
	// Logout Ends the current session of the user
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Validate
	//
	// Validate validates the session of the user and returns the user info
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
	// ValidateInternal
	//
	// ValidateInternal validates the session of the user and returns the user info
	ValidateInternal(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateInternalResponse, error)
	// DeleteInvalidatedSessions
	//
	// Deletes invalidated sessions
	DeleteSessions(ctx context.Context, in *DeleteSessionsRequest, opts ...grpc.CallOption) (*DeleteSessionsResponse, error)
	// GetSettings
	//
	// Shows the user settings for admin tools
	GetSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSettingsResponse, error)
	// EnableEmailLogin
	//
	// Enables the email, OTP based login
	EnableEmailLogin(ctx context.Context, in *EnableEmailLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DisableEmailLogin
	//
	// Disables the email/OTP based login
	DisableEmailLogin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// EnablePasswordLogin
	//
	// Enables the email, password based login
	EnablePasswordLogin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DisablePasswordLogin
	//
	// Disables the email/password based login
	DisablePasswordLogin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// EnableAnonLogin
	//
	// Enables anonymous login
	EnableAnonLogin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DisableAnonLogin
	//
	// Disables anonymous logins
	DisableAnonLogin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// EnableAppleLogin
	//
	// Enables the Apple ID based login
	EnableAppleLogin(ctx context.Context, in *EnableAppleLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DisableAppleLogin
	//
	// Disables the Apple ID based login
	DisableAppleLogin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// EnableFacebookLogin
	//
	// Enables the facebook based login
	EnableFacebookLogin(ctx context.Context, in *EnableFacebookLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DisableFacebookLogin
	//
	// Disables the facebook based login
	DisableFacebookLogin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// EnableGoogleLogin
	//
	// Enables the Google ID based login
	EnableGoogleLogin(ctx context.Context, in *EnableGoogleLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DisableGoogleLogin
	//
	// Disables the Google based login
	DisableGoogleLogin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// EnableSteamLogin
	//
	// Enables the Steam based login
	EnableSteamLogin(ctx context.Context, in *EnableSteamLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DisableSteamLogin
	//
	// Disables the Steam based login
	DisableSteamLogin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// EnableXboxLogin
	//
	// Enables the Steam based login
	EnableXboxLogin(ctx context.Context, in *EnableXboxLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DisableXboxLogin
	//
	// Disables the Xbox based login
	DisableXboxLogin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// EnableEpicLogin
	//
	// Enables the Steam based login
	EnableEpicLogin(ctx context.Context, in *EnableEpicLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DisableEpicLogin
	//
	// Disables the Epic based login
	DisableEpicLogin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpdateSessionTokenValidity
	//
	// Updates the session token validity time
	UpdateSessionTokenValidity(ctx context.Context, in *UpdateSessionTokenValidityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetOpenApiSpec
	//
	// Returns the generated openapi swagger document
	GetOpenApiSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	ExportSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SettingsImportExportData, error)
	ImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) InviteUser(ctx context.Context, in *InviteUserRequest, opts ...grpc.CallOption) (*InviteUserResponse, error) {
	out := new(InviteUserResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/InviteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetEmailsByUserIds(ctx context.Context, in *GetEmailsByUserIdsRequest, opts ...grpc.CallOption) (*GetEmailsByUserIdsResponse, error) {
	out := new(GetEmailsByUserIdsResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/GetEmailsByUserIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) BanUser(ctx context.Context, in *BanUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthService/BanUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UnbanUser(ctx context.Context, in *UnbanUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthService/UnbanUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetUserData(ctx context.Context, in *GetUserDataRequest, opts ...grpc.CallOption) (*GetUserDataResponse, error) {
	out := new(GetUserDataResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/GetUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteUserData(ctx context.Context, in *DeleteUserDataRequest, opts ...grpc.CallOption) (*DeleteUserDataResponse, error) {
	out := new(DeleteUserDataResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/DeleteUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Otp(ctx context.Context, in *OtpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthService/Otp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EmailLogin(ctx context.Context, in *EmailLoginRequest, opts ...grpc.CallOption) (*EmailLoginResponse, error) {
	out := new(EmailLoginResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/EmailLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) PasswordLogin(ctx context.Context, in *PasswordLoginRequest, opts ...grpc.CallOption) (*PasswordLoginResponse, error) {
	out := new(PasswordLoginResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/PasswordLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AnonLogin(ctx context.Context, in *AnonLoginRequest, opts ...grpc.CallOption) (*AnonLoginResponse, error) {
	out := new(AnonLoginResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/AnonLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AppleLogin(ctx context.Context, in *AppleLoginRequest, opts ...grpc.CallOption) (*AppleLoginResponse, error) {
	out := new(AppleLoginResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/AppleLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) FacebookLogin(ctx context.Context, in *FacebookLoginRequest, opts ...grpc.CallOption) (*FacebookLoginResponse, error) {
	out := new(FacebookLoginResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/FacebookLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GoogleLogin(ctx context.Context, in *GoogleLoginRequest, opts ...grpc.CallOption) (*GoogleLoginResponse, error) {
	out := new(GoogleLoginResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/GoogleLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SteamLogin(ctx context.Context, in *SteamLoginRequest, opts ...grpc.CallOption) (*SteamLoginResponse, error) {
	out := new(SteamLoginResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/SteamLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) XboxLogin(ctx context.Context, in *XboxLoginRequest, opts ...grpc.CallOption) (*XboxLoginResponse, error) {
	out := new(XboxLoginResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/XboxLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EpicLogin(ctx context.Context, in *EpicLoginRequest, opts ...grpc.CallOption) (*EpicLoginResponse, error) {
	out := new(EpicLoginResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/EpicLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AssociateLogins(ctx context.Context, in *AssociateLoginsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthService/AssociateLogins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error) {
	out := new(RefreshResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/Refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ValidateInternal(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateInternalResponse, error) {
	out := new(ValidateInternalResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/ValidateInternal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteSessions(ctx context.Context, in *DeleteSessionsRequest, opts ...grpc.CallOption) (*DeleteSessionsResponse, error) {
	out := new(DeleteSessionsResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/DeleteSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSettingsResponse, error) {
	out := new(GetSettingsResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/GetSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EnableEmailLogin(ctx context.Context, in *EnableEmailLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthService/EnableEmailLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DisableEmailLogin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthService/DisableEmailLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EnablePasswordLogin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthService/EnablePasswordLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DisablePasswordLogin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthService/DisablePasswordLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EnableAnonLogin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthService/EnableAnonLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DisableAnonLogin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthService/DisableAnonLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EnableAppleLogin(ctx context.Context, in *EnableAppleLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthService/EnableAppleLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DisableAppleLogin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthService/DisableAppleLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EnableFacebookLogin(ctx context.Context, in *EnableFacebookLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthService/EnableFacebookLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DisableFacebookLogin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthService/DisableFacebookLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EnableGoogleLogin(ctx context.Context, in *EnableGoogleLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthService/EnableGoogleLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DisableGoogleLogin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthService/DisableGoogleLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EnableSteamLogin(ctx context.Context, in *EnableSteamLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthService/EnableSteamLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DisableSteamLogin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthService/DisableSteamLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EnableXboxLogin(ctx context.Context, in *EnableXboxLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthService/EnableXboxLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DisableXboxLogin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthService/DisableXboxLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EnableEpicLogin(ctx context.Context, in *EnableEpicLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthService/EnableEpicLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DisableEpicLogin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthService/DisableEpicLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateSessionTokenValidity(ctx context.Context, in *UpdateSessionTokenValidityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthService/UpdateSessionTokenValidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetOpenApiSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/auth.AuthService/GetOpenApiSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ExportSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SettingsImportExportData, error) {
	out := new(SettingsImportExportData)
	err := c.cc.Invoke(ctx, "/auth.AuthService/ExportSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth.AuthService/ImportSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	// InviteUser
	//
	// InviteUser Invites a new user based on the email specified
	InviteUser(context.Context, *InviteUserRequest) (*InviteUserResponse, error)
	GetEmailsByUserIds(context.Context, *GetEmailsByUserIdsRequest) (*GetEmailsByUserIdsResponse, error)
	// GetUser
	//
	// GetUser Retrieves a user based on username or user_id
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	BanUser(context.Context, *BanUserRequest) (*emptypb.Empty, error)
	UnbanUser(context.Context, *UnbanUserRequest) (*emptypb.Empty, error)
	// GetUsers
	//
	// GetUsers Retrieves multiple users based on username
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	// DeleteUser
	//
	// DeleteUser Deletes the user based on a user ID
	DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error)
	// GetUserData
	GetUserData(context.Context, *GetUserDataRequest) (*GetUserDataResponse, error)
	// DeleteUserData
	DeleteUserData(context.Context, *DeleteUserDataRequest) (*DeleteUserDataResponse, error)
	// Otp
	//
	// Generates an OTP and sends to the email for login
	Otp(context.Context, *OtpRequest) (*emptypb.Empty, error)
	// EmailLogin
	//
	// EmailLogin Logs in the user based on the OTP credentials specified and returns a session
	EmailLogin(context.Context, *EmailLoginRequest) (*EmailLoginResponse, error)
	// PasswordLogin
	//
	// PasswordLogin Logs in the user based on the username password credentials specified and returns a session
	PasswordLogin(context.Context, *PasswordLoginRequest) (*PasswordLoginResponse, error)
	// AnonLogin
	//
	// AnonLogin Logs in the user based on the anon auth specified and returns a session
	AnonLogin(context.Context, *AnonLoginRequest) (*AnonLoginResponse, error)
	// AppleLogin
	//
	// Logs in the user based on the apple credential token specified and returns a session
	AppleLogin(context.Context, *AppleLoginRequest) (*AppleLoginResponse, error)
	// FacebookLogin
	//
	// Logs in the user based on the facebook credential token specified and returns a session
	FacebookLogin(context.Context, *FacebookLoginRequest) (*FacebookLoginResponse, error)
	// GoogleLogin
	//
	// Logs in the user based on the google credential token specified and returns a session
	GoogleLogin(context.Context, *GoogleLoginRequest) (*GoogleLoginResponse, error)
	// SteamLogin
	//
	// Logs in the user based on the steam token specified and returns a session
	SteamLogin(context.Context, *SteamLoginRequest) (*SteamLoginResponse, error)
	// XboxLogin
	//
	// Logs in the user based on the steam token specified and returns a session
	XboxLogin(context.Context, *XboxLoginRequest) (*XboxLoginResponse, error)
	// EpicLogin
	//
	// Logs in the user based on the steam token specified and returns a session
	EpicLogin(context.Context, *EpicLoginRequest) (*EpicLoginResponse, error)
	// AssociateLogins
	//
	// AssociateLogins associates two logins based on their session tokens
	AssociateLogins(context.Context, *AssociateLoginsRequest) (*emptypb.Empty, error)
	// Refresh
	//
	// Refreshes the session
	Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error)
	// Logout
	//
	// Logout Ends the current session of the user
	Logout(context.Context, *LogoutRequest) (*emptypb.Empty, error)
	// Validate
	//
	// Validate validates the session of the user and returns the user info
	Validate(context.Context, *ValidateRequest) (*ValidateResponse, error)
	// ValidateInternal
	//
	// ValidateInternal validates the session of the user and returns the user info
	ValidateInternal(context.Context, *ValidateRequest) (*ValidateInternalResponse, error)
	// DeleteInvalidatedSessions
	//
	// Deletes invalidated sessions
	DeleteSessions(context.Context, *DeleteSessionsRequest) (*DeleteSessionsResponse, error)
	// GetSettings
	//
	// Shows the user settings for admin tools
	GetSettings(context.Context, *emptypb.Empty) (*GetSettingsResponse, error)
	// EnableEmailLogin
	//
	// Enables the email, OTP based login
	EnableEmailLogin(context.Context, *EnableEmailLoginRequest) (*emptypb.Empty, error)
	// DisableEmailLogin
	//
	// Disables the email/OTP based login
	DisableEmailLogin(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// EnablePasswordLogin
	//
	// Enables the email, password based login
	EnablePasswordLogin(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// DisablePasswordLogin
	//
	// Disables the email/password based login
	DisablePasswordLogin(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// EnableAnonLogin
	//
	// Enables anonymous login
	EnableAnonLogin(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// DisableAnonLogin
	//
	// Disables anonymous logins
	DisableAnonLogin(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// EnableAppleLogin
	//
	// Enables the Apple ID based login
	EnableAppleLogin(context.Context, *EnableAppleLoginRequest) (*emptypb.Empty, error)
	// DisableAppleLogin
	//
	// Disables the Apple ID based login
	DisableAppleLogin(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// EnableFacebookLogin
	//
	// Enables the facebook based login
	EnableFacebookLogin(context.Context, *EnableFacebookLoginRequest) (*emptypb.Empty, error)
	// DisableFacebookLogin
	//
	// Disables the facebook based login
	DisableFacebookLogin(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// EnableGoogleLogin
	//
	// Enables the Google ID based login
	EnableGoogleLogin(context.Context, *EnableGoogleLoginRequest) (*emptypb.Empty, error)
	// DisableGoogleLogin
	//
	// Disables the Google based login
	DisableGoogleLogin(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// EnableSteamLogin
	//
	// Enables the Steam based login
	EnableSteamLogin(context.Context, *EnableSteamLoginRequest) (*emptypb.Empty, error)
	// DisableSteamLogin
	//
	// Disables the Steam based login
	DisableSteamLogin(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// EnableXboxLogin
	//
	// Enables the Steam based login
	EnableXboxLogin(context.Context, *EnableXboxLoginRequest) (*emptypb.Empty, error)
	// DisableXboxLogin
	//
	// Disables the Xbox based login
	DisableXboxLogin(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// EnableEpicLogin
	//
	// Enables the Steam based login
	EnableEpicLogin(context.Context, *EnableEpicLoginRequest) (*emptypb.Empty, error)
	// DisableEpicLogin
	//
	// Disables the Epic based login
	DisableEpicLogin(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// UpdateSessionTokenValidity
	//
	// Updates the session token validity time
	UpdateSessionTokenValidity(context.Context, *UpdateSessionTokenValidityRequest) (*emptypb.Empty, error)
	// GetOpenApiSpec
	//
	// Returns the generated openapi swagger document
	GetOpenApiSpec(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error)
	ExportSettings(context.Context, *emptypb.Empty) (*SettingsImportExportData, error)
	ImportSettings(context.Context, *SettingsImportExportData) (*emptypb.Empty, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) InviteUser(context.Context, *InviteUserRequest) (*InviteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteUser not implemented")
}
func (UnimplementedAuthServiceServer) GetEmailsByUserIds(context.Context, *GetEmailsByUserIdsRequest) (*GetEmailsByUserIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailsByUserIds not implemented")
}
func (UnimplementedAuthServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAuthServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAuthServiceServer) BanUser(context.Context, *BanUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanUser not implemented")
}
func (UnimplementedAuthServiceServer) UnbanUser(context.Context, *UnbanUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbanUser not implemented")
}
func (UnimplementedAuthServiceServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedAuthServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAuthServiceServer) GetUserData(context.Context, *GetUserDataRequest) (*GetUserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserData not implemented")
}
func (UnimplementedAuthServiceServer) DeleteUserData(context.Context, *DeleteUserDataRequest) (*DeleteUserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserData not implemented")
}
func (UnimplementedAuthServiceServer) Otp(context.Context, *OtpRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Otp not implemented")
}
func (UnimplementedAuthServiceServer) EmailLogin(context.Context, *EmailLoginRequest) (*EmailLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailLogin not implemented")
}
func (UnimplementedAuthServiceServer) PasswordLogin(context.Context, *PasswordLoginRequest) (*PasswordLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordLogin not implemented")
}
func (UnimplementedAuthServiceServer) AnonLogin(context.Context, *AnonLoginRequest) (*AnonLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnonLogin not implemented")
}
func (UnimplementedAuthServiceServer) AppleLogin(context.Context, *AppleLoginRequest) (*AppleLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppleLogin not implemented")
}
func (UnimplementedAuthServiceServer) FacebookLogin(context.Context, *FacebookLoginRequest) (*FacebookLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FacebookLogin not implemented")
}
func (UnimplementedAuthServiceServer) GoogleLogin(context.Context, *GoogleLoginRequest) (*GoogleLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoogleLogin not implemented")
}
func (UnimplementedAuthServiceServer) SteamLogin(context.Context, *SteamLoginRequest) (*SteamLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SteamLogin not implemented")
}
func (UnimplementedAuthServiceServer) XboxLogin(context.Context, *XboxLoginRequest) (*XboxLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method XboxLogin not implemented")
}
func (UnimplementedAuthServiceServer) EpicLogin(context.Context, *EpicLoginRequest) (*EpicLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpicLogin not implemented")
}
func (UnimplementedAuthServiceServer) AssociateLogins(context.Context, *AssociateLoginsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssociateLogins not implemented")
}
func (UnimplementedAuthServiceServer) Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedAuthServiceServer) Logout(context.Context, *LogoutRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAuthServiceServer) Validate(context.Context, *ValidateRequest) (*ValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedAuthServiceServer) ValidateInternal(context.Context, *ValidateRequest) (*ValidateInternalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateInternal not implemented")
}
func (UnimplementedAuthServiceServer) DeleteSessions(context.Context, *DeleteSessionsRequest) (*DeleteSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSessions not implemented")
}
func (UnimplementedAuthServiceServer) GetSettings(context.Context, *emptypb.Empty) (*GetSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettings not implemented")
}
func (UnimplementedAuthServiceServer) EnableEmailLogin(context.Context, *EnableEmailLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableEmailLogin not implemented")
}
func (UnimplementedAuthServiceServer) DisableEmailLogin(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableEmailLogin not implemented")
}
func (UnimplementedAuthServiceServer) EnablePasswordLogin(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnablePasswordLogin not implemented")
}
func (UnimplementedAuthServiceServer) DisablePasswordLogin(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisablePasswordLogin not implemented")
}
func (UnimplementedAuthServiceServer) EnableAnonLogin(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableAnonLogin not implemented")
}
func (UnimplementedAuthServiceServer) DisableAnonLogin(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableAnonLogin not implemented")
}
func (UnimplementedAuthServiceServer) EnableAppleLogin(context.Context, *EnableAppleLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableAppleLogin not implemented")
}
func (UnimplementedAuthServiceServer) DisableAppleLogin(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableAppleLogin not implemented")
}
func (UnimplementedAuthServiceServer) EnableFacebookLogin(context.Context, *EnableFacebookLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableFacebookLogin not implemented")
}
func (UnimplementedAuthServiceServer) DisableFacebookLogin(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableFacebookLogin not implemented")
}
func (UnimplementedAuthServiceServer) EnableGoogleLogin(context.Context, *EnableGoogleLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableGoogleLogin not implemented")
}
func (UnimplementedAuthServiceServer) DisableGoogleLogin(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableGoogleLogin not implemented")
}
func (UnimplementedAuthServiceServer) EnableSteamLogin(context.Context, *EnableSteamLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableSteamLogin not implemented")
}
func (UnimplementedAuthServiceServer) DisableSteamLogin(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableSteamLogin not implemented")
}
func (UnimplementedAuthServiceServer) EnableXboxLogin(context.Context, *EnableXboxLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableXboxLogin not implemented")
}
func (UnimplementedAuthServiceServer) DisableXboxLogin(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableXboxLogin not implemented")
}
func (UnimplementedAuthServiceServer) EnableEpicLogin(context.Context, *EnableEpicLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableEpicLogin not implemented")
}
func (UnimplementedAuthServiceServer) DisableEpicLogin(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableEpicLogin not implemented")
}
func (UnimplementedAuthServiceServer) UpdateSessionTokenValidity(context.Context, *UpdateSessionTokenValidityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSessionTokenValidity not implemented")
}
func (UnimplementedAuthServiceServer) GetOpenApiSpec(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenApiSpec not implemented")
}
func (UnimplementedAuthServiceServer) ExportSettings(context.Context, *emptypb.Empty) (*SettingsImportExportData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportSettings not implemented")
}
func (UnimplementedAuthServiceServer) ImportSettings(context.Context, *SettingsImportExportData) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportSettings not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_InviteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).InviteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/InviteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).InviteUser(ctx, req.(*InviteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetEmailsByUserIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailsByUserIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetEmailsByUserIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/GetEmailsByUserIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetEmailsByUserIds(ctx, req.(*GetEmailsByUserIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_BanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).BanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/BanUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).BanUser(ctx, req.(*BanUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UnbanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbanUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UnbanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/UnbanUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UnbanUser(ctx, req.(*UnbanUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/GetUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetUserData(ctx, req.(*GetUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/DeleteUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteUserData(ctx, req.(*DeleteUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Otp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Otp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/Otp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Otp(ctx, req.(*OtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EmailLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EmailLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/EmailLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EmailLogin(ctx, req.(*EmailLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_PasswordLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).PasswordLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/PasswordLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).PasswordLogin(ctx, req.(*PasswordLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AnonLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnonLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AnonLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/AnonLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AnonLogin(ctx, req.(*AnonLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AppleLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppleLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AppleLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/AppleLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AppleLogin(ctx, req.(*AppleLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_FacebookLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FacebookLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).FacebookLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/FacebookLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).FacebookLogin(ctx, req.(*FacebookLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GoogleLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoogleLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GoogleLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/GoogleLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GoogleLogin(ctx, req.(*GoogleLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SteamLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SteamLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SteamLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/SteamLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SteamLogin(ctx, req.(*SteamLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_XboxLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XboxLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).XboxLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/XboxLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).XboxLogin(ctx, req.(*XboxLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EpicLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EpicLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EpicLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/EpicLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EpicLogin(ctx, req.(*EpicLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AssociateLogins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociateLoginsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AssociateLogins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/AssociateLogins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AssociateLogins(ctx, req.(*AssociateLoginsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Refresh(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ValidateInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ValidateInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/ValidateInternal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ValidateInternal(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/DeleteSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteSessions(ctx, req.(*DeleteSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/GetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetSettings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EnableEmailLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableEmailLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EnableEmailLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/EnableEmailLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EnableEmailLogin(ctx, req.(*EnableEmailLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DisableEmailLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DisableEmailLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/DisableEmailLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DisableEmailLogin(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EnablePasswordLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EnablePasswordLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/EnablePasswordLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EnablePasswordLogin(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DisablePasswordLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DisablePasswordLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/DisablePasswordLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DisablePasswordLogin(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EnableAnonLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EnableAnonLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/EnableAnonLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EnableAnonLogin(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DisableAnonLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DisableAnonLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/DisableAnonLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DisableAnonLogin(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EnableAppleLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableAppleLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EnableAppleLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/EnableAppleLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EnableAppleLogin(ctx, req.(*EnableAppleLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DisableAppleLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DisableAppleLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/DisableAppleLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DisableAppleLogin(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EnableFacebookLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableFacebookLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EnableFacebookLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/EnableFacebookLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EnableFacebookLogin(ctx, req.(*EnableFacebookLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DisableFacebookLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DisableFacebookLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/DisableFacebookLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DisableFacebookLogin(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EnableGoogleLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableGoogleLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EnableGoogleLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/EnableGoogleLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EnableGoogleLogin(ctx, req.(*EnableGoogleLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DisableGoogleLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DisableGoogleLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/DisableGoogleLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DisableGoogleLogin(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EnableSteamLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableSteamLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EnableSteamLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/EnableSteamLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EnableSteamLogin(ctx, req.(*EnableSteamLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DisableSteamLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DisableSteamLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/DisableSteamLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DisableSteamLogin(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EnableXboxLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableXboxLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EnableXboxLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/EnableXboxLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EnableXboxLogin(ctx, req.(*EnableXboxLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DisableXboxLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DisableXboxLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/DisableXboxLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DisableXboxLogin(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EnableEpicLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableEpicLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EnableEpicLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/EnableEpicLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EnableEpicLogin(ctx, req.(*EnableEpicLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DisableEpicLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DisableEpicLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/DisableEpicLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DisableEpicLogin(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateSessionTokenValidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSessionTokenValidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateSessionTokenValidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/UpdateSessionTokenValidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateSessionTokenValidity(ctx, req.(*UpdateSessionTokenValidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetOpenApiSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetOpenApiSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/GetOpenApiSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetOpenApiSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ExportSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ExportSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/ExportSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ExportSettings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ImportSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsImportExportData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ImportSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/ImportSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ImportSettings(ctx, req.(*SettingsImportExportData))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InviteUser",
			Handler:    _AuthService_InviteUser_Handler,
		},
		{
			MethodName: "GetEmailsByUserIds",
			Handler:    _AuthService_GetEmailsByUserIds_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _AuthService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _AuthService_UpdateUser_Handler,
		},
		{
			MethodName: "BanUser",
			Handler:    _AuthService_BanUser_Handler,
		},
		{
			MethodName: "UnbanUser",
			Handler:    _AuthService_UnbanUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _AuthService_GetUsers_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _AuthService_DeleteUser_Handler,
		},
		{
			MethodName: "GetUserData",
			Handler:    _AuthService_GetUserData_Handler,
		},
		{
			MethodName: "DeleteUserData",
			Handler:    _AuthService_DeleteUserData_Handler,
		},
		{
			MethodName: "Otp",
			Handler:    _AuthService_Otp_Handler,
		},
		{
			MethodName: "EmailLogin",
			Handler:    _AuthService_EmailLogin_Handler,
		},
		{
			MethodName: "PasswordLogin",
			Handler:    _AuthService_PasswordLogin_Handler,
		},
		{
			MethodName: "AnonLogin",
			Handler:    _AuthService_AnonLogin_Handler,
		},
		{
			MethodName: "AppleLogin",
			Handler:    _AuthService_AppleLogin_Handler,
		},
		{
			MethodName: "FacebookLogin",
			Handler:    _AuthService_FacebookLogin_Handler,
		},
		{
			MethodName: "GoogleLogin",
			Handler:    _AuthService_GoogleLogin_Handler,
		},
		{
			MethodName: "SteamLogin",
			Handler:    _AuthService_SteamLogin_Handler,
		},
		{
			MethodName: "XboxLogin",
			Handler:    _AuthService_XboxLogin_Handler,
		},
		{
			MethodName: "EpicLogin",
			Handler:    _AuthService_EpicLogin_Handler,
		},
		{
			MethodName: "AssociateLogins",
			Handler:    _AuthService_AssociateLogins_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _AuthService_Refresh_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AuthService_Logout_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _AuthService_Validate_Handler,
		},
		{
			MethodName: "ValidateInternal",
			Handler:    _AuthService_ValidateInternal_Handler,
		},
		{
			MethodName: "DeleteSessions",
			Handler:    _AuthService_DeleteSessions_Handler,
		},
		{
			MethodName: "GetSettings",
			Handler:    _AuthService_GetSettings_Handler,
		},
		{
			MethodName: "EnableEmailLogin",
			Handler:    _AuthService_EnableEmailLogin_Handler,
		},
		{
			MethodName: "DisableEmailLogin",
			Handler:    _AuthService_DisableEmailLogin_Handler,
		},
		{
			MethodName: "EnablePasswordLogin",
			Handler:    _AuthService_EnablePasswordLogin_Handler,
		},
		{
			MethodName: "DisablePasswordLogin",
			Handler:    _AuthService_DisablePasswordLogin_Handler,
		},
		{
			MethodName: "EnableAnonLogin",
			Handler:    _AuthService_EnableAnonLogin_Handler,
		},
		{
			MethodName: "DisableAnonLogin",
			Handler:    _AuthService_DisableAnonLogin_Handler,
		},
		{
			MethodName: "EnableAppleLogin",
			Handler:    _AuthService_EnableAppleLogin_Handler,
		},
		{
			MethodName: "DisableAppleLogin",
			Handler:    _AuthService_DisableAppleLogin_Handler,
		},
		{
			MethodName: "EnableFacebookLogin",
			Handler:    _AuthService_EnableFacebookLogin_Handler,
		},
		{
			MethodName: "DisableFacebookLogin",
			Handler:    _AuthService_DisableFacebookLogin_Handler,
		},
		{
			MethodName: "EnableGoogleLogin",
			Handler:    _AuthService_EnableGoogleLogin_Handler,
		},
		{
			MethodName: "DisableGoogleLogin",
			Handler:    _AuthService_DisableGoogleLogin_Handler,
		},
		{
			MethodName: "EnableSteamLogin",
			Handler:    _AuthService_EnableSteamLogin_Handler,
		},
		{
			MethodName: "DisableSteamLogin",
			Handler:    _AuthService_DisableSteamLogin_Handler,
		},
		{
			MethodName: "EnableXboxLogin",
			Handler:    _AuthService_EnableXboxLogin_Handler,
		},
		{
			MethodName: "DisableXboxLogin",
			Handler:    _AuthService_DisableXboxLogin_Handler,
		},
		{
			MethodName: "EnableEpicLogin",
			Handler:    _AuthService_EnableEpicLogin_Handler,
		},
		{
			MethodName: "DisableEpicLogin",
			Handler:    _AuthService_DisableEpicLogin_Handler,
		},
		{
			MethodName: "UpdateSessionTokenValidity",
			Handler:    _AuthService_UpdateSessionTokenValidity_Handler,
		},
		{
			MethodName: "GetOpenApiSpec",
			Handler:    _AuthService_GetOpenApiSpec_Handler,
		},
		{
			MethodName: "ExportSettings",
			Handler:    _AuthService_ExportSettings_Handler,
		},
		{
			MethodName: "ImportSettings",
			Handler:    _AuthService_ImportSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth_services.proto",
}
