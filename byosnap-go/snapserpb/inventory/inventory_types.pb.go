// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v5.26.1
// source: inventory_types.proto

package proto

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Service Events & Pub/Sub
type InventoryEventType int32

const (
	InventoryEventType_UNKNOWN_EVENT_TYPE                 InventoryEventType = 0
	InventoryEventType_INVENTORY_ITEM_ADDED               InventoryEventType = 1
	InventoryEventType_INVENTORY_ITEM_CONSUMED            InventoryEventType = 2
	InventoryEventType_INVENTORY_ITEM_PURCHASED           InventoryEventType = 3
	InventoryEventType_INVENTORY_CURRENCY_BALANCE_UPDATED InventoryEventType = 4
)

// Enum value maps for InventoryEventType.
var (
	InventoryEventType_name = map[int32]string{
		0: "UNKNOWN_EVENT_TYPE",
		1: "INVENTORY_ITEM_ADDED",
		2: "INVENTORY_ITEM_CONSUMED",
		3: "INVENTORY_ITEM_PURCHASED",
		4: "INVENTORY_CURRENCY_BALANCE_UPDATED",
	}
	InventoryEventType_value = map[string]int32{
		"UNKNOWN_EVENT_TYPE":                 0,
		"INVENTORY_ITEM_ADDED":               1,
		"INVENTORY_ITEM_CONSUMED":            2,
		"INVENTORY_ITEM_PURCHASED":           3,
		"INVENTORY_CURRENCY_BALANCE_UPDATED": 4,
	}
)

func (x InventoryEventType) Enum() *InventoryEventType {
	p := new(InventoryEventType)
	*p = x
	return p
}

func (x InventoryEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InventoryEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_types_proto_enumTypes[0].Descriptor()
}

func (InventoryEventType) Type() protoreflect.EnumType {
	return &file_inventory_types_proto_enumTypes[0]
}

func (x InventoryEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InventoryEventType.Descriptor instead.
func (InventoryEventType) EnumDescriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{0}
}

type UnlockCost_Type int32

const (
	UnlockCost_UNSPECIFIED_TYPE UnlockCost_Type = 0
	UnlockCost_ITEM             UnlockCost_Type = 1
	UnlockCost_CURRENCY         UnlockCost_Type = 2
	UnlockCost_ENERGY           UnlockCost_Type = 3
)

// Enum value maps for UnlockCost_Type.
var (
	UnlockCost_Type_name = map[int32]string{
		0: "UNSPECIFIED_TYPE",
		1: "ITEM",
		2: "CURRENCY",
		3: "ENERGY",
	}
	UnlockCost_Type_value = map[string]int32{
		"UNSPECIFIED_TYPE": 0,
		"ITEM":             1,
		"CURRENCY":         2,
		"ENERGY":           3,
	}
)

func (x UnlockCost_Type) Enum() *UnlockCost_Type {
	p := new(UnlockCost_Type)
	*p = x
	return p
}

func (x UnlockCost_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnlockCost_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_types_proto_enumTypes[1].Descriptor()
}

func (UnlockCost_Type) Type() protoreflect.EnumType {
	return &file_inventory_types_proto_enumTypes[1]
}

func (x UnlockCost_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnlockCost_Type.Descriptor instead.
func (UnlockCost_Type) EnumDescriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{40, 0}
}

type GetItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Tags      string `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	ClassName string `protobuf:"bytes,4,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	Name      string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Names     string `protobuf:"bytes,7,opt,name=names,proto3" json:"names,omitempty"`
	Type      string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GetItemsRequest) Reset() {
	*x = GetItemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetItemsRequest) ProtoMessage() {}

func (x *GetItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetItemsRequest.ProtoReflect.Descriptor instead.
func (*GetItemsRequest) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{0}
}

func (x *GetItemsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetItemsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetItemsRequest) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *GetItemsRequest) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *GetItemsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetItemsRequest) GetNames() string {
	if x != nil {
		return x.Names
	}
	return ""
}

func (x *GetItemsRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type GetItemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items                []*CatalogItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	MatchingCatalogItems int32          `protobuf:"varint,2,opt,name=matching_catalog_items,json=matchingCatalogItems,proto3" json:"matching_catalog_items,omitempty"`
	TotalCatalogItems    int32          `protobuf:"varint,3,opt,name=total_catalog_items,json=totalCatalogItems,proto3" json:"total_catalog_items,omitempty"`
}

func (x *GetItemsResponse) Reset() {
	*x = GetItemsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetItemsResponse) ProtoMessage() {}

func (x *GetItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetItemsResponse.ProtoReflect.Descriptor instead.
func (*GetItemsResponse) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{1}
}

func (x *GetItemsResponse) GetItems() []*CatalogItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GetItemsResponse) GetMatchingCatalogItems() int32 {
	if x != nil {
		return x.MatchingCatalogItems
	}
	return 0
}

func (x *GetItemsResponse) GetTotalCatalogItems() int32 {
	if x != nil {
		return x.TotalCatalogItems
	}
	return 0
}

type GetContainerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetContainerRequest) Reset() {
	*x = GetContainerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContainerRequest) ProtoMessage() {}

func (x *GetContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContainerRequest.ProtoReflect.Descriptor instead.
func (*GetContainerRequest) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{2}
}

func (x *GetContainerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetContainerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Items             map[string]int32 `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Currencies        map[string]int32 `protobuf:"bytes,3,rep,name=currencies,proto3" json:"currencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	DropTables        map[string]int32 `protobuf:"bytes,4,rep,name=drop_tables,json=dropTables,proto3" json:"drop_tables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	DropTableContents []*DropTable     `protobuf:"bytes,5,rep,name=drop_table_contents,json=dropTableContents,proto3" json:"drop_table_contents,omitempty"`
}

func (x *GetContainerResponse) Reset() {
	*x = GetContainerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContainerResponse) ProtoMessage() {}

func (x *GetContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContainerResponse.ProtoReflect.Descriptor instead.
func (*GetContainerResponse) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{3}
}

func (x *GetContainerResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetContainerResponse) GetItems() map[string]int32 {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GetContainerResponse) GetCurrencies() map[string]int32 {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *GetContainerResponse) GetDropTables() map[string]int32 {
	if x != nil {
		return x.DropTables
	}
	return nil
}

func (x *GetContainerResponse) GetDropTableContents() []*DropTable {
	if x != nil {
		return x.DropTableContents
	}
	return nil
}

type GrantInventoryItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string           `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Items    map[string]int32 `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Metadata *structpb.Struct `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GrantInventoryItemsRequest) Reset() {
	*x = GrantInventoryItemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantInventoryItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantInventoryItemsRequest) ProtoMessage() {}

func (x *GrantInventoryItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantInventoryItemsRequest.ProtoReflect.Descriptor instead.
func (*GrantInventoryItemsRequest) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{4}
}

func (x *GrantInventoryItemsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GrantInventoryItemsRequest) GetItems() map[string]int32 {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GrantInventoryItemsRequest) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GetUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemName string `protobuf:"bytes,1,opt,name=item_name,json=itemName,proto3" json:"item_name,omitempty"`
	Limit    int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetUsersRequest) Reset() {
	*x = GetUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersRequest) ProtoMessage() {}

func (x *GetUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersRequest.ProtoReflect.Descriptor instead.
func (*GetUsersRequest) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{5}
}

func (x *GetUsersRequest) GetItemName() string {
	if x != nil {
		return x.ItemName
	}
	return ""
}

func (x *GetUsersRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetUsersRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds    []string `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	TotalCount int32    `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *GetUsersResponse) Reset() {
	*x = GetUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersResponse) ProtoMessage() {}

func (x *GetUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersResponse.ProtoReflect.Descriptor instead.
func (*GetUsersResponse) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{6}
}

func (x *GetUsersResponse) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *GetUsersResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type GetUserItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Limit           int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset          int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	CatalogItemName string `protobuf:"bytes,4,opt,name=catalog_item_name,json=catalogItemName,proto3" json:"catalog_item_name,omitempty"`
}

func (x *GetUserItemsRequest) Reset() {
	*x = GetUserItemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserItemsRequest) ProtoMessage() {}

func (x *GetUserItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserItemsRequest.ProtoReflect.Descriptor instead.
func (*GetUserItemsRequest) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{7}
}

func (x *GetUserItemsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserItemsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetUserItemsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetUserItemsRequest) GetCatalogItemName() string {
	if x != nil {
		return x.CatalogItemName
	}
	return ""
}

type GetUserItemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*UserInventoryItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GetUserItemsResponse) Reset() {
	*x = GetUserItemsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserItemsResponse) ProtoMessage() {}

func (x *GetUserItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserItemsResponse.ProtoReflect.Descriptor instead.
func (*GetUserItemsResponse) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{8}
}

func (x *GetUserItemsResponse) GetItems() []*UserInventoryItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetUserItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	InstanceId string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *GetUserItemRequest) Reset() {
	*x = GetUserItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserItemRequest) ProtoMessage() {}

func (x *GetUserItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserItemRequest.ProtoReflect.Descriptor instead.
func (*GetUserItemRequest) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{9}
}

func (x *GetUserItemRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserItemRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type GetUserItemCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CatalogItemName string `protobuf:"bytes,2,opt,name=catalog_item_name,json=catalogItemName,proto3" json:"catalog_item_name,omitempty"`
}

func (x *GetUserItemCountRequest) Reset() {
	*x = GetUserItemCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserItemCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserItemCountRequest) ProtoMessage() {}

func (x *GetUserItemCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserItemCountRequest.ProtoReflect.Descriptor instead.
func (*GetUserItemCountRequest) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{10}
}

func (x *GetUserItemCountRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserItemCountRequest) GetCatalogItemName() string {
	if x != nil {
		return x.CatalogItemName
	}
	return ""
}

type GetUserItemCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetUserItemCountResponse) Reset() {
	*x = GetUserItemCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserItemCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserItemCountResponse) ProtoMessage() {}

func (x *GetUserItemCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserItemCountResponse.ProtoReflect.Descriptor instead.
func (*GetUserItemCountResponse) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{11}
}

func (x *GetUserItemCountResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type DeleteUserItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	InstanceId string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *DeleteUserItemRequest) Reset() {
	*x = DeleteUserItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserItemRequest) ProtoMessage() {}

func (x *DeleteUserItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserItemRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserItemRequest) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteUserItemRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DeleteUserItemRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type ConsumeItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	InstanceId   string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	ConsumeCount int32  `protobuf:"varint,3,opt,name=consume_count,json=consumeCount,proto3" json:"consume_count,omitempty"`
}

func (x *ConsumeItemRequest) Reset() {
	*x = ConsumeItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeItemRequest) ProtoMessage() {}

func (x *ConsumeItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeItemRequest.ProtoReflect.Descriptor instead.
func (*ConsumeItemRequest) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{13}
}

func (x *ConsumeItemRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ConsumeItemRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ConsumeItemRequest) GetConsumeCount() int32 {
	if x != nil {
		return x.ConsumeCount
	}
	return 0
}

type ConsumeItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId     string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	RemainingUses  int32  `protobuf:"varint,2,opt,name=remaining_uses,json=remainingUses,proto3" json:"remaining_uses,omitempty"`
	LastConsumedAt int64  `protobuf:"varint,3,opt,name=last_consumed_at,json=lastConsumedAt,proto3" json:"last_consumed_at,omitempty"`
}

func (x *ConsumeItemResponse) Reset() {
	*x = ConsumeItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeItemResponse) ProtoMessage() {}

func (x *ConsumeItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeItemResponse.ProtoReflect.Descriptor instead.
func (*ConsumeItemResponse) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{14}
}

func (x *ConsumeItemResponse) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ConsumeItemResponse) GetRemainingUses() int32 {
	if x != nil {
		return x.RemainingUses
	}
	return 0
}

func (x *ConsumeItemResponse) GetLastConsumedAt() int64 {
	if x != nil {
		return x.LastConsumedAt
	}
	return 0
}

type GrantAndOpenContainerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         string      `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ItemName       string      `protobuf:"bytes,2,opt,name=item_name,json=itemName,proto3" json:"item_name,omitempty"`
	UnlockCost     *UnlockCost `protobuf:"bytes,3,opt,name=unlock_cost,json=unlockCost,proto3" json:"unlock_cost,omitempty"`
	RequireBalance bool        `protobuf:"varint,4,opt,name=require_balance,json=requireBalance,proto3" json:"require_balance,omitempty"`
}

func (x *GrantAndOpenContainerRequest) Reset() {
	*x = GrantAndOpenContainerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantAndOpenContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantAndOpenContainerRequest) ProtoMessage() {}

func (x *GrantAndOpenContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantAndOpenContainerRequest.ProtoReflect.Descriptor instead.
func (*GrantAndOpenContainerRequest) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{15}
}

func (x *GrantAndOpenContainerRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GrantAndOpenContainerRequest) GetItemName() string {
	if x != nil {
		return x.ItemName
	}
	return ""
}

func (x *GrantAndOpenContainerRequest) GetUnlockCost() *UnlockCost {
	if x != nil {
		return x.UnlockCost
	}
	return nil
}

func (x *GrantAndOpenContainerRequest) GetRequireBalance() bool {
	if x != nil {
		return x.RequireBalance
	}
	return false
}

type GrantAndOpenContainerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrantedItems            []*UserInventoryItem `protobuf:"bytes,1,rep,name=granted_items,json=grantedItems,proto3" json:"granted_items,omitempty"`
	GrantedVirtualCurrency  map[string]int32     `protobuf:"bytes,2,rep,name=granted_virtual_currency,json=grantedVirtualCurrency,proto3" json:"granted_virtual_currency,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	GrantedTrackablesEnergy map[string]int32     `protobuf:"bytes,4,rep,name=granted_trackables_energy,json=grantedTrackablesEnergy,proto3" json:"granted_trackables_energy,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	GrantedTrackablesXp     map[string]int32     `protobuf:"bytes,5,rep,name=granted_trackables_xp,json=grantedTrackablesXp,proto3" json:"granted_trackables_xp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	GrantResults            *GrantResults        `protobuf:"bytes,6,opt,name=grant_results,json=grantResults,proto3" json:"grant_results,omitempty"`
}

func (x *GrantAndOpenContainerResponse) Reset() {
	*x = GrantAndOpenContainerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantAndOpenContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantAndOpenContainerResponse) ProtoMessage() {}

func (x *GrantAndOpenContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantAndOpenContainerResponse.ProtoReflect.Descriptor instead.
func (*GrantAndOpenContainerResponse) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{16}
}

func (x *GrantAndOpenContainerResponse) GetGrantedItems() []*UserInventoryItem {
	if x != nil {
		return x.GrantedItems
	}
	return nil
}

func (x *GrantAndOpenContainerResponse) GetGrantedVirtualCurrency() map[string]int32 {
	if x != nil {
		return x.GrantedVirtualCurrency
	}
	return nil
}

func (x *GrantAndOpenContainerResponse) GetGrantedTrackablesEnergy() map[string]int32 {
	if x != nil {
		return x.GrantedTrackablesEnergy
	}
	return nil
}

func (x *GrantAndOpenContainerResponse) GetGrantedTrackablesXp() map[string]int32 {
	if x != nil {
		return x.GrantedTrackablesXp
	}
	return nil
}

func (x *GrantAndOpenContainerResponse) GetGrantResults() *GrantResults {
	if x != nil {
		return x.GrantResults
	}
	return nil
}

type OpenContainerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string      `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	InstanceId string      `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	EscrowId   string      `protobuf:"bytes,3,opt,name=escrow_id,json=escrowId,proto3" json:"escrow_id,omitempty"`
	UnlockCost *UnlockCost `protobuf:"bytes,4,opt,name=unlock_cost,json=unlockCost,proto3" json:"unlock_cost,omitempty"`
}

func (x *OpenContainerRequest) Reset() {
	*x = OpenContainerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenContainerRequest) ProtoMessage() {}

func (x *OpenContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenContainerRequest.ProtoReflect.Descriptor instead.
func (*OpenContainerRequest) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{17}
}

func (x *OpenContainerRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OpenContainerRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *OpenContainerRequest) GetEscrowId() string {
	if x != nil {
		return x.EscrowId
	}
	return ""
}

func (x *OpenContainerRequest) GetUnlockCost() *UnlockCost {
	if x != nil {
		return x.UnlockCost
	}
	return nil
}

type OpenContainerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrantedItems            []*UserInventoryItem `protobuf:"bytes,1,rep,name=granted_items,json=grantedItems,proto3" json:"granted_items,omitempty"`
	GrantedVirtualCurrency  map[string]int32     `protobuf:"bytes,2,rep,name=granted_virtual_currency,json=grantedVirtualCurrency,proto3" json:"granted_virtual_currency,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	RemainingUses           int32                `protobuf:"varint,3,opt,name=remaining_uses,json=remainingUses,proto3" json:"remaining_uses,omitempty"`
	GrantedTrackablesEnergy map[string]int32     `protobuf:"bytes,4,rep,name=granted_trackables_energy,json=grantedTrackablesEnergy,proto3" json:"granted_trackables_energy,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	GrantedTrackablesXp     map[string]int32     `protobuf:"bytes,5,rep,name=granted_trackables_xp,json=grantedTrackablesXp,proto3" json:"granted_trackables_xp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	GrantResults            *GrantResults        `protobuf:"bytes,6,opt,name=grant_results,json=grantResults,proto3" json:"grant_results,omitempty"`
}

func (x *OpenContainerResponse) Reset() {
	*x = OpenContainerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenContainerResponse) ProtoMessage() {}

func (x *OpenContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenContainerResponse.ProtoReflect.Descriptor instead.
func (*OpenContainerResponse) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{18}
}

func (x *OpenContainerResponse) GetGrantedItems() []*UserInventoryItem {
	if x != nil {
		return x.GrantedItems
	}
	return nil
}

func (x *OpenContainerResponse) GetGrantedVirtualCurrency() map[string]int32 {
	if x != nil {
		return x.GrantedVirtualCurrency
	}
	return nil
}

func (x *OpenContainerResponse) GetRemainingUses() int32 {
	if x != nil {
		return x.RemainingUses
	}
	return 0
}

func (x *OpenContainerResponse) GetGrantedTrackablesEnergy() map[string]int32 {
	if x != nil {
		return x.GrantedTrackablesEnergy
	}
	return nil
}

func (x *OpenContainerResponse) GetGrantedTrackablesXp() map[string]int32 {
	if x != nil {
		return x.GrantedTrackablesXp
	}
	return nil
}

func (x *OpenContainerResponse) GetGrantResults() *GrantResults {
	if x != nil {
		return x.GrantResults
	}
	return nil
}

type EvaluateContainerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	InstanceId string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *EvaluateContainerRequest) Reset() {
	*x = EvaluateContainerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluateContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateContainerRequest) ProtoMessage() {}

func (x *EvaluateContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateContainerRequest.ProtoReflect.Descriptor instead.
func (*EvaluateContainerRequest) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{19}
}

func (x *EvaluateContainerRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EvaluateContainerRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type EvaluateContainerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items            map[string]int32 `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Currencies       map[string]int32 `protobuf:"bytes,2,rep,name=currencies,proto3" json:"currencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TrackablesEnergy map[string]int32 `protobuf:"bytes,3,rep,name=trackables_energy,json=trackablesEnergy,proto3" json:"trackables_energy,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TrackablesXp     map[string]int32 `protobuf:"bytes,4,rep,name=trackables_xp,json=trackablesXp,proto3" json:"trackables_xp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	EscrowId         string           `protobuf:"bytes,5,opt,name=escrow_id,json=escrowId,proto3" json:"escrow_id,omitempty"`
}

func (x *EvaluateContainerResponse) Reset() {
	*x = EvaluateContainerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluateContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateContainerResponse) ProtoMessage() {}

func (x *EvaluateContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateContainerResponse.ProtoReflect.Descriptor instead.
func (*EvaluateContainerResponse) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{20}
}

func (x *EvaluateContainerResponse) GetItems() map[string]int32 {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *EvaluateContainerResponse) GetCurrencies() map[string]int32 {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *EvaluateContainerResponse) GetTrackablesEnergy() map[string]int32 {
	if x != nil {
		return x.TrackablesEnergy
	}
	return nil
}

func (x *EvaluateContainerResponse) GetTrackablesXp() map[string]int32 {
	if x != nil {
		return x.TrackablesXp
	}
	return nil
}

func (x *EvaluateContainerResponse) GetEscrowId() string {
	if x != nil {
		return x.EscrowId
	}
	return ""
}

type UnlockContainerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string      `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	InstanceId string      `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	UnlockCost *UnlockCost `protobuf:"bytes,3,opt,name=unlock_cost,json=unlockCost,proto3" json:"unlock_cost,omitempty"`
}

func (x *UnlockContainerRequest) Reset() {
	*x = UnlockContainerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockContainerRequest) ProtoMessage() {}

func (x *UnlockContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockContainerRequest.ProtoReflect.Descriptor instead.
func (*UnlockContainerRequest) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{21}
}

func (x *UnlockContainerRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UnlockContainerRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *UnlockContainerRequest) GetUnlockCost() *UnlockCost {
	if x != nil {
		return x.UnlockCost
	}
	return nil
}

type UnlockContainerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items            map[string]int32 `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Currencies       map[string]int32 `protobuf:"bytes,2,rep,name=currencies,proto3" json:"currencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TrackablesEnergy map[string]int32 `protobuf:"bytes,3,rep,name=trackables_energy,json=trackablesEnergy,proto3" json:"trackables_energy,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TrackablesXp     map[string]int32 `protobuf:"bytes,4,rep,name=trackables_xp,json=trackablesXp,proto3" json:"trackables_xp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	EscrowId         string           `protobuf:"bytes,5,opt,name=escrow_id,json=escrowId,proto3" json:"escrow_id,omitempty"`
}

func (x *UnlockContainerResponse) Reset() {
	*x = UnlockContainerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockContainerResponse) ProtoMessage() {}

func (x *UnlockContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockContainerResponse.ProtoReflect.Descriptor instead.
func (*UnlockContainerResponse) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{22}
}

func (x *UnlockContainerResponse) GetItems() map[string]int32 {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *UnlockContainerResponse) GetCurrencies() map[string]int32 {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *UnlockContainerResponse) GetTrackablesEnergy() map[string]int32 {
	if x != nil {
		return x.TrackablesEnergy
	}
	return nil
}

func (x *UnlockContainerResponse) GetTrackablesXp() map[string]int32 {
	if x != nil {
		return x.TrackablesXp
	}
	return nil
}

func (x *UnlockContainerResponse) GetEscrowId() string {
	if x != nil {
		return x.EscrowId
	}
	return ""
}

type UpdateUserItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string           `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	InstanceId string           `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Metadata   *structpb.Struct `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *UpdateUserItemRequest) Reset() {
	*x = UpdateUserItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserItemRequest) ProtoMessage() {}

func (x *UpdateUserItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserItemRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserItemRequest) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateUserItemRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateUserItemRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *UpdateUserItemRequest) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type PurchaseItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CurrencyName    string `protobuf:"bytes,2,opt,name=currency_name,json=currencyName,proto3" json:"currency_name,omitempty"`
	CatalogItemName string `protobuf:"bytes,3,opt,name=catalog_item_name,json=catalogItemName,proto3" json:"catalog_item_name,omitempty"`
}

func (x *PurchaseItemRequest) Reset() {
	*x = PurchaseItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchaseItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseItemRequest) ProtoMessage() {}

func (x *PurchaseItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseItemRequest.ProtoReflect.Descriptor instead.
func (*PurchaseItemRequest) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{24}
}

func (x *PurchaseItemRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PurchaseItemRequest) GetCurrencyName() string {
	if x != nil {
		return x.CurrencyName
	}
	return ""
}

func (x *PurchaseItemRequest) GetCatalogItemName() string {
	if x != nil {
		return x.CatalogItemName
	}
	return ""
}

type UpdateUserVirtualCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CurrencyName string `protobuf:"bytes,2,opt,name=currency_name,json=currencyName,proto3" json:"currency_name,omitempty"`
	Amount       int32  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *UpdateUserVirtualCurrencyRequest) Reset() {
	*x = UpdateUserVirtualCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserVirtualCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserVirtualCurrencyRequest) ProtoMessage() {}

func (x *UpdateUserVirtualCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserVirtualCurrencyRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserVirtualCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateUserVirtualCurrencyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateUserVirtualCurrencyRequest) GetCurrencyName() string {
	if x != nil {
		return x.CurrencyName
	}
	return ""
}

func (x *UpdateUserVirtualCurrencyRequest) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type UpdateUserVirtualCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreviousBalance int32 `protobuf:"varint,1,opt,name=previous_balance,json=previousBalance,proto3" json:"previous_balance,omitempty"`
	CurrentBalance  int32 `protobuf:"varint,2,opt,name=current_balance,json=currentBalance,proto3" json:"current_balance,omitempty"`
}

func (x *UpdateUserVirtualCurrencyResponse) Reset() {
	*x = UpdateUserVirtualCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserVirtualCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserVirtualCurrencyResponse) ProtoMessage() {}

func (x *UpdateUserVirtualCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserVirtualCurrencyResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserVirtualCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateUserVirtualCurrencyResponse) GetPreviousBalance() int32 {
	if x != nil {
		return x.PreviousBalance
	}
	return 0
}

func (x *UpdateUserVirtualCurrencyResponse) GetCurrentBalance() int32 {
	if x != nil {
		return x.CurrentBalance
	}
	return 0
}

type IncrementUserCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CurrencyName string `protobuf:"bytes,2,opt,name=currency_name,json=currencyName,proto3" json:"currency_name,omitempty"`
	Delta        int32  `protobuf:"varint,3,opt,name=delta,proto3" json:"delta,omitempty"`
}

func (x *IncrementUserCurrencyRequest) Reset() {
	*x = IncrementUserCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrementUserCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrementUserCurrencyRequest) ProtoMessage() {}

func (x *IncrementUserCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrementUserCurrencyRequest.ProtoReflect.Descriptor instead.
func (*IncrementUserCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{27}
}

func (x *IncrementUserCurrencyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *IncrementUserCurrencyRequest) GetCurrencyName() string {
	if x != nil {
		return x.CurrencyName
	}
	return ""
}

func (x *IncrementUserCurrencyRequest) GetDelta() int32 {
	if x != nil {
		return x.Delta
	}
	return 0
}

type IncrementUserCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreviousBalance int32 `protobuf:"varint,1,opt,name=previous_balance,json=previousBalance,proto3" json:"previous_balance,omitempty"`
	CurrentBalance  int32 `protobuf:"varint,2,opt,name=current_balance,json=currentBalance,proto3" json:"current_balance,omitempty"`
}

func (x *IncrementUserCurrencyResponse) Reset() {
	*x = IncrementUserCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrementUserCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrementUserCurrencyResponse) ProtoMessage() {}

func (x *IncrementUserCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrementUserCurrencyResponse.ProtoReflect.Descriptor instead.
func (*IncrementUserCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{28}
}

func (x *IncrementUserCurrencyResponse) GetPreviousBalance() int32 {
	if x != nil {
		return x.PreviousBalance
	}
	return 0
}

func (x *IncrementUserCurrencyResponse) GetCurrentBalance() int32 {
	if x != nil {
		return x.CurrentBalance
	}
	return 0
}

type GetUserCurrenciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetUserCurrenciesRequest) Reset() {
	*x = GetUserCurrenciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCurrenciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCurrenciesRequest) ProtoMessage() {}

func (x *GetUserCurrenciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCurrenciesRequest.ProtoReflect.Descriptor instead.
func (*GetUserCurrenciesRequest) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{29}
}

func (x *GetUserCurrenciesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetUserCurrencyStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CurrencyName string `protobuf:"bytes,2,opt,name=currency_name,json=currencyName,proto3" json:"currency_name,omitempty"`
}

func (x *GetUserCurrencyStatsRequest) Reset() {
	*x = GetUserCurrencyStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCurrencyStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCurrencyStatsRequest) ProtoMessage() {}

func (x *GetUserCurrencyStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCurrencyStatsRequest.ProtoReflect.Descriptor instead.
func (*GetUserCurrencyStatsRequest) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{30}
}

func (x *GetUserCurrencyStatsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserCurrencyStatsRequest) GetCurrencyName() string {
	if x != nil {
		return x.CurrencyName
	}
	return ""
}

type GetUserCurrencyStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalEarned int32 `protobuf:"varint,1,opt,name=total_earned,json=totalEarned,proto3" json:"total_earned,omitempty"`
	TotalSpent  int32 `protobuf:"varint,2,opt,name=total_spent,json=totalSpent,proto3" json:"total_spent,omitempty"`
}

func (x *GetUserCurrencyStatsResponse) Reset() {
	*x = GetUserCurrencyStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCurrencyStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCurrencyStatsResponse) ProtoMessage() {}

func (x *GetUserCurrencyStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCurrencyStatsResponse.ProtoReflect.Descriptor instead.
func (*GetUserCurrencyStatsResponse) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{31}
}

func (x *GetUserCurrencyStatsResponse) GetTotalEarned() int32 {
	if x != nil {
		return x.TotalEarned
	}
	return 0
}

func (x *GetUserCurrencyStatsResponse) GetTotalSpent() int32 {
	if x != nil {
		return x.TotalSpent
	}
	return 0
}

type GetDropTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetDropTableRequest) Reset() {
	*x = GetDropTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDropTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDropTableRequest) ProtoMessage() {}

func (x *GetDropTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDropTableRequest.ProtoReflect.Descriptor instead.
func (*GetDropTableRequest) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{32}
}

func (x *GetDropTableRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EvaluateDropTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DropTableName string `protobuf:"bytes,2,opt,name=drop_table_name,json=dropTableName,proto3" json:"drop_table_name,omitempty"`
}

func (x *EvaluateDropTableRequest) Reset() {
	*x = EvaluateDropTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluateDropTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateDropTableRequest) ProtoMessage() {}

func (x *EvaluateDropTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateDropTableRequest.ProtoReflect.Descriptor instead.
func (*EvaluateDropTableRequest) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{33}
}

func (x *EvaluateDropTableRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EvaluateDropTableRequest) GetDropTableName() string {
	if x != nil {
		return x.DropTableName
	}
	return ""
}

type EvaluateDropTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items            map[string]int32 `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Currencies       map[string]int32 `protobuf:"bytes,2,rep,name=currencies,proto3" json:"currencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TrackablesEnergy map[string]int32 `protobuf:"bytes,3,rep,name=trackables_energy,json=trackablesEnergy,proto3" json:"trackables_energy,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TrackablesXp     map[string]int32 `protobuf:"bytes,4,rep,name=trackables_xp,json=trackablesXp,proto3" json:"trackables_xp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	EscrowId         string           `protobuf:"bytes,5,opt,name=escrow_id,json=escrowId,proto3" json:"escrow_id,omitempty"`
	DropIndex        int32            `protobuf:"varint,6,opt,name=drop_index,json=dropIndex,proto3" json:"drop_index,omitempty"`
}

func (x *EvaluateDropTableResponse) Reset() {
	*x = EvaluateDropTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluateDropTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateDropTableResponse) ProtoMessage() {}

func (x *EvaluateDropTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateDropTableResponse.ProtoReflect.Descriptor instead.
func (*EvaluateDropTableResponse) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{34}
}

func (x *EvaluateDropTableResponse) GetItems() map[string]int32 {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *EvaluateDropTableResponse) GetCurrencies() map[string]int32 {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *EvaluateDropTableResponse) GetTrackablesEnergy() map[string]int32 {
	if x != nil {
		return x.TrackablesEnergy
	}
	return nil
}

func (x *EvaluateDropTableResponse) GetTrackablesXp() map[string]int32 {
	if x != nil {
		return x.TrackablesXp
	}
	return nil
}

func (x *EvaluateDropTableResponse) GetEscrowId() string {
	if x != nil {
		return x.EscrowId
	}
	return ""
}

func (x *EvaluateDropTableResponse) GetDropIndex() int32 {
	if x != nil {
		return x.DropIndex
	}
	return 0
}

type GrantDropTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DropTableName string `protobuf:"bytes,2,opt,name=drop_table_name,json=dropTableName,proto3" json:"drop_table_name,omitempty"`
	EscrowId      string `protobuf:"bytes,3,opt,name=escrow_id,json=escrowId,proto3" json:"escrow_id,omitempty"`
}

func (x *GrantDropTableRequest) Reset() {
	*x = GrantDropTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantDropTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantDropTableRequest) ProtoMessage() {}

func (x *GrantDropTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantDropTableRequest.ProtoReflect.Descriptor instead.
func (*GrantDropTableRequest) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{35}
}

func (x *GrantDropTableRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GrantDropTableRequest) GetDropTableName() string {
	if x != nil {
		return x.DropTableName
	}
	return ""
}

func (x *GrantDropTableRequest) GetEscrowId() string {
	if x != nil {
		return x.EscrowId
	}
	return ""
}

type GrantDropTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrantedItems            []*UserInventoryItem `protobuf:"bytes,1,rep,name=granted_items,json=grantedItems,proto3" json:"granted_items,omitempty"`
	GrantedVirtualCurrency  map[string]int32     `protobuf:"bytes,2,rep,name=granted_virtual_currency,json=grantedVirtualCurrency,proto3" json:"granted_virtual_currency,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	GrantedTrackablesEnergy map[string]int32     `protobuf:"bytes,4,rep,name=granted_trackables_energy,json=grantedTrackablesEnergy,proto3" json:"granted_trackables_energy,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	GrantedTrackablesXp     map[string]int32     `protobuf:"bytes,5,rep,name=granted_trackables_xp,json=grantedTrackablesXp,proto3" json:"granted_trackables_xp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	DropIndex               int32                `protobuf:"varint,6,opt,name=drop_index,json=dropIndex,proto3" json:"drop_index,omitempty"`
	GrantResults            *GrantResults        `protobuf:"bytes,7,opt,name=grant_results,json=grantResults,proto3" json:"grant_results,omitempty"`
}

func (x *GrantDropTableResponse) Reset() {
	*x = GrantDropTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantDropTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantDropTableResponse) ProtoMessage() {}

func (x *GrantDropTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantDropTableResponse.ProtoReflect.Descriptor instead.
func (*GrantDropTableResponse) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{36}
}

func (x *GrantDropTableResponse) GetGrantedItems() []*UserInventoryItem {
	if x != nil {
		return x.GrantedItems
	}
	return nil
}

func (x *GrantDropTableResponse) GetGrantedVirtualCurrency() map[string]int32 {
	if x != nil {
		return x.GrantedVirtualCurrency
	}
	return nil
}

func (x *GrantDropTableResponse) GetGrantedTrackablesEnergy() map[string]int32 {
	if x != nil {
		return x.GrantedTrackablesEnergy
	}
	return nil
}

func (x *GrantDropTableResponse) GetGrantedTrackablesXp() map[string]int32 {
	if x != nil {
		return x.GrantedTrackablesXp
	}
	return nil
}

func (x *GrantDropTableResponse) GetDropIndex() int32 {
	if x != nil {
		return x.DropIndex
	}
	return 0
}

func (x *GrantDropTableResponse) GetGrantResults() *GrantResults {
	if x != nil {
		return x.GrantResults
	}
	return nil
}

type GetUserCurrenciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currencies map[string]int32 `protobuf:"bytes,1,rep,name=currencies,proto3" json:"currencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GetUserCurrenciesResponse) Reset() {
	*x = GetUserCurrenciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCurrenciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCurrenciesResponse) ProtoMessage() {}

func (x *GetUserCurrenciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCurrenciesResponse.ProtoReflect.Descriptor instead.
func (*GetUserCurrenciesResponse) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{37}
}

func (x *GetUserCurrenciesResponse) GetCurrencies() map[string]int32 {
	if x != nil {
		return x.Currencies
	}
	return nil
}

// Message Types and Enums
type Consumable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsConsumable bool `protobuf:"varint,1,opt,name=is_consumable,json=isConsumable,proto3" json:"is_consumable,omitempty"`
}

func (x *Consumable) Reset() {
	*x = Consumable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Consumable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consumable) ProtoMessage() {}

func (x *Consumable) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consumable.ProtoReflect.Descriptor instead.
func (*Consumable) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{38}
}

func (x *Consumable) GetIsConsumable() bool {
	if x != nil {
		return x.IsConsumable
	}
	return false
}

type Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items             map[string]int32 `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	VirtualCurrencies map[string]int32 `protobuf:"bytes,2,rep,name=virtual_currencies,json=virtualCurrencies,proto3" json:"virtual_currencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	DropTables        map[string]int32 `protobuf:"bytes,3,rep,name=drop_tables,json=dropTables,proto3" json:"drop_tables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	UnlockCost        []*UnlockCost    `protobuf:"bytes,4,rep,name=unlock_cost,json=unlockCost,proto3" json:"unlock_cost,omitempty"`
}

func (x *Container) Reset() {
	*x = Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container) ProtoMessage() {}

func (x *Container) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container.ProtoReflect.Descriptor instead.
func (*Container) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{39}
}

func (x *Container) GetItems() map[string]int32 {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *Container) GetVirtualCurrencies() map[string]int32 {
	if x != nil {
		return x.VirtualCurrencies
	}
	return nil
}

func (x *Container) GetDropTables() map[string]int32 {
	if x != nil {
		return x.DropTables
	}
	return nil
}

func (x *Container) GetUnlockCost() []*UnlockCost {
	if x != nil {
		return x.UnlockCost
	}
	return nil
}

type UnlockCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  UnlockCost_Type `protobuf:"varint,1,opt,name=type,proto3,enum=inventory.UnlockCost_Type" json:"type,omitempty"`
	Name  string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Count int32           `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *UnlockCost) Reset() {
	*x = UnlockCost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockCost) ProtoMessage() {}

func (x *UnlockCost) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockCost.ProtoReflect.Descriptor instead.
func (*UnlockCost) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{40}
}

func (x *UnlockCost) GetType() UnlockCost_Type {
	if x != nil {
		return x.Type
	}
	return UnlockCost_UNSPECIFIED_TYPE
}

func (x *UnlockCost) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UnlockCost) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type PurchasableSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency     string `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	Price        int32  `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	DisplayPrice int32  `protobuf:"varint,3,opt,name=display_price,json=displayPrice,proto3" json:"display_price,omitempty"`
}

func (x *PurchasableSetting) Reset() {
	*x = PurchasableSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchasableSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchasableSetting) ProtoMessage() {}

func (x *PurchasableSetting) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchasableSetting.ProtoReflect.Descriptor instead.
func (*PurchasableSetting) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{41}
}

func (x *PurchasableSetting) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PurchasableSetting) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PurchasableSetting) GetDisplayPrice() int32 {
	if x != nil {
		return x.DisplayPrice
	}
	return 0
}

type Purchasable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings []*PurchasableSetting `protobuf:"bytes,1,rep,name=settings,proto3" json:"settings,omitempty"`
}

func (x *Purchasable) Reset() {
	*x = Purchasable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Purchasable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Purchasable) ProtoMessage() {}

func (x *Purchasable) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Purchasable.ProtoReflect.Descriptor instead.
func (*Purchasable) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{42}
}

func (x *Purchasable) GetSettings() []*PurchasableSetting {
	if x != nil {
		return x.Settings
	}
	return nil
}

type UserInventoryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatalogItemName  string           `protobuf:"bytes,1,opt,name=catalog_item_name,json=catalogItemName,proto3" json:"catalog_item_name,omitempty"`
	InstanceId       string           `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	AcquiredAt       int64            `protobuf:"varint,3,opt,name=acquired_at,json=acquiredAt,proto3" json:"acquired_at,omitempty"`
	ExpiresAt        int64            `protobuf:"varint,4,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	RemainingUses    int32            `protobuf:"varint,5,opt,name=remaining_uses,json=remainingUses,proto3" json:"remaining_uses,omitempty"`
	LastConsumedAt   int64            `protobuf:"varint,6,opt,name=last_consumed_at,json=lastConsumedAt,proto3" json:"last_consumed_at,omitempty"`
	InstanceMetadata *structpb.Struct `protobuf:"bytes,7,opt,name=instance_metadata,json=instanceMetadata,proto3" json:"instance_metadata,omitempty"`
}

func (x *UserInventoryItem) Reset() {
	*x = UserInventoryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInventoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInventoryItem) ProtoMessage() {}

func (x *UserInventoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInventoryItem.ProtoReflect.Descriptor instead.
func (*UserInventoryItem) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{43}
}

func (x *UserInventoryItem) GetCatalogItemName() string {
	if x != nil {
		return x.CatalogItemName
	}
	return ""
}

func (x *UserInventoryItem) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *UserInventoryItem) GetAcquiredAt() int64 {
	if x != nil {
		return x.AcquiredAt
	}
	return 0
}

func (x *UserInventoryItem) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *UserInventoryItem) GetRemainingUses() int32 {
	if x != nil {
		return x.RemainingUses
	}
	return 0
}

func (x *UserInventoryItem) GetLastConsumedAt() int64 {
	if x != nil {
		return x.LastConsumedAt
	}
	return 0
}

func (x *UserInventoryItem) GetInstanceMetadata() *structpb.Struct {
	if x != nil {
		return x.InstanceMetadata
	}
	return nil
}

type UserInventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*UserInventoryItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *UserInventory) Reset() {
	*x = UserInventory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInventory) ProtoMessage() {}

func (x *UserInventory) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInventory.ProtoReflect.Descriptor instead.
func (*UserInventory) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{44}
}

func (x *UserInventory) GetItems() []*UserInventoryItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type CatalogItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName string           `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description string           `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ClassName   string           `protobuf:"bytes,4,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	Tags        []string         `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	Stackable   bool             `protobuf:"varint,6,opt,name=stackable,proto3" json:"stackable,omitempty"`
	Tradable    bool             `protobuf:"varint,7,opt,name=tradable,proto3" json:"tradable,omitempty"`
	Consumable  *Consumable      `protobuf:"bytes,8,opt,name=consumable,proto3" json:"consumable,omitempty"`
	Container   *Container       `protobuf:"bytes,9,opt,name=container,proto3" json:"container,omitempty"`
	Purchasable *Purchasable     `protobuf:"bytes,10,opt,name=purchasable,proto3" json:"purchasable,omitempty"`
	Ttl         uint32           `protobuf:"varint,11,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Metadata    *structpb.Struct `protobuf:"bytes,12,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *CatalogItem) Reset() {
	*x = CatalogItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CatalogItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CatalogItem) ProtoMessage() {}

func (x *CatalogItem) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CatalogItem.ProtoReflect.Descriptor instead.
func (*CatalogItem) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{45}
}

func (x *CatalogItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CatalogItem) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *CatalogItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CatalogItem) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *CatalogItem) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CatalogItem) GetStackable() bool {
	if x != nil {
		return x.Stackable
	}
	return false
}

func (x *CatalogItem) GetTradable() bool {
	if x != nil {
		return x.Tradable
	}
	return false
}

func (x *CatalogItem) GetConsumable() *Consumable {
	if x != nil {
		return x.Consumable
	}
	return nil
}

func (x *CatalogItem) GetContainer() *Container {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *CatalogItem) GetPurchasable() *Purchasable {
	if x != nil {
		return x.Purchasable
	}
	return nil
}

func (x *CatalogItem) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *CatalogItem) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GrantResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrantedItems            []*GrantedItem             `protobuf:"bytes,1,rep,name=granted_items,json=grantedItems,proto3" json:"granted_items,omitempty"`
	GrantedCurrencies       []*GrantedCurrency         `protobuf:"bytes,2,rep,name=granted_currencies,json=grantedCurrencies,proto3" json:"granted_currencies,omitempty"`
	GrantedTrackablesXp     []*GrantedTrackablesXp     `protobuf:"bytes,3,rep,name=granted_trackables_xp,json=grantedTrackablesXp,proto3" json:"granted_trackables_xp,omitempty"`
	GrantedTrackablesEnergy []*GrantedTrackablesEnergy `protobuf:"bytes,4,rep,name=granted_trackables_energy,json=grantedTrackablesEnergy,proto3" json:"granted_trackables_energy,omitempty"`
}

func (x *GrantResults) Reset() {
	*x = GrantResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantResults) ProtoMessage() {}

func (x *GrantResults) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantResults.ProtoReflect.Descriptor instead.
func (*GrantResults) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{46}
}

func (x *GrantResults) GetGrantedItems() []*GrantedItem {
	if x != nil {
		return x.GrantedItems
	}
	return nil
}

func (x *GrantResults) GetGrantedCurrencies() []*GrantedCurrency {
	if x != nil {
		return x.GrantedCurrencies
	}
	return nil
}

func (x *GrantResults) GetGrantedTrackablesXp() []*GrantedTrackablesXp {
	if x != nil {
		return x.GrantedTrackablesXp
	}
	return nil
}

func (x *GrantResults) GetGrantedTrackablesEnergy() []*GrantedTrackablesEnergy {
	if x != nil {
		return x.GrantedTrackablesEnergy
	}
	return nil
}

type GrantedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatalogItemName string   `protobuf:"bytes,1,opt,name=catalog_item_name,json=catalogItemName,proto3" json:"catalog_item_name,omitempty"`
	InstanceIds     []string `protobuf:"bytes,2,rep,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"`
	BeforeCount     int32    `protobuf:"varint,3,opt,name=before_count,json=beforeCount,proto3" json:"before_count,omitempty"`
	AfterCount      int32    `protobuf:"varint,4,opt,name=after_count,json=afterCount,proto3" json:"after_count,omitempty"`
}

func (x *GrantedItem) Reset() {
	*x = GrantedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantedItem) ProtoMessage() {}

func (x *GrantedItem) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantedItem.ProtoReflect.Descriptor instead.
func (*GrantedItem) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{47}
}

func (x *GrantedItem) GetCatalogItemName() string {
	if x != nil {
		return x.CatalogItemName
	}
	return ""
}

func (x *GrantedItem) GetInstanceIds() []string {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

func (x *GrantedItem) GetBeforeCount() int32 {
	if x != nil {
		return x.BeforeCount
	}
	return 0
}

func (x *GrantedItem) GetAfterCount() int32 {
	if x != nil {
		return x.AfterCount
	}
	return 0
}

type GrantedCurrency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyName  string `protobuf:"bytes,1,opt,name=currency_name,json=currencyName,proto3" json:"currency_name,omitempty"`
	BeforeBalance int32  `protobuf:"varint,2,opt,name=before_balance,json=beforeBalance,proto3" json:"before_balance,omitempty"`
	AfterBalance  int32  `protobuf:"varint,3,opt,name=after_balance,json=afterBalance,proto3" json:"after_balance,omitempty"`
}

func (x *GrantedCurrency) Reset() {
	*x = GrantedCurrency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantedCurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantedCurrency) ProtoMessage() {}

func (x *GrantedCurrency) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantedCurrency.ProtoReflect.Descriptor instead.
func (*GrantedCurrency) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{48}
}

func (x *GrantedCurrency) GetCurrencyName() string {
	if x != nil {
		return x.CurrencyName
	}
	return ""
}

func (x *GrantedCurrency) GetBeforeBalance() int32 {
	if x != nil {
		return x.BeforeBalance
	}
	return 0
}

func (x *GrantedCurrency) GetAfterBalance() int32 {
	if x != nil {
		return x.AfterBalance
	}
	return 0
}

type GrantedTrackablesXp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackableXpName     string `protobuf:"bytes,1,opt,name=trackable_xp_name,json=trackableXpName,proto3" json:"trackable_xp_name,omitempty"`
	BeforeXp            int32  `protobuf:"varint,2,opt,name=before_xp,json=beforeXp,proto3" json:"before_xp,omitempty"`
	AfterXp             int32  `protobuf:"varint,3,opt,name=after_xp,json=afterXp,proto3" json:"after_xp,omitempty"`
	NumLevelsProgressed int32  `protobuf:"varint,4,opt,name=num_levels_progressed,json=numLevelsProgressed,proto3" json:"num_levels_progressed,omitempty"`
}

func (x *GrantedTrackablesXp) Reset() {
	*x = GrantedTrackablesXp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantedTrackablesXp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantedTrackablesXp) ProtoMessage() {}

func (x *GrantedTrackablesXp) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantedTrackablesXp.ProtoReflect.Descriptor instead.
func (*GrantedTrackablesXp) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{49}
}

func (x *GrantedTrackablesXp) GetTrackableXpName() string {
	if x != nil {
		return x.TrackableXpName
	}
	return ""
}

func (x *GrantedTrackablesXp) GetBeforeXp() int32 {
	if x != nil {
		return x.BeforeXp
	}
	return 0
}

func (x *GrantedTrackablesXp) GetAfterXp() int32 {
	if x != nil {
		return x.AfterXp
	}
	return 0
}

func (x *GrantedTrackablesXp) GetNumLevelsProgressed() int32 {
	if x != nil {
		return x.NumLevelsProgressed
	}
	return 0
}

type GrantedTrackablesEnergy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackableEnergyName string `protobuf:"bytes,1,opt,name=trackable_energy_name,json=trackableEnergyName,proto3" json:"trackable_energy_name,omitempty"`
	BeforeEnergy        int32  `protobuf:"varint,2,opt,name=before_energy,json=beforeEnergy,proto3" json:"before_energy,omitempty"`
	AfterEnergy         int32  `protobuf:"varint,3,opt,name=after_energy,json=afterEnergy,proto3" json:"after_energy,omitempty"`
}

func (x *GrantedTrackablesEnergy) Reset() {
	*x = GrantedTrackablesEnergy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantedTrackablesEnergy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantedTrackablesEnergy) ProtoMessage() {}

func (x *GrantedTrackablesEnergy) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantedTrackablesEnergy.ProtoReflect.Descriptor instead.
func (*GrantedTrackablesEnergy) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{50}
}

func (x *GrantedTrackablesEnergy) GetTrackableEnergyName() string {
	if x != nil {
		return x.TrackableEnergyName
	}
	return ""
}

func (x *GrantedTrackablesEnergy) GetBeforeEnergy() int32 {
	if x != nil {
		return x.BeforeEnergy
	}
	return 0
}

func (x *GrantedTrackablesEnergy) GetAfterEnergy() int32 {
	if x != nil {
		return x.AfterEnergy
	}
	return 0
}

type DropTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Drops []*DropTableDrops `protobuf:"bytes,2,rep,name=drops,proto3" json:"drops,omitempty"`
}

func (x *DropTable) Reset() {
	*x = DropTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropTable) ProtoMessage() {}

func (x *DropTable) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropTable.ProtoReflect.Descriptor instead.
func (*DropTable) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{51}
}

func (x *DropTable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DropTable) GetDrops() []*DropTableDrops {
	if x != nil {
		return x.Drops
	}
	return nil
}

type DropTableDrops struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items            map[string]*DropValues `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Currencies       map[string]*DropValues `protobuf:"bytes,2,rep,name=currencies,proto3" json:"currencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TrackablesEnergy map[string]*DropValues `protobuf:"bytes,3,rep,name=trackables_energy,json=trackablesEnergy,proto3" json:"trackables_energy,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TrackablesXp     map[string]*DropValues `protobuf:"bytes,4,rep,name=trackables_xp,json=trackablesXp,proto3" json:"trackables_xp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Weight           int32                  `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *DropTableDrops) Reset() {
	*x = DropTableDrops{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropTableDrops) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropTableDrops) ProtoMessage() {}

func (x *DropTableDrops) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropTableDrops.ProtoReflect.Descriptor instead.
func (*DropTableDrops) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{52}
}

func (x *DropTableDrops) GetItems() map[string]*DropValues {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *DropTableDrops) GetCurrencies() map[string]*DropValues {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *DropTableDrops) GetTrackablesEnergy() map[string]*DropValues {
	if x != nil {
		return x.TrackablesEnergy
	}
	return nil
}

func (x *DropTableDrops) GetTrackablesXp() map[string]*DropValues {
	if x != nil {
		return x.TrackablesXp
	}
	return nil
}

func (x *DropTableDrops) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type DropValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min      int32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max      int32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	Multiple int32 `protobuf:"varint,3,opt,name=multiple,proto3" json:"multiple,omitempty"`
}

func (x *DropValues) Reset() {
	*x = DropValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropValues) ProtoMessage() {}

func (x *DropValues) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropValues.ProtoReflect.Descriptor instead.
func (*DropValues) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{53}
}

func (x *DropValues) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *DropValues) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *DropValues) GetMultiple() int32 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

type EventInventoryItemAdded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType           InventoryEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=inventory.InventoryEventType" json:"event_type,omitempty"`
	PublishedAt         int64              `protobuf:"varint,2,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	UserId              string             `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GrantCountPerItem   map[string]int32   `protobuf:"bytes,4,rep,name=grant_count_per_item,json=grantCountPerItem,proto3" json:"grant_count_per_item,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CurrentCountPerItem map[string]int32   `protobuf:"bytes,5,rep,name=current_count_per_item,json=currentCountPerItem,proto3" json:"current_count_per_item,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *EventInventoryItemAdded) Reset() {
	*x = EventInventoryItemAdded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventInventoryItemAdded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventInventoryItemAdded) ProtoMessage() {}

func (x *EventInventoryItemAdded) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventInventoryItemAdded.ProtoReflect.Descriptor instead.
func (*EventInventoryItemAdded) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{54}
}

func (x *EventInventoryItemAdded) GetEventType() InventoryEventType {
	if x != nil {
		return x.EventType
	}
	return InventoryEventType_UNKNOWN_EVENT_TYPE
}

func (x *EventInventoryItemAdded) GetPublishedAt() int64 {
	if x != nil {
		return x.PublishedAt
	}
	return 0
}

func (x *EventInventoryItemAdded) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EventInventoryItemAdded) GetGrantCountPerItem() map[string]int32 {
	if x != nil {
		return x.GrantCountPerItem
	}
	return nil
}

func (x *EventInventoryItemAdded) GetCurrentCountPerItem() map[string]int32 {
	if x != nil {
		return x.CurrentCountPerItem
	}
	return nil
}

type EventInventoryItemConsumed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType       InventoryEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=inventory.InventoryEventType" json:"event_type,omitempty"`
	PublishedAt     int64              `protobuf:"varint,2,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	UserId          string             `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CatalogItemName string             `protobuf:"bytes,4,opt,name=catalog_item_name,json=catalogItemName,proto3" json:"catalog_item_name,omitempty"`
	ConsumeCount    int32              `protobuf:"varint,5,opt,name=consume_count,json=consumeCount,proto3" json:"consume_count,omitempty"`
	CurrentCount    int32              `protobuf:"varint,6,opt,name=current_count,json=currentCount,proto3" json:"current_count,omitempty"`
}

func (x *EventInventoryItemConsumed) Reset() {
	*x = EventInventoryItemConsumed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventInventoryItemConsumed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventInventoryItemConsumed) ProtoMessage() {}

func (x *EventInventoryItemConsumed) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventInventoryItemConsumed.ProtoReflect.Descriptor instead.
func (*EventInventoryItemConsumed) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{55}
}

func (x *EventInventoryItemConsumed) GetEventType() InventoryEventType {
	if x != nil {
		return x.EventType
	}
	return InventoryEventType_UNKNOWN_EVENT_TYPE
}

func (x *EventInventoryItemConsumed) GetPublishedAt() int64 {
	if x != nil {
		return x.PublishedAt
	}
	return 0
}

func (x *EventInventoryItemConsumed) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EventInventoryItemConsumed) GetCatalogItemName() string {
	if x != nil {
		return x.CatalogItemName
	}
	return ""
}

func (x *EventInventoryItemConsumed) GetConsumeCount() int32 {
	if x != nil {
		return x.ConsumeCount
	}
	return 0
}

func (x *EventInventoryItemConsumed) GetCurrentCount() int32 {
	if x != nil {
		return x.CurrentCount
	}
	return 0
}

type EventInventoryCurrencyBalanceUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType           InventoryEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=inventory.InventoryEventType" json:"event_type,omitempty"`
	PublishedAt         int64              `protobuf:"varint,2,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	UserId              string             `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	VirtualCurrencyName string             `protobuf:"bytes,4,opt,name=virtual_currency_name,json=virtualCurrencyName,proto3" json:"virtual_currency_name,omitempty"`
	PreviousBalance     int32              `protobuf:"varint,5,opt,name=previous_balance,json=previousBalance,proto3" json:"previous_balance,omitempty"`
	CurrentBalance      int32              `protobuf:"varint,6,opt,name=current_balance,json=currentBalance,proto3" json:"current_balance,omitempty"`
}

func (x *EventInventoryCurrencyBalanceUpdated) Reset() {
	*x = EventInventoryCurrencyBalanceUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventInventoryCurrencyBalanceUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventInventoryCurrencyBalanceUpdated) ProtoMessage() {}

func (x *EventInventoryCurrencyBalanceUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventInventoryCurrencyBalanceUpdated.ProtoReflect.Descriptor instead.
func (*EventInventoryCurrencyBalanceUpdated) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{56}
}

func (x *EventInventoryCurrencyBalanceUpdated) GetEventType() InventoryEventType {
	if x != nil {
		return x.EventType
	}
	return InventoryEventType_UNKNOWN_EVENT_TYPE
}

func (x *EventInventoryCurrencyBalanceUpdated) GetPublishedAt() int64 {
	if x != nil {
		return x.PublishedAt
	}
	return 0
}

func (x *EventInventoryCurrencyBalanceUpdated) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EventInventoryCurrencyBalanceUpdated) GetVirtualCurrencyName() string {
	if x != nil {
		return x.VirtualCurrencyName
	}
	return ""
}

func (x *EventInventoryCurrencyBalanceUpdated) GetPreviousBalance() int32 {
	if x != nil {
		return x.PreviousBalance
	}
	return 0
}

func (x *EventInventoryCurrencyBalanceUpdated) GetCurrentBalance() int32 {
	if x != nil {
		return x.CurrentBalance
	}
	return 0
}

type EventInventoryItemPurchased struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType                      InventoryEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=inventory.InventoryEventType" json:"event_type,omitempty"`
	PublishedAt                    int64              `protobuf:"varint,2,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	UserId                         string             `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CatalogItemName                string             `protobuf:"bytes,4,opt,name=catalog_item_name,json=catalogItemName,proto3" json:"catalog_item_name,omitempty"`
	PurchaseCount                  int32              `protobuf:"varint,5,opt,name=purchase_count,json=purchaseCount,proto3" json:"purchase_count,omitempty"`
	PurchaseCurrencyName           string             `protobuf:"bytes,6,opt,name=purchase_currency_name,json=purchaseCurrencyName,proto3" json:"purchase_currency_name,omitempty"`
	PurchasePrice                  int32              `protobuf:"varint,7,opt,name=purchase_price,json=purchasePrice,proto3" json:"purchase_price,omitempty"`
	PurchaseCurrencyCurrentBalance int32              `protobuf:"varint,8,opt,name=purchase_currency_current_balance,json=purchaseCurrencyCurrentBalance,proto3" json:"purchase_currency_current_balance,omitempty"`
}

func (x *EventInventoryItemPurchased) Reset() {
	*x = EventInventoryItemPurchased{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_types_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventInventoryItemPurchased) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventInventoryItemPurchased) ProtoMessage() {}

func (x *EventInventoryItemPurchased) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_types_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventInventoryItemPurchased.ProtoReflect.Descriptor instead.
func (*EventInventoryItemPurchased) Descriptor() ([]byte, []int) {
	return file_inventory_types_proto_rawDescGZIP(), []int{57}
}

func (x *EventInventoryItemPurchased) GetEventType() InventoryEventType {
	if x != nil {
		return x.EventType
	}
	return InventoryEventType_UNKNOWN_EVENT_TYPE
}

func (x *EventInventoryItemPurchased) GetPublishedAt() int64 {
	if x != nil {
		return x.PublishedAt
	}
	return 0
}

func (x *EventInventoryItemPurchased) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EventInventoryItemPurchased) GetCatalogItemName() string {
	if x != nil {
		return x.CatalogItemName
	}
	return ""
}

func (x *EventInventoryItemPurchased) GetPurchaseCount() int32 {
	if x != nil {
		return x.PurchaseCount
	}
	return 0
}

func (x *EventInventoryItemPurchased) GetPurchaseCurrencyName() string {
	if x != nil {
		return x.PurchaseCurrencyName
	}
	return ""
}

func (x *EventInventoryItemPurchased) GetPurchasePrice() int32 {
	if x != nil {
		return x.PurchasePrice
	}
	return 0
}

func (x *EventInventoryItemPurchased) GetPurchaseCurrencyCurrentBalance() int32 {
	if x != nil {
		return x.PurchaseCurrencyCurrentBalance
	}
	return 0
}

var File_inventory_types_proto protoreflect.FileDescriptor

var file_inventory_types_proto_rawDesc = []byte{
	0x0a, 0x15, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb5, 0x05, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5c,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x46, 0x92,
	0x41, 0x40, 0x32, 0x3a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2c, 0x20, 0x6d, 0x61, 0x78, 0x20, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x69,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2c, 0x20,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x31, 0x30, 0x9a, 0x02,
	0x01, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x21, 0x92, 0x41,
	0x1b, 0x32, 0x15, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x30, 0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x83, 0x01, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6f, 0x92, 0x41, 0x69, 0x32, 0x63, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x62, 0x79, 0x20, 0x74, 0x61, 0x67,
	0x73, 0x2c, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x20, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x61,
	0x67, 0x73, 0x2e, 0x20, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x67, 0x73, 0x20,
	0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x45, 0x0a,
	0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x26, 0x92, 0x41, 0x20, 0x32, 0x1a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x20, 0x62, 0x79, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1a, 0x32, 0x14, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x62, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x9a, 0x02, 0x01,
	0x07, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x75, 0x92, 0x41, 0x6f, 0x32,
	0x69, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x62, 0x79,
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x2c, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x20, 0x73, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x20,
	0x6f, 0x66, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x20, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x20,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62,
	0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41,
	0x01, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x78, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x64, 0x92, 0x41, 0x3c, 0x32, 0x36, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x62, 0x79, 0x20, 0x74, 0x79, 0x70,
	0x65, 0x20, 0x28, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x2c, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x29, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x01, 0xfa, 0x42, 0x1f, 0x72, 0x1d, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x0d, 0x6e, 0x6f, 0x6e, 0x2d,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x9c, 0x02, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x16,
	0x92, 0x41, 0x13, 0x32, 0x0d, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x20, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x9a, 0x02, 0x01, 0x01, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x63, 0x0a,
	0x16, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2d, 0x92,
	0x41, 0x2a, 0x32, 0x24, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x14, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x5d, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x2d, 0x92, 0x41, 0x2a, 0x32, 0x24, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x11,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x49, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x15, 0x4e, 0x61, 0x6d,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8a, 0x06, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x15, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x9a,
	0x02, 0x01, 0x07, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x73, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x28, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x8f,
	0x01, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x35, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x20, 0x69, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x9a, 0x02, 0x01, 0x06, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x84, 0x01, 0x0a, 0x0b, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x32, 0x29, 0x44, 0x72,
	0x6f, 0x70, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x0a, 0x64, 0x72, 0x6f,
	0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x78, 0x0a, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x32,
	0x29, 0x44, 0x72, 0x6f, 0x70, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x61, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x11,
	0x64, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x44, 0x72,
	0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xec, 0x03, 0x0a, 0x1a, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x47, 0x92, 0x41, 0x25, 0x32, 0x1f,
	0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x9a,
	0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32,
	0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d,
	0x2a, 0x24, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x8b, 0x01, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x43, 0x92, 0x41,
	0x35, 0x32, 0x2f, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x9a, 0x02, 0x01, 0x06, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x9a, 0x01, 0x02, 0x08,
	0x01, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x42, 0x6e, 0x92, 0x41, 0x6b, 0x32, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65,
	0x20, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x63, 0x6f, 0x6e,
	0x66, 0x75, 0x73, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x9a, 0x02, 0x01, 0x06, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x38,
	0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf4, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x09,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x31, 0x92, 0x41, 0x24, 0x32, 0x1e, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x20, 0x66, 0x6f, 0x72, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x43, 0x92, 0x41, 0x40,
	0x32, 0x3a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2c, 0x20, 0x6d, 0x61, 0x78, 0x20, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x69, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2c, 0x20, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x31, 0x30, 0x9a, 0x02, 0x01, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x15, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74,
	0x6f, 0x20, 0x30, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22,
	0xa7, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x32, 0x1b, 0x55, 0x73, 0x65,
	0x72, 0x20, 0x69, 0x64, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x9a, 0x02, 0x01, 0x01, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x52, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32,
	0x28, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdf, 0x02, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x42, 0x92, 0x41, 0x20, 0x32, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10,
	0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x58,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x42, 0x92,
	0x41, 0x3f, 0x32, 0x39, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2c, 0x20, 0x6d, 0x61, 0x78, 0x20, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x69,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2c, 0x20,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x78, 0x9a, 0x02, 0x01,
	0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x18, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20,
	0x74, 0x6f, 0x20, 0x7a, 0x65, 0x72, 0x6f, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a,
	0x92, 0x41, 0x27, 0x32, 0x21, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x20, 0x62, 0x79, 0x20, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x0f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6c, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x17, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x69, 0x6e, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x9a, 0x02,
	0x01, 0x01, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x54, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x3b, 0x92, 0x41, 0x19, 0x32, 0x13, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x07, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69,
	0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2e,
	0x32, 0x28, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d,
	0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0xd9, 0x01, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x19, 0x32, 0x13, 0x49, 0x64,
	0x20, 0x6f, 0x66, 0x20, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18,
	0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d,
	0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x68, 0x0a, 0x11,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x92, 0x41, 0x2f, 0x32, 0x29, 0x4e, 0x61,
	0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x74,
	0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x21, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f,
	0x66, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf8, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6c,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x53, 0x92, 0x41, 0x31, 0x32, 0x2b, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69, 0x74, 0x65, 0x6d,
	0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18,
	0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d,
	0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x71, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x50, 0x92, 0x41, 0x2e, 0x32, 0x28, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x69,
	0x6e, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32,
	0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f,
	0x5d, 0x2a, 0x24, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22,
	0xb1, 0x02, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x19, 0x32, 0x13, 0x49, 0x64,
	0x20, 0x6f, 0x66, 0x20, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18,
	0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d,
	0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x71, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x50, 0x92, 0x41, 0x2e, 0x32, 0x28, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x69,
	0x6e, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32,
	0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f,
	0x5d, 0x2a, 0x24, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2d, 0x92, 0x41, 0x20, 0x32, 0x1a, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x04, 0x1a, 0x02, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xb7, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x28, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x9a,
	0x02, 0x01, 0x07, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x6b, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x44, 0x92, 0x41, 0x3a, 0x32, 0x34, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x20, 0x75, 0x73, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x69, 0x74,
	0x65, 0x6d, 0x9a, 0x02, 0x01, 0x03, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x40, 0x00, 0x52, 0x0d, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x35, 0x92, 0x41, 0x32, 0x32, 0x30, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61,
	0x73, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d,
	0x20, 0x77, 0x61, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x52, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x41, 0x74, 0x22, 0xc4, 0x03,
	0x0a, 0x1c, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x47, 0x92, 0x41, 0x25, 0x32, 0x1f, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x19, 0x72,
	0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x57, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41, 0x2d, 0x32, 0x27, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x20,
	0x74, 0x6f, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x70, 0x65,
	0x6e, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x69, 0x0a, 0x0b, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x2c, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x61, 0x79, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x55, 0x92,
	0x41, 0x52, 0x32, 0x4c, 0x49, 0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x9a, 0x02, 0x01, 0x02, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x22, 0xa2, 0x09, 0x0a, 0x1d, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x41, 0x6e,
	0x64, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x50, 0x92, 0x41,
	0x4d, 0x32, 0x47, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64,
	0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x28, 0x44, 0x45,
	0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x3a, 0x20, 0x75, 0x73, 0x65, 0x20, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x29, 0x9a, 0x02, 0x01, 0x01, 0x52, 0x0c,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0xe0, 0x01, 0x0a,
	0x18, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x44, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x41, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x60, 0x92, 0x41, 0x5d, 0x32, 0x57, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x28, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x3a, 0x20, 0x75, 0x73,
	0x65, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x29, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x16, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0xeb, 0x01, 0x0a, 0x19, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x68, 0x92, 0x41, 0x65, 0x32,
	0x5f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x65, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x28, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54,
	0x45, 0x44, 0x3a, 0x20, 0x75, 0x73, 0x65, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x29,
	0x9a, 0x02, 0x01, 0x06, 0x52, 0x17, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0xd7, 0x01,
	0x0a, 0x15, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x5f, 0x78, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x41,
	0x6e, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x58, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x60, 0x92, 0x41, 0x5d, 0x32, 0x57, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x20, 0x78, 0x70, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x28, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43,
	0x41, 0x54, 0x45, 0x44, 0x3a, 0x20, 0x75, 0x73, 0x65, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x78, 0x70, 0x29, 0x9a, 0x02,
	0x01, 0x06, 0x52, 0x13, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x58, 0x70, 0x12, 0x5b, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x14, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x1a, 0x49, 0x0a, 0x1b, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x4a, 0x0a, 0x1c, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x18, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x58, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xb0, 0x03, 0x0a, 0x14, 0x4f, 0x70,
	0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x54, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x19, 0x32, 0x13, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20,
	0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01,
	0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28,
	0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x76, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x55, 0x92,
	0x41, 0x33, 0x32, 0x2d, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20,
	0x69, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18,
	0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d,
	0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x5b, 0x0a, 0x09, 0x65, 0x73, 0x63, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x35, 0x45, 0x73, 0x63, 0x72, 0x6f, 0x77,
	0x20, 0x69, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2c, 0x20, 0x69, 0x66, 0x20, 0x69, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x65, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x9a,
	0x02, 0x01, 0x07, 0x52, 0x08, 0x65, 0x73, 0x63, 0x72, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x6d, 0x0a,
	0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x35, 0x92, 0x41, 0x32, 0x32, 0x2c,
	0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x70,
	0x61, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x06,
	0x52, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x22, 0x91, 0x0a, 0x0a,
	0x15, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x50, 0x92, 0x41,
	0x4d, 0x32, 0x47, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64,
	0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x28, 0x44, 0x45,
	0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x3a, 0x20, 0x75, 0x73, 0x65, 0x20, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x29, 0x9a, 0x02, 0x01, 0x01, 0x52, 0x0c,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0xd8, 0x01, 0x0a,
	0x18, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x60, 0x92,
	0x41, 0x5d, 0x32, 0x57, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x28, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43,
	0x41, 0x54, 0x45, 0x44, 0x3a, 0x20, 0x75, 0x73, 0x65, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x29, 0x9a, 0x02, 0x01, 0x06, 0x52,
	0x16, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x92, 0x01, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x6b, 0x92, 0x41, 0x68, 0x32, 0x62, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66,
	0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x65, 0x73, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x28, 0x44, 0x45, 0x50,
	0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x3a, 0x20, 0x75, 0x73, 0x65, 0x20, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x29, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x0d, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x73, 0x12, 0xe3, 0x01, 0x0a,
	0x19, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x68, 0x92, 0x41, 0x65, 0x32, 0x5f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x20, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x28, 0x44, 0x45, 0x50,
	0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x3a, 0x20, 0x75, 0x73, 0x65, 0x20, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x29, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x17, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x12, 0xcf, 0x01, 0x0a, 0x15, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x78, 0x70, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x58, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x60, 0x92,
	0x41, 0x5d, 0x32, 0x57, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x78,
	0x70, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x28, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45,
	0x44, 0x3a, 0x20, 0x75, 0x73, 0x65, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x2e, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x78, 0x70, 0x29, 0x9a, 0x02, 0x01, 0x06, 0x52,
	0x13, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x58, 0x70, 0x12, 0x5b, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x14, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x9a,
	0x02, 0x01, 0x06, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x1a, 0x49, 0x0a, 0x1b, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a, 0x1c,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x18, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x58, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xe8, 0x01, 0x0a, 0x18, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b,
	0x92, 0x41, 0x19, 0x32, 0x13, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x76, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x55, 0x92, 0x41, 0x33, 0x32, 0x2d, 0x49,
	0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x9a, 0x02, 0x01, 0x07,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f,
	0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x9a, 0x07, 0x0a, 0x19,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x32, 0x26,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20,
	0x62, 0x65, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x92, 0x01, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x3c, 0x92, 0x41,
	0x39, 0x32, 0x33, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20,
	0x62, 0x65, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x36,
	0x92, 0x41, 0x33, 0x32, 0x2d, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x78, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x58, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x28, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x78, 0x70, 0x73, 0x20, 0x74, 0x6f,
	0x20, 0x62, 0x65, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x58, 0x70, 0x12, 0x3e, 0x0a, 0x09, 0x65, 0x73, 0x63,
	0x72, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41,
	0x1e, 0x32, 0x18, 0x45, 0x73, 0x63, 0x72, 0x6f, 0x77, 0x20, 0x69, 0x64, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x9a, 0x02, 0x01, 0x07, 0x52,
	0x08, 0x65, 0x73, 0x63, 0x72, 0x6f, 0x77, 0x49, 0x64, 0x1a, 0x38, 0x0a, 0x0a, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x58, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd7, 0x02, 0x0a, 0x16, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x19, 0x32, 0x13, 0x49, 0x64, 0x20, 0x6f, 0x66,
	0x20, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02,
	0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11,
	0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a,
	0x24, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x76, 0x0a, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x55,
	0x92, 0x41, 0x33, 0x32, 0x2d, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x20, 0x69, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10, 0x01,
	0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x6f, 0x0a, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x37, 0x92,
	0x41, 0x34, 0x32, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20,
	0x74, 0x6f, 0x20, 0x70, 0x61, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f,
	0x73, 0x74, 0x22, 0x90, 0x07, 0x0a, 0x17, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2f, 0x92, 0x41,
	0x2c, 0x32, 0x26, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x69,
	0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x3c, 0x92,
	0x41, 0x39, 0x32, 0x33, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c,
	0x20, 0x62, 0x65, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x0a, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x36, 0x92,
	0x41, 0x33, 0x32, 0x2d, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x8c, 0x01, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x78, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x58, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x28, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x78, 0x70, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65,
	0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x58, 0x70, 0x12, 0x3e, 0x0a, 0x09, 0x65, 0x73, 0x63, 0x72, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x18,
	0x45, 0x73, 0x63, 0x72, 0x6f, 0x77, 0x20, 0x69, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x08, 0x65, 0x73,
	0x63, 0x72, 0x6f, 0x77, 0x49, 0x64, 0x1a, 0x38, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x43, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x58, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x03, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x54, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x3b, 0x92, 0x41, 0x19, 0x32, 0x13, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x71, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x50, 0x92, 0x41, 0x2e, 0x32,
	0x28, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e,
	0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x9d, 0x01, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x42, 0x68, 0x92, 0x41, 0x65, 0x32, 0x5f, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x20, 0x4e, 0x6f, 0x74, 0x20, 0x62,
	0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfd, 0x02, 0x0a, 0x13, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x60, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x47, 0x92, 0x41, 0x25, 0x32, 0x1f, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x84, 0x01, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5f, 0x92, 0x41, 0x34, 0x32,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x77, 0x69, 0x74, 0x68, 0x9a,
	0x02, 0x01, 0x07, 0xfa, 0x42, 0x25, 0x72, 0x23, 0x32, 0x21, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a,
	0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x7d, 0x0a, 0x11, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x51, 0x92, 0x41, 0x26, 0x32, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20,
	0x74, 0x6f, 0x20, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x9a, 0x02, 0x01, 0x07, 0xfa,
	0x42, 0x25, 0x72, 0x23, 0x32, 0x21, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d,
	0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x52, 0x0f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x49, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xad, 0x02, 0x0a, 0x20, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b,
	0x92, 0x41, 0x19, 0x32, 0x13, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x77, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x52, 0x92, 0x41, 0x24, 0x32,
	0x1e, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x9a,
	0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x25, 0x72, 0x23, 0x32, 0x21, 0x28, 0x3f, 0x69,
	0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d,
	0x5f, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x22, 0x92, 0x41,
	0x15, 0x32, 0x0f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x38, 0x00,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf6, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65,
	0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3a, 0x92, 0x41, 0x37, 0x32, 0x31, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x9a, 0x02, 0x01, 0x03, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x41,
	0x92, 0x41, 0x3e, 0x32, 0x38, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x9a, 0x02, 0x01,
	0x03, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x22, 0xb9, 0x02, 0x0a, 0x1c, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x54, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x19, 0x32, 0x13, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20,
	0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01,
	0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28,
	0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x80, 0x01, 0x0a, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x5b, 0x92, 0x41, 0x2d, 0x32, 0x27, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x9a, 0x02,
	0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x25, 0x72, 0x23, 0x32, 0x21, 0x28, 0x3f, 0x69, 0x29,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f,
	0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2a, 0x92, 0x41, 0x1d, 0x32,
	0x17, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x04, 0x1a, 0x02, 0x38, 0x00, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x22, 0xf2, 0x01,
	0x0a, 0x1d, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x65, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3a, 0x92, 0x41, 0x37, 0x32, 0x31,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e,
	0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x41, 0x92, 0x41, 0x3e, 0x32, 0x38, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x9a, 0x02,
	0x01, 0x03, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0x64, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2f, 0x92, 0x41, 0x0d, 0x32, 0x07, 0x55, 0x73, 0x65, 0x72, 0x20, 0x69, 0x64, 0x9a, 0x02, 0x01,
	0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28,
	0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xef, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x19, 0x32, 0x13,
	0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10,
	0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x7a,
	0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x55, 0x92, 0x41, 0x27, 0x32, 0x21, 0x4e, 0x61, 0x6d, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x74, 0x6f, 0x20,
	0x67, 0x65, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x9a, 0x02, 0x01,
	0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x25, 0x72, 0x23, 0x32, 0x21, 0x28, 0x3f, 0x69, 0x29, 0x5e,
	0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d,
	0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x15, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x65, 0x61,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x9a, 0x02, 0x01,
	0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x3e,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x14, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20,
	0x73, 0x70, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x9a, 0x02,
	0x01, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x22, 0x71,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x46, 0x92, 0x41, 0x18, 0x32, 0x12, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x9a, 0x02, 0x01, 0x07,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x25, 0x72, 0x23, 0x32, 0x21, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a,
	0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xc3, 0x01, 0x0a, 0x18, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x44, 0x72,
	0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x3b, 0x92, 0x41, 0x19, 0x32, 0x13, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e,
	0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92,
	0x41, 0x1c, 0x32, 0x16, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x64, 0x72, 0x6f, 0x70, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x64, 0x72, 0x6f, 0x70, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xee, 0x07, 0x0a, 0x19, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x32, 0x26, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x92, 0x01,
	0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x32, 0x33, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x36, 0x92, 0x41, 0x33, 0x32,
	0x2d, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x65, 0x6e, 0x65, 0x72,
	0x67, 0x69, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02,
	0x01, 0x06, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x5f, 0x78, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x65, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x58, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x28, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x78, 0x70, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x58, 0x70, 0x12, 0x3e, 0x0a, 0x09, 0x65, 0x73, 0x63, 0x72, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x18, 0x45,
	0x73, 0x63, 0x72, 0x6f, 0x77, 0x20, 0x69, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x08, 0x65, 0x73, 0x63,
	0x72, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x33, 0x92, 0x41, 0x30, 0x32, 0x2a,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x72, 0x6f,
	0x70, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x61, 0x73,
	0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x09,
	0x64, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x38, 0x0a, 0x0a, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x58, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9d, 0x02, 0x0a, 0x15, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x54, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x19, 0x32, 0x13, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20,
	0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01,
	0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28,
	0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0f, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x29, 0x92, 0x41, 0x1c, 0x32, 0x16, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x9a, 0x02,
	0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x64, 0x72,
	0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x09, 0x65,
	0x73, 0x63, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3e,
	0x92, 0x41, 0x3b, 0x32, 0x35, 0x45, 0x73, 0x63, 0x72, 0x6f, 0x77, 0x20, 0x69, 0x64, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2c, 0x20, 0x69,
	0x66, 0x20, 0x69, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x08,
	0x65, 0x73, 0x63, 0x72, 0x6f, 0x77, 0x49, 0x64, 0x22, 0x83, 0x0a, 0x0a, 0x16, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x50, 0x92, 0x41, 0x4d, 0x32, 0x47,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x28, 0x44, 0x45, 0x50, 0x52, 0x45,
	0x43, 0x41, 0x54, 0x45, 0x44, 0x3a, 0x20, 0x75, 0x73, 0x65, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x29, 0x9a, 0x02, 0x01, 0x01, 0x52, 0x0c, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0xd9, 0x01, 0x0a, 0x18, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x44, 0x72,
	0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x60, 0x92, 0x41, 0x5d,
	0x32, 0x57, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x28, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54,
	0x45, 0x44, 0x3a, 0x20, 0x75, 0x73, 0x65, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x29, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x16, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0xe4, 0x01, 0x0a, 0x19, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x68, 0x92, 0x41, 0x65, 0x32, 0x5f,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x28, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45,
	0x44, 0x3a, 0x20, 0x75, 0x73, 0x65, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x2e, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x29, 0x9a,
	0x02, 0x01, 0x06, 0x52, 0x17, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0xd0, 0x01, 0x0a,
	0x15, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x5f, 0x78, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x44, 0x72,
	0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x58, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x60, 0x92, 0x41, 0x5d, 0x32, 0x57, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x78, 0x70, 0x20, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x28, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x3a, 0x20, 0x75, 0x73,
	0x65, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x5f, 0x78, 0x70, 0x29, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x13, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x58, 0x70, 0x12,
	0x7b, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x5c, 0x92, 0x41, 0x59, 0x32, 0x53, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x20, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x20, 0x28, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x3a, 0x20,
	0x75, 0x73, 0x65, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x2e, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x29, 0x9a, 0x02, 0x01,
	0x03, 0x52, 0x09, 0x64, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x5b, 0x0a, 0x0d,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x42, 0x1d, 0x92, 0x41,
	0x1a, 0x32, 0x14, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x0c, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x49, 0x0a, 0x1b, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a, 0x1c, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x46, 0x0a, 0x18, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x58, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xda,
	0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x0a,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x1f, 0x4d, 0x61, 0x70,
	0x20, 0x6f, 0x66, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x9a, 0x02, 0x01, 0x06,
	0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x59, 0x0a, 0x0a, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x69, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x26, 0x92, 0x41, 0x20, 0x32, 0x1a, 0x54, 0x72, 0x75, 0x65, 0x20, 0x69, 0x66, 0x20, 0x69,
	0x74, 0x65, 0x6d, 0x20, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c,
	0x65, 0x9a, 0x02, 0x01, 0x02, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x9e, 0x05, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x16, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x9a, 0x01, 0x0a,
	0x12, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x35, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x20,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x75, 0x70, 0x6f, 0x6e, 0x20, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x7e, 0x0a, 0x0b, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x37, 0x92, 0x41, 0x34, 0x32, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x20,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x61, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x0a, 0x64,
	0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x0b, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x25, 0x92, 0x41, 0x22, 0x32, 0x1c, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x0a, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x1a, 0x38, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x44, 0x72, 0x6f, 0x70,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf1, 0x02, 0x0a, 0x0a, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x27, 0x92, 0x41, 0x19, 0x32, 0x13, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x20, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x72, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5e, 0x92,
	0x41, 0x30, 0x32, 0x2a, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x69, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x9a, 0x02,
	0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x25, 0x72, 0x23, 0x32, 0x21, 0x28, 0x3f, 0x69, 0x29,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f,
	0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x3e, 0x92, 0x41, 0x31, 0x32, 0x2b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x1a, 0x02,
	0x28, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x40, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x54, 0x45, 0x4d, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x10, 0x03, 0x22, 0xe7, 0x01, 0x0a, 0x12,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x59, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x25, 0x72, 0x23,
	0x32, 0x21, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d,
	0x29, 0x3f, 0x24, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x32, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1c, 0x92, 0x41,
	0x0f, 0x32, 0x0d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x65, 0x6d,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x42, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1d, 0x92, 0x41, 0x17, 0x32, 0x15, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x69, 0x74, 0x65, 0x6d, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x48, 0x0a, 0x0b, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22,
	0xc5, 0x06, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x71, 0x0a, 0x11, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x45, 0x92, 0x41, 0x1a, 0x32, 0x14, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x9a, 0x02, 0x01, 0x07, 0xfa,
	0x42, 0x25, 0x72, 0x23, 0x32, 0x21, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d,
	0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x52, 0x0f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x49, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92,
	0x41, 0x27, 0x32, 0x21, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x69, 0x64, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x20, 0x69, 0x74, 0x65, 0x6d, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0b, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32,
	0x27, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x61, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x42, 0x92, 0x41, 0x3f, 0x32, 0x3d, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x09, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x51, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x2a, 0x92, 0x41, 0x27, 0x32, 0x25, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x63, 0x61,
	0x6e, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x64, 0x52, 0x0d, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x10, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x79, 0x92, 0x41, 0x76, 0x32, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20,
	0x77, 0x61, 0x73, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x64, 0x2e, 0x20, 0x49, 0x6e, 0x20, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2c, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x6f, 0x66,
	0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x20, 0x69,
	0x74, 0x65, 0x6d, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x41, 0x74,
	0x12, 0xc4, 0x01, 0x0a, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x7e, 0x92, 0x41, 0x7b, 0x32, 0x79, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x20, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x69,
	0x74, 0x65, 0x6d, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x27, 0x73, 0x20,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x20, 0x4e, 0x6f, 0x74, 0x20, 0x74,
	0x6f, 0x20, 0x62, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x64, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x69, 0x6e, 0x20, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x20, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x43, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xaa, 0x08, 0x0a,
	0x0b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x79, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x65, 0x92, 0x41, 0x37, 0x32,
	0x31, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x74, 0x65,
	0x6d, 0x2c, 0x20, 0x68, 0x61, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x25, 0x72, 0x23, 0x32, 0x21,
	0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f,
	0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92,
	0x41, 0x1e, 0x32, 0x18, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x9a, 0x02, 0x01, 0x07,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41,
	0x19, 0x32, 0x13, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
	0x66, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0x92, 0x41, 0x37,
	0x32, 0x31, 0x41, 0x6e, 0x20, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x72, 0x79, 0x20, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69,
	0x74, 0x65, 0x6d, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x1d, 0x54, 0x61, 0x67, 0x73, 0x20, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x9a, 0x02, 0x01, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x5d, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x3f, 0x92, 0x41, 0x39, 0x32, 0x33, 0x54, 0x72, 0x75, 0x65, 0x20,
	0x69, 0x66, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x2c, 0x20, 0x61, 0x20, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x9a, 0x02,
	0x01, 0x02, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x40, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x24, 0x92, 0x41, 0x1e, 0x32, 0x18, 0x54, 0x72, 0x75, 0x65, 0x20, 0x69, 0x66,
	0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x69, 0x73, 0x20, 0x74, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c,
	0x65, 0x9a, 0x02, 0x01, 0x02, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x5c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x25, 0x92,
	0x41, 0x22, 0x32, 0x20, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x69, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x58, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x24, 0x92, 0x41, 0x21, 0x32, 0x1f,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x0b, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x52,
	0x0b, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x50, 0x0a, 0x03,
	0x74, 0x74, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39,
	0x54, 0x69, 0x6d, 0x65, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68,
	0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x69,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x34, 0x92, 0x41, 0x31, 0x32, 0x2f,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x20, 0x74, 0x6f,
	0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfc, 0x03, 0x0a, 0x0c, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x5f, 0x0a, 0x0d, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x19,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x01, 0x52, 0x0c, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x7a, 0x0a, 0x12, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x32, 0x26, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x20, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x9a, 0x02, 0x01, 0x01, 0x52, 0x11, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x7e, 0x0a, 0x15, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x78, 0x70,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x58, 0x70, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x21, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x78, 0x70, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02,
	0x01, 0x01, 0x52, 0x13, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x58, 0x70, 0x12, 0x8e, 0x01, 0x0a, 0x19, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x42,
	0x2e, 0x92, 0x41, 0x2b, 0x32, 0x25, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x20, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x01, 0x52,
	0x17, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x22, 0xc5, 0x02, 0x0a, 0x0b, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x4d, 0x0a, 0x11, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x18, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x0f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49,
	0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x29, 0x92,
	0x41, 0x26, 0x32, 0x20, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x69, 0x64, 0x73,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x01, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2a, 0x92, 0x41, 0x27,
	0x32, 0x21, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69,
	0x74, 0x65, 0x6d, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x0b, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x0b, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x20,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x74, 0x65,
	0x6d, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x9a, 0x02, 0x01, 0x03, 0x52, 0x0a, 0x61, 0x66, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x8c, 0x02, 0x0a, 0x0f, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x4a, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x22,
	0x32, 0x1c, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x9a, 0x02,
	0x01, 0x07, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x57, 0x0a, 0x0e, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x32, 0x27, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x0d, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x2f, 0x92, 0x41, 0x2c, 0x32, 0x26, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x9a, 0x02, 0x01,
	0x03, 0x52, 0x0c, 0x61, 0x66, 0x74, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22,
	0xcf, 0x02, 0x0a, 0x13, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x58, 0x70, 0x12, 0x55, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x78, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x78,
	0x70, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x0f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x58, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44,
	0x0a, 0x09, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x1e, 0x58, 0x50, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x08, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x58, 0x70, 0x12, 0x41, 0x0a, 0x08, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x78, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x1d, 0x58, 0x50, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x07,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x58, 0x70, 0x12, 0x58, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x24, 0x92, 0x41, 0x21, 0x32, 0x1b, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x20, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x13, 0x6e, 0x75,
	0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x22, 0x9d, 0x02, 0x0a, 0x17, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x61, 0x0a,
	0x15, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41,
	0x2a, 0x32, 0x24, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x20,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x13, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x50, 0x0a, 0x0d, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x22, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x9a, 0x02, 0x01, 0x03, 0x52, 0x0c, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x12, 0x4d, 0x0a, 0x0c, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x21, 0x45,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x9a, 0x02, 0x01, 0x03, 0x52, 0x0b, 0x61, 0x66, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x22, 0x8b, 0x01, 0x0a, 0x09, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92,
	0x41, 0x18, 0x32, 0x12, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x72, 0x6f, 0x70,
	0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x4d, 0x0a, 0x05, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x72, 0x6f, 0x70,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32,
	0x17, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x72,
	0x6f, 0x70, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x22,
	0xb1, 0x07, 0x0a, 0x0e, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x72, 0x6f,
	0x70, 0x73, 0x12, 0x64, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x72,
	0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x1f, 0x4d, 0x61,
	0x70, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74,
	0x6f, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x9a, 0x02, 0x01,
	0x06, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x77, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x23, 0x4d, 0x61,
	0x70, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x6e, 0x61,
	0x6d, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x92, 0x01, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x34,
	0x92, 0x41, 0x31, 0x32, 0x2b, 0x4d, 0x61, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x9a, 0x02, 0x01, 0x06, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x78, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x58, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x30, 0x92, 0x41, 0x2d,
	0x32, 0x27, 0x4d, 0x61, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62,
	0x6c, 0x65, 0x20, 0x78, 0x70, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x72,
	0x6f, 0x70, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x58, 0x70, 0x12, 0x4b, 0x0a, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x33, 0x92, 0x41, 0x26,
	0x32, 0x20, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x65, 0x6d,
	0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x20, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00,
	0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x4f, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x0f, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x5a, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x11, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x58, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x72,
	0x6f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xf6, 0x01, 0x0a, 0x0a, 0x44, 0x72, 0x6f, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x30, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x1e, 0x92, 0x41, 0x1b, 0x32, 0x15, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x9a, 0x02, 0x01, 0x03, 0x52,
	0x03, 0x6d, 0x69, 0x6e, 0x12, 0x5e, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x4c, 0x92, 0x41, 0x42, 0x32, 0x3c, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x2e, 0x20, 0x57,
	0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x20, 0x74, 0x6f, 0x20,
	0x6d, 0x69, 0x6e, 0x20, 0x69, 0x66, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x03, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52,
	0x03, 0x6d, 0x61, 0x78, 0x12, 0x56, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3a, 0x92, 0x41, 0x30, 0x32, 0x2a, 0x49, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x31, 0x9a, 0x02, 0x01, 0x03, 0xfa, 0x42, 0x04, 0x1a, 0x02,
	0x20, 0x00, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x22, 0xff, 0x03, 0x0a,
	0x17, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x6a, 0x0a, 0x14, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x41,
	0x64, 0x64, 0x65, 0x64, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x70,
	0x0a, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x64, 0x64,
	0x65, 0x64, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x1a, 0x44, 0x0a, 0x16, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65,
	0x72, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x18, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8c,
	0x02, 0x0a, 0x1a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x12, 0x3c, 0x0a,
	0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa8, 0x02,
	0x0a, 0x24, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x15, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x92, 0x03, 0x0a, 0x1b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x49, 0x0a, 0x21, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2a, 0xa9, 0x01,
	0x0a, 0x12, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x41,
	0x44, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43,
	0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_inventory_types_proto_rawDescOnce sync.Once
	file_inventory_types_proto_rawDescData = file_inventory_types_proto_rawDesc
)

func file_inventory_types_proto_rawDescGZIP() []byte {
	file_inventory_types_proto_rawDescOnce.Do(func() {
		file_inventory_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_inventory_types_proto_rawDescData)
	})
	return file_inventory_types_proto_rawDescData
}

var file_inventory_types_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_inventory_types_proto_msgTypes = make([]protoimpl.MessageInfo, 93)
var file_inventory_types_proto_goTypes = []interface{}{
	(InventoryEventType)(0),                      // 0: inventory.InventoryEventType
	(UnlockCost_Type)(0),                         // 1: inventory.UnlockCost.Type
	(*GetItemsRequest)(nil),                      // 2: inventory.GetItemsRequest
	(*GetItemsResponse)(nil),                     // 3: inventory.GetItemsResponse
	(*GetContainerRequest)(nil),                  // 4: inventory.GetContainerRequest
	(*GetContainerResponse)(nil),                 // 5: inventory.GetContainerResponse
	(*GrantInventoryItemsRequest)(nil),           // 6: inventory.GrantInventoryItemsRequest
	(*GetUsersRequest)(nil),                      // 7: inventory.GetUsersRequest
	(*GetUsersResponse)(nil),                     // 8: inventory.GetUsersResponse
	(*GetUserItemsRequest)(nil),                  // 9: inventory.GetUserItemsRequest
	(*GetUserItemsResponse)(nil),                 // 10: inventory.GetUserItemsResponse
	(*GetUserItemRequest)(nil),                   // 11: inventory.GetUserItemRequest
	(*GetUserItemCountRequest)(nil),              // 12: inventory.GetUserItemCountRequest
	(*GetUserItemCountResponse)(nil),             // 13: inventory.GetUserItemCountResponse
	(*DeleteUserItemRequest)(nil),                // 14: inventory.DeleteUserItemRequest
	(*ConsumeItemRequest)(nil),                   // 15: inventory.ConsumeItemRequest
	(*ConsumeItemResponse)(nil),                  // 16: inventory.ConsumeItemResponse
	(*GrantAndOpenContainerRequest)(nil),         // 17: inventory.GrantAndOpenContainerRequest
	(*GrantAndOpenContainerResponse)(nil),        // 18: inventory.GrantAndOpenContainerResponse
	(*OpenContainerRequest)(nil),                 // 19: inventory.OpenContainerRequest
	(*OpenContainerResponse)(nil),                // 20: inventory.OpenContainerResponse
	(*EvaluateContainerRequest)(nil),             // 21: inventory.EvaluateContainerRequest
	(*EvaluateContainerResponse)(nil),            // 22: inventory.EvaluateContainerResponse
	(*UnlockContainerRequest)(nil),               // 23: inventory.UnlockContainerRequest
	(*UnlockContainerResponse)(nil),              // 24: inventory.UnlockContainerResponse
	(*UpdateUserItemRequest)(nil),                // 25: inventory.UpdateUserItemRequest
	(*PurchaseItemRequest)(nil),                  // 26: inventory.PurchaseItemRequest
	(*UpdateUserVirtualCurrencyRequest)(nil),     // 27: inventory.UpdateUserVirtualCurrencyRequest
	(*UpdateUserVirtualCurrencyResponse)(nil),    // 28: inventory.UpdateUserVirtualCurrencyResponse
	(*IncrementUserCurrencyRequest)(nil),         // 29: inventory.IncrementUserCurrencyRequest
	(*IncrementUserCurrencyResponse)(nil),        // 30: inventory.IncrementUserCurrencyResponse
	(*GetUserCurrenciesRequest)(nil),             // 31: inventory.GetUserCurrenciesRequest
	(*GetUserCurrencyStatsRequest)(nil),          // 32: inventory.GetUserCurrencyStatsRequest
	(*GetUserCurrencyStatsResponse)(nil),         // 33: inventory.GetUserCurrencyStatsResponse
	(*GetDropTableRequest)(nil),                  // 34: inventory.GetDropTableRequest
	(*EvaluateDropTableRequest)(nil),             // 35: inventory.EvaluateDropTableRequest
	(*EvaluateDropTableResponse)(nil),            // 36: inventory.EvaluateDropTableResponse
	(*GrantDropTableRequest)(nil),                // 37: inventory.GrantDropTableRequest
	(*GrantDropTableResponse)(nil),               // 38: inventory.GrantDropTableResponse
	(*GetUserCurrenciesResponse)(nil),            // 39: inventory.GetUserCurrenciesResponse
	(*Consumable)(nil),                           // 40: inventory.Consumable
	(*Container)(nil),                            // 41: inventory.Container
	(*UnlockCost)(nil),                           // 42: inventory.UnlockCost
	(*PurchasableSetting)(nil),                   // 43: inventory.PurchasableSetting
	(*Purchasable)(nil),                          // 44: inventory.Purchasable
	(*UserInventoryItem)(nil),                    // 45: inventory.UserInventoryItem
	(*UserInventory)(nil),                        // 46: inventory.UserInventory
	(*CatalogItem)(nil),                          // 47: inventory.CatalogItem
	(*GrantResults)(nil),                         // 48: inventory.GrantResults
	(*GrantedItem)(nil),                          // 49: inventory.GrantedItem
	(*GrantedCurrency)(nil),                      // 50: inventory.GrantedCurrency
	(*GrantedTrackablesXp)(nil),                  // 51: inventory.GrantedTrackablesXp
	(*GrantedTrackablesEnergy)(nil),              // 52: inventory.GrantedTrackablesEnergy
	(*DropTable)(nil),                            // 53: inventory.DropTable
	(*DropTableDrops)(nil),                       // 54: inventory.DropTableDrops
	(*DropValues)(nil),                           // 55: inventory.DropValues
	(*EventInventoryItemAdded)(nil),              // 56: inventory.EventInventoryItemAdded
	(*EventInventoryItemConsumed)(nil),           // 57: inventory.EventInventoryItemConsumed
	(*EventInventoryCurrencyBalanceUpdated)(nil), // 58: inventory.EventInventoryCurrencyBalanceUpdated
	(*EventInventoryItemPurchased)(nil),          // 59: inventory.EventInventoryItemPurchased
	nil,                                          // 60: inventory.GetContainerResponse.ItemsEntry
	nil,                                          // 61: inventory.GetContainerResponse.CurrenciesEntry
	nil,                                          // 62: inventory.GetContainerResponse.DropTablesEntry
	nil,                                          // 63: inventory.GrantInventoryItemsRequest.ItemsEntry
	nil,                                          // 64: inventory.GrantAndOpenContainerResponse.GrantedVirtualCurrencyEntry
	nil,                                          // 65: inventory.GrantAndOpenContainerResponse.GrantedTrackablesEnergyEntry
	nil,                                          // 66: inventory.GrantAndOpenContainerResponse.GrantedTrackablesXpEntry
	nil,                                          // 67: inventory.OpenContainerResponse.GrantedVirtualCurrencyEntry
	nil,                                          // 68: inventory.OpenContainerResponse.GrantedTrackablesEnergyEntry
	nil,                                          // 69: inventory.OpenContainerResponse.GrantedTrackablesXpEntry
	nil,                                          // 70: inventory.EvaluateContainerResponse.ItemsEntry
	nil,                                          // 71: inventory.EvaluateContainerResponse.CurrenciesEntry
	nil,                                          // 72: inventory.EvaluateContainerResponse.TrackablesEnergyEntry
	nil,                                          // 73: inventory.EvaluateContainerResponse.TrackablesXpEntry
	nil,                                          // 74: inventory.UnlockContainerResponse.ItemsEntry
	nil,                                          // 75: inventory.UnlockContainerResponse.CurrenciesEntry
	nil,                                          // 76: inventory.UnlockContainerResponse.TrackablesEnergyEntry
	nil,                                          // 77: inventory.UnlockContainerResponse.TrackablesXpEntry
	nil,                                          // 78: inventory.EvaluateDropTableResponse.ItemsEntry
	nil,                                          // 79: inventory.EvaluateDropTableResponse.CurrenciesEntry
	nil,                                          // 80: inventory.EvaluateDropTableResponse.TrackablesEnergyEntry
	nil,                                          // 81: inventory.EvaluateDropTableResponse.TrackablesXpEntry
	nil,                                          // 82: inventory.GrantDropTableResponse.GrantedVirtualCurrencyEntry
	nil,                                          // 83: inventory.GrantDropTableResponse.GrantedTrackablesEnergyEntry
	nil,                                          // 84: inventory.GrantDropTableResponse.GrantedTrackablesXpEntry
	nil,                                          // 85: inventory.GetUserCurrenciesResponse.CurrenciesEntry
	nil,                                          // 86: inventory.Container.ItemsEntry
	nil,                                          // 87: inventory.Container.VirtualCurrenciesEntry
	nil,                                          // 88: inventory.Container.DropTablesEntry
	nil,                                          // 89: inventory.DropTableDrops.ItemsEntry
	nil,                                          // 90: inventory.DropTableDrops.CurrenciesEntry
	nil,                                          // 91: inventory.DropTableDrops.TrackablesEnergyEntry
	nil,                                          // 92: inventory.DropTableDrops.TrackablesXpEntry
	nil,                                          // 93: inventory.EventInventoryItemAdded.GrantCountPerItemEntry
	nil,                                          // 94: inventory.EventInventoryItemAdded.CurrentCountPerItemEntry
	(*structpb.Struct)(nil),                      // 95: google.protobuf.Struct
}
var file_inventory_types_proto_depIdxs = []int32{
	47, // 0: inventory.GetItemsResponse.items:type_name -> inventory.CatalogItem
	60, // 1: inventory.GetContainerResponse.items:type_name -> inventory.GetContainerResponse.ItemsEntry
	61, // 2: inventory.GetContainerResponse.currencies:type_name -> inventory.GetContainerResponse.CurrenciesEntry
	62, // 3: inventory.GetContainerResponse.drop_tables:type_name -> inventory.GetContainerResponse.DropTablesEntry
	53, // 4: inventory.GetContainerResponse.drop_table_contents:type_name -> inventory.DropTable
	63, // 5: inventory.GrantInventoryItemsRequest.items:type_name -> inventory.GrantInventoryItemsRequest.ItemsEntry
	95, // 6: inventory.GrantInventoryItemsRequest.metadata:type_name -> google.protobuf.Struct
	45, // 7: inventory.GetUserItemsResponse.items:type_name -> inventory.UserInventoryItem
	42, // 8: inventory.GrantAndOpenContainerRequest.unlock_cost:type_name -> inventory.UnlockCost
	45, // 9: inventory.GrantAndOpenContainerResponse.granted_items:type_name -> inventory.UserInventoryItem
	64, // 10: inventory.GrantAndOpenContainerResponse.granted_virtual_currency:type_name -> inventory.GrantAndOpenContainerResponse.GrantedVirtualCurrencyEntry
	65, // 11: inventory.GrantAndOpenContainerResponse.granted_trackables_energy:type_name -> inventory.GrantAndOpenContainerResponse.GrantedTrackablesEnergyEntry
	66, // 12: inventory.GrantAndOpenContainerResponse.granted_trackables_xp:type_name -> inventory.GrantAndOpenContainerResponse.GrantedTrackablesXpEntry
	48, // 13: inventory.GrantAndOpenContainerResponse.grant_results:type_name -> inventory.GrantResults
	42, // 14: inventory.OpenContainerRequest.unlock_cost:type_name -> inventory.UnlockCost
	45, // 15: inventory.OpenContainerResponse.granted_items:type_name -> inventory.UserInventoryItem
	67, // 16: inventory.OpenContainerResponse.granted_virtual_currency:type_name -> inventory.OpenContainerResponse.GrantedVirtualCurrencyEntry
	68, // 17: inventory.OpenContainerResponse.granted_trackables_energy:type_name -> inventory.OpenContainerResponse.GrantedTrackablesEnergyEntry
	69, // 18: inventory.OpenContainerResponse.granted_trackables_xp:type_name -> inventory.OpenContainerResponse.GrantedTrackablesXpEntry
	48, // 19: inventory.OpenContainerResponse.grant_results:type_name -> inventory.GrantResults
	70, // 20: inventory.EvaluateContainerResponse.items:type_name -> inventory.EvaluateContainerResponse.ItemsEntry
	71, // 21: inventory.EvaluateContainerResponse.currencies:type_name -> inventory.EvaluateContainerResponse.CurrenciesEntry
	72, // 22: inventory.EvaluateContainerResponse.trackables_energy:type_name -> inventory.EvaluateContainerResponse.TrackablesEnergyEntry
	73, // 23: inventory.EvaluateContainerResponse.trackables_xp:type_name -> inventory.EvaluateContainerResponse.TrackablesXpEntry
	42, // 24: inventory.UnlockContainerRequest.unlock_cost:type_name -> inventory.UnlockCost
	74, // 25: inventory.UnlockContainerResponse.items:type_name -> inventory.UnlockContainerResponse.ItemsEntry
	75, // 26: inventory.UnlockContainerResponse.currencies:type_name -> inventory.UnlockContainerResponse.CurrenciesEntry
	76, // 27: inventory.UnlockContainerResponse.trackables_energy:type_name -> inventory.UnlockContainerResponse.TrackablesEnergyEntry
	77, // 28: inventory.UnlockContainerResponse.trackables_xp:type_name -> inventory.UnlockContainerResponse.TrackablesXpEntry
	95, // 29: inventory.UpdateUserItemRequest.metadata:type_name -> google.protobuf.Struct
	78, // 30: inventory.EvaluateDropTableResponse.items:type_name -> inventory.EvaluateDropTableResponse.ItemsEntry
	79, // 31: inventory.EvaluateDropTableResponse.currencies:type_name -> inventory.EvaluateDropTableResponse.CurrenciesEntry
	80, // 32: inventory.EvaluateDropTableResponse.trackables_energy:type_name -> inventory.EvaluateDropTableResponse.TrackablesEnergyEntry
	81, // 33: inventory.EvaluateDropTableResponse.trackables_xp:type_name -> inventory.EvaluateDropTableResponse.TrackablesXpEntry
	45, // 34: inventory.GrantDropTableResponse.granted_items:type_name -> inventory.UserInventoryItem
	82, // 35: inventory.GrantDropTableResponse.granted_virtual_currency:type_name -> inventory.GrantDropTableResponse.GrantedVirtualCurrencyEntry
	83, // 36: inventory.GrantDropTableResponse.granted_trackables_energy:type_name -> inventory.GrantDropTableResponse.GrantedTrackablesEnergyEntry
	84, // 37: inventory.GrantDropTableResponse.granted_trackables_xp:type_name -> inventory.GrantDropTableResponse.GrantedTrackablesXpEntry
	48, // 38: inventory.GrantDropTableResponse.grant_results:type_name -> inventory.GrantResults
	85, // 39: inventory.GetUserCurrenciesResponse.currencies:type_name -> inventory.GetUserCurrenciesResponse.CurrenciesEntry
	86, // 40: inventory.Container.items:type_name -> inventory.Container.ItemsEntry
	87, // 41: inventory.Container.virtual_currencies:type_name -> inventory.Container.VirtualCurrenciesEntry
	88, // 42: inventory.Container.drop_tables:type_name -> inventory.Container.DropTablesEntry
	42, // 43: inventory.Container.unlock_cost:type_name -> inventory.UnlockCost
	1,  // 44: inventory.UnlockCost.type:type_name -> inventory.UnlockCost.Type
	43, // 45: inventory.Purchasable.settings:type_name -> inventory.PurchasableSetting
	95, // 46: inventory.UserInventoryItem.instance_metadata:type_name -> google.protobuf.Struct
	45, // 47: inventory.UserInventory.items:type_name -> inventory.UserInventoryItem
	40, // 48: inventory.CatalogItem.consumable:type_name -> inventory.Consumable
	41, // 49: inventory.CatalogItem.container:type_name -> inventory.Container
	44, // 50: inventory.CatalogItem.purchasable:type_name -> inventory.Purchasable
	95, // 51: inventory.CatalogItem.metadata:type_name -> google.protobuf.Struct
	49, // 52: inventory.GrantResults.granted_items:type_name -> inventory.GrantedItem
	50, // 53: inventory.GrantResults.granted_currencies:type_name -> inventory.GrantedCurrency
	51, // 54: inventory.GrantResults.granted_trackables_xp:type_name -> inventory.GrantedTrackablesXp
	52, // 55: inventory.GrantResults.granted_trackables_energy:type_name -> inventory.GrantedTrackablesEnergy
	54, // 56: inventory.DropTable.drops:type_name -> inventory.DropTableDrops
	89, // 57: inventory.DropTableDrops.items:type_name -> inventory.DropTableDrops.ItemsEntry
	90, // 58: inventory.DropTableDrops.currencies:type_name -> inventory.DropTableDrops.CurrenciesEntry
	91, // 59: inventory.DropTableDrops.trackables_energy:type_name -> inventory.DropTableDrops.TrackablesEnergyEntry
	92, // 60: inventory.DropTableDrops.trackables_xp:type_name -> inventory.DropTableDrops.TrackablesXpEntry
	0,  // 61: inventory.EventInventoryItemAdded.event_type:type_name -> inventory.InventoryEventType
	93, // 62: inventory.EventInventoryItemAdded.grant_count_per_item:type_name -> inventory.EventInventoryItemAdded.GrantCountPerItemEntry
	94, // 63: inventory.EventInventoryItemAdded.current_count_per_item:type_name -> inventory.EventInventoryItemAdded.CurrentCountPerItemEntry
	0,  // 64: inventory.EventInventoryItemConsumed.event_type:type_name -> inventory.InventoryEventType
	0,  // 65: inventory.EventInventoryCurrencyBalanceUpdated.event_type:type_name -> inventory.InventoryEventType
	0,  // 66: inventory.EventInventoryItemPurchased.event_type:type_name -> inventory.InventoryEventType
	55, // 67: inventory.DropTableDrops.ItemsEntry.value:type_name -> inventory.DropValues
	55, // 68: inventory.DropTableDrops.CurrenciesEntry.value:type_name -> inventory.DropValues
	55, // 69: inventory.DropTableDrops.TrackablesEnergyEntry.value:type_name -> inventory.DropValues
	55, // 70: inventory.DropTableDrops.TrackablesXpEntry.value:type_name -> inventory.DropValues
	71, // [71:71] is the sub-list for method output_type
	71, // [71:71] is the sub-list for method input_type
	71, // [71:71] is the sub-list for extension type_name
	71, // [71:71] is the sub-list for extension extendee
	0,  // [0:71] is the sub-list for field type_name
}

func init() { file_inventory_types_proto_init() }
func file_inventory_types_proto_init() {
	if File_inventory_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_inventory_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetItemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetItemsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContainerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContainerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantInventoryItemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserItemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserItemsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserItemCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserItemCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantAndOpenContainerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantAndOpenContainerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenContainerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenContainerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluateContainerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluateContainerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockContainerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockContainerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchaseItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserVirtualCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserVirtualCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrementUserCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrementUserCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCurrenciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCurrencyStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCurrencyStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDropTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluateDropTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluateDropTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantDropTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantDropTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCurrenciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Consumable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockCost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchasableSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Purchasable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInventoryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInventory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CatalogItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantedCurrency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantedTrackablesXp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantedTrackablesEnergy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropTableDrops); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventInventoryItemAdded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventInventoryItemConsumed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventInventoryCurrencyBalanceUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_types_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventInventoryItemPurchased); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inventory_types_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   93,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_inventory_types_proto_goTypes,
		DependencyIndexes: file_inventory_types_proto_depIdxs,
		EnumInfos:         file_inventory_types_proto_enumTypes,
		MessageInfos:      file_inventory_types_proto_msgTypes,
	}.Build()
	File_inventory_types_proto = out.File
	file_inventory_types_proto_rawDesc = nil
	file_inventory_types_proto_goTypes = nil
	file_inventory_types_proto_depIdxs = nil
}
