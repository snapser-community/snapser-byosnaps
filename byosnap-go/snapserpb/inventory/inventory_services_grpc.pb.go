// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: inventory_services.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InventoryService_CreateCatalogItem_FullMethodName               = "/inventory.InventoryService/CreateCatalogItem"
	InventoryService_GetCatalogItems_FullMethodName                 = "/inventory.InventoryService/GetCatalogItems"
	InventoryService_ListAllCatalogItems_FullMethodName             = "/inventory.InventoryService/ListAllCatalogItems"
	InventoryService_UpdateCatalogItem_FullMethodName               = "/inventory.InventoryService/UpdateCatalogItem"
	InventoryService_DeleteCatalogItem_FullMethodName               = "/inventory.InventoryService/DeleteCatalogItem"
	InventoryService_UpdateInventorySettings_FullMethodName         = "/inventory.InventoryService/UpdateInventorySettings"
	InventoryService_GetInventorySettings_FullMethodName            = "/inventory.InventoryService/GetInventorySettings"
	InventoryService_GetItems_FullMethodName                        = "/inventory.InventoryService/GetItems"
	InventoryService_GetContainer_FullMethodName                    = "/inventory.InventoryService/GetContainer"
	InventoryService_GrantItemsToUser_FullMethodName                = "/inventory.InventoryService/GrantItemsToUser"
	InventoryService_GetUsers_FullMethodName                        = "/inventory.InventoryService/GetUsers"
	InventoryService_GetAllUserItems_FullMethodName                 = "/inventory.InventoryService/GetAllUserItems"
	InventoryService_BatchGetUserItems_FullMethodName               = "/inventory.InventoryService/BatchGetUserItems"
	InventoryService_GetUserItem_FullMethodName                     = "/inventory.InventoryService/GetUserItem"
	InventoryService_GetUserItemCount_FullMethodName                = "/inventory.InventoryService/GetUserItemCount"
	InventoryService_DeleteUserItem_FullMethodName                  = "/inventory.InventoryService/DeleteUserItem"
	InventoryService_ConsumeItem_FullMethodName                     = "/inventory.InventoryService/ConsumeItem"
	InventoryService_GrantAndOpenContainer_FullMethodName           = "/inventory.InventoryService/GrantAndOpenContainer"
	InventoryService_OpenContainer_FullMethodName                   = "/inventory.InventoryService/OpenContainer"
	InventoryService_EvaluateContainer_FullMethodName               = "/inventory.InventoryService/EvaluateContainer"
	InventoryService_UnlockContainer_FullMethodName                 = "/inventory.InventoryService/UnlockContainer"
	InventoryService_UpdateUserItemMetadata_FullMethodName          = "/inventory.InventoryService/UpdateUserItemMetadata"
	InventoryService_PurchaseItemWithVirtualCurrency_FullMethodName = "/inventory.InventoryService/PurchaseItemWithVirtualCurrency"
	InventoryService_CreateNewCurrency_FullMethodName               = "/inventory.InventoryService/CreateNewCurrency"
	InventoryService_UpdateCurrency_FullMethodName                  = "/inventory.InventoryService/UpdateCurrency"
	InventoryService_DeleteCurrency_FullMethodName                  = "/inventory.InventoryService/DeleteCurrency"
	InventoryService_GetCurrencies_FullMethodName                   = "/inventory.InventoryService/GetCurrencies"
	InventoryService_CreateCurrencyConversion_FullMethodName        = "/inventory.InventoryService/CreateCurrencyConversion"
	InventoryService_UpdateCurrencyConversion_FullMethodName        = "/inventory.InventoryService/UpdateCurrencyConversion"
	InventoryService_DeleteCurrencyConversion_FullMethodName        = "/inventory.InventoryService/DeleteCurrencyConversion"
	InventoryService_GetCurrencyConversion_FullMethodName           = "/inventory.InventoryService/GetCurrencyConversion"
	InventoryService_GetCurrencyConversions_FullMethodName          = "/inventory.InventoryService/GetCurrencyConversions"
	InventoryService_ListAllCurrencyConversions_FullMethodName      = "/inventory.InventoryService/ListAllCurrencyConversions"
	InventoryService_UpdateUserVirtualCurrency_FullMethodName       = "/inventory.InventoryService/UpdateUserVirtualCurrency"
	InventoryService_IncrementUserCurrency_FullMethodName           = "/inventory.InventoryService/IncrementUserCurrency"
	InventoryService_GetUserCurrencies_FullMethodName               = "/inventory.InventoryService/GetUserCurrencies"
	InventoryService_GetTotalCurrency_FullMethodName                = "/inventory.InventoryService/GetTotalCurrency"
	InventoryService_GetUserCurrencyStats_FullMethodName            = "/inventory.InventoryService/GetUserCurrencyStats"
	InventoryService_ConvertUserCurrency_FullMethodName             = "/inventory.InventoryService/ConvertUserCurrency"
	InventoryService_CreateDropTable_FullMethodName                 = "/inventory.InventoryService/CreateDropTable"
	InventoryService_GetDropTable_FullMethodName                    = "/inventory.InventoryService/GetDropTable"
	InventoryService_DeleteDropTable_FullMethodName                 = "/inventory.InventoryService/DeleteDropTable"
	InventoryService_GetAllDropTables_FullMethodName                = "/inventory.InventoryService/GetAllDropTables"
	InventoryService_UpdateDropTable_FullMethodName                 = "/inventory.InventoryService/UpdateDropTable"
	InventoryService_GetDropTableContents_FullMethodName            = "/inventory.InventoryService/GetDropTableContents"
	InventoryService_EvaluateDropTable_FullMethodName               = "/inventory.InventoryService/EvaluateDropTable"
	InventoryService_GrantDropTable_FullMethodName                  = "/inventory.InventoryService/GrantDropTable"
	InventoryService_GetUserData_FullMethodName                     = "/inventory.InventoryService/GetUserData"
	InventoryService_DeleteUserData_FullMethodName                  = "/inventory.InventoryService/DeleteUserData"
	InventoryService_RegisterQuestCallback_FullMethodName           = "/inventory.InventoryService/RegisterQuestCallback"
	InventoryService_DeregisterQuestCallback_FullMethodName         = "/inventory.InventoryService/DeregisterQuestCallback"
	InventoryService_GrantRewards_FullMethodName                    = "/inventory.InventoryService/GrantRewards"
	InventoryService_ImportCatalog_FullMethodName                   = "/inventory.InventoryService/ImportCatalog"
	InventoryService_ExportSettings_FullMethodName                  = "/inventory.InventoryService/ExportSettings"
	InventoryService_ImportSettings_FullMethodName                  = "/inventory.InventoryService/ImportSettings"
	InventoryService_ValidateImportSettings_FullMethodName          = "/inventory.InventoryService/ValidateImportSettings"
)

// InventoryServiceClient is the client API for InventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryServiceClient interface {
	// inventory apis
	CreateCatalogItem(ctx context.Context, in *CatalogItem, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCatalogItems(ctx context.Context, in *GetCatalogItemsRequest, opts ...grpc.CallOption) (*GetCatalogItemsResponse, error)
	ListAllCatalogItems(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListCatalogItemsResponse, error)
	UpdateCatalogItem(ctx context.Context, in *CatalogItem, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteCatalogItem(ctx context.Context, in *DeleteCatalogItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateInventorySettings(ctx context.Context, in *InventorySettings, opts ...grpc.CallOption) (*InventorySettings, error)
	GetInventorySettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InventorySettings, error)
	GetItems(ctx context.Context, in *GetItemsRequest, opts ...grpc.CallOption) (*GetItemsResponse, error)
	GetContainer(ctx context.Context, in *GetContainerRequest, opts ...grpc.CallOption) (*GetContainerResponse, error)
	GrantItemsToUser(ctx context.Context, in *GrantInventoryItemsRequest, opts ...grpc.CallOption) (*UserInventory, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	GetAllUserItems(ctx context.Context, in *GetUserItemsRequest, opts ...grpc.CallOption) (*GetUserItemsResponse, error)
	BatchGetUserItems(ctx context.Context, in *BatchGetUserItemsRequest, opts ...grpc.CallOption) (*BatchGetUserItemsResponse, error)
	GetUserItem(ctx context.Context, in *GetUserItemRequest, opts ...grpc.CallOption) (*UserInventoryItem, error)
	GetUserItemCount(ctx context.Context, in *GetUserItemCountRequest, opts ...grpc.CallOption) (*GetUserItemCountResponse, error)
	DeleteUserItem(ctx context.Context, in *DeleteUserItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ConsumeItem(ctx context.Context, in *ConsumeItemRequest, opts ...grpc.CallOption) (*ConsumeItemResponse, error)
	GrantAndOpenContainer(ctx context.Context, in *GrantAndOpenContainerRequest, opts ...grpc.CallOption) (*GrantAndOpenContainerResponse, error)
	OpenContainer(ctx context.Context, in *OpenContainerRequest, opts ...grpc.CallOption) (*OpenContainerResponse, error)
	EvaluateContainer(ctx context.Context, in *EvaluateContainerRequest, opts ...grpc.CallOption) (*EvaluateContainerResponse, error)
	UnlockContainer(ctx context.Context, in *UnlockContainerRequest, opts ...grpc.CallOption) (*UnlockContainerResponse, error)
	UpdateUserItemMetadata(ctx context.Context, in *UpdateUserItemRequest, opts ...grpc.CallOption) (*UserInventoryItem, error)
	PurchaseItemWithVirtualCurrency(ctx context.Context, in *PurchaseItemRequest, opts ...grpc.CallOption) (*UserInventoryItem, error)
	// currency apis
	CreateNewCurrency(ctx context.Context, in *Currency, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateCurrency(ctx context.Context, in *UpdateCurrencyRequest, opts ...grpc.CallOption) (*Currency, error)
	DeleteCurrency(ctx context.Context, in *DeleteCurrencyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCurrencies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCurrenciesResponse, error)
	CreateCurrencyConversion(ctx context.Context, in *CurrencyConversion, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateCurrencyConversion(ctx context.Context, in *CurrencyConversion, opts ...grpc.CallOption) (*CurrencyConversion, error)
	DeleteCurrencyConversion(ctx context.Context, in *DeleteCurrencyConversionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCurrencyConversion(ctx context.Context, in *GetCurrencyConversionRequest, opts ...grpc.CallOption) (*CurrencyConversion, error)
	GetCurrencyConversions(ctx context.Context, in *GetCurrencyConversionsRequest, opts ...grpc.CallOption) (*GetCurrencyConversionsResponse, error)
	ListAllCurrencyConversions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAllCurrencyConversionsResponse, error)
	UpdateUserVirtualCurrency(ctx context.Context, in *UpdateUserVirtualCurrencyRequest, opts ...grpc.CallOption) (*UpdateUserVirtualCurrencyResponse, error)
	IncrementUserCurrency(ctx context.Context, in *IncrementUserCurrencyRequest, opts ...grpc.CallOption) (*IncrementUserCurrencyResponse, error)
	GetUserCurrencies(ctx context.Context, in *GetUserCurrenciesRequest, opts ...grpc.CallOption) (*GetUserCurrenciesResponse, error)
	GetTotalCurrency(ctx context.Context, in *GetTotalCurrencyRequest, opts ...grpc.CallOption) (*GetTotalCurrencyResponse, error)
	GetUserCurrencyStats(ctx context.Context, in *GetUserCurrencyStatsRequest, opts ...grpc.CallOption) (*GetUserCurrencyStatsResponse, error)
	ConvertUserCurrency(ctx context.Context, in *ConvertUserCurrencyRequest, opts ...grpc.CallOption) (*ConvertUserCurrencyResponse, error)
	// drop table apis
	CreateDropTable(ctx context.Context, in *CreateDropTableRequest, opts ...grpc.CallOption) (*CreateDropTableResponse, error)
	GetDropTable(ctx context.Context, in *GetDropTableRequest, opts ...grpc.CallOption) (*DropTable, error)
	DeleteDropTable(ctx context.Context, in *DeleteDropTableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAllDropTables(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllDropTablesResponse, error)
	UpdateDropTable(ctx context.Context, in *UpdateDropTableRequest, opts ...grpc.CallOption) (*UpdateDropTableResponse, error)
	GetDropTableContents(ctx context.Context, in *GetDropTableRequest, opts ...grpc.CallOption) (*DropTable, error)
	EvaluateDropTable(ctx context.Context, in *EvaluateDropTableRequest, opts ...grpc.CallOption) (*EvaluateDropTableResponse, error)
	GrantDropTable(ctx context.Context, in *GrantDropTableRequest, opts ...grpc.CallOption) (*GrantDropTableResponse, error)
	GetUserData(ctx context.Context, in *UserDataRequest, opts ...grpc.CallOption) (*UserDataResponse, error)
	DeleteUserData(ctx context.Context, in *UserDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RegisterQuestCallback(ctx context.Context, in *RegisterQuestCallbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeregisterQuestCallback(ctx context.Context, in *DeregisterQuestCallbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GrantRewards(ctx context.Context, in *GrantRewardsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ImportCatalog(ctx context.Context, in *ImportCatalogRequest, opts ...grpc.CallOption) (*ImportCatalogResponse, error)
	ExportSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SettingsImportExportData, error)
	ImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ValidateImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*SettingsImportExportData, error)
}

type inventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryServiceClient(cc grpc.ClientConnInterface) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) CreateCatalogItem(ctx context.Context, in *CatalogItem, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InventoryService_CreateCatalogItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetCatalogItems(ctx context.Context, in *GetCatalogItemsRequest, opts ...grpc.CallOption) (*GetCatalogItemsResponse, error) {
	out := new(GetCatalogItemsResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetCatalogItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ListAllCatalogItems(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListCatalogItemsResponse, error) {
	out := new(ListCatalogItemsResponse)
	err := c.cc.Invoke(ctx, InventoryService_ListAllCatalogItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateCatalogItem(ctx context.Context, in *CatalogItem, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InventoryService_UpdateCatalogItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteCatalogItem(ctx context.Context, in *DeleteCatalogItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InventoryService_DeleteCatalogItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateInventorySettings(ctx context.Context, in *InventorySettings, opts ...grpc.CallOption) (*InventorySettings, error) {
	out := new(InventorySettings)
	err := c.cc.Invoke(ctx, InventoryService_UpdateInventorySettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetInventorySettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InventorySettings, error) {
	out := new(InventorySettings)
	err := c.cc.Invoke(ctx, InventoryService_GetInventorySettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetItems(ctx context.Context, in *GetItemsRequest, opts ...grpc.CallOption) (*GetItemsResponse, error) {
	out := new(GetItemsResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetContainer(ctx context.Context, in *GetContainerRequest, opts ...grpc.CallOption) (*GetContainerResponse, error) {
	out := new(GetContainerResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetContainer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GrantItemsToUser(ctx context.Context, in *GrantInventoryItemsRequest, opts ...grpc.CallOption) (*UserInventory, error) {
	out := new(UserInventory)
	err := c.cc.Invoke(ctx, InventoryService_GrantItemsToUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetAllUserItems(ctx context.Context, in *GetUserItemsRequest, opts ...grpc.CallOption) (*GetUserItemsResponse, error) {
	out := new(GetUserItemsResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetAllUserItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) BatchGetUserItems(ctx context.Context, in *BatchGetUserItemsRequest, opts ...grpc.CallOption) (*BatchGetUserItemsResponse, error) {
	out := new(BatchGetUserItemsResponse)
	err := c.cc.Invoke(ctx, InventoryService_BatchGetUserItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetUserItem(ctx context.Context, in *GetUserItemRequest, opts ...grpc.CallOption) (*UserInventoryItem, error) {
	out := new(UserInventoryItem)
	err := c.cc.Invoke(ctx, InventoryService_GetUserItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetUserItemCount(ctx context.Context, in *GetUserItemCountRequest, opts ...grpc.CallOption) (*GetUserItemCountResponse, error) {
	out := new(GetUserItemCountResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetUserItemCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteUserItem(ctx context.Context, in *DeleteUserItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InventoryService_DeleteUserItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ConsumeItem(ctx context.Context, in *ConsumeItemRequest, opts ...grpc.CallOption) (*ConsumeItemResponse, error) {
	out := new(ConsumeItemResponse)
	err := c.cc.Invoke(ctx, InventoryService_ConsumeItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GrantAndOpenContainer(ctx context.Context, in *GrantAndOpenContainerRequest, opts ...grpc.CallOption) (*GrantAndOpenContainerResponse, error) {
	out := new(GrantAndOpenContainerResponse)
	err := c.cc.Invoke(ctx, InventoryService_GrantAndOpenContainer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) OpenContainer(ctx context.Context, in *OpenContainerRequest, opts ...grpc.CallOption) (*OpenContainerResponse, error) {
	out := new(OpenContainerResponse)
	err := c.cc.Invoke(ctx, InventoryService_OpenContainer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) EvaluateContainer(ctx context.Context, in *EvaluateContainerRequest, opts ...grpc.CallOption) (*EvaluateContainerResponse, error) {
	out := new(EvaluateContainerResponse)
	err := c.cc.Invoke(ctx, InventoryService_EvaluateContainer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UnlockContainer(ctx context.Context, in *UnlockContainerRequest, opts ...grpc.CallOption) (*UnlockContainerResponse, error) {
	out := new(UnlockContainerResponse)
	err := c.cc.Invoke(ctx, InventoryService_UnlockContainer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateUserItemMetadata(ctx context.Context, in *UpdateUserItemRequest, opts ...grpc.CallOption) (*UserInventoryItem, error) {
	out := new(UserInventoryItem)
	err := c.cc.Invoke(ctx, InventoryService_UpdateUserItemMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) PurchaseItemWithVirtualCurrency(ctx context.Context, in *PurchaseItemRequest, opts ...grpc.CallOption) (*UserInventoryItem, error) {
	out := new(UserInventoryItem)
	err := c.cc.Invoke(ctx, InventoryService_PurchaseItemWithVirtualCurrency_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateNewCurrency(ctx context.Context, in *Currency, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InventoryService_CreateNewCurrency_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateCurrency(ctx context.Context, in *UpdateCurrencyRequest, opts ...grpc.CallOption) (*Currency, error) {
	out := new(Currency)
	err := c.cc.Invoke(ctx, InventoryService_UpdateCurrency_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteCurrency(ctx context.Context, in *DeleteCurrencyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InventoryService_DeleteCurrency_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetCurrencies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCurrenciesResponse, error) {
	out := new(GetCurrenciesResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetCurrencies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateCurrencyConversion(ctx context.Context, in *CurrencyConversion, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InventoryService_CreateCurrencyConversion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateCurrencyConversion(ctx context.Context, in *CurrencyConversion, opts ...grpc.CallOption) (*CurrencyConversion, error) {
	out := new(CurrencyConversion)
	err := c.cc.Invoke(ctx, InventoryService_UpdateCurrencyConversion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteCurrencyConversion(ctx context.Context, in *DeleteCurrencyConversionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InventoryService_DeleteCurrencyConversion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetCurrencyConversion(ctx context.Context, in *GetCurrencyConversionRequest, opts ...grpc.CallOption) (*CurrencyConversion, error) {
	out := new(CurrencyConversion)
	err := c.cc.Invoke(ctx, InventoryService_GetCurrencyConversion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetCurrencyConversions(ctx context.Context, in *GetCurrencyConversionsRequest, opts ...grpc.CallOption) (*GetCurrencyConversionsResponse, error) {
	out := new(GetCurrencyConversionsResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetCurrencyConversions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ListAllCurrencyConversions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAllCurrencyConversionsResponse, error) {
	out := new(ListAllCurrencyConversionsResponse)
	err := c.cc.Invoke(ctx, InventoryService_ListAllCurrencyConversions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateUserVirtualCurrency(ctx context.Context, in *UpdateUserVirtualCurrencyRequest, opts ...grpc.CallOption) (*UpdateUserVirtualCurrencyResponse, error) {
	out := new(UpdateUserVirtualCurrencyResponse)
	err := c.cc.Invoke(ctx, InventoryService_UpdateUserVirtualCurrency_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) IncrementUserCurrency(ctx context.Context, in *IncrementUserCurrencyRequest, opts ...grpc.CallOption) (*IncrementUserCurrencyResponse, error) {
	out := new(IncrementUserCurrencyResponse)
	err := c.cc.Invoke(ctx, InventoryService_IncrementUserCurrency_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetUserCurrencies(ctx context.Context, in *GetUserCurrenciesRequest, opts ...grpc.CallOption) (*GetUserCurrenciesResponse, error) {
	out := new(GetUserCurrenciesResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetUserCurrencies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetTotalCurrency(ctx context.Context, in *GetTotalCurrencyRequest, opts ...grpc.CallOption) (*GetTotalCurrencyResponse, error) {
	out := new(GetTotalCurrencyResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetTotalCurrency_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetUserCurrencyStats(ctx context.Context, in *GetUserCurrencyStatsRequest, opts ...grpc.CallOption) (*GetUserCurrencyStatsResponse, error) {
	out := new(GetUserCurrencyStatsResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetUserCurrencyStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ConvertUserCurrency(ctx context.Context, in *ConvertUserCurrencyRequest, opts ...grpc.CallOption) (*ConvertUserCurrencyResponse, error) {
	out := new(ConvertUserCurrencyResponse)
	err := c.cc.Invoke(ctx, InventoryService_ConvertUserCurrency_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateDropTable(ctx context.Context, in *CreateDropTableRequest, opts ...grpc.CallOption) (*CreateDropTableResponse, error) {
	out := new(CreateDropTableResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateDropTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetDropTable(ctx context.Context, in *GetDropTableRequest, opts ...grpc.CallOption) (*DropTable, error) {
	out := new(DropTable)
	err := c.cc.Invoke(ctx, InventoryService_GetDropTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteDropTable(ctx context.Context, in *DeleteDropTableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InventoryService_DeleteDropTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetAllDropTables(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllDropTablesResponse, error) {
	out := new(GetAllDropTablesResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetAllDropTables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateDropTable(ctx context.Context, in *UpdateDropTableRequest, opts ...grpc.CallOption) (*UpdateDropTableResponse, error) {
	out := new(UpdateDropTableResponse)
	err := c.cc.Invoke(ctx, InventoryService_UpdateDropTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetDropTableContents(ctx context.Context, in *GetDropTableRequest, opts ...grpc.CallOption) (*DropTable, error) {
	out := new(DropTable)
	err := c.cc.Invoke(ctx, InventoryService_GetDropTableContents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) EvaluateDropTable(ctx context.Context, in *EvaluateDropTableRequest, opts ...grpc.CallOption) (*EvaluateDropTableResponse, error) {
	out := new(EvaluateDropTableResponse)
	err := c.cc.Invoke(ctx, InventoryService_EvaluateDropTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GrantDropTable(ctx context.Context, in *GrantDropTableRequest, opts ...grpc.CallOption) (*GrantDropTableResponse, error) {
	out := new(GrantDropTableResponse)
	err := c.cc.Invoke(ctx, InventoryService_GrantDropTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetUserData(ctx context.Context, in *UserDataRequest, opts ...grpc.CallOption) (*UserDataResponse, error) {
	out := new(UserDataResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetUserData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteUserData(ctx context.Context, in *UserDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InventoryService_DeleteUserData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) RegisterQuestCallback(ctx context.Context, in *RegisterQuestCallbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InventoryService_RegisterQuestCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeregisterQuestCallback(ctx context.Context, in *DeregisterQuestCallbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InventoryService_DeregisterQuestCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GrantRewards(ctx context.Context, in *GrantRewardsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InventoryService_GrantRewards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ImportCatalog(ctx context.Context, in *ImportCatalogRequest, opts ...grpc.CallOption) (*ImportCatalogResponse, error) {
	out := new(ImportCatalogResponse)
	err := c.cc.Invoke(ctx, InventoryService_ImportCatalog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ExportSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SettingsImportExportData, error) {
	out := new(SettingsImportExportData)
	err := c.cc.Invoke(ctx, InventoryService_ExportSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InventoryService_ImportSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ValidateImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*SettingsImportExportData, error) {
	out := new(SettingsImportExportData)
	err := c.cc.Invoke(ctx, InventoryService_ValidateImportSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServiceServer is the server API for InventoryService service.
// All implementations must embed UnimplementedInventoryServiceServer
// for forward compatibility
type InventoryServiceServer interface {
	// inventory apis
	CreateCatalogItem(context.Context, *CatalogItem) (*emptypb.Empty, error)
	GetCatalogItems(context.Context, *GetCatalogItemsRequest) (*GetCatalogItemsResponse, error)
	ListAllCatalogItems(context.Context, *emptypb.Empty) (*ListCatalogItemsResponse, error)
	UpdateCatalogItem(context.Context, *CatalogItem) (*emptypb.Empty, error)
	DeleteCatalogItem(context.Context, *DeleteCatalogItemRequest) (*emptypb.Empty, error)
	UpdateInventorySettings(context.Context, *InventorySettings) (*InventorySettings, error)
	GetInventorySettings(context.Context, *emptypb.Empty) (*InventorySettings, error)
	GetItems(context.Context, *GetItemsRequest) (*GetItemsResponse, error)
	GetContainer(context.Context, *GetContainerRequest) (*GetContainerResponse, error)
	GrantItemsToUser(context.Context, *GrantInventoryItemsRequest) (*UserInventory, error)
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	GetAllUserItems(context.Context, *GetUserItemsRequest) (*GetUserItemsResponse, error)
	BatchGetUserItems(context.Context, *BatchGetUserItemsRequest) (*BatchGetUserItemsResponse, error)
	GetUserItem(context.Context, *GetUserItemRequest) (*UserInventoryItem, error)
	GetUserItemCount(context.Context, *GetUserItemCountRequest) (*GetUserItemCountResponse, error)
	DeleteUserItem(context.Context, *DeleteUserItemRequest) (*emptypb.Empty, error)
	ConsumeItem(context.Context, *ConsumeItemRequest) (*ConsumeItemResponse, error)
	GrantAndOpenContainer(context.Context, *GrantAndOpenContainerRequest) (*GrantAndOpenContainerResponse, error)
	OpenContainer(context.Context, *OpenContainerRequest) (*OpenContainerResponse, error)
	EvaluateContainer(context.Context, *EvaluateContainerRequest) (*EvaluateContainerResponse, error)
	UnlockContainer(context.Context, *UnlockContainerRequest) (*UnlockContainerResponse, error)
	UpdateUserItemMetadata(context.Context, *UpdateUserItemRequest) (*UserInventoryItem, error)
	PurchaseItemWithVirtualCurrency(context.Context, *PurchaseItemRequest) (*UserInventoryItem, error)
	// currency apis
	CreateNewCurrency(context.Context, *Currency) (*emptypb.Empty, error)
	UpdateCurrency(context.Context, *UpdateCurrencyRequest) (*Currency, error)
	DeleteCurrency(context.Context, *DeleteCurrencyRequest) (*emptypb.Empty, error)
	GetCurrencies(context.Context, *emptypb.Empty) (*GetCurrenciesResponse, error)
	CreateCurrencyConversion(context.Context, *CurrencyConversion) (*emptypb.Empty, error)
	UpdateCurrencyConversion(context.Context, *CurrencyConversion) (*CurrencyConversion, error)
	DeleteCurrencyConversion(context.Context, *DeleteCurrencyConversionRequest) (*emptypb.Empty, error)
	GetCurrencyConversion(context.Context, *GetCurrencyConversionRequest) (*CurrencyConversion, error)
	GetCurrencyConversions(context.Context, *GetCurrencyConversionsRequest) (*GetCurrencyConversionsResponse, error)
	ListAllCurrencyConversions(context.Context, *emptypb.Empty) (*ListAllCurrencyConversionsResponse, error)
	UpdateUserVirtualCurrency(context.Context, *UpdateUserVirtualCurrencyRequest) (*UpdateUserVirtualCurrencyResponse, error)
	IncrementUserCurrency(context.Context, *IncrementUserCurrencyRequest) (*IncrementUserCurrencyResponse, error)
	GetUserCurrencies(context.Context, *GetUserCurrenciesRequest) (*GetUserCurrenciesResponse, error)
	GetTotalCurrency(context.Context, *GetTotalCurrencyRequest) (*GetTotalCurrencyResponse, error)
	GetUserCurrencyStats(context.Context, *GetUserCurrencyStatsRequest) (*GetUserCurrencyStatsResponse, error)
	ConvertUserCurrency(context.Context, *ConvertUserCurrencyRequest) (*ConvertUserCurrencyResponse, error)
	// drop table apis
	CreateDropTable(context.Context, *CreateDropTableRequest) (*CreateDropTableResponse, error)
	GetDropTable(context.Context, *GetDropTableRequest) (*DropTable, error)
	DeleteDropTable(context.Context, *DeleteDropTableRequest) (*emptypb.Empty, error)
	GetAllDropTables(context.Context, *emptypb.Empty) (*GetAllDropTablesResponse, error)
	UpdateDropTable(context.Context, *UpdateDropTableRequest) (*UpdateDropTableResponse, error)
	GetDropTableContents(context.Context, *GetDropTableRequest) (*DropTable, error)
	EvaluateDropTable(context.Context, *EvaluateDropTableRequest) (*EvaluateDropTableResponse, error)
	GrantDropTable(context.Context, *GrantDropTableRequest) (*GrantDropTableResponse, error)
	GetUserData(context.Context, *UserDataRequest) (*UserDataResponse, error)
	DeleteUserData(context.Context, *UserDataRequest) (*emptypb.Empty, error)
	RegisterQuestCallback(context.Context, *RegisterQuestCallbackRequest) (*emptypb.Empty, error)
	DeregisterQuestCallback(context.Context, *DeregisterQuestCallbackRequest) (*emptypb.Empty, error)
	GrantRewards(context.Context, *GrantRewardsRequest) (*emptypb.Empty, error)
	ImportCatalog(context.Context, *ImportCatalogRequest) (*ImportCatalogResponse, error)
	ExportSettings(context.Context, *emptypb.Empty) (*SettingsImportExportData, error)
	ImportSettings(context.Context, *SettingsImportExportData) (*emptypb.Empty, error)
	ValidateImportSettings(context.Context, *SettingsImportExportData) (*SettingsImportExportData, error)
	mustEmbedUnimplementedInventoryServiceServer()
}

// UnimplementedInventoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInventoryServiceServer struct {
}

func (UnimplementedInventoryServiceServer) CreateCatalogItem(context.Context, *CatalogItem) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCatalogItem not implemented")
}
func (UnimplementedInventoryServiceServer) GetCatalogItems(context.Context, *GetCatalogItemsRequest) (*GetCatalogItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCatalogItems not implemented")
}
func (UnimplementedInventoryServiceServer) ListAllCatalogItems(context.Context, *emptypb.Empty) (*ListCatalogItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllCatalogItems not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateCatalogItem(context.Context, *CatalogItem) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCatalogItem not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteCatalogItem(context.Context, *DeleteCatalogItemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCatalogItem not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateInventorySettings(context.Context, *InventorySettings) (*InventorySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInventorySettings not implemented")
}
func (UnimplementedInventoryServiceServer) GetInventorySettings(context.Context, *emptypb.Empty) (*InventorySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventorySettings not implemented")
}
func (UnimplementedInventoryServiceServer) GetItems(context.Context, *GetItemsRequest) (*GetItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItems not implemented")
}
func (UnimplementedInventoryServiceServer) GetContainer(context.Context, *GetContainerRequest) (*GetContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainer not implemented")
}
func (UnimplementedInventoryServiceServer) GrantItemsToUser(context.Context, *GrantInventoryItemsRequest) (*UserInventory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantItemsToUser not implemented")
}
func (UnimplementedInventoryServiceServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedInventoryServiceServer) GetAllUserItems(context.Context, *GetUserItemsRequest) (*GetUserItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserItems not implemented")
}
func (UnimplementedInventoryServiceServer) BatchGetUserItems(context.Context, *BatchGetUserItemsRequest) (*BatchGetUserItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetUserItems not implemented")
}
func (UnimplementedInventoryServiceServer) GetUserItem(context.Context, *GetUserItemRequest) (*UserInventoryItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserItem not implemented")
}
func (UnimplementedInventoryServiceServer) GetUserItemCount(context.Context, *GetUserItemCountRequest) (*GetUserItemCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserItemCount not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteUserItem(context.Context, *DeleteUserItemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserItem not implemented")
}
func (UnimplementedInventoryServiceServer) ConsumeItem(context.Context, *ConsumeItemRequest) (*ConsumeItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumeItem not implemented")
}
func (UnimplementedInventoryServiceServer) GrantAndOpenContainer(context.Context, *GrantAndOpenContainerRequest) (*GrantAndOpenContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantAndOpenContainer not implemented")
}
func (UnimplementedInventoryServiceServer) OpenContainer(context.Context, *OpenContainerRequest) (*OpenContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenContainer not implemented")
}
func (UnimplementedInventoryServiceServer) EvaluateContainer(context.Context, *EvaluateContainerRequest) (*EvaluateContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluateContainer not implemented")
}
func (UnimplementedInventoryServiceServer) UnlockContainer(context.Context, *UnlockContainerRequest) (*UnlockContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockContainer not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateUserItemMetadata(context.Context, *UpdateUserItemRequest) (*UserInventoryItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserItemMetadata not implemented")
}
func (UnimplementedInventoryServiceServer) PurchaseItemWithVirtualCurrency(context.Context, *PurchaseItemRequest) (*UserInventoryItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseItemWithVirtualCurrency not implemented")
}
func (UnimplementedInventoryServiceServer) CreateNewCurrency(context.Context, *Currency) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewCurrency not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateCurrency(context.Context, *UpdateCurrencyRequest) (*Currency, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCurrency not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteCurrency(context.Context, *DeleteCurrencyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCurrency not implemented")
}
func (UnimplementedInventoryServiceServer) GetCurrencies(context.Context, *emptypb.Empty) (*GetCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrencies not implemented")
}
func (UnimplementedInventoryServiceServer) CreateCurrencyConversion(context.Context, *CurrencyConversion) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCurrencyConversion not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateCurrencyConversion(context.Context, *CurrencyConversion) (*CurrencyConversion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCurrencyConversion not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteCurrencyConversion(context.Context, *DeleteCurrencyConversionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCurrencyConversion not implemented")
}
func (UnimplementedInventoryServiceServer) GetCurrencyConversion(context.Context, *GetCurrencyConversionRequest) (*CurrencyConversion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrencyConversion not implemented")
}
func (UnimplementedInventoryServiceServer) GetCurrencyConversions(context.Context, *GetCurrencyConversionsRequest) (*GetCurrencyConversionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrencyConversions not implemented")
}
func (UnimplementedInventoryServiceServer) ListAllCurrencyConversions(context.Context, *emptypb.Empty) (*ListAllCurrencyConversionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllCurrencyConversions not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateUserVirtualCurrency(context.Context, *UpdateUserVirtualCurrencyRequest) (*UpdateUserVirtualCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserVirtualCurrency not implemented")
}
func (UnimplementedInventoryServiceServer) IncrementUserCurrency(context.Context, *IncrementUserCurrencyRequest) (*IncrementUserCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementUserCurrency not implemented")
}
func (UnimplementedInventoryServiceServer) GetUserCurrencies(context.Context, *GetUserCurrenciesRequest) (*GetUserCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCurrencies not implemented")
}
func (UnimplementedInventoryServiceServer) GetTotalCurrency(context.Context, *GetTotalCurrencyRequest) (*GetTotalCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalCurrency not implemented")
}
func (UnimplementedInventoryServiceServer) GetUserCurrencyStats(context.Context, *GetUserCurrencyStatsRequest) (*GetUserCurrencyStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCurrencyStats not implemented")
}
func (UnimplementedInventoryServiceServer) ConvertUserCurrency(context.Context, *ConvertUserCurrencyRequest) (*ConvertUserCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertUserCurrency not implemented")
}
func (UnimplementedInventoryServiceServer) CreateDropTable(context.Context, *CreateDropTableRequest) (*CreateDropTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDropTable not implemented")
}
func (UnimplementedInventoryServiceServer) GetDropTable(context.Context, *GetDropTableRequest) (*DropTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDropTable not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteDropTable(context.Context, *DeleteDropTableRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDropTable not implemented")
}
func (UnimplementedInventoryServiceServer) GetAllDropTables(context.Context, *emptypb.Empty) (*GetAllDropTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDropTables not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateDropTable(context.Context, *UpdateDropTableRequest) (*UpdateDropTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDropTable not implemented")
}
func (UnimplementedInventoryServiceServer) GetDropTableContents(context.Context, *GetDropTableRequest) (*DropTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDropTableContents not implemented")
}
func (UnimplementedInventoryServiceServer) EvaluateDropTable(context.Context, *EvaluateDropTableRequest) (*EvaluateDropTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluateDropTable not implemented")
}
func (UnimplementedInventoryServiceServer) GrantDropTable(context.Context, *GrantDropTableRequest) (*GrantDropTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantDropTable not implemented")
}
func (UnimplementedInventoryServiceServer) GetUserData(context.Context, *UserDataRequest) (*UserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserData not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteUserData(context.Context, *UserDataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserData not implemented")
}
func (UnimplementedInventoryServiceServer) RegisterQuestCallback(context.Context, *RegisterQuestCallbackRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterQuestCallback not implemented")
}
func (UnimplementedInventoryServiceServer) DeregisterQuestCallback(context.Context, *DeregisterQuestCallbackRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterQuestCallback not implemented")
}
func (UnimplementedInventoryServiceServer) GrantRewards(context.Context, *GrantRewardsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantRewards not implemented")
}
func (UnimplementedInventoryServiceServer) ImportCatalog(context.Context, *ImportCatalogRequest) (*ImportCatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportCatalog not implemented")
}
func (UnimplementedInventoryServiceServer) ExportSettings(context.Context, *emptypb.Empty) (*SettingsImportExportData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportSettings not implemented")
}
func (UnimplementedInventoryServiceServer) ImportSettings(context.Context, *SettingsImportExportData) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportSettings not implemented")
}
func (UnimplementedInventoryServiceServer) ValidateImportSettings(context.Context, *SettingsImportExportData) (*SettingsImportExportData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateImportSettings not implemented")
}
func (UnimplementedInventoryServiceServer) mustEmbedUnimplementedInventoryServiceServer() {}

// UnsafeInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServiceServer will
// result in compilation errors.
type UnsafeInventoryServiceServer interface {
	mustEmbedUnimplementedInventoryServiceServer()
}

func RegisterInventoryServiceServer(s grpc.ServiceRegistrar, srv InventoryServiceServer) {
	s.RegisterService(&InventoryService_ServiceDesc, srv)
}

func _InventoryService_CreateCatalogItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CatalogItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateCatalogItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateCatalogItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateCatalogItem(ctx, req.(*CatalogItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetCatalogItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCatalogItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetCatalogItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetCatalogItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetCatalogItems(ctx, req.(*GetCatalogItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ListAllCatalogItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ListAllCatalogItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ListAllCatalogItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ListAllCatalogItems(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateCatalogItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CatalogItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateCatalogItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_UpdateCatalogItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateCatalogItem(ctx, req.(*CatalogItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteCatalogItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCatalogItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteCatalogItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_DeleteCatalogItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteCatalogItem(ctx, req.(*DeleteCatalogItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateInventorySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InventorySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateInventorySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_UpdateInventorySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateInventorySettings(ctx, req.(*InventorySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetInventorySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetInventorySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetInventorySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetInventorySettings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetItems(ctx, req.(*GetItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetContainer(ctx, req.(*GetContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GrantItemsToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantInventoryItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GrantItemsToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GrantItemsToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GrantItemsToUser(ctx, req.(*GrantInventoryItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetAllUserItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetAllUserItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetAllUserItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetAllUserItems(ctx, req.(*GetUserItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_BatchGetUserItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetUserItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).BatchGetUserItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_BatchGetUserItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).BatchGetUserItems(ctx, req.(*BatchGetUserItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetUserItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetUserItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetUserItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetUserItem(ctx, req.(*GetUserItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetUserItemCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserItemCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetUserItemCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetUserItemCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetUserItemCount(ctx, req.(*GetUserItemCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteUserItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteUserItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_DeleteUserItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteUserItem(ctx, req.(*DeleteUserItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ConsumeItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumeItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ConsumeItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ConsumeItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ConsumeItem(ctx, req.(*ConsumeItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GrantAndOpenContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantAndOpenContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GrantAndOpenContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GrantAndOpenContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GrantAndOpenContainer(ctx, req.(*GrantAndOpenContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_OpenContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).OpenContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_OpenContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).OpenContainer(ctx, req.(*OpenContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_EvaluateContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).EvaluateContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_EvaluateContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).EvaluateContainer(ctx, req.(*EvaluateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UnlockContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UnlockContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_UnlockContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UnlockContainer(ctx, req.(*UnlockContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateUserItemMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateUserItemMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_UpdateUserItemMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateUserItemMetadata(ctx, req.(*UpdateUserItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_PurchaseItemWithVirtualCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).PurchaseItemWithVirtualCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_PurchaseItemWithVirtualCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).PurchaseItemWithVirtualCurrency(ctx, req.(*PurchaseItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateNewCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Currency)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateNewCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateNewCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateNewCurrency(ctx, req.(*Currency))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_UpdateCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateCurrency(ctx, req.(*UpdateCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_DeleteCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteCurrency(ctx, req.(*DeleteCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetCurrencies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetCurrencies(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateCurrencyConversion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrencyConversion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateCurrencyConversion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateCurrencyConversion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateCurrencyConversion(ctx, req.(*CurrencyConversion))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateCurrencyConversion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrencyConversion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateCurrencyConversion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_UpdateCurrencyConversion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateCurrencyConversion(ctx, req.(*CurrencyConversion))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteCurrencyConversion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCurrencyConversionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteCurrencyConversion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_DeleteCurrencyConversion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteCurrencyConversion(ctx, req.(*DeleteCurrencyConversionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetCurrencyConversion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrencyConversionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetCurrencyConversion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetCurrencyConversion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetCurrencyConversion(ctx, req.(*GetCurrencyConversionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetCurrencyConversions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrencyConversionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetCurrencyConversions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetCurrencyConversions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetCurrencyConversions(ctx, req.(*GetCurrencyConversionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ListAllCurrencyConversions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ListAllCurrencyConversions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ListAllCurrencyConversions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ListAllCurrencyConversions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateUserVirtualCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserVirtualCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateUserVirtualCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_UpdateUserVirtualCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateUserVirtualCurrency(ctx, req.(*UpdateUserVirtualCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_IncrementUserCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementUserCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).IncrementUserCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_IncrementUserCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).IncrementUserCurrency(ctx, req.(*IncrementUserCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetUserCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetUserCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetUserCurrencies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetUserCurrencies(ctx, req.(*GetUserCurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetTotalCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetTotalCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetTotalCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetTotalCurrency(ctx, req.(*GetTotalCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetUserCurrencyStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCurrencyStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetUserCurrencyStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetUserCurrencyStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetUserCurrencyStats(ctx, req.(*GetUserCurrencyStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ConvertUserCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertUserCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ConvertUserCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ConvertUserCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ConvertUserCurrency(ctx, req.(*ConvertUserCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateDropTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDropTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateDropTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateDropTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateDropTable(ctx, req.(*CreateDropTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetDropTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDropTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetDropTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetDropTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetDropTable(ctx, req.(*GetDropTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteDropTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDropTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteDropTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_DeleteDropTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteDropTable(ctx, req.(*DeleteDropTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetAllDropTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetAllDropTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetAllDropTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetAllDropTables(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateDropTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDropTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateDropTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_UpdateDropTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateDropTable(ctx, req.(*UpdateDropTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetDropTableContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDropTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetDropTableContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetDropTableContents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetDropTableContents(ctx, req.(*GetDropTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_EvaluateDropTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateDropTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).EvaluateDropTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_EvaluateDropTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).EvaluateDropTable(ctx, req.(*EvaluateDropTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GrantDropTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantDropTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GrantDropTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GrantDropTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GrantDropTable(ctx, req.(*GrantDropTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetUserData(ctx, req.(*UserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_DeleteUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteUserData(ctx, req.(*UserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_RegisterQuestCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterQuestCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).RegisterQuestCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_RegisterQuestCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).RegisterQuestCallback(ctx, req.(*RegisterQuestCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeregisterQuestCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeregisterQuestCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeregisterQuestCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_DeregisterQuestCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeregisterQuestCallback(ctx, req.(*DeregisterQuestCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GrantRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GrantRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GrantRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GrantRewards(ctx, req.(*GrantRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ImportCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ImportCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ImportCatalog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ImportCatalog(ctx, req.(*ImportCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ExportSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ExportSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ExportSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ExportSettings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ImportSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsImportExportData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ImportSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ImportSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ImportSettings(ctx, req.(*SettingsImportExportData))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ValidateImportSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsImportExportData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ValidateImportSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ValidateImportSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ValidateImportSettings(ctx, req.(*SettingsImportExportData))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryService_ServiceDesc is the grpc.ServiceDesc for InventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCatalogItem",
			Handler:    _InventoryService_CreateCatalogItem_Handler,
		},
		{
			MethodName: "GetCatalogItems",
			Handler:    _InventoryService_GetCatalogItems_Handler,
		},
		{
			MethodName: "ListAllCatalogItems",
			Handler:    _InventoryService_ListAllCatalogItems_Handler,
		},
		{
			MethodName: "UpdateCatalogItem",
			Handler:    _InventoryService_UpdateCatalogItem_Handler,
		},
		{
			MethodName: "DeleteCatalogItem",
			Handler:    _InventoryService_DeleteCatalogItem_Handler,
		},
		{
			MethodName: "UpdateInventorySettings",
			Handler:    _InventoryService_UpdateInventorySettings_Handler,
		},
		{
			MethodName: "GetInventorySettings",
			Handler:    _InventoryService_GetInventorySettings_Handler,
		},
		{
			MethodName: "GetItems",
			Handler:    _InventoryService_GetItems_Handler,
		},
		{
			MethodName: "GetContainer",
			Handler:    _InventoryService_GetContainer_Handler,
		},
		{
			MethodName: "GrantItemsToUser",
			Handler:    _InventoryService_GrantItemsToUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _InventoryService_GetUsers_Handler,
		},
		{
			MethodName: "GetAllUserItems",
			Handler:    _InventoryService_GetAllUserItems_Handler,
		},
		{
			MethodName: "BatchGetUserItems",
			Handler:    _InventoryService_BatchGetUserItems_Handler,
		},
		{
			MethodName: "GetUserItem",
			Handler:    _InventoryService_GetUserItem_Handler,
		},
		{
			MethodName: "GetUserItemCount",
			Handler:    _InventoryService_GetUserItemCount_Handler,
		},
		{
			MethodName: "DeleteUserItem",
			Handler:    _InventoryService_DeleteUserItem_Handler,
		},
		{
			MethodName: "ConsumeItem",
			Handler:    _InventoryService_ConsumeItem_Handler,
		},
		{
			MethodName: "GrantAndOpenContainer",
			Handler:    _InventoryService_GrantAndOpenContainer_Handler,
		},
		{
			MethodName: "OpenContainer",
			Handler:    _InventoryService_OpenContainer_Handler,
		},
		{
			MethodName: "EvaluateContainer",
			Handler:    _InventoryService_EvaluateContainer_Handler,
		},
		{
			MethodName: "UnlockContainer",
			Handler:    _InventoryService_UnlockContainer_Handler,
		},
		{
			MethodName: "UpdateUserItemMetadata",
			Handler:    _InventoryService_UpdateUserItemMetadata_Handler,
		},
		{
			MethodName: "PurchaseItemWithVirtualCurrency",
			Handler:    _InventoryService_PurchaseItemWithVirtualCurrency_Handler,
		},
		{
			MethodName: "CreateNewCurrency",
			Handler:    _InventoryService_CreateNewCurrency_Handler,
		},
		{
			MethodName: "UpdateCurrency",
			Handler:    _InventoryService_UpdateCurrency_Handler,
		},
		{
			MethodName: "DeleteCurrency",
			Handler:    _InventoryService_DeleteCurrency_Handler,
		},
		{
			MethodName: "GetCurrencies",
			Handler:    _InventoryService_GetCurrencies_Handler,
		},
		{
			MethodName: "CreateCurrencyConversion",
			Handler:    _InventoryService_CreateCurrencyConversion_Handler,
		},
		{
			MethodName: "UpdateCurrencyConversion",
			Handler:    _InventoryService_UpdateCurrencyConversion_Handler,
		},
		{
			MethodName: "DeleteCurrencyConversion",
			Handler:    _InventoryService_DeleteCurrencyConversion_Handler,
		},
		{
			MethodName: "GetCurrencyConversion",
			Handler:    _InventoryService_GetCurrencyConversion_Handler,
		},
		{
			MethodName: "GetCurrencyConversions",
			Handler:    _InventoryService_GetCurrencyConversions_Handler,
		},
		{
			MethodName: "ListAllCurrencyConversions",
			Handler:    _InventoryService_ListAllCurrencyConversions_Handler,
		},
		{
			MethodName: "UpdateUserVirtualCurrency",
			Handler:    _InventoryService_UpdateUserVirtualCurrency_Handler,
		},
		{
			MethodName: "IncrementUserCurrency",
			Handler:    _InventoryService_IncrementUserCurrency_Handler,
		},
		{
			MethodName: "GetUserCurrencies",
			Handler:    _InventoryService_GetUserCurrencies_Handler,
		},
		{
			MethodName: "GetTotalCurrency",
			Handler:    _InventoryService_GetTotalCurrency_Handler,
		},
		{
			MethodName: "GetUserCurrencyStats",
			Handler:    _InventoryService_GetUserCurrencyStats_Handler,
		},
		{
			MethodName: "ConvertUserCurrency",
			Handler:    _InventoryService_ConvertUserCurrency_Handler,
		},
		{
			MethodName: "CreateDropTable",
			Handler:    _InventoryService_CreateDropTable_Handler,
		},
		{
			MethodName: "GetDropTable",
			Handler:    _InventoryService_GetDropTable_Handler,
		},
		{
			MethodName: "DeleteDropTable",
			Handler:    _InventoryService_DeleteDropTable_Handler,
		},
		{
			MethodName: "GetAllDropTables",
			Handler:    _InventoryService_GetAllDropTables_Handler,
		},
		{
			MethodName: "UpdateDropTable",
			Handler:    _InventoryService_UpdateDropTable_Handler,
		},
		{
			MethodName: "GetDropTableContents",
			Handler:    _InventoryService_GetDropTableContents_Handler,
		},
		{
			MethodName: "EvaluateDropTable",
			Handler:    _InventoryService_EvaluateDropTable_Handler,
		},
		{
			MethodName: "GrantDropTable",
			Handler:    _InventoryService_GrantDropTable_Handler,
		},
		{
			MethodName: "GetUserData",
			Handler:    _InventoryService_GetUserData_Handler,
		},
		{
			MethodName: "DeleteUserData",
			Handler:    _InventoryService_DeleteUserData_Handler,
		},
		{
			MethodName: "RegisterQuestCallback",
			Handler:    _InventoryService_RegisterQuestCallback_Handler,
		},
		{
			MethodName: "DeregisterQuestCallback",
			Handler:    _InventoryService_DeregisterQuestCallback_Handler,
		},
		{
			MethodName: "GrantRewards",
			Handler:    _InventoryService_GrantRewards_Handler,
		},
		{
			MethodName: "ImportCatalog",
			Handler:    _InventoryService_ImportCatalog_Handler,
		},
		{
			MethodName: "ExportSettings",
			Handler:    _InventoryService_ExportSettings_Handler,
		},
		{
			MethodName: "ImportSettings",
			Handler:    _InventoryService_ImportSettings_Handler,
		},
		{
			MethodName: "ValidateImportSettings",
			Handler:    _InventoryService_ValidateImportSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventory_services.proto",
}
