// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: inventory_services.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InventoryServiceClient is the client API for InventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryServiceClient interface {
	// inventory apis
	CreateCatalogItem(ctx context.Context, in *CatalogItem, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCatalogItems(ctx context.Context, in *GenericGetRequest, opts ...grpc.CallOption) (*GetCatalogItemsResponse, error)
	ListAllCatalogItems(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListCatalogItemsResponse, error)
	UpdateCatalogItem(ctx context.Context, in *CatalogItem, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteCatalogItem(ctx context.Context, in *DeleteCatalogItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GrantItemsToUser(ctx context.Context, in *GrantInventoryItemsRequest, opts ...grpc.CallOption) (*UserInventory, error)
	GetAllUserItems(ctx context.Context, in *GetUserItemsRequest, opts ...grpc.CallOption) (*GetUserItemsResponse, error)
	GetUserItem(ctx context.Context, in *GetUserItemRequest, opts ...grpc.CallOption) (*UserInventoryItem, error)
	GetUserItemCount(ctx context.Context, in *GetUserItemCountRequest, opts ...grpc.CallOption) (*GetUserItemCountResponse, error)
	DeleteUserItem(ctx context.Context, in *DeleteUserItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ConsumeItem(ctx context.Context, in *ConsumeItemRequest, opts ...grpc.CallOption) (*ConsumeItemResponse, error)
	UnlockContainer(ctx context.Context, in *UnlockContainerRequest, opts ...grpc.CallOption) (*UnlockContainerResponse, error)
	UpdateUserItemMetadata(ctx context.Context, in *UpdateUserItemRequest, opts ...grpc.CallOption) (*UserInventoryItem, error)
	PurchaseItemWithVirtualCurrency(ctx context.Context, in *PurchaseItemRequest, opts ...grpc.CallOption) (*UserInventoryItem, error)
	// currency apis
	CreateNewCurrency(ctx context.Context, in *Currency, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateCurrency(ctx context.Context, in *UpdateCurrencyRequest, opts ...grpc.CallOption) (*Currency, error)
	DeleteCurrency(ctx context.Context, in *DeleteCurrencyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCurrencies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCurrenciesResponse, error)
	CreateCurrencyConversion(ctx context.Context, in *CurrencyConversion, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateCurrencyConversion(ctx context.Context, in *CurrencyConversion, opts ...grpc.CallOption) (*CurrencyConversion, error)
	DeleteCurrencyConversion(ctx context.Context, in *DeleteCurrencyConversionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCurrencyConversion(ctx context.Context, in *GetCurrencyConversionRequest, opts ...grpc.CallOption) (*CurrencyConversion, error)
	ListAllCurrencyConversions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAllCurrencyConversionsResponse, error)
	UpdateUserVirtualCurrency(ctx context.Context, in *UpdateUserVirtualCurrencyRequest, opts ...grpc.CallOption) (*UpdateUserVirtualCurrencyResponse, error)
	GetUserCurrencies(ctx context.Context, in *GetUserCurrenciesRequest, opts ...grpc.CallOption) (*GetUserCurrenciesResponse, error)
	// drop table apis
	CreateDropTable(ctx context.Context, in *DropTableRequest, opts ...grpc.CallOption) (*DropTable, error)
	GetDropTable(ctx context.Context, in *GetDropTableRequest, opts ...grpc.CallOption) (*DropTable, error)
	DeleteDropTable(ctx context.Context, in *GetDropTableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListDropTables(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListDropTablesResponse, error)
	GetAllDropTables(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllDropTablesResponse, error)
	UpdateDropTable(ctx context.Context, in *DropTableRequest, opts ...grpc.CallOption) (*DropTable, error)
	EvaluateDropTable(ctx context.Context, in *GetDropTableRequest, opts ...grpc.CallOption) (*EvaluateDropTableResponse, error)
	EvaluateAndGrantDropTable(ctx context.Context, in *EvaluateAndGrantDropTableRequest, opts ...grpc.CallOption) (*UserInventoryItem, error)
	GetUserData(ctx context.Context, in *UserDataRequest, opts ...grpc.CallOption) (*UserDataResponse, error)
	DeleteUserData(ctx context.Context, in *UserDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RegisterQuestCallback(ctx context.Context, in *RegisterQuestCallbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeregisterQuestCallback(ctx context.Context, in *DeregisterQuestCallbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ImportCatalog(ctx context.Context, in *ImportCatalogRequest, opts ...grpc.CallOption) (*ImportCatalogResponse, error)
	ExportSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SettingsImportExportData, error)
	ImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type inventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryServiceClient(cc grpc.ClientConnInterface) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) CreateCatalogItem(ctx context.Context, in *CatalogItem, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/CreateCatalogItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetCatalogItems(ctx context.Context, in *GenericGetRequest, opts ...grpc.CallOption) (*GetCatalogItemsResponse, error) {
	out := new(GetCatalogItemsResponse)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/GetCatalogItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ListAllCatalogItems(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListCatalogItemsResponse, error) {
	out := new(ListCatalogItemsResponse)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/ListAllCatalogItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateCatalogItem(ctx context.Context, in *CatalogItem, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/UpdateCatalogItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteCatalogItem(ctx context.Context, in *DeleteCatalogItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/DeleteCatalogItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GrantItemsToUser(ctx context.Context, in *GrantInventoryItemsRequest, opts ...grpc.CallOption) (*UserInventory, error) {
	out := new(UserInventory)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/GrantItemsToUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetAllUserItems(ctx context.Context, in *GetUserItemsRequest, opts ...grpc.CallOption) (*GetUserItemsResponse, error) {
	out := new(GetUserItemsResponse)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/GetAllUserItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetUserItem(ctx context.Context, in *GetUserItemRequest, opts ...grpc.CallOption) (*UserInventoryItem, error) {
	out := new(UserInventoryItem)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/GetUserItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetUserItemCount(ctx context.Context, in *GetUserItemCountRequest, opts ...grpc.CallOption) (*GetUserItemCountResponse, error) {
	out := new(GetUserItemCountResponse)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/GetUserItemCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteUserItem(ctx context.Context, in *DeleteUserItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/DeleteUserItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ConsumeItem(ctx context.Context, in *ConsumeItemRequest, opts ...grpc.CallOption) (*ConsumeItemResponse, error) {
	out := new(ConsumeItemResponse)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/ConsumeItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UnlockContainer(ctx context.Context, in *UnlockContainerRequest, opts ...grpc.CallOption) (*UnlockContainerResponse, error) {
	out := new(UnlockContainerResponse)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/UnlockContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateUserItemMetadata(ctx context.Context, in *UpdateUserItemRequest, opts ...grpc.CallOption) (*UserInventoryItem, error) {
	out := new(UserInventoryItem)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/UpdateUserItemMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) PurchaseItemWithVirtualCurrency(ctx context.Context, in *PurchaseItemRequest, opts ...grpc.CallOption) (*UserInventoryItem, error) {
	out := new(UserInventoryItem)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/PurchaseItemWithVirtualCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateNewCurrency(ctx context.Context, in *Currency, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/CreateNewCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateCurrency(ctx context.Context, in *UpdateCurrencyRequest, opts ...grpc.CallOption) (*Currency, error) {
	out := new(Currency)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/UpdateCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteCurrency(ctx context.Context, in *DeleteCurrencyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/DeleteCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetCurrencies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCurrenciesResponse, error) {
	out := new(GetCurrenciesResponse)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/GetCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateCurrencyConversion(ctx context.Context, in *CurrencyConversion, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/CreateCurrencyConversion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateCurrencyConversion(ctx context.Context, in *CurrencyConversion, opts ...grpc.CallOption) (*CurrencyConversion, error) {
	out := new(CurrencyConversion)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/UpdateCurrencyConversion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteCurrencyConversion(ctx context.Context, in *DeleteCurrencyConversionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/DeleteCurrencyConversion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetCurrencyConversion(ctx context.Context, in *GetCurrencyConversionRequest, opts ...grpc.CallOption) (*CurrencyConversion, error) {
	out := new(CurrencyConversion)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/GetCurrencyConversion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ListAllCurrencyConversions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAllCurrencyConversionsResponse, error) {
	out := new(ListAllCurrencyConversionsResponse)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/ListAllCurrencyConversions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateUserVirtualCurrency(ctx context.Context, in *UpdateUserVirtualCurrencyRequest, opts ...grpc.CallOption) (*UpdateUserVirtualCurrencyResponse, error) {
	out := new(UpdateUserVirtualCurrencyResponse)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/UpdateUserVirtualCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetUserCurrencies(ctx context.Context, in *GetUserCurrenciesRequest, opts ...grpc.CallOption) (*GetUserCurrenciesResponse, error) {
	out := new(GetUserCurrenciesResponse)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/GetUserCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateDropTable(ctx context.Context, in *DropTableRequest, opts ...grpc.CallOption) (*DropTable, error) {
	out := new(DropTable)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/CreateDropTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetDropTable(ctx context.Context, in *GetDropTableRequest, opts ...grpc.CallOption) (*DropTable, error) {
	out := new(DropTable)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/GetDropTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteDropTable(ctx context.Context, in *GetDropTableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/DeleteDropTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ListDropTables(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListDropTablesResponse, error) {
	out := new(ListDropTablesResponse)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/ListDropTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetAllDropTables(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllDropTablesResponse, error) {
	out := new(GetAllDropTablesResponse)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/GetAllDropTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateDropTable(ctx context.Context, in *DropTableRequest, opts ...grpc.CallOption) (*DropTable, error) {
	out := new(DropTable)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/UpdateDropTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) EvaluateDropTable(ctx context.Context, in *GetDropTableRequest, opts ...grpc.CallOption) (*EvaluateDropTableResponse, error) {
	out := new(EvaluateDropTableResponse)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/EvaluateDropTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) EvaluateAndGrantDropTable(ctx context.Context, in *EvaluateAndGrantDropTableRequest, opts ...grpc.CallOption) (*UserInventoryItem, error) {
	out := new(UserInventoryItem)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/EvaluateAndGrantDropTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetUserData(ctx context.Context, in *UserDataRequest, opts ...grpc.CallOption) (*UserDataResponse, error) {
	out := new(UserDataResponse)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/GetUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteUserData(ctx context.Context, in *UserDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/DeleteUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) RegisterQuestCallback(ctx context.Context, in *RegisterQuestCallbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/RegisterQuestCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeregisterQuestCallback(ctx context.Context, in *DeregisterQuestCallbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/DeregisterQuestCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ImportCatalog(ctx context.Context, in *ImportCatalogRequest, opts ...grpc.CallOption) (*ImportCatalogResponse, error) {
	out := new(ImportCatalogResponse)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/ImportCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ExportSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SettingsImportExportData, error) {
	out := new(SettingsImportExportData)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/ExportSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/inventory.InventoryService/ImportSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServiceServer is the server API for InventoryService service.
// All implementations must embed UnimplementedInventoryServiceServer
// for forward compatibility
type InventoryServiceServer interface {
	// inventory apis
	CreateCatalogItem(context.Context, *CatalogItem) (*emptypb.Empty, error)
	GetCatalogItems(context.Context, *GenericGetRequest) (*GetCatalogItemsResponse, error)
	ListAllCatalogItems(context.Context, *emptypb.Empty) (*ListCatalogItemsResponse, error)
	UpdateCatalogItem(context.Context, *CatalogItem) (*emptypb.Empty, error)
	DeleteCatalogItem(context.Context, *DeleteCatalogItemRequest) (*emptypb.Empty, error)
	GrantItemsToUser(context.Context, *GrantInventoryItemsRequest) (*UserInventory, error)
	GetAllUserItems(context.Context, *GetUserItemsRequest) (*GetUserItemsResponse, error)
	GetUserItem(context.Context, *GetUserItemRequest) (*UserInventoryItem, error)
	GetUserItemCount(context.Context, *GetUserItemCountRequest) (*GetUserItemCountResponse, error)
	DeleteUserItem(context.Context, *DeleteUserItemRequest) (*emptypb.Empty, error)
	ConsumeItem(context.Context, *ConsumeItemRequest) (*ConsumeItemResponse, error)
	UnlockContainer(context.Context, *UnlockContainerRequest) (*UnlockContainerResponse, error)
	UpdateUserItemMetadata(context.Context, *UpdateUserItemRequest) (*UserInventoryItem, error)
	PurchaseItemWithVirtualCurrency(context.Context, *PurchaseItemRequest) (*UserInventoryItem, error)
	// currency apis
	CreateNewCurrency(context.Context, *Currency) (*emptypb.Empty, error)
	UpdateCurrency(context.Context, *UpdateCurrencyRequest) (*Currency, error)
	DeleteCurrency(context.Context, *DeleteCurrencyRequest) (*emptypb.Empty, error)
	GetCurrencies(context.Context, *emptypb.Empty) (*GetCurrenciesResponse, error)
	CreateCurrencyConversion(context.Context, *CurrencyConversion) (*emptypb.Empty, error)
	UpdateCurrencyConversion(context.Context, *CurrencyConversion) (*CurrencyConversion, error)
	DeleteCurrencyConversion(context.Context, *DeleteCurrencyConversionRequest) (*emptypb.Empty, error)
	GetCurrencyConversion(context.Context, *GetCurrencyConversionRequest) (*CurrencyConversion, error)
	ListAllCurrencyConversions(context.Context, *emptypb.Empty) (*ListAllCurrencyConversionsResponse, error)
	UpdateUserVirtualCurrency(context.Context, *UpdateUserVirtualCurrencyRequest) (*UpdateUserVirtualCurrencyResponse, error)
	GetUserCurrencies(context.Context, *GetUserCurrenciesRequest) (*GetUserCurrenciesResponse, error)
	// drop table apis
	CreateDropTable(context.Context, *DropTableRequest) (*DropTable, error)
	GetDropTable(context.Context, *GetDropTableRequest) (*DropTable, error)
	DeleteDropTable(context.Context, *GetDropTableRequest) (*emptypb.Empty, error)
	ListDropTables(context.Context, *emptypb.Empty) (*ListDropTablesResponse, error)
	GetAllDropTables(context.Context, *emptypb.Empty) (*GetAllDropTablesResponse, error)
	UpdateDropTable(context.Context, *DropTableRequest) (*DropTable, error)
	EvaluateDropTable(context.Context, *GetDropTableRequest) (*EvaluateDropTableResponse, error)
	EvaluateAndGrantDropTable(context.Context, *EvaluateAndGrantDropTableRequest) (*UserInventoryItem, error)
	GetUserData(context.Context, *UserDataRequest) (*UserDataResponse, error)
	DeleteUserData(context.Context, *UserDataRequest) (*emptypb.Empty, error)
	RegisterQuestCallback(context.Context, *RegisterQuestCallbackRequest) (*emptypb.Empty, error)
	DeregisterQuestCallback(context.Context, *DeregisterQuestCallbackRequest) (*emptypb.Empty, error)
	ImportCatalog(context.Context, *ImportCatalogRequest) (*ImportCatalogResponse, error)
	ExportSettings(context.Context, *emptypb.Empty) (*SettingsImportExportData, error)
	ImportSettings(context.Context, *SettingsImportExportData) (*emptypb.Empty, error)
	mustEmbedUnimplementedInventoryServiceServer()
}

// UnimplementedInventoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInventoryServiceServer struct {
}

func (UnimplementedInventoryServiceServer) CreateCatalogItem(context.Context, *CatalogItem) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCatalogItem not implemented")
}
func (UnimplementedInventoryServiceServer) GetCatalogItems(context.Context, *GenericGetRequest) (*GetCatalogItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCatalogItems not implemented")
}
func (UnimplementedInventoryServiceServer) ListAllCatalogItems(context.Context, *emptypb.Empty) (*ListCatalogItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllCatalogItems not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateCatalogItem(context.Context, *CatalogItem) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCatalogItem not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteCatalogItem(context.Context, *DeleteCatalogItemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCatalogItem not implemented")
}
func (UnimplementedInventoryServiceServer) GrantItemsToUser(context.Context, *GrantInventoryItemsRequest) (*UserInventory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantItemsToUser not implemented")
}
func (UnimplementedInventoryServiceServer) GetAllUserItems(context.Context, *GetUserItemsRequest) (*GetUserItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserItems not implemented")
}
func (UnimplementedInventoryServiceServer) GetUserItem(context.Context, *GetUserItemRequest) (*UserInventoryItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserItem not implemented")
}
func (UnimplementedInventoryServiceServer) GetUserItemCount(context.Context, *GetUserItemCountRequest) (*GetUserItemCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserItemCount not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteUserItem(context.Context, *DeleteUserItemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserItem not implemented")
}
func (UnimplementedInventoryServiceServer) ConsumeItem(context.Context, *ConsumeItemRequest) (*ConsumeItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumeItem not implemented")
}
func (UnimplementedInventoryServiceServer) UnlockContainer(context.Context, *UnlockContainerRequest) (*UnlockContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockContainer not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateUserItemMetadata(context.Context, *UpdateUserItemRequest) (*UserInventoryItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserItemMetadata not implemented")
}
func (UnimplementedInventoryServiceServer) PurchaseItemWithVirtualCurrency(context.Context, *PurchaseItemRequest) (*UserInventoryItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseItemWithVirtualCurrency not implemented")
}
func (UnimplementedInventoryServiceServer) CreateNewCurrency(context.Context, *Currency) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewCurrency not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateCurrency(context.Context, *UpdateCurrencyRequest) (*Currency, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCurrency not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteCurrency(context.Context, *DeleteCurrencyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCurrency not implemented")
}
func (UnimplementedInventoryServiceServer) GetCurrencies(context.Context, *emptypb.Empty) (*GetCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrencies not implemented")
}
func (UnimplementedInventoryServiceServer) CreateCurrencyConversion(context.Context, *CurrencyConversion) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCurrencyConversion not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateCurrencyConversion(context.Context, *CurrencyConversion) (*CurrencyConversion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCurrencyConversion not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteCurrencyConversion(context.Context, *DeleteCurrencyConversionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCurrencyConversion not implemented")
}
func (UnimplementedInventoryServiceServer) GetCurrencyConversion(context.Context, *GetCurrencyConversionRequest) (*CurrencyConversion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrencyConversion not implemented")
}
func (UnimplementedInventoryServiceServer) ListAllCurrencyConversions(context.Context, *emptypb.Empty) (*ListAllCurrencyConversionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllCurrencyConversions not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateUserVirtualCurrency(context.Context, *UpdateUserVirtualCurrencyRequest) (*UpdateUserVirtualCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserVirtualCurrency not implemented")
}
func (UnimplementedInventoryServiceServer) GetUserCurrencies(context.Context, *GetUserCurrenciesRequest) (*GetUserCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCurrencies not implemented")
}
func (UnimplementedInventoryServiceServer) CreateDropTable(context.Context, *DropTableRequest) (*DropTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDropTable not implemented")
}
func (UnimplementedInventoryServiceServer) GetDropTable(context.Context, *GetDropTableRequest) (*DropTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDropTable not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteDropTable(context.Context, *GetDropTableRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDropTable not implemented")
}
func (UnimplementedInventoryServiceServer) ListDropTables(context.Context, *emptypb.Empty) (*ListDropTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDropTables not implemented")
}
func (UnimplementedInventoryServiceServer) GetAllDropTables(context.Context, *emptypb.Empty) (*GetAllDropTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDropTables not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateDropTable(context.Context, *DropTableRequest) (*DropTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDropTable not implemented")
}
func (UnimplementedInventoryServiceServer) EvaluateDropTable(context.Context, *GetDropTableRequest) (*EvaluateDropTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluateDropTable not implemented")
}
func (UnimplementedInventoryServiceServer) EvaluateAndGrantDropTable(context.Context, *EvaluateAndGrantDropTableRequest) (*UserInventoryItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluateAndGrantDropTable not implemented")
}
func (UnimplementedInventoryServiceServer) GetUserData(context.Context, *UserDataRequest) (*UserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserData not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteUserData(context.Context, *UserDataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserData not implemented")
}
func (UnimplementedInventoryServiceServer) RegisterQuestCallback(context.Context, *RegisterQuestCallbackRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterQuestCallback not implemented")
}
func (UnimplementedInventoryServiceServer) DeregisterQuestCallback(context.Context, *DeregisterQuestCallbackRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterQuestCallback not implemented")
}
func (UnimplementedInventoryServiceServer) ImportCatalog(context.Context, *ImportCatalogRequest) (*ImportCatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportCatalog not implemented")
}
func (UnimplementedInventoryServiceServer) ExportSettings(context.Context, *emptypb.Empty) (*SettingsImportExportData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportSettings not implemented")
}
func (UnimplementedInventoryServiceServer) ImportSettings(context.Context, *SettingsImportExportData) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportSettings not implemented")
}
func (UnimplementedInventoryServiceServer) mustEmbedUnimplementedInventoryServiceServer() {}

// UnsafeInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServiceServer will
// result in compilation errors.
type UnsafeInventoryServiceServer interface {
	mustEmbedUnimplementedInventoryServiceServer()
}

func RegisterInventoryServiceServer(s grpc.ServiceRegistrar, srv InventoryServiceServer) {
	s.RegisterService(&InventoryService_ServiceDesc, srv)
}

func _InventoryService_CreateCatalogItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CatalogItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateCatalogItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/CreateCatalogItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateCatalogItem(ctx, req.(*CatalogItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetCatalogItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetCatalogItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/GetCatalogItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetCatalogItems(ctx, req.(*GenericGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ListAllCatalogItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ListAllCatalogItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/ListAllCatalogItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ListAllCatalogItems(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateCatalogItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CatalogItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateCatalogItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/UpdateCatalogItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateCatalogItem(ctx, req.(*CatalogItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteCatalogItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCatalogItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteCatalogItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/DeleteCatalogItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteCatalogItem(ctx, req.(*DeleteCatalogItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GrantItemsToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantInventoryItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GrantItemsToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/GrantItemsToUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GrantItemsToUser(ctx, req.(*GrantInventoryItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetAllUserItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetAllUserItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/GetAllUserItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetAllUserItems(ctx, req.(*GetUserItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetUserItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetUserItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/GetUserItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetUserItem(ctx, req.(*GetUserItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetUserItemCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserItemCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetUserItemCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/GetUserItemCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetUserItemCount(ctx, req.(*GetUserItemCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteUserItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteUserItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/DeleteUserItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteUserItem(ctx, req.(*DeleteUserItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ConsumeItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumeItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ConsumeItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/ConsumeItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ConsumeItem(ctx, req.(*ConsumeItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UnlockContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UnlockContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/UnlockContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UnlockContainer(ctx, req.(*UnlockContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateUserItemMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateUserItemMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/UpdateUserItemMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateUserItemMetadata(ctx, req.(*UpdateUserItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_PurchaseItemWithVirtualCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).PurchaseItemWithVirtualCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/PurchaseItemWithVirtualCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).PurchaseItemWithVirtualCurrency(ctx, req.(*PurchaseItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateNewCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Currency)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateNewCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/CreateNewCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateNewCurrency(ctx, req.(*Currency))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/UpdateCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateCurrency(ctx, req.(*UpdateCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/DeleteCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteCurrency(ctx, req.(*DeleteCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/GetCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetCurrencies(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateCurrencyConversion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrencyConversion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateCurrencyConversion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/CreateCurrencyConversion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateCurrencyConversion(ctx, req.(*CurrencyConversion))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateCurrencyConversion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrencyConversion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateCurrencyConversion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/UpdateCurrencyConversion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateCurrencyConversion(ctx, req.(*CurrencyConversion))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteCurrencyConversion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCurrencyConversionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteCurrencyConversion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/DeleteCurrencyConversion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteCurrencyConversion(ctx, req.(*DeleteCurrencyConversionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetCurrencyConversion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrencyConversionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetCurrencyConversion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/GetCurrencyConversion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetCurrencyConversion(ctx, req.(*GetCurrencyConversionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ListAllCurrencyConversions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ListAllCurrencyConversions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/ListAllCurrencyConversions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ListAllCurrencyConversions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateUserVirtualCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserVirtualCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateUserVirtualCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/UpdateUserVirtualCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateUserVirtualCurrency(ctx, req.(*UpdateUserVirtualCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetUserCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetUserCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/GetUserCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetUserCurrencies(ctx, req.(*GetUserCurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateDropTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateDropTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/CreateDropTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateDropTable(ctx, req.(*DropTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetDropTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDropTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetDropTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/GetDropTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetDropTable(ctx, req.(*GetDropTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteDropTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDropTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteDropTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/DeleteDropTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteDropTable(ctx, req.(*GetDropTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ListDropTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ListDropTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/ListDropTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ListDropTables(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetAllDropTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetAllDropTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/GetAllDropTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetAllDropTables(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateDropTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateDropTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/UpdateDropTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateDropTable(ctx, req.(*DropTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_EvaluateDropTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDropTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).EvaluateDropTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/EvaluateDropTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).EvaluateDropTable(ctx, req.(*GetDropTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_EvaluateAndGrantDropTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateAndGrantDropTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).EvaluateAndGrantDropTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/EvaluateAndGrantDropTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).EvaluateAndGrantDropTable(ctx, req.(*EvaluateAndGrantDropTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/GetUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetUserData(ctx, req.(*UserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/DeleteUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteUserData(ctx, req.(*UserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_RegisterQuestCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterQuestCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).RegisterQuestCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/RegisterQuestCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).RegisterQuestCallback(ctx, req.(*RegisterQuestCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeregisterQuestCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeregisterQuestCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeregisterQuestCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/DeregisterQuestCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeregisterQuestCallback(ctx, req.(*DeregisterQuestCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ImportCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ImportCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/ImportCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ImportCatalog(ctx, req.(*ImportCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ExportSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ExportSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/ExportSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ExportSettings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ImportSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsImportExportData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ImportSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.InventoryService/ImportSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ImportSettings(ctx, req.(*SettingsImportExportData))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryService_ServiceDesc is the grpc.ServiceDesc for InventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCatalogItem",
			Handler:    _InventoryService_CreateCatalogItem_Handler,
		},
		{
			MethodName: "GetCatalogItems",
			Handler:    _InventoryService_GetCatalogItems_Handler,
		},
		{
			MethodName: "ListAllCatalogItems",
			Handler:    _InventoryService_ListAllCatalogItems_Handler,
		},
		{
			MethodName: "UpdateCatalogItem",
			Handler:    _InventoryService_UpdateCatalogItem_Handler,
		},
		{
			MethodName: "DeleteCatalogItem",
			Handler:    _InventoryService_DeleteCatalogItem_Handler,
		},
		{
			MethodName: "GrantItemsToUser",
			Handler:    _InventoryService_GrantItemsToUser_Handler,
		},
		{
			MethodName: "GetAllUserItems",
			Handler:    _InventoryService_GetAllUserItems_Handler,
		},
		{
			MethodName: "GetUserItem",
			Handler:    _InventoryService_GetUserItem_Handler,
		},
		{
			MethodName: "GetUserItemCount",
			Handler:    _InventoryService_GetUserItemCount_Handler,
		},
		{
			MethodName: "DeleteUserItem",
			Handler:    _InventoryService_DeleteUserItem_Handler,
		},
		{
			MethodName: "ConsumeItem",
			Handler:    _InventoryService_ConsumeItem_Handler,
		},
		{
			MethodName: "UnlockContainer",
			Handler:    _InventoryService_UnlockContainer_Handler,
		},
		{
			MethodName: "UpdateUserItemMetadata",
			Handler:    _InventoryService_UpdateUserItemMetadata_Handler,
		},
		{
			MethodName: "PurchaseItemWithVirtualCurrency",
			Handler:    _InventoryService_PurchaseItemWithVirtualCurrency_Handler,
		},
		{
			MethodName: "CreateNewCurrency",
			Handler:    _InventoryService_CreateNewCurrency_Handler,
		},
		{
			MethodName: "UpdateCurrency",
			Handler:    _InventoryService_UpdateCurrency_Handler,
		},
		{
			MethodName: "DeleteCurrency",
			Handler:    _InventoryService_DeleteCurrency_Handler,
		},
		{
			MethodName: "GetCurrencies",
			Handler:    _InventoryService_GetCurrencies_Handler,
		},
		{
			MethodName: "CreateCurrencyConversion",
			Handler:    _InventoryService_CreateCurrencyConversion_Handler,
		},
		{
			MethodName: "UpdateCurrencyConversion",
			Handler:    _InventoryService_UpdateCurrencyConversion_Handler,
		},
		{
			MethodName: "DeleteCurrencyConversion",
			Handler:    _InventoryService_DeleteCurrencyConversion_Handler,
		},
		{
			MethodName: "GetCurrencyConversion",
			Handler:    _InventoryService_GetCurrencyConversion_Handler,
		},
		{
			MethodName: "ListAllCurrencyConversions",
			Handler:    _InventoryService_ListAllCurrencyConversions_Handler,
		},
		{
			MethodName: "UpdateUserVirtualCurrency",
			Handler:    _InventoryService_UpdateUserVirtualCurrency_Handler,
		},
		{
			MethodName: "GetUserCurrencies",
			Handler:    _InventoryService_GetUserCurrencies_Handler,
		},
		{
			MethodName: "CreateDropTable",
			Handler:    _InventoryService_CreateDropTable_Handler,
		},
		{
			MethodName: "GetDropTable",
			Handler:    _InventoryService_GetDropTable_Handler,
		},
		{
			MethodName: "DeleteDropTable",
			Handler:    _InventoryService_DeleteDropTable_Handler,
		},
		{
			MethodName: "ListDropTables",
			Handler:    _InventoryService_ListDropTables_Handler,
		},
		{
			MethodName: "GetAllDropTables",
			Handler:    _InventoryService_GetAllDropTables_Handler,
		},
		{
			MethodName: "UpdateDropTable",
			Handler:    _InventoryService_UpdateDropTable_Handler,
		},
		{
			MethodName: "EvaluateDropTable",
			Handler:    _InventoryService_EvaluateDropTable_Handler,
		},
		{
			MethodName: "EvaluateAndGrantDropTable",
			Handler:    _InventoryService_EvaluateAndGrantDropTable_Handler,
		},
		{
			MethodName: "GetUserData",
			Handler:    _InventoryService_GetUserData_Handler,
		},
		{
			MethodName: "DeleteUserData",
			Handler:    _InventoryService_DeleteUserData_Handler,
		},
		{
			MethodName: "RegisterQuestCallback",
			Handler:    _InventoryService_RegisterQuestCallback_Handler,
		},
		{
			MethodName: "DeregisterQuestCallback",
			Handler:    _InventoryService_DeregisterQuestCallback_Handler,
		},
		{
			MethodName: "ImportCatalog",
			Handler:    _InventoryService_ImportCatalog_Handler,
		},
		{
			MethodName: "ExportSettings",
			Handler:    _InventoryService_ExportSettings_Handler,
		},
		{
			MethodName: "ImportSettings",
			Handler:    _InventoryService_ImportSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventory_services.proto",
}
