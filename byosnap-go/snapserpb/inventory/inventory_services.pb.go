// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.23.3
// source: inventory_services.proto

package proto

import (



	
	
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CallbackResourceType int32

const (
	CallbackResourceType_CRT_UNKNOWN      CallbackResourceType = 0
	CallbackResourceType_CRT_CATALOG_ITEM CallbackResourceType = 1
	CallbackResourceType_CRT_CURRENCY     CallbackResourceType = 2
)

// Enum value maps for CallbackResourceType.
var (
	CallbackResourceType_name = map[int32]string{
		0: "CRT_UNKNOWN",
		1: "CRT_CATALOG_ITEM",
		2: "CRT_CURRENCY",
	}
	CallbackResourceType_value = map[string]int32{
		"CRT_UNKNOWN":      0,
		"CRT_CATALOG_ITEM": 1,
		"CRT_CURRENCY":     2,
	}
)

func (x CallbackResourceType) Enum() *CallbackResourceType {
	p := new(CallbackResourceType)
	*p = x
	return p
}

func (x CallbackResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallbackResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_services_proto_enumTypes[0].Descriptor()
}

func (CallbackResourceType) Type() protoreflect.EnumType {
	return &file_inventory_services_proto_enumTypes[0]
}

func (x CallbackResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallbackResourceType.Descriptor instead.
func (CallbackResourceType) EnumDescriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{0}
}

type GenericGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Tags      string `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	ClassName string `protobuf:"bytes,4,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	Name      string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GenericGetRequest) Reset() {
	*x = GenericGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericGetRequest) ProtoMessage() {}

func (x *GenericGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericGetRequest.ProtoReflect.Descriptor instead.
func (*GenericGetRequest) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{0}
}

func (x *GenericGetRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GenericGetRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GenericGetRequest) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *GenericGetRequest) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *GenericGetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetCatalogItemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items                []*CatalogItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	MatchingCatalogItems int32          `protobuf:"varint,2,opt,name=matching_catalog_items,json=matchingCatalogItems,proto3" json:"matching_catalog_items,omitempty"`
	TotalCatalogItems    int32          `protobuf:"varint,3,opt,name=total_catalog_items,json=totalCatalogItems,proto3" json:"total_catalog_items,omitempty"`
}

func (x *GetCatalogItemsResponse) Reset() {
	*x = GetCatalogItemsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCatalogItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCatalogItemsResponse) ProtoMessage() {}

func (x *GetCatalogItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCatalogItemsResponse.ProtoReflect.Descriptor instead.
func (*GetCatalogItemsResponse) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{1}
}

func (x *GetCatalogItemsResponse) GetItems() []*CatalogItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GetCatalogItemsResponse) GetMatchingCatalogItems() int32 {
	if x != nil {
		return x.MatchingCatalogItems
	}
	return 0
}

func (x *GetCatalogItemsResponse) GetTotalCatalogItems() int32 {
	if x != nil {
		return x.TotalCatalogItems
	}
	return 0
}

type MinimalCatalogItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *MinimalCatalogItem) Reset() {
	*x = MinimalCatalogItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinimalCatalogItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinimalCatalogItem) ProtoMessage() {}

func (x *MinimalCatalogItem) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinimalCatalogItem.ProtoReflect.Descriptor instead.
func (*MinimalCatalogItem) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{2}
}

func (x *MinimalCatalogItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MinimalCatalogItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ListCatalogItemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*MinimalCatalogItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListCatalogItemsResponse) Reset() {
	*x = ListCatalogItemsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCatalogItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCatalogItemsResponse) ProtoMessage() {}

func (x *ListCatalogItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCatalogItemsResponse.ProtoReflect.Descriptor instead.
func (*ListCatalogItemsResponse) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{3}
}

func (x *ListCatalogItemsResponse) GetItems() []*MinimalCatalogItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type DeleteCatalogItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteCatalogItemRequest) Reset() {
	*x = DeleteCatalogItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCatalogItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCatalogItemRequest) ProtoMessage() {}

func (x *DeleteCatalogItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCatalogItemRequest.ProtoReflect.Descriptor instead.
func (*DeleteCatalogItemRequest) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteCatalogItemRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GrantInventoryItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string           `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Items    map[string]int32 `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Metadata *structpb.Struct `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GrantInventoryItemsRequest) Reset() {
	*x = GrantInventoryItemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantInventoryItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantInventoryItemsRequest) ProtoMessage() {}

func (x *GrantInventoryItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantInventoryItemsRequest.ProtoReflect.Descriptor instead.
func (*GrantInventoryItemsRequest) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{5}
}

func (x *GrantInventoryItemsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GrantInventoryItemsRequest) GetItems() map[string]int32 {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GrantInventoryItemsRequest) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type DeleteUserItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	InstanceId string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *DeleteUserItemRequest) Reset() {
	*x = DeleteUserItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserItemRequest) ProtoMessage() {}

func (x *DeleteUserItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserItemRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserItemRequest) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteUserItemRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DeleteUserItemRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type ConsumeItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	InstanceId   string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	ConsumeCount int32  `protobuf:"varint,3,opt,name=consume_count,json=consumeCount,proto3" json:"consume_count,omitempty"`
}

func (x *ConsumeItemRequest) Reset() {
	*x = ConsumeItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeItemRequest) ProtoMessage() {}

func (x *ConsumeItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeItemRequest.ProtoReflect.Descriptor instead.
func (*ConsumeItemRequest) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{7}
}

func (x *ConsumeItemRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ConsumeItemRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ConsumeItemRequest) GetConsumeCount() int32 {
	if x != nil {
		return x.ConsumeCount
	}
	return 0
}

type UnlockContainerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string           `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	InstanceId string           `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Metadata   *structpb.Struct `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *UnlockContainerRequest) Reset() {
	*x = UnlockContainerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockContainerRequest) ProtoMessage() {}

func (x *UnlockContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockContainerRequest.ProtoReflect.Descriptor instead.
func (*UnlockContainerRequest) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{8}
}

func (x *UnlockContainerRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UnlockContainerRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *UnlockContainerRequest) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type UnlockContainerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrantedItems           []*UserInventoryItem `protobuf:"bytes,1,rep,name=granted_items,json=grantedItems,proto3" json:"granted_items,omitempty"`
	GrantedVirtualCurrency map[string]int32     `protobuf:"bytes,2,rep,name=granted_virtual_currency,json=grantedVirtualCurrency,proto3" json:"granted_virtual_currency,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	RemainingUses          int32                `protobuf:"varint,3,opt,name=remaining_uses,json=remainingUses,proto3" json:"remaining_uses,omitempty"`
}

func (x *UnlockContainerResponse) Reset() {
	*x = UnlockContainerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockContainerResponse) ProtoMessage() {}

func (x *UnlockContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockContainerResponse.ProtoReflect.Descriptor instead.
func (*UnlockContainerResponse) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{9}
}

func (x *UnlockContainerResponse) GetGrantedItems() []*UserInventoryItem {
	if x != nil {
		return x.GrantedItems
	}
	return nil
}

func (x *UnlockContainerResponse) GetGrantedVirtualCurrency() map[string]int32 {
	if x != nil {
		return x.GrantedVirtualCurrency
	}
	return nil
}

func (x *UnlockContainerResponse) GetRemainingUses() int32 {
	if x != nil {
		return x.RemainingUses
	}
	return 0
}

type ConsumeItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId     string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	RemainingUses  int32  `protobuf:"varint,2,opt,name=remaining_uses,json=remainingUses,proto3" json:"remaining_uses,omitempty"`
	LastConsumedAt int64  `protobuf:"varint,3,opt,name=last_consumed_at,json=lastConsumedAt,proto3" json:"last_consumed_at,omitempty"`
}

func (x *ConsumeItemResponse) Reset() {
	*x = ConsumeItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeItemResponse) ProtoMessage() {}

func (x *ConsumeItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeItemResponse.ProtoReflect.Descriptor instead.
func (*ConsumeItemResponse) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{10}
}

func (x *ConsumeItemResponse) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ConsumeItemResponse) GetRemainingUses() int32 {
	if x != nil {
		return x.RemainingUses
	}
	return 0
}

func (x *ConsumeItemResponse) GetLastConsumedAt() int64 {
	if x != nil {
		return x.LastConsumedAt
	}
	return 0
}

type GetUserItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	InstanceId string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *GetUserItemRequest) Reset() {
	*x = GetUserItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserItemRequest) ProtoMessage() {}

func (x *GetUserItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserItemRequest.ProtoReflect.Descriptor instead.
func (*GetUserItemRequest) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{11}
}

func (x *GetUserItemRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserItemRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type GetUserItemCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CatalogItemName string `protobuf:"bytes,2,opt,name=catalog_item_name,json=catalogItemName,proto3" json:"catalog_item_name,omitempty"`
}

func (x *GetUserItemCountRequest) Reset() {
	*x = GetUserItemCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserItemCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserItemCountRequest) ProtoMessage() {}

func (x *GetUserItemCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserItemCountRequest.ProtoReflect.Descriptor instead.
func (*GetUserItemCountRequest) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{12}
}

func (x *GetUserItemCountRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserItemCountRequest) GetCatalogItemName() string {
	if x != nil {
		return x.CatalogItemName
	}
	return ""
}

type GetUserItemCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetUserItemCountResponse) Reset() {
	*x = GetUserItemCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserItemCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserItemCountResponse) ProtoMessage() {}

func (x *GetUserItemCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserItemCountResponse.ProtoReflect.Descriptor instead.
func (*GetUserItemCountResponse) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{13}
}

func (x *GetUserItemCountResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetUserItemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*UserInventoryItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GetUserItemsResponse) Reset() {
	*x = GetUserItemsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserItemsResponse) ProtoMessage() {}

func (x *GetUserItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserItemsResponse.ProtoReflect.Descriptor instead.
func (*GetUserItemsResponse) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{14}
}

func (x *GetUserItemsResponse) GetItems() []*UserInventoryItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type UpdateUserItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string           `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	InstanceId string           `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Metadata   *structpb.Struct `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *UpdateUserItemRequest) Reset() {
	*x = UpdateUserItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserItemRequest) ProtoMessage() {}

func (x *UpdateUserItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserItemRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserItemRequest) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateUserItemRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateUserItemRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *UpdateUserItemRequest) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GetUserItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Limit           int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset          int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	CatalogItemName string `protobuf:"bytes,4,opt,name=catalog_item_name,json=catalogItemName,proto3" json:"catalog_item_name,omitempty"`
}

func (x *GetUserItemsRequest) Reset() {
	*x = GetUserItemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserItemsRequest) ProtoMessage() {}

func (x *GetUserItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserItemsRequest.ProtoReflect.Descriptor instead.
func (*GetUserItemsRequest) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{16}
}

func (x *GetUserItemsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserItemsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetUserItemsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetUserItemsRequest) GetCatalogItemName() string {
	if x != nil {
		return x.CatalogItemName
	}
	return ""
}

type UpdateCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *UpdateCurrencyRequest) Reset() {
	*x = UpdateCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCurrencyRequest) ProtoMessage() {}

func (x *UpdateCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCurrencyRequest.ProtoReflect.Descriptor instead.
func (*UpdateCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateCurrencyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateCurrencyRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type DeleteCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteCurrencyRequest) Reset() {
	*x = DeleteCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCurrencyRequest) ProtoMessage() {}

func (x *DeleteCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCurrencyRequest.ProtoReflect.Descriptor instead.
func (*DeleteCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteCurrencyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetCurrenciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currencies []*Currency `protobuf:"bytes,1,rep,name=currencies,proto3" json:"currencies,omitempty"`
}

func (x *GetCurrenciesResponse) Reset() {
	*x = GetCurrenciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrenciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrenciesResponse) ProtoMessage() {}

func (x *GetCurrenciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrenciesResponse.ProtoReflect.Descriptor instead.
func (*GetCurrenciesResponse) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{19}
}

func (x *GetCurrenciesResponse) GetCurrencies() []*Currency {
	if x != nil {
		return x.Currencies
	}
	return nil
}

type UpdateUserVirtualCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CurrencyName string `protobuf:"bytes,2,opt,name=currency_name,json=currencyName,proto3" json:"currency_name,omitempty"`
	Amount       int32  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *UpdateUserVirtualCurrencyRequest) Reset() {
	*x = UpdateUserVirtualCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserVirtualCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserVirtualCurrencyRequest) ProtoMessage() {}

func (x *UpdateUserVirtualCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserVirtualCurrencyRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserVirtualCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateUserVirtualCurrencyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateUserVirtualCurrencyRequest) GetCurrencyName() string {
	if x != nil {
		return x.CurrencyName
	}
	return ""
}

func (x *UpdateUserVirtualCurrencyRequest) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type UpdateUserVirtualCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreviousBalance int32 `protobuf:"varint,1,opt,name=previous_balance,json=previousBalance,proto3" json:"previous_balance,omitempty"`
	CurrentBalance  int32 `protobuf:"varint,2,opt,name=current_balance,json=currentBalance,proto3" json:"current_balance,omitempty"`
}

func (x *UpdateUserVirtualCurrencyResponse) Reset() {
	*x = UpdateUserVirtualCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserVirtualCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserVirtualCurrencyResponse) ProtoMessage() {}

func (x *UpdateUserVirtualCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserVirtualCurrencyResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserVirtualCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateUserVirtualCurrencyResponse) GetPreviousBalance() int32 {
	if x != nil {
		return x.PreviousBalance
	}
	return 0
}

func (x *UpdateUserVirtualCurrencyResponse) GetCurrentBalance() int32 {
	if x != nil {
		return x.CurrentBalance
	}
	return 0
}

type GetUserCurrenciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetUserCurrenciesRequest) Reset() {
	*x = GetUserCurrenciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCurrenciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCurrenciesRequest) ProtoMessage() {}

func (x *GetUserCurrenciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCurrenciesRequest.ProtoReflect.Descriptor instead.
func (*GetUserCurrenciesRequest) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{22}
}

func (x *GetUserCurrenciesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetUserCurrenciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currencies map[string]int32 `protobuf:"bytes,1,rep,name=currencies,proto3" json:"currencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GetUserCurrenciesResponse) Reset() {
	*x = GetUserCurrenciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCurrenciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCurrenciesResponse) ProtoMessage() {}

func (x *GetUserCurrenciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCurrenciesResponse.ProtoReflect.Descriptor instead.
func (*GetUserCurrenciesResponse) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{23}
}

func (x *GetUserCurrenciesResponse) GetCurrencies() map[string]int32 {
	if x != nil {
		return x.Currencies
	}
	return nil
}

type DeleteCurrencyConversionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromCurrency string `protobuf:"bytes,1,opt,name=from_currency,json=fromCurrency,proto3" json:"from_currency,omitempty"`
	ToCurrency   string `protobuf:"bytes,2,opt,name=to_currency,json=toCurrency,proto3" json:"to_currency,omitempty"`
}

func (x *DeleteCurrencyConversionRequest) Reset() {
	*x = DeleteCurrencyConversionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCurrencyConversionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCurrencyConversionRequest) ProtoMessage() {}

func (x *DeleteCurrencyConversionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCurrencyConversionRequest.ProtoReflect.Descriptor instead.
func (*DeleteCurrencyConversionRequest) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteCurrencyConversionRequest) GetFromCurrency() string {
	if x != nil {
		return x.FromCurrency
	}
	return ""
}

func (x *DeleteCurrencyConversionRequest) GetToCurrency() string {
	if x != nil {
		return x.ToCurrency
	}
	return ""
}

type GetCurrencyConversionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromCurrency string `protobuf:"bytes,1,opt,name=from_currency,json=fromCurrency,proto3" json:"from_currency,omitempty"`
	ToCurrency   string `protobuf:"bytes,2,opt,name=to_currency,json=toCurrency,proto3" json:"to_currency,omitempty"`
}

func (x *GetCurrencyConversionRequest) Reset() {
	*x = GetCurrencyConversionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrencyConversionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyConversionRequest) ProtoMessage() {}

func (x *GetCurrencyConversionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyConversionRequest.ProtoReflect.Descriptor instead.
func (*GetCurrencyConversionRequest) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{25}
}

func (x *GetCurrencyConversionRequest) GetFromCurrency() string {
	if x != nil {
		return x.FromCurrency
	}
	return ""
}

func (x *GetCurrencyConversionRequest) GetToCurrency() string {
	if x != nil {
		return x.ToCurrency
	}
	return ""
}

type ListAllCurrencyConversionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings []*CurrencyConversion `protobuf:"bytes,1,rep,name=settings,proto3" json:"settings,omitempty"`
}

func (x *ListAllCurrencyConversionsResponse) Reset() {
	*x = ListAllCurrencyConversionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllCurrencyConversionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllCurrencyConversionsResponse) ProtoMessage() {}

func (x *ListAllCurrencyConversionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllCurrencyConversionsResponse.ProtoReflect.Descriptor instead.
func (*ListAllCurrencyConversionsResponse) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{26}
}

func (x *ListAllCurrencyConversionsResponse) GetSettings() []*CurrencyConversion {
	if x != nil {
		return x.Settings
	}
	return nil
}

type PurchaseItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CurrencyName    string `protobuf:"bytes,2,opt,name=currency_name,json=currencyName,proto3" json:"currency_name,omitempty"`
	CatalogItemName string `protobuf:"bytes,3,opt,name=catalog_item_name,json=catalogItemName,proto3" json:"catalog_item_name,omitempty"`
}

func (x *PurchaseItemRequest) Reset() {
	*x = PurchaseItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchaseItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseItemRequest) ProtoMessage() {}

func (x *PurchaseItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseItemRequest.ProtoReflect.Descriptor instead.
func (*PurchaseItemRequest) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{27}
}

func (x *PurchaseItemRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PurchaseItemRequest) GetCurrencyName() string {
	if x != nil {
		return x.CurrencyName
	}
	return ""
}

func (x *PurchaseItemRequest) GetCatalogItemName() string {
	if x != nil {
		return x.CatalogItemName
	}
	return ""
}

type DropTableItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatalogItemName string `protobuf:"bytes,1,opt,name=catalog_item_name,json=catalogItemName,proto3" json:"catalog_item_name,omitempty"`
	Weight          int32  `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *DropTableItemRequest) Reset() {
	*x = DropTableItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropTableItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropTableItemRequest) ProtoMessage() {}

func (x *DropTableItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropTableItemRequest.ProtoReflect.Descriptor instead.
func (*DropTableItemRequest) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{28}
}

func (x *DropTableItemRequest) GetCatalogItemName() string {
	if x != nil {
		return x.CatalogItemName
	}
	return ""
}

func (x *DropTableItemRequest) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type DropTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Items []*DropTableItemRequest `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *DropTableRequest) Reset() {
	*x = DropTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropTableRequest) ProtoMessage() {}

func (x *DropTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropTableRequest.ProtoReflect.Descriptor instead.
func (*DropTableRequest) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{29}
}

func (x *DropTableRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DropTableRequest) GetItems() []*DropTableItemRequest {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetDropTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetDropTableRequest) Reset() {
	*x = GetDropTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDropTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDropTableRequest) ProtoMessage() {}

func (x *GetDropTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDropTableRequest.ProtoReflect.Descriptor instead.
func (*GetDropTableRequest) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{30}
}

func (x *GetDropTableRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EvaluateAndGrantDropTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *EvaluateAndGrantDropTableRequest) Reset() {
	*x = EvaluateAndGrantDropTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluateAndGrantDropTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateAndGrantDropTableRequest) ProtoMessage() {}

func (x *EvaluateAndGrantDropTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateAndGrantDropTableRequest.ProtoReflect.Descriptor instead.
func (*EvaluateAndGrantDropTableRequest) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{31}
}

func (x *EvaluateAndGrantDropTableRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EvaluateAndGrantDropTableRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DropTableMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Items     string `protobuf:"bytes,2,opt,name=items,proto3" json:"items,omitempty"`
	ItemCount int32  `protobuf:"varint,3,opt,name=item_count,json=itemCount,proto3" json:"item_count,omitempty"`
}

func (x *DropTableMeta) Reset() {
	*x = DropTableMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropTableMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropTableMeta) ProtoMessage() {}

func (x *DropTableMeta) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropTableMeta.ProtoReflect.Descriptor instead.
func (*DropTableMeta) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{32}
}

func (x *DropTableMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DropTableMeta) GetItems() string {
	if x != nil {
		return x.Items
	}
	return ""
}

func (x *DropTableMeta) GetItemCount() int32 {
	if x != nil {
		return x.ItemCount
	}
	return 0
}

type ListDropTablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DropTables []*DropTableMeta `protobuf:"bytes,1,rep,name=drop_tables,json=dropTables,proto3" json:"drop_tables,omitempty"`
}

func (x *ListDropTablesResponse) Reset() {
	*x = ListDropTablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDropTablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDropTablesResponse) ProtoMessage() {}

func (x *ListDropTablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDropTablesResponse.ProtoReflect.Descriptor instead.
func (*ListDropTablesResponse) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{33}
}

func (x *ListDropTablesResponse) GetDropTables() []*DropTableMeta {
	if x != nil {
		return x.DropTables
	}
	return nil
}

type EvaluateDropTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatalogItemName string `protobuf:"bytes,1,opt,name=catalog_item_name,json=catalogItemName,proto3" json:"catalog_item_name,omitempty"`
}

func (x *EvaluateDropTableResponse) Reset() {
	*x = EvaluateDropTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluateDropTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateDropTableResponse) ProtoMessage() {}

func (x *EvaluateDropTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateDropTableResponse.ProtoReflect.Descriptor instead.
func (*EvaluateDropTableResponse) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{34}
}

func (x *EvaluateDropTableResponse) GetCatalogItemName() string {
	if x != nil {
		return x.CatalogItemName
	}
	return ""
}

type GetAllDropTablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DropTables []*DropTable `protobuf:"bytes,1,rep,name=drop_tables,json=dropTables,proto3" json:"drop_tables,omitempty"`
}

func (x *GetAllDropTablesResponse) Reset() {
	*x = GetAllDropTablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllDropTablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllDropTablesResponse) ProtoMessage() {}

func (x *GetAllDropTablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllDropTablesResponse.ProtoReflect.Descriptor instead.
func (*GetAllDropTablesResponse) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{35}
}

func (x *GetAllDropTablesResponse) GetDropTables() []*DropTable {
	if x != nil {
		return x.DropTables
	}
	return nil
}

type UserDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *UserDataRequest) Reset() {
	*x = UserDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDataRequest) ProtoMessage() {}

func (x *UserDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDataRequest.ProtoReflect.Descriptor instead.
func (*UserDataRequest) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{36}
}

func (x *UserDataRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UserDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items      []*UserInventoryItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Currencies map[string]int32     `protobuf:"bytes,2,rep,name=currencies,proto3" json:"currencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *UserDataResponse) Reset() {
	*x = UserDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDataResponse) ProtoMessage() {}

func (x *UserDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDataResponse.ProtoReflect.Descriptor instead.
func (*UserDataResponse) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{37}
}

func (x *UserDataResponse) GetItems() []*UserInventoryItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *UserDataResponse) GetCurrencies() map[string]int32 {
	if x != nil {
		return x.Currencies
	}
	return nil
}

type RegisterQuestCallbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceName string               `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	ResourceType CallbackResourceType `protobuf:"varint,2,opt,name=resource_type,json=resourceType,proto3,enum=inventory.CallbackResourceType" json:"resource_type,omitempty"`
}

func (x *RegisterQuestCallbackRequest) Reset() {
	*x = RegisterQuestCallbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterQuestCallbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterQuestCallbackRequest) ProtoMessage() {}

func (x *RegisterQuestCallbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterQuestCallbackRequest.ProtoReflect.Descriptor instead.
func (*RegisterQuestCallbackRequest) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{38}
}

func (x *RegisterQuestCallbackRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *RegisterQuestCallbackRequest) GetResourceType() CallbackResourceType {
	if x != nil {
		return x.ResourceType
	}
	return CallbackResourceType_CRT_UNKNOWN
}

type DeregisterQuestCallbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceName string               `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	ResourceType CallbackResourceType `protobuf:"varint,2,opt,name=resource_type,json=resourceType,proto3,enum=inventory.CallbackResourceType" json:"resource_type,omitempty"`
}

func (x *DeregisterQuestCallbackRequest) Reset() {
	*x = DeregisterQuestCallbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeregisterQuestCallbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeregisterQuestCallbackRequest) ProtoMessage() {}

func (x *DeregisterQuestCallbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeregisterQuestCallbackRequest.ProtoReflect.Descriptor instead.
func (*DeregisterQuestCallbackRequest) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{39}
}

func (x *DeregisterQuestCallbackRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *DeregisterQuestCallbackRequest) GetResourceType() CallbackResourceType {
	if x != nil {
		return x.ResourceType
	}
	return CallbackResourceType_CRT_UNKNOWN
}

type ImportCatalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Data    string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ImportCatalogRequest) Reset() {
	*x = ImportCatalogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportCatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportCatalogRequest) ProtoMessage() {}

func (x *ImportCatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportCatalogRequest.ProtoReflect.Descriptor instead.
func (*ImportCatalogRequest) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{40}
}

func (x *ImportCatalogRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ImportCatalogRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type ImportCatalogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvalidIndices []int32 `protobuf:"varint,1,rep,packed,name=invalid_indices,json=invalidIndices,proto3" json:"invalid_indices,omitempty"`
}

func (x *ImportCatalogResponse) Reset() {
	*x = ImportCatalogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportCatalogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportCatalogResponse) ProtoMessage() {}

func (x *ImportCatalogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportCatalogResponse.ProtoReflect.Descriptor instead.
func (*ImportCatalogResponse) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{41}
}

func (x *ImportCatalogResponse) GetInvalidIndices() []int32 {
	if x != nil {
		return x.InvalidIndices
	}
	return nil
}

type SettingsImportExportData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Data       string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	ExportedAt int64  `protobuf:"varint,3,opt,name=exported_at,json=exportedAt,proto3" json:"exported_at,omitempty"`
}

func (x *SettingsImportExportData) Reset() {
	*x = SettingsImportExportData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_services_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingsImportExportData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingsImportExportData) ProtoMessage() {}

func (x *SettingsImportExportData) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_services_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingsImportExportData.ProtoReflect.Descriptor instead.
func (*SettingsImportExportData) Descriptor() ([]byte, []int) {
	return file_inventory_services_proto_rawDescGZIP(), []int{42}
}

func (x *SettingsImportExportData) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SettingsImportExportData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *SettingsImportExportData) GetExportedAt() int64 {
	if x != nil {
		return x.ExportedAt
	}
	return 0
}

var File_inventory_services_proto protoreflect.FileDescriptor

var file_inventory_services_proto_rawDesc = []byte{
	0x0a, 0x18, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x80, 0x03, 0x0a, 0x11,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5c, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x46, 0xe0, 0x41, 0x01, 0x92, 0x41, 0x40, 0x32, 0x3a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2c,
	0x20, 0x6d, 0x61, 0x78, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2c, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74,
	0x6f, 0x20, 0x31, 0x30, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x39, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x21, 0xe0, 0x41, 0x01, 0x92, 0x41, 0x1b, 0x32, 0x15, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2c,
	0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x30, 0x9a, 0x02,
	0x01, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x55, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0xe0, 0x41, 0x01, 0x92, 0x41, 0x3b,
	0x32, 0x35, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x62,
	0x79, 0x20, 0x74, 0x61, 0x67, 0x73, 0x2c, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x20, 0x73, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x61, 0x67, 0x73, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x45, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xe0, 0x41, 0x01, 0x92, 0x41, 0x20, 0x32, 0x1a, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x62, 0x79, 0x20, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x09, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xe0, 0x41, 0x01, 0x92, 0x41, 0x1a, 0x32, 0x14,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x62, 0x79, 0x20,
	0x6e, 0x61, 0x6d, 0x65, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa3,
	0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x74, 0x65,
	0x6d, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x0d, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x20,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x9a, 0x02, 0x01, 0x01, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x63, 0x0a, 0x16, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x2d, 0x92, 0x41, 0x2a, 0x32, 0x24, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66,
	0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x20, 0x62,
	0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x9a, 0x02, 0x01, 0x03, 0x52,
	0x14, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x5d, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x32, 0x24, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x69,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x9a, 0x02, 0x01,
	0x03, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x12, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2d, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x10,
	0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d,
	0x9a, 0x02, 0x01, 0x07, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x32, 0x17, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x9a, 0x02, 0x01,
	0x07, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x67,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x0d, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x9a, 0x02, 0x01, 0x01,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x7f, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x4f, 0xfa, 0x42, 0x25, 0x72, 0x23, 0x32, 0x21, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a,
	0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x92, 0x41, 0x24, 0x32, 0x1e,
	0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x20,
	0x69, 0x74, 0x65, 0x6d, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x9a, 0x02,
	0x01, 0x07, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc2, 0x03, 0x0a, 0x1a, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x1f, 0x49,
	0x64, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x9a, 0x02,
	0x01, 0x07, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x80, 0x01, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x38, 0x92, 0x41,
	0x35, 0x32, 0x2f, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0xa3, 0x01,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x6e, 0x92, 0x41, 0x6b, 0x32, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20,
	0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x74,
	0x6f, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x62,
	0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xba, 0x01,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x31, 0x32, 0x2b, 0x49,
	0x64, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x77,
	0x68, 0x69, 0x63, 0x68, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20,
	0x62, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2e,
	0x32, 0x28, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d,
	0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0xe9, 0x01, 0x0a, 0x12, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x35, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x13, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x61,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x07,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92,
	0x41, 0x2e, 0x32, 0x28, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x74,
	0x65, 0x6d, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x9a, 0x02, 0x01, 0x07,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1a, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xce, 0x02, 0x0a, 0x16, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x35, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x13, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x61,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x07,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x92,
	0x41, 0x33, 0x32, 0x2d, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20,
	0x69, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0xa3, 0x01, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x6e, 0x92,
	0x41, 0x6b, 0x32, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x64, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x20, 0x69, 0x74, 0x65, 0x6d,
	0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdb, 0x03, 0x0a, 0x17, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x19, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x01, 0x52, 0x0c, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x18, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2d, 0x92,
	0x41, 0x2a, 0x32, 0x24, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x16, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x64, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x75, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3d, 0x92, 0x41,
	0x3a, 0x32, 0x34, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x73, 0x1a, 0x49, 0x0a, 0x1b, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbb, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a,
	0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x28, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20,
	0x69, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x6b, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x75,
	0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x44, 0xfa, 0x42, 0x04, 0x1a, 0x02,
	0x40, 0x00, 0x92, 0x41, 0x3a, 0x32, 0x34, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66,
	0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x65, 0x73, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x9a, 0x02, 0x01, 0x03, 0x52,
	0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x73, 0x12, 0x63,
	0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x39, 0x92, 0x41, 0x36, 0x32, 0x30, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6c, 0x61, 0x73, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x74,
	0x65, 0x6d, 0x20, 0x77, 0x61, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x9a,
	0x02, 0x01, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19,
	0x32, 0x13, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x52, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x28, 0x49, 0x64, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x35, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x13, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x61,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x07,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x5e, 0x0a, 0x11, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x32, 0x29, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x20, 0x69, 0x74,
	0x65, 0x6d, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20,
	0x66, 0x6f, 0x72, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x0f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x49, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x21, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x9a, 0x02, 0x01, 0x03, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x32, 0x17, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x9a, 0x02, 0x01, 0x01, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0xc2, 0x02, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1c, 0x92, 0x41, 0x19, 0x32, 0x13, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32,
	0x28, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x9d, 0x01, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x68, 0x92, 0x41, 0x65, 0x32, 0x5f, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x20, 0x4e, 0x6f, 0x74, 0x20,
	0x62, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x9a, 0x02, 0x01, 0x06, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc0, 0x02, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x58, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x42,
	0x92, 0x41, 0x3f, 0x32, 0x39, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2c, 0x20, 0x6d, 0x61, 0x78, 0x20,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20,
	0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2c,
	0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x78, 0x9a, 0x02,
	0x01, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x18,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x20, 0x74, 0x6f, 0x20, 0x7a, 0x65, 0x72, 0x6f, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2a, 0x92, 0x41, 0x27, 0x32, 0x21, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x20, 0x62, 0x79, 0x20, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x0f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc2, 0x01, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x4b, 0xfa, 0x42, 0x25, 0x72, 0x23, 0x32, 0x21, 0x28, 0x3f, 0x69,
	0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d,
	0x5f, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x92, 0x41,
	0x20, 0x32, 0x1a, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x9a, 0x02, 0x01,
	0x07, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92,
	0x41, 0x22, 0x32, 0x1c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x9a, 0x02, 0x01, 0x07, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x78, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4b, 0xfa, 0x42, 0x25, 0x72, 0x23, 0x32,
	0x21, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29,
	0x3f, 0x24, 0x92, 0x41, 0x20, 0x32, 0x1a, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x70, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x22, 0x92,
	0x41, 0x1f, 0x32, 0x19, 0x41, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x20, 0x73, 0x65, 0x74, 0x20, 0x75, 0x70, 0x9a, 0x02, 0x01,
	0x01, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0x81, 0x02,
	0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x13, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20,
	0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01,
	0x07, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x74, 0x0a, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4f, 0xfa, 0x42, 0x25, 0x72, 0x23, 0x32, 0x21, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x5b,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x92, 0x41, 0x24, 0x32, 0x1e, 0x4e,
	0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20,
	0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x9a, 0x02, 0x01,
	0x07, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x18, 0x92, 0x41, 0x15, 0x32, 0x0f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xf6, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x3a, 0x92, 0x41, 0x37, 0x32, 0x31, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x20, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x0f, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x6a,
	0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x38, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20,
	0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x48, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x0d, 0x32,
	0x07, 0x55, 0x73, 0x65, 0x72, 0x20, 0x69, 0x64, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xda, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x7e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x28, 0x92, 0x41,
	0x25, 0x32, 0x1f, 0x4d, 0x61, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x8b, 0x02, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x76, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x51, 0xfa, 0x42,
	0x25, 0x72, 0x23, 0x32, 0x21, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28,
	0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x92, 0x41, 0x26, 0x32, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x9a, 0x02, 0x01, 0x07, 0x52,
	0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x70, 0x0a,
	0x0b, 0x74, 0x6f, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x4f, 0xfa, 0x42, 0x25, 0x72, 0x23, 0x32, 0x21, 0x28, 0x3f, 0x69, 0x29, 0x5e,
	0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d,
	0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x92, 0x41, 0x24, 0x32,
	0x1e, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x20, 0x74, 0x6f, 0x9a,
	0x02, 0x01, 0x07, 0x52, 0x0a, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22,
	0x88, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x76, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x51, 0xfa, 0x42, 0x25, 0x72, 0x23, 0x32, 0x21,
	0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f,
	0x24, 0x92, 0x41, 0x26, 0x32, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x70, 0x0a, 0x0b, 0x74, 0x6f, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0xfa,
	0x42, 0x25, 0x72, 0x23, 0x32, 0x21, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d,
	0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x92, 0x41, 0x24, 0x32, 0x1e, 0x4e, 0x61, 0x6d, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x74, 0x6f, 0x20,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x20, 0x74, 0x6f, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x0a,
	0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x8d, 0x01, 0x0a, 0x22, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x67, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x23, 0x41, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x73, 0x65, 0x74, 0x20, 0x75, 0x70, 0x9a, 0x02, 0x01, 0x01,
	0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xde, 0x02, 0x0a, 0x13, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x1f, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x84, 0x01, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5f, 0xfa,
	0x42, 0x25, 0x72, 0x23, 0x32, 0x21, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d,
	0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x92, 0x41, 0x34, 0x32, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x77, 0x69, 0x74, 0x68, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x7d, 0x0a, 0x11,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x51, 0xfa, 0x42, 0x25, 0x72, 0x23, 0x32, 0x21,
	0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f,
	0x24, 0x92, 0x41, 0x26, 0x32, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x0f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd9, 0x01, 0x0a, 0x14,
	0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x74, 0x0a, 0x11, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x48, 0xfa, 0x42, 0x25, 0x72, 0x23, 0x32, 0x21, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x5b, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x1a, 0x32,
	0x14, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x20, 0x69, 0x74, 0x65, 0x6d, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x0f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x33, 0xfa, 0x42, 0x04, 0x1a,
	0x02, 0x20, 0x00, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x26, 0x32, 0x20, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x64, 0x72, 0x6f, 0x70, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x9a, 0x02, 0x01, 0x03, 0x52,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xd2, 0x01, 0x0a, 0x10, 0x44, 0x72, 0x6f, 0x70,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0xfa, 0x42, 0x25, 0x72,
	0x23, 0x32, 0x21, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x5d, 0x29, 0x3f, 0x24, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x18, 0x32, 0x12, 0x4e, 0x61, 0x6d, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x9a, 0x02,
	0x01, 0x07, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x2b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05,
	0x92, 0x01, 0x02, 0x08, 0x01, 0x92, 0x41, 0x1d, 0x32, 0x17, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x20,
	0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x20, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x71, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x46, 0xfa, 0x42, 0x25, 0x72, 0x23, 0x32, 0x21, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a,
	0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0xe0, 0x41, 0x02, 0x92, 0x41,
	0x18, 0x32, 0x12, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x20,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x96, 0x01, 0x0a, 0x20, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x1f, 0x49, 0x64, 0x20, 0x6f,
	0x66, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x9a, 0x02, 0x01, 0x07, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x32, 0x12, 0x4e, 0x61, 0x6d, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x9a, 0x02,
	0x01, 0x07, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x0d, 0x44, 0x72, 0x6f,
	0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x32, 0x12, 0x4e,
	0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x20, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x36, 0x32,
	0x30, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x20, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20,
	0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x20, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x49, 0x0a, 0x0a,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x21, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66,
	0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x72,
	0x6f, 0x70, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x09, 0x69, 0x74,
	0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x78, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5e, 0x0a, 0x0b, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1a, 0x41, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64,
	0x72, 0x6f, 0x70, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x73, 0x65, 0x74, 0x20, 0x75,
	0x70, 0x9a, 0x02, 0x01, 0x01, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x22, 0x6f, 0x0a, 0x19, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x44, 0x72, 0x6f,
	0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52,
	0x0a, 0x11, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x1d,
	0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x74, 0x68, 0x61,
	0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x9a, 0x02, 0x01,
	0x07, 0x52, 0x0f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x76, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x72, 0x6f, 0x70,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a,
	0x0a, 0x0b, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1a,
	0x41, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x20, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x20, 0x73, 0x65, 0x74, 0x20, 0x75, 0x70, 0x9a, 0x02, 0x01, 0x01, 0x52, 0x0a,
	0x64, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x55, 0x0a, 0x0f, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29,
	0xe0, 0x41, 0x02, 0x92, 0x41, 0x23, 0x32, 0x1d, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x20, 0x66, 0x6f, 0x72, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x9b, 0x02, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x14, 0x55, 0x73, 0x65, 0x72, 0x20, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x9a, 0x02,
	0x01, 0x06, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x75, 0x0a, 0x0a, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32,
	0x1f, 0x4d, 0x61, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x9a, 0x02, 0x01, 0x06, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xf4, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4e, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x20, 0x4e, 0x61,
	0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x20, 0x69, 0x74,
	0x65, 0x6d, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x9a, 0x02,
	0x01, 0x07, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x83, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x3d, 0x92, 0x41, 0x3a, 0x32, 0x34,
	0x54, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x20, 0x74, 0x6f, 0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2c, 0x20, 0x63, 0x6f, 0x75, 0x6c, 0x64,
	0x20, 0x62, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x6f, 0x72, 0x20, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xf6, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x74, 0x6f, 0x20, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x3d, 0x92, 0x41, 0x3a, 0x32, 0x34, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x2c, 0x20, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x69, 0x74, 0x65,
	0x6d, 0x20, 0x6f, 0x72, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x9a, 0x02, 0x01,
	0x07, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x98, 0x01, 0x0a, 0x14, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x18,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x32, 0x26, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34,
	0x20, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x20, 0x63, 0x73, 0x76, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x9a, 0x02, 0x01, 0x07, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x74, 0x0a, 0x15, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x42, 0x32, 0x92, 0x41,
	0x2f, 0x32, 0x29, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x20, 0x72, 0x6f, 0x77, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x20, 0x69,
	0x6e, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x63, 0x73, 0x76, 0x9a, 0x02, 0x01, 0x01,
	0x52, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73,
	0x22, 0x69, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x2a, 0x4f, 0x0a, 0x14, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x52, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x52, 0x54, 0x5f, 0x43, 0x41, 0x54, 0x41,
	0x4c, 0x4f, 0x47, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x52,
	0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x02, 0x32, 0xd9, 0x46, 0x0a,
	0x10, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0xc0, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x7b, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12,
	0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x3a, 0x01, 0x2a, 0x92,
	0x41, 0x42, 0x12, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74,
	0x65, 0x6d, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x1a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77,
	0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x12, 0xe8, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1c, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x92, 0x01, 0xfa, 0xd2, 0xe4,
	0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x92, 0x41, 0x5c, 0x12, 0x11, 0x47, 0x65, 0x74, 0x20, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x47, 0x47, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x6d, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x69, 0x73, 0x20, 0x78, 0x12,
	0xd1, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x23, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x76, 0x31,
	0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x92, 0x41,
	0x42, 0x12, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x28, 0x47, 0x65, 0x74, 0x73, 0x20,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x12, 0xbe, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x74, 0x65,
	0x6d, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x79, 0xfa, 0xd2, 0xe4, 0x93, 0x02,
	0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28,
	0x32, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x39, 0x12, 0x0f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x20, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x20, 0x1a, 0x26, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x69, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x20, 0x62, 0x79, 0x20,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0xd1, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x23, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x7f, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12,
	0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x2a, 0x23,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x92, 0x41, 0x42, 0x12, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x1a, 0x2b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x66, 0x72, 0x6f,
	0x6d, 0x20, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x8d, 0x02, 0x0a, 0x10, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x25, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xb7,
	0x01, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0x72, 0x12, 0x0a, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x20, 0x49, 0x74,
	0x65, 0x6d, 0x1a, 0x41, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20,
	0x6e, 0x6f, 0x74, 0x20, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x72, 0x21, 0x0a, 0x1f, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x12, 0x55, 0x73, 0x65, 0x72, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x28, 0x01, 0x12, 0xfb, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1e, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa6, 0x01,
	0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x92, 0x41, 0x6a, 0x12, 0x09, 0x47, 0x65,
	0x74, 0x20, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x3a, 0x47, 0x65, 0x74, 0x73, 0x20, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x20, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x69,
	0x73, 0x20, 0x78, 0x72, 0x21, 0x0a, 0x1f, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12,
	0x55, 0x73, 0x65, 0x72, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x28, 0x01, 0x12, 0xfb, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x22, 0xae, 0x01, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f,
	0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x64,
	0x12, 0x13, 0x55, 0x73, 0x65, 0x72, 0x20, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x20, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x2a, 0x47, 0x65, 0x74, 0x73, 0x20, 0x69, 0x74, 0x65, 0x6d,
	0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x20,
	0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x69,
	0x64, 0x72, 0x21, 0x0a, 0x1f, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x55, 0x73,
	0x65, 0x72, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x28, 0x01, 0x12, 0x9c, 0x02, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x74, 0x65,
	0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xbe, 0x01, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49,
	0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f,
	0x7b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x92, 0x41, 0x67, 0x12, 0x22, 0x47, 0x65,
	0x74, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x66, 0x72, 0x6f,
	0x6d, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x1a, 0x1e, 0x47, 0x65, 0x74, 0x73, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x72, 0x21, 0x0a, 0x1f, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x55, 0x73, 0x65,
	0x72, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x28, 0x01, 0x12, 0x83, 0x02, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0xb6, 0x01, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x2a, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x6c, 0x12, 0x13, 0x55,
	0x73, 0x65, 0x72, 0x20, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x49, 0x74,
	0x65, 0x6d, 0x1a, 0x32, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x69, 0x74, 0x65, 0x6d,
	0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x20, 0x69, 0x64, 0x72, 0x21, 0x0a, 0x1f, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x12, 0x55, 0x73, 0x65, 0x72, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x28, 0x01, 0x12, 0xa8, 0x02, 0x0a, 0x0b, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd9, 0x01, 0xfa, 0xd2, 0xe4, 0x93, 0x02,
	0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x22,
	0x39, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x83,
	0x01, 0x12, 0x1b, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20,
	0x66, 0x72, 0x6f, 0x6d, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x41,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x73, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x66, 0x72,
	0x6f, 0x6d, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x20, 0x62, 0x79, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x67, 0x69, 0x76,
	0x65, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x69,
	0x64, 0x72, 0x21, 0x0a, 0x1f, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x55, 0x73,
	0x65, 0x72, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x28, 0x01, 0x12, 0xa7, 0x02, 0x0a, 0x0f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xcc, 0x01, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x22, 0x38, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0x78, 0x12, 0x10, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x1a, 0x41, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x20, 0x69, 0x74,
	0x65, 0x6d, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x61, 0x6e, 0x20,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x69, 0x64, 0x72, 0x21, 0x0a, 0x1f, 0x0a,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x55, 0x73, 0x65, 0x72, 0x20, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x28, 0x01, 0x12, 0xc0,
	0x02, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x74, 0x65,
	0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x22, 0xe5, 0x01, 0xfa, 0xd2, 0xe4, 0x93,
	0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36,
	0x32, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x97, 0x01, 0x12, 0x13, 0x55, 0x73, 0x65, 0x72,
	0x20, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x49, 0x74, 0x65, 0x6d, 0x1a,
	0x5d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x2e,
	0x20, 0x4e, 0x6f, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x75,
	0x73, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x72, 0x21,
	0x0a, 0x1f, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x55, 0x73, 0x65, 0x72, 0x20,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x28,
	0x01, 0x12, 0xa0, 0x02, 0x0a, 0x1f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1e, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x22, 0xbe, 0x01, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x22, 0x2c, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x76, 0x12, 0x23,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x20, 0x49, 0x74, 0x65, 0x6d, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x1a, 0x2c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x20, 0x61, 0x6e,
	0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e,
	0x20, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x72, 0x21, 0x0a, 0x1f, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x55, 0x73,
	0x65, 0x72, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x28, 0x01, 0x12, 0xb6, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x65, 0x77, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x13, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x74, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12,
	0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x21,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x36, 0x12, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x1a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0xc4, 0x01,
	0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x20, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x7b, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12,
	0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x32, 0x28,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x36, 0x12, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x1a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20,
	0x6e, 0x65, 0x77, 0x20, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0xca, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x7e, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41,
	0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x2a, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x92, 0x41, 0x3c, 0x12, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x1a, 0x21,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x20, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x62, 0x79, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0xc7, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c, 0xfa,
	0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x92, 0x41, 0x41, 0x12, 0x16, 0x47, 0x65, 0x74, 0x20,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x1a, 0x27, 0x47, 0x65, 0x74, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x97, 0x02, 0x0a, 0x18,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0xc3, 0x01, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54,
	0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x55, 0x22, 0x50, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x2f, 0x7b, 0x74, 0x6f, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x56, 0x12,
	0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x20, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x61, 0x74, 0x65,
	0x1a, 0x33, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x20, 0x72, 0x61, 0x74, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x6f, 0x6e,
	0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6e,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x99, 0x02, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x1a, 0x1d, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xbe, 0x01, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41,
	0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x55, 0x32, 0x50, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x2f, 0x7b, 0x74, 0x6f,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x51,
	0x12, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x20, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x33, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20,
	0x72, 0x61, 0x74, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x12, 0x83, 0x02, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0xa2, 0x01, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49,
	0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x52, 0x2a, 0x50, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x2f, 0x7b,
	0x74, 0x6f, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x7d, 0x92, 0x41, 0x38, 0x12,
	0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x20, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x1a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x88, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa6, 0x01, 0xfa, 0xd2, 0xe4, 0x93,
	0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x52, 0x12, 0x50, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x7d, 0x2f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x2f, 0x7b, 0x74, 0x6f, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x7d, 0x92, 0x41, 0x3c, 0x12, 0x1c, 0x47, 0x65, 0x74, 0x20, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20,
	0x72, 0x61, 0x74, 0x65, 0x1a, 0x1c, 0x47, 0x65, 0x74, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x61,
	0x74, 0x65, 0x12, 0xee, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2d, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0xfa, 0xd2, 0xe4, 0x93, 0x02,
	0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32,
	0x12, 0x30, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x92, 0x41, 0x3e, 0x12, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0xa3, 0x02, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x2b, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaa, 0x01, 0xfa,
	0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3c, 0x32, 0x37, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x92,
	0x41, 0x57, 0x12, 0x14, 0x41, 0x64, 0x64, 0x20, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x1a, 0x1c, 0x41, 0x64, 0x64, 0x20, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x74,
	0x6f, 0x20, 0x75, 0x73, 0x65, 0x72, 0x72, 0x21, 0x0a, 0x1f, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x12, 0x55, 0x73, 0x65, 0x72, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x28, 0x01, 0x12, 0xee, 0x01, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x23, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8d, 0x01, 0xfa, 0xd2, 0xe4,
	0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x29, 0x12, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x92, 0x41, 0x4d, 0x12, 0x13, 0x47,
	0x65, 0x74, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x1a, 0x13, 0x47, 0x65, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x72, 0x21, 0x0a, 0x1f, 0x0a, 0x05, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x12, 0x55, 0x73, 0x65, 0x72, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x28, 0x01, 0x12, 0xab, 0x01, 0x0a, 0x0f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x65, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41,
	0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2f, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x92,
	0x41, 0x26, 0x12, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x20,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x64, 0x72,
	0x6f, 0x70, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0x63, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x64,
	0x72, 0x6f, 0x70, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x92, 0x41, 0x20, 0x12, 0x0e, 0x47, 0x65, 0x74, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x20, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x1a, 0x0e, 0x47, 0x65, 0x74, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x20, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0xb4, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x69, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54,
	0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x2a, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f,
	0x64, 0x72, 0x6f, 0x70, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x92, 0x41, 0x26, 0x12, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x64, 0x72,
	0x6f, 0x70, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x20, 0x64, 0x72, 0x6f, 0x70, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0xb2, 0x01, 0x0a, 0x0e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x65, 0xfa, 0xd2, 0xe4, 0x93, 0x02,
	0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29,
	0x12, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x64, 0x72,
	0x6f, 0x70, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x92, 0x41, 0x24, 0x12, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0xb7, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x66, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56,
	0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2f, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x92, 0x41, 0x2a,
	0x12, 0x13, 0x47, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x20, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x13, 0x47, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x64,
	0x72, 0x6f, 0x70, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0xb2, 0x01, 0x0a, 0x0f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41,
	0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x32, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2f, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x26, 0x12, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0xd1, 0x01, 0x0a, 0x11, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x44, 0x72, 0x6f, 0x70,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x76, 0xfa, 0xd2, 0xe4,
	0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x34, 0x12, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x64, 0x72, 0x6f, 0x70, 0x2d,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x65, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x92, 0x41, 0x2a, 0x12, 0x13, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x65, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x13,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x20, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x84, 0x02, 0x0a, 0x19, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65,
	0x41, 0x6e, 0x64, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x2b, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x44, 0x72,
	0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x9b, 0x01, 0xfa,
	0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x45, 0x22, 0x43, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x64, 0x72, 0x6f, 0x70, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x2d,
	0x61, 0x6e, 0x64, 0x2d, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x92, 0x41, 0x3e, 0x12, 0x1d, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x20, 0x64, 0x72, 0x6f, 0x70, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x1d, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x20,
	0x64, 0x72, 0x6f, 0x70, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x63, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49,
	0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x92, 0x41, 0x1e, 0x12, 0x0d, 0x47, 0x65, 0x74, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x0d, 0x47, 0x65, 0x74, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x12, 0xaf, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x69, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x2a, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x92, 0x41, 0x24, 0x12, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x12, 0xcc, 0x01, 0x0a, 0x15, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x27, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x72, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50,
	0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x26, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x63, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x92, 0x41, 0x32, 0x12, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x20, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x1a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x20, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0xd4, 0x01, 0x0a, 0x17, 0x44, 0x65,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x29, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x76, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09,
	0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x2a,
	0x26, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x63,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x92, 0x41, 0x36, 0x12, 0x19, 0x44, 0x65, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x20, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x63, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x1a, 0x19, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x20, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x12, 0xb6, 0x01, 0x0a, 0x0d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50,
	0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x20, 0x12, 0x0e, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x20, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x1a, 0x0e, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x20, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x83, 0x01, 0x0a, 0x0e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x34, 0xfa, 0xd2, 0xe4, 0x93, 0x02,
	0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f,
	0x12, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x86, 0x01, 0x0a, 0x0e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x23, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x37, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_inventory_services_proto_rawDescOnce sync.Once
	file_inventory_services_proto_rawDescData = file_inventory_services_proto_rawDesc
)

func file_inventory_services_proto_rawDescGZIP() []byte {
	file_inventory_services_proto_rawDescOnce.Do(func() {
		file_inventory_services_proto_rawDescData = protoimpl.X.CompressGZIP(file_inventory_services_proto_rawDescData)
	})
	return file_inventory_services_proto_rawDescData
}

var file_inventory_services_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_inventory_services_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_inventory_services_proto_goTypes = []interface{}{
	(CallbackResourceType)(0),                  // 0: inventory.CallbackResourceType
	(*GenericGetRequest)(nil),                  // 1: inventory.GenericGetRequest
	(*GetCatalogItemsResponse)(nil),            // 2: inventory.GetCatalogItemsResponse
	(*MinimalCatalogItem)(nil),                 // 3: inventory.MinimalCatalogItem
	(*ListCatalogItemsResponse)(nil),           // 4: inventory.ListCatalogItemsResponse
	(*DeleteCatalogItemRequest)(nil),           // 5: inventory.DeleteCatalogItemRequest
	(*GrantInventoryItemsRequest)(nil),         // 6: inventory.GrantInventoryItemsRequest
	(*DeleteUserItemRequest)(nil),              // 7: inventory.DeleteUserItemRequest
	(*ConsumeItemRequest)(nil),                 // 8: inventory.ConsumeItemRequest
	(*UnlockContainerRequest)(nil),             // 9: inventory.UnlockContainerRequest
	(*UnlockContainerResponse)(nil),            // 10: inventory.UnlockContainerResponse
	(*ConsumeItemResponse)(nil),                // 11: inventory.ConsumeItemResponse
	(*GetUserItemRequest)(nil),                 // 12: inventory.GetUserItemRequest
	(*GetUserItemCountRequest)(nil),            // 13: inventory.GetUserItemCountRequest
	(*GetUserItemCountResponse)(nil),           // 14: inventory.GetUserItemCountResponse
	(*GetUserItemsResponse)(nil),               // 15: inventory.GetUserItemsResponse
	(*UpdateUserItemRequest)(nil),              // 16: inventory.UpdateUserItemRequest
	(*GetUserItemsRequest)(nil),                // 17: inventory.GetUserItemsRequest
	(*UpdateCurrencyRequest)(nil),              // 18: inventory.UpdateCurrencyRequest
	(*DeleteCurrencyRequest)(nil),              // 19: inventory.DeleteCurrencyRequest
	(*GetCurrenciesResponse)(nil),              // 20: inventory.GetCurrenciesResponse
	(*UpdateUserVirtualCurrencyRequest)(nil),   // 21: inventory.UpdateUserVirtualCurrencyRequest
	(*UpdateUserVirtualCurrencyResponse)(nil),  // 22: inventory.UpdateUserVirtualCurrencyResponse
	(*GetUserCurrenciesRequest)(nil),           // 23: inventory.GetUserCurrenciesRequest
	(*GetUserCurrenciesResponse)(nil),          // 24: inventory.GetUserCurrenciesResponse
	(*DeleteCurrencyConversionRequest)(nil),    // 25: inventory.DeleteCurrencyConversionRequest
	(*GetCurrencyConversionRequest)(nil),       // 26: inventory.GetCurrencyConversionRequest
	(*ListAllCurrencyConversionsResponse)(nil), // 27: inventory.ListAllCurrencyConversionsResponse
	(*PurchaseItemRequest)(nil),                // 28: inventory.PurchaseItemRequest
	(*DropTableItemRequest)(nil),               // 29: inventory.DropTableItemRequest
	(*DropTableRequest)(nil),                   // 30: inventory.DropTableRequest
	(*GetDropTableRequest)(nil),                // 31: inventory.GetDropTableRequest
	(*EvaluateAndGrantDropTableRequest)(nil),   // 32: inventory.EvaluateAndGrantDropTableRequest
	(*DropTableMeta)(nil),                      // 33: inventory.DropTableMeta
	(*ListDropTablesResponse)(nil),             // 34: inventory.ListDropTablesResponse
	(*EvaluateDropTableResponse)(nil),          // 35: inventory.EvaluateDropTableResponse
	(*GetAllDropTablesResponse)(nil),           // 36: inventory.GetAllDropTablesResponse
	(*UserDataRequest)(nil),                    // 37: inventory.UserDataRequest
	(*UserDataResponse)(nil),                   // 38: inventory.UserDataResponse
	(*RegisterQuestCallbackRequest)(nil),       // 39: inventory.RegisterQuestCallbackRequest
	(*DeregisterQuestCallbackRequest)(nil),     // 40: inventory.DeregisterQuestCallbackRequest
	(*ImportCatalogRequest)(nil),               // 41: inventory.ImportCatalogRequest
	(*ImportCatalogResponse)(nil),              // 42: inventory.ImportCatalogResponse
	(*SettingsImportExportData)(nil),           // 43: inventory.SettingsImportExportData
	nil,                                        // 44: inventory.GrantInventoryItemsRequest.ItemsEntry
	nil,                                        // 45: inventory.UnlockContainerResponse.GrantedVirtualCurrencyEntry
	nil,                                        // 46: inventory.GetUserCurrenciesResponse.CurrenciesEntry
	nil,                                        // 47: inventory.UserDataResponse.CurrenciesEntry
	(*CatalogItem)(nil),                        // 48: inventory.CatalogItem
	(*structpb.Struct)(nil),                    // 49: google.protobuf.Struct
	(*UserInventoryItem)(nil),                  // 50: inventory.UserInventoryItem
	(*Currency)(nil),                           // 51: inventory.Currency
	(*CurrencyConversion)(nil),                 // 52: inventory.CurrencyConversion
	(*DropTable)(nil),                          // 53: inventory.DropTable
	(*emptypb.Empty)(nil),                      // 54: google.protobuf.Empty
	(*UserInventory)(nil),                      // 55: inventory.UserInventory
}
var file_inventory_services_proto_depIdxs = []int32{
	48, // 0: inventory.GetCatalogItemsResponse.items:type_name -> inventory.CatalogItem
	3,  // 1: inventory.ListCatalogItemsResponse.items:type_name -> inventory.MinimalCatalogItem
	44, // 2: inventory.GrantInventoryItemsRequest.items:type_name -> inventory.GrantInventoryItemsRequest.ItemsEntry
	49, // 3: inventory.GrantInventoryItemsRequest.metadata:type_name -> google.protobuf.Struct
	49, // 4: inventory.UnlockContainerRequest.metadata:type_name -> google.protobuf.Struct
	50, // 5: inventory.UnlockContainerResponse.granted_items:type_name -> inventory.UserInventoryItem
	45, // 6: inventory.UnlockContainerResponse.granted_virtual_currency:type_name -> inventory.UnlockContainerResponse.GrantedVirtualCurrencyEntry
	50, // 7: inventory.GetUserItemsResponse.items:type_name -> inventory.UserInventoryItem
	49, // 8: inventory.UpdateUserItemRequest.metadata:type_name -> google.protobuf.Struct
	51, // 9: inventory.GetCurrenciesResponse.currencies:type_name -> inventory.Currency
	46, // 10: inventory.GetUserCurrenciesResponse.currencies:type_name -> inventory.GetUserCurrenciesResponse.CurrenciesEntry
	52, // 11: inventory.ListAllCurrencyConversionsResponse.settings:type_name -> inventory.CurrencyConversion
	29, // 12: inventory.DropTableRequest.items:type_name -> inventory.DropTableItemRequest
	33, // 13: inventory.ListDropTablesResponse.drop_tables:type_name -> inventory.DropTableMeta
	53, // 14: inventory.GetAllDropTablesResponse.drop_tables:type_name -> inventory.DropTable
	50, // 15: inventory.UserDataResponse.items:type_name -> inventory.UserInventoryItem
	47, // 16: inventory.UserDataResponse.currencies:type_name -> inventory.UserDataResponse.CurrenciesEntry
	0,  // 17: inventory.RegisterQuestCallbackRequest.resource_type:type_name -> inventory.CallbackResourceType
	0,  // 18: inventory.DeregisterQuestCallbackRequest.resource_type:type_name -> inventory.CallbackResourceType
	48, // 19: inventory.InventoryService.CreateCatalogItem:input_type -> inventory.CatalogItem
	1,  // 20: inventory.InventoryService.GetCatalogItems:input_type -> inventory.GenericGetRequest
	54, // 21: inventory.InventoryService.ListAllCatalogItems:input_type -> google.protobuf.Empty
	48, // 22: inventory.InventoryService.UpdateCatalogItem:input_type -> inventory.CatalogItem
	5,  // 23: inventory.InventoryService.DeleteCatalogItem:input_type -> inventory.DeleteCatalogItemRequest
	6,  // 24: inventory.InventoryService.GrantItemsToUser:input_type -> inventory.GrantInventoryItemsRequest
	17, // 25: inventory.InventoryService.GetAllUserItems:input_type -> inventory.GetUserItemsRequest
	12, // 26: inventory.InventoryService.GetUserItem:input_type -> inventory.GetUserItemRequest
	13, // 27: inventory.InventoryService.GetUserItemCount:input_type -> inventory.GetUserItemCountRequest
	7,  // 28: inventory.InventoryService.DeleteUserItem:input_type -> inventory.DeleteUserItemRequest
	8,  // 29: inventory.InventoryService.ConsumeItem:input_type -> inventory.ConsumeItemRequest
	9,  // 30: inventory.InventoryService.UnlockContainer:input_type -> inventory.UnlockContainerRequest
	16, // 31: inventory.InventoryService.UpdateUserItemMetadata:input_type -> inventory.UpdateUserItemRequest
	28, // 32: inventory.InventoryService.PurchaseItemWithVirtualCurrency:input_type -> inventory.PurchaseItemRequest
	51, // 33: inventory.InventoryService.CreateNewCurrency:input_type -> inventory.Currency
	18, // 34: inventory.InventoryService.UpdateCurrency:input_type -> inventory.UpdateCurrencyRequest
	19, // 35: inventory.InventoryService.DeleteCurrency:input_type -> inventory.DeleteCurrencyRequest
	54, // 36: inventory.InventoryService.GetCurrencies:input_type -> google.protobuf.Empty
	52, // 37: inventory.InventoryService.CreateCurrencyConversion:input_type -> inventory.CurrencyConversion
	52, // 38: inventory.InventoryService.UpdateCurrencyConversion:input_type -> inventory.CurrencyConversion
	25, // 39: inventory.InventoryService.DeleteCurrencyConversion:input_type -> inventory.DeleteCurrencyConversionRequest
	26, // 40: inventory.InventoryService.GetCurrencyConversion:input_type -> inventory.GetCurrencyConversionRequest
	54, // 41: inventory.InventoryService.ListAllCurrencyConversions:input_type -> google.protobuf.Empty
	21, // 42: inventory.InventoryService.UpdateUserVirtualCurrency:input_type -> inventory.UpdateUserVirtualCurrencyRequest
	23, // 43: inventory.InventoryService.GetUserCurrencies:input_type -> inventory.GetUserCurrenciesRequest
	30, // 44: inventory.InventoryService.CreateDropTable:input_type -> inventory.DropTableRequest
	31, // 45: inventory.InventoryService.GetDropTable:input_type -> inventory.GetDropTableRequest
	31, // 46: inventory.InventoryService.DeleteDropTable:input_type -> inventory.GetDropTableRequest
	54, // 47: inventory.InventoryService.ListDropTables:input_type -> google.protobuf.Empty
	54, // 48: inventory.InventoryService.GetAllDropTables:input_type -> google.protobuf.Empty
	30, // 49: inventory.InventoryService.UpdateDropTable:input_type -> inventory.DropTableRequest
	31, // 50: inventory.InventoryService.EvaluateDropTable:input_type -> inventory.GetDropTableRequest
	32, // 51: inventory.InventoryService.EvaluateAndGrantDropTable:input_type -> inventory.EvaluateAndGrantDropTableRequest
	37, // 52: inventory.InventoryService.GetUserData:input_type -> inventory.UserDataRequest
	37, // 53: inventory.InventoryService.DeleteUserData:input_type -> inventory.UserDataRequest
	39, // 54: inventory.InventoryService.RegisterQuestCallback:input_type -> inventory.RegisterQuestCallbackRequest
	40, // 55: inventory.InventoryService.DeregisterQuestCallback:input_type -> inventory.DeregisterQuestCallbackRequest
	41, // 56: inventory.InventoryService.ImportCatalog:input_type -> inventory.ImportCatalogRequest
	54, // 57: inventory.InventoryService.ExportSettings:input_type -> google.protobuf.Empty
	43, // 58: inventory.InventoryService.ImportSettings:input_type -> inventory.SettingsImportExportData
	54, // 59: inventory.InventoryService.CreateCatalogItem:output_type -> google.protobuf.Empty
	2,  // 60: inventory.InventoryService.GetCatalogItems:output_type -> inventory.GetCatalogItemsResponse
	4,  // 61: inventory.InventoryService.ListAllCatalogItems:output_type -> inventory.ListCatalogItemsResponse
	54, // 62: inventory.InventoryService.UpdateCatalogItem:output_type -> google.protobuf.Empty
	54, // 63: inventory.InventoryService.DeleteCatalogItem:output_type -> google.protobuf.Empty
	55, // 64: inventory.InventoryService.GrantItemsToUser:output_type -> inventory.UserInventory
	15, // 65: inventory.InventoryService.GetAllUserItems:output_type -> inventory.GetUserItemsResponse
	50, // 66: inventory.InventoryService.GetUserItem:output_type -> inventory.UserInventoryItem
	14, // 67: inventory.InventoryService.GetUserItemCount:output_type -> inventory.GetUserItemCountResponse
	54, // 68: inventory.InventoryService.DeleteUserItem:output_type -> google.protobuf.Empty
	11, // 69: inventory.InventoryService.ConsumeItem:output_type -> inventory.ConsumeItemResponse
	10, // 70: inventory.InventoryService.UnlockContainer:output_type -> inventory.UnlockContainerResponse
	50, // 71: inventory.InventoryService.UpdateUserItemMetadata:output_type -> inventory.UserInventoryItem
	50, // 72: inventory.InventoryService.PurchaseItemWithVirtualCurrency:output_type -> inventory.UserInventoryItem
	54, // 73: inventory.InventoryService.CreateNewCurrency:output_type -> google.protobuf.Empty
	51, // 74: inventory.InventoryService.UpdateCurrency:output_type -> inventory.Currency
	54, // 75: inventory.InventoryService.DeleteCurrency:output_type -> google.protobuf.Empty
	20, // 76: inventory.InventoryService.GetCurrencies:output_type -> inventory.GetCurrenciesResponse
	54, // 77: inventory.InventoryService.CreateCurrencyConversion:output_type -> google.protobuf.Empty
	52, // 78: inventory.InventoryService.UpdateCurrencyConversion:output_type -> inventory.CurrencyConversion
	54, // 79: inventory.InventoryService.DeleteCurrencyConversion:output_type -> google.protobuf.Empty
	52, // 80: inventory.InventoryService.GetCurrencyConversion:output_type -> inventory.CurrencyConversion
	27, // 81: inventory.InventoryService.ListAllCurrencyConversions:output_type -> inventory.ListAllCurrencyConversionsResponse
	22, // 82: inventory.InventoryService.UpdateUserVirtualCurrency:output_type -> inventory.UpdateUserVirtualCurrencyResponse
	24, // 83: inventory.InventoryService.GetUserCurrencies:output_type -> inventory.GetUserCurrenciesResponse
	53, // 84: inventory.InventoryService.CreateDropTable:output_type -> inventory.DropTable
	53, // 85: inventory.InventoryService.GetDropTable:output_type -> inventory.DropTable
	54, // 86: inventory.InventoryService.DeleteDropTable:output_type -> google.protobuf.Empty
	34, // 87: inventory.InventoryService.ListDropTables:output_type -> inventory.ListDropTablesResponse
	36, // 88: inventory.InventoryService.GetAllDropTables:output_type -> inventory.GetAllDropTablesResponse
	53, // 89: inventory.InventoryService.UpdateDropTable:output_type -> inventory.DropTable
	35, // 90: inventory.InventoryService.EvaluateDropTable:output_type -> inventory.EvaluateDropTableResponse
	50, // 91: inventory.InventoryService.EvaluateAndGrantDropTable:output_type -> inventory.UserInventoryItem
	38, // 92: inventory.InventoryService.GetUserData:output_type -> inventory.UserDataResponse
	54, // 93: inventory.InventoryService.DeleteUserData:output_type -> google.protobuf.Empty
	54, // 94: inventory.InventoryService.RegisterQuestCallback:output_type -> google.protobuf.Empty
	54, // 95: inventory.InventoryService.DeregisterQuestCallback:output_type -> google.protobuf.Empty
	42, // 96: inventory.InventoryService.ImportCatalog:output_type -> inventory.ImportCatalogResponse
	43, // 97: inventory.InventoryService.ExportSettings:output_type -> inventory.SettingsImportExportData
	54, // 98: inventory.InventoryService.ImportSettings:output_type -> google.protobuf.Empty
	59, // [59:99] is the sub-list for method output_type
	19, // [19:59] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_inventory_services_proto_init() }
func file_inventory_services_proto_init() {
	if File_inventory_services_proto != nil {
		return
	}
	file_inventory_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_inventory_services_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCatalogItemsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinimalCatalogItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCatalogItemsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCatalogItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantInventoryItemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockContainerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockContainerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserItemCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserItemCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserItemsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserItemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrenciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserVirtualCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserVirtualCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCurrenciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCurrenciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCurrencyConversionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrencyConversionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllCurrencyConversionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchaseItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropTableItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDropTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluateAndGrantDropTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropTableMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDropTablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluateDropTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllDropTablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterQuestCallbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeregisterQuestCallbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportCatalogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportCatalogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_services_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingsImportExportData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inventory_services_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_inventory_services_proto_goTypes,
		DependencyIndexes: file_inventory_services_proto_depIdxs,
		EnumInfos:         file_inventory_services_proto_enumTypes,
		MessageInfos:      file_inventory_services_proto_msgTypes,
	}.Build()
	File_inventory_services_proto = out.File
	file_inventory_services_proto_rawDesc = nil
	file_inventory_services_proto_goTypes = nil
	file_inventory_services_proto_depIdxs = nil
}
