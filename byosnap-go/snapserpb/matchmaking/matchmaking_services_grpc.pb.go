// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: matchmaking_services.proto

package proto

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MatchmakingServiceClient is the client API for MatchmakingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchmakingServiceClient interface {
	// CreateTicket
	//
	// Create a new ticket for a player to be matched with other players
	CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*CreateTicketResponse, error)
	// GetTicket
	//
	// Get a ticket by its ID
	GetTicket(ctx context.Context, in *GetTicketRequest, opts ...grpc.CallOption) (*GetTicketResponse, error)
	// DeleteTicket
	//
	// Delete a ticket by its ID
	DeleteTicket(ctx context.Context, in *DeleteTicketRequest, opts ...grpc.CallOption) (*DeleteTicketResponse, error)
	// CreateMatchProfile
	CreateMatchProfile(ctx context.Context, in *CreateMatchProfileRequest, opts ...grpc.CallOption) (*CreateMatchProfileResponse, error)
	// CreateMatchProfile v2
	CreateMatchProfileV2(ctx context.Context, in *CreateMatchProfileRequestv2, opts ...grpc.CallOption) (*CreateMatchProfileResponse, error)
	// GetMatchProfile
	//
	// Get a match profile by its ID
	GetMatchProfile(ctx context.Context, in *GetMatchProfileRequest, opts ...grpc.CallOption) (*GetMatchProfileResponse, error)
	// UpdateMatchProfile
	//
	// Update a match profile by its ID
	UpdateMatchProfile(ctx context.Context, in *UpdateMatchProfileRequest, opts ...grpc.CallOption) (*UpdateMatchProfileResponse, error)
	// DeleteMatchProfile
	//
	// Delete a match profile by its ID
	DeleteMatchProfile(ctx context.Context, in *DeleteMatchProfileRequest, opts ...grpc.CallOption) (*DeleteMatchProfileResponse, error)
	// ListMatchProfiles
	//
	// List all match profiles
	ListMatchProfiles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListMatchProfilesResponse, error)
	// WatchAssignments
	//
	// Watch for assignments for a ticket
	WatchAssignments(ctx context.Context, in *WatchAssignmentsRequest, opts ...grpc.CallOption) (MatchmakingService_WatchAssignmentsClient, error)
	// GetMatchData
	//
	// Gets the latest match data for a match
	GetMatchData(ctx context.Context, in *GetMatchDataRequest, opts ...grpc.CallOption) (*GetMatchDataResponse, error)
	// UpdateMatchData
	//
	// Updates the match data for a match
	UpdateMatchData(ctx context.Context, in *UpdateMatchDataRequest, opts ...grpc.CallOption) (*UpdateMatchDataResponse, error)
	// GetOpenApiSpec
	//
	// Returns the generated openapi swagger document
	GetOpenApiSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// ExportSettings
	//
	// Export the settings
	ExportSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SettingsImportExportData, error)
	// ImportSettings
	//
	// Import the settings
	ImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type matchmakingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchmakingServiceClient(cc grpc.ClientConnInterface) MatchmakingServiceClient {
	return &matchmakingServiceClient{cc}
}

func (c *matchmakingServiceClient) CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*CreateTicketResponse, error) {
	out := new(CreateTicketResponse)
	err := c.cc.Invoke(ctx, "/matchmaking.MatchmakingService/CreateTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakingServiceClient) GetTicket(ctx context.Context, in *GetTicketRequest, opts ...grpc.CallOption) (*GetTicketResponse, error) {
	out := new(GetTicketResponse)
	err := c.cc.Invoke(ctx, "/matchmaking.MatchmakingService/GetTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakingServiceClient) DeleteTicket(ctx context.Context, in *DeleteTicketRequest, opts ...grpc.CallOption) (*DeleteTicketResponse, error) {
	out := new(DeleteTicketResponse)
	err := c.cc.Invoke(ctx, "/matchmaking.MatchmakingService/DeleteTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakingServiceClient) CreateMatchProfile(ctx context.Context, in *CreateMatchProfileRequest, opts ...grpc.CallOption) (*CreateMatchProfileResponse, error) {
	out := new(CreateMatchProfileResponse)
	err := c.cc.Invoke(ctx, "/matchmaking.MatchmakingService/CreateMatchProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakingServiceClient) CreateMatchProfileV2(ctx context.Context, in *CreateMatchProfileRequestv2, opts ...grpc.CallOption) (*CreateMatchProfileResponse, error) {
	out := new(CreateMatchProfileResponse)
	err := c.cc.Invoke(ctx, "/matchmaking.MatchmakingService/CreateMatchProfileV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakingServiceClient) GetMatchProfile(ctx context.Context, in *GetMatchProfileRequest, opts ...grpc.CallOption) (*GetMatchProfileResponse, error) {
	out := new(GetMatchProfileResponse)
	err := c.cc.Invoke(ctx, "/matchmaking.MatchmakingService/GetMatchProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakingServiceClient) UpdateMatchProfile(ctx context.Context, in *UpdateMatchProfileRequest, opts ...grpc.CallOption) (*UpdateMatchProfileResponse, error) {
	out := new(UpdateMatchProfileResponse)
	err := c.cc.Invoke(ctx, "/matchmaking.MatchmakingService/UpdateMatchProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakingServiceClient) DeleteMatchProfile(ctx context.Context, in *DeleteMatchProfileRequest, opts ...grpc.CallOption) (*DeleteMatchProfileResponse, error) {
	out := new(DeleteMatchProfileResponse)
	err := c.cc.Invoke(ctx, "/matchmaking.MatchmakingService/DeleteMatchProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakingServiceClient) ListMatchProfiles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListMatchProfilesResponse, error) {
	out := new(ListMatchProfilesResponse)
	err := c.cc.Invoke(ctx, "/matchmaking.MatchmakingService/ListMatchProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakingServiceClient) WatchAssignments(ctx context.Context, in *WatchAssignmentsRequest, opts ...grpc.CallOption) (MatchmakingService_WatchAssignmentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MatchmakingService_ServiceDesc.Streams[0], "/matchmaking.MatchmakingService/WatchAssignments", opts...)
	if err != nil {
		return nil, err
	}
	x := &matchmakingServiceWatchAssignmentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MatchmakingService_WatchAssignmentsClient interface {
	Recv() (*WatchAssignmentsResponse, error)
	grpc.ClientStream
}

type matchmakingServiceWatchAssignmentsClient struct {
	grpc.ClientStream
}

func (x *matchmakingServiceWatchAssignmentsClient) Recv() (*WatchAssignmentsResponse, error) {
	m := new(WatchAssignmentsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *matchmakingServiceClient) GetMatchData(ctx context.Context, in *GetMatchDataRequest, opts ...grpc.CallOption) (*GetMatchDataResponse, error) {
	out := new(GetMatchDataResponse)
	err := c.cc.Invoke(ctx, "/matchmaking.MatchmakingService/GetMatchData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakingServiceClient) UpdateMatchData(ctx context.Context, in *UpdateMatchDataRequest, opts ...grpc.CallOption) (*UpdateMatchDataResponse, error) {
	out := new(UpdateMatchDataResponse)
	err := c.cc.Invoke(ctx, "/matchmaking.MatchmakingService/UpdateMatchData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakingServiceClient) GetOpenApiSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/matchmaking.MatchmakingService/GetOpenApiSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakingServiceClient) ExportSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SettingsImportExportData, error) {
	out := new(SettingsImportExportData)
	err := c.cc.Invoke(ctx, "/matchmaking.MatchmakingService/ExportSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakingServiceClient) ImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/matchmaking.MatchmakingService/ImportSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchmakingServiceServer is the server API for MatchmakingService service.
// All implementations must embed UnimplementedMatchmakingServiceServer
// for forward compatibility
type MatchmakingServiceServer interface {
	// CreateTicket
	//
	// Create a new ticket for a player to be matched with other players
	CreateTicket(context.Context, *CreateTicketRequest) (*CreateTicketResponse, error)
	// GetTicket
	//
	// Get a ticket by its ID
	GetTicket(context.Context, *GetTicketRequest) (*GetTicketResponse, error)
	// DeleteTicket
	//
	// Delete a ticket by its ID
	DeleteTicket(context.Context, *DeleteTicketRequest) (*DeleteTicketResponse, error)
	// CreateMatchProfile
	CreateMatchProfile(context.Context, *CreateMatchProfileRequest) (*CreateMatchProfileResponse, error)
	// CreateMatchProfile v2
	CreateMatchProfileV2(context.Context, *CreateMatchProfileRequestv2) (*CreateMatchProfileResponse, error)
	// GetMatchProfile
	//
	// Get a match profile by its ID
	GetMatchProfile(context.Context, *GetMatchProfileRequest) (*GetMatchProfileResponse, error)
	// UpdateMatchProfile
	//
	// Update a match profile by its ID
	UpdateMatchProfile(context.Context, *UpdateMatchProfileRequest) (*UpdateMatchProfileResponse, error)
	// DeleteMatchProfile
	//
	// Delete a match profile by its ID
	DeleteMatchProfile(context.Context, *DeleteMatchProfileRequest) (*DeleteMatchProfileResponse, error)
	// ListMatchProfiles
	//
	// List all match profiles
	ListMatchProfiles(context.Context, *emptypb.Empty) (*ListMatchProfilesResponse, error)
	// WatchAssignments
	//
	// Watch for assignments for a ticket
	WatchAssignments(*WatchAssignmentsRequest, MatchmakingService_WatchAssignmentsServer) error
	// GetMatchData
	//
	// Gets the latest match data for a match
	GetMatchData(context.Context, *GetMatchDataRequest) (*GetMatchDataResponse, error)
	// UpdateMatchData
	//
	// Updates the match data for a match
	UpdateMatchData(context.Context, *UpdateMatchDataRequest) (*UpdateMatchDataResponse, error)
	// GetOpenApiSpec
	//
	// Returns the generated openapi swagger document
	GetOpenApiSpec(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error)
	// ExportSettings
	//
	// Export the settings
	ExportSettings(context.Context, *emptypb.Empty) (*SettingsImportExportData, error)
	// ImportSettings
	//
	// Import the settings
	ImportSettings(context.Context, *SettingsImportExportData) (*emptypb.Empty, error)
	mustEmbedUnimplementedMatchmakingServiceServer()
}

// UnimplementedMatchmakingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMatchmakingServiceServer struct {
}

func (UnimplementedMatchmakingServiceServer) CreateTicket(context.Context, *CreateTicketRequest) (*CreateTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicket not implemented")
}
func (UnimplementedMatchmakingServiceServer) GetTicket(context.Context, *GetTicketRequest) (*GetTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicket not implemented")
}
func (UnimplementedMatchmakingServiceServer) DeleteTicket(context.Context, *DeleteTicketRequest) (*DeleteTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicket not implemented")
}
func (UnimplementedMatchmakingServiceServer) CreateMatchProfile(context.Context, *CreateMatchProfileRequest) (*CreateMatchProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMatchProfile not implemented")
}
func (UnimplementedMatchmakingServiceServer) CreateMatchProfileV2(context.Context, *CreateMatchProfileRequestv2) (*CreateMatchProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMatchProfileV2 not implemented")
}
func (UnimplementedMatchmakingServiceServer) GetMatchProfile(context.Context, *GetMatchProfileRequest) (*GetMatchProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchProfile not implemented")
}
func (UnimplementedMatchmakingServiceServer) UpdateMatchProfile(context.Context, *UpdateMatchProfileRequest) (*UpdateMatchProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMatchProfile not implemented")
}
func (UnimplementedMatchmakingServiceServer) DeleteMatchProfile(context.Context, *DeleteMatchProfileRequest) (*DeleteMatchProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMatchProfile not implemented")
}
func (UnimplementedMatchmakingServiceServer) ListMatchProfiles(context.Context, *emptypb.Empty) (*ListMatchProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMatchProfiles not implemented")
}
func (UnimplementedMatchmakingServiceServer) WatchAssignments(*WatchAssignmentsRequest, MatchmakingService_WatchAssignmentsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchAssignments not implemented")
}
func (UnimplementedMatchmakingServiceServer) GetMatchData(context.Context, *GetMatchDataRequest) (*GetMatchDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchData not implemented")
}
func (UnimplementedMatchmakingServiceServer) UpdateMatchData(context.Context, *UpdateMatchDataRequest) (*UpdateMatchDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMatchData not implemented")
}
func (UnimplementedMatchmakingServiceServer) GetOpenApiSpec(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenApiSpec not implemented")
}
func (UnimplementedMatchmakingServiceServer) ExportSettings(context.Context, *emptypb.Empty) (*SettingsImportExportData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportSettings not implemented")
}
func (UnimplementedMatchmakingServiceServer) ImportSettings(context.Context, *SettingsImportExportData) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportSettings not implemented")
}
func (UnimplementedMatchmakingServiceServer) mustEmbedUnimplementedMatchmakingServiceServer() {}

// UnsafeMatchmakingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchmakingServiceServer will
// result in compilation errors.
type UnsafeMatchmakingServiceServer interface {
	mustEmbedUnimplementedMatchmakingServiceServer()
}

func RegisterMatchmakingServiceServer(s grpc.ServiceRegistrar, srv MatchmakingServiceServer) {
	s.RegisterService(&MatchmakingService_ServiceDesc, srv)
}

func _MatchmakingService_CreateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServiceServer).CreateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matchmaking.MatchmakingService/CreateTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServiceServer).CreateTicket(ctx, req.(*CreateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchmakingService_GetTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServiceServer).GetTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matchmaking.MatchmakingService/GetTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServiceServer).GetTicket(ctx, req.(*GetTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchmakingService_DeleteTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServiceServer).DeleteTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matchmaking.MatchmakingService/DeleteTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServiceServer).DeleteTicket(ctx, req.(*DeleteTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchmakingService_CreateMatchProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMatchProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServiceServer).CreateMatchProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matchmaking.MatchmakingService/CreateMatchProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServiceServer).CreateMatchProfile(ctx, req.(*CreateMatchProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchmakingService_CreateMatchProfileV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMatchProfileRequestv2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServiceServer).CreateMatchProfileV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matchmaking.MatchmakingService/CreateMatchProfileV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServiceServer).CreateMatchProfileV2(ctx, req.(*CreateMatchProfileRequestv2))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchmakingService_GetMatchProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServiceServer).GetMatchProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matchmaking.MatchmakingService/GetMatchProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServiceServer).GetMatchProfile(ctx, req.(*GetMatchProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchmakingService_UpdateMatchProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMatchProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServiceServer).UpdateMatchProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matchmaking.MatchmakingService/UpdateMatchProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServiceServer).UpdateMatchProfile(ctx, req.(*UpdateMatchProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchmakingService_DeleteMatchProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMatchProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServiceServer).DeleteMatchProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matchmaking.MatchmakingService/DeleteMatchProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServiceServer).DeleteMatchProfile(ctx, req.(*DeleteMatchProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchmakingService_ListMatchProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServiceServer).ListMatchProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matchmaking.MatchmakingService/ListMatchProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServiceServer).ListMatchProfiles(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchmakingService_WatchAssignments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchAssignmentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MatchmakingServiceServer).WatchAssignments(m, &matchmakingServiceWatchAssignmentsServer{stream})
}

type MatchmakingService_WatchAssignmentsServer interface {
	Send(*WatchAssignmentsResponse) error
	grpc.ServerStream
}

type matchmakingServiceWatchAssignmentsServer struct {
	grpc.ServerStream
}

func (x *matchmakingServiceWatchAssignmentsServer) Send(m *WatchAssignmentsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MatchmakingService_GetMatchData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServiceServer).GetMatchData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matchmaking.MatchmakingService/GetMatchData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServiceServer).GetMatchData(ctx, req.(*GetMatchDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchmakingService_UpdateMatchData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMatchDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServiceServer).UpdateMatchData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matchmaking.MatchmakingService/UpdateMatchData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServiceServer).UpdateMatchData(ctx, req.(*UpdateMatchDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchmakingService_GetOpenApiSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServiceServer).GetOpenApiSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matchmaking.MatchmakingService/GetOpenApiSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServiceServer).GetOpenApiSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchmakingService_ExportSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServiceServer).ExportSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matchmaking.MatchmakingService/ExportSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServiceServer).ExportSettings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchmakingService_ImportSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsImportExportData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServiceServer).ImportSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matchmaking.MatchmakingService/ImportSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServiceServer).ImportSettings(ctx, req.(*SettingsImportExportData))
	}
	return interceptor(ctx, in, info, handler)
}

// MatchmakingService_ServiceDesc is the grpc.ServiceDesc for MatchmakingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchmakingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "matchmaking.MatchmakingService",
	HandlerType: (*MatchmakingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTicket",
			Handler:    _MatchmakingService_CreateTicket_Handler,
		},
		{
			MethodName: "GetTicket",
			Handler:    _MatchmakingService_GetTicket_Handler,
		},
		{
			MethodName: "DeleteTicket",
			Handler:    _MatchmakingService_DeleteTicket_Handler,
		},
		{
			MethodName: "CreateMatchProfile",
			Handler:    _MatchmakingService_CreateMatchProfile_Handler,
		},
		{
			MethodName: "CreateMatchProfileV2",
			Handler:    _MatchmakingService_CreateMatchProfileV2_Handler,
		},
		{
			MethodName: "GetMatchProfile",
			Handler:    _MatchmakingService_GetMatchProfile_Handler,
		},
		{
			MethodName: "UpdateMatchProfile",
			Handler:    _MatchmakingService_UpdateMatchProfile_Handler,
		},
		{
			MethodName: "DeleteMatchProfile",
			Handler:    _MatchmakingService_DeleteMatchProfile_Handler,
		},
		{
			MethodName: "ListMatchProfiles",
			Handler:    _MatchmakingService_ListMatchProfiles_Handler,
		},
		{
			MethodName: "GetMatchData",
			Handler:    _MatchmakingService_GetMatchData_Handler,
		},
		{
			MethodName: "UpdateMatchData",
			Handler:    _MatchmakingService_UpdateMatchData_Handler,
		},
		{
			MethodName: "GetOpenApiSpec",
			Handler:    _MatchmakingService_GetOpenApiSpec_Handler,
		},
		{
			MethodName: "ExportSettings",
			Handler:    _MatchmakingService_ExportSettings_Handler,
		},
		{
			MethodName: "ImportSettings",
			Handler:    _MatchmakingService_ImportSettings_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchAssignments",
			Handler:       _MatchmakingService_WatchAssignments_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "matchmaking_services.proto",
}
