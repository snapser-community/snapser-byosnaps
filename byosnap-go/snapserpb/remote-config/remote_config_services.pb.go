// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.23.3
// source: remote_config_services.proto

package proto

import (



	
	
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// API MESSAGES
type SettingsImportExportData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Data       string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	ExportedAt int64  `protobuf:"varint,3,opt,name=exported_at,json=exportedAt,proto3" json:"exported_at,omitempty"`
}

func (x *SettingsImportExportData) Reset() {
	*x = SettingsImportExportData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_config_services_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingsImportExportData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingsImportExportData) ProtoMessage() {}

func (x *SettingsImportExportData) ProtoReflect() protoreflect.Message {
	mi := &file_remote_config_services_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingsImportExportData.ProtoReflect.Descriptor instead.
func (*SettingsImportExportData) Descriptor() ([]byte, []int) {
	return file_remote_config_services_proto_rawDescGZIP(), []int{0}
}

func (x *SettingsImportExportData) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SettingsImportExportData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *SettingsImportExportData) GetExportedAt() int64 {
	if x != nil {
		return x.ExportedAt
	}
	return 0
}

type SetBaseConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema    *structpb.Value `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	BaseValue *structpb.Value `protobuf:"bytes,2,opt,name=base_value,json=baseValue,proto3" json:"base_value,omitempty"`
}

func (x *SetBaseConfigRequest) Reset() {
	*x = SetBaseConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_config_services_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBaseConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBaseConfigRequest) ProtoMessage() {}

func (x *SetBaseConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_remote_config_services_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBaseConfigRequest.ProtoReflect.Descriptor instead.
func (*SetBaseConfigRequest) Descriptor() ([]byte, []int) {
	return file_remote_config_services_proto_rawDescGZIP(), []int{1}
}

func (x *SetBaseConfigRequest) GetSchema() *structpb.Value {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *SetBaseConfigRequest) GetBaseValue() *structpb.Value {
	if x != nil {
		return x.BaseValue
	}
	return nil
}

type SetBaseConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvalidOverrides []string `protobuf:"bytes,1,rep,name=invalid_overrides,json=invalidOverrides,proto3" json:"invalid_overrides,omitempty"`
}

func (x *SetBaseConfigResponse) Reset() {
	*x = SetBaseConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_config_services_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBaseConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBaseConfigResponse) ProtoMessage() {}

func (x *SetBaseConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_config_services_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBaseConfigResponse.ProtoReflect.Descriptor instead.
func (*SetBaseConfigResponse) Descriptor() ([]byte, []int) {
	return file_remote_config_services_proto_rawDescGZIP(), []int{2}
}

func (x *SetBaseConfigResponse) GetInvalidOverrides() []string {
	if x != nil {
		return x.InvalidOverrides
	}
	return nil
}

type CreateAppConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   string          `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Schema    *structpb.Value `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	BaseValue *structpb.Value `protobuf:"bytes,3,opt,name=base_value,json=baseValue,proto3" json:"base_value,omitempty"`
}

func (x *CreateAppConfigRequest) Reset() {
	*x = CreateAppConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_config_services_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppConfigRequest) ProtoMessage() {}

func (x *CreateAppConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_remote_config_services_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppConfigRequest.ProtoReflect.Descriptor instead.
func (*CreateAppConfigRequest) Descriptor() ([]byte, []int) {
	return file_remote_config_services_proto_rawDescGZIP(), []int{3}
}

func (x *CreateAppConfigRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CreateAppConfigRequest) GetSchema() *structpb.Value {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *CreateAppConfigRequest) GetBaseValue() *structpb.Value {
	if x != nil {
		return x.BaseValue
	}
	return nil
}

type UpdateAppConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   string          `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Schema    *structpb.Value `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	BaseValue *structpb.Value `protobuf:"bytes,3,opt,name=base_value,json=baseValue,proto3" json:"base_value,omitempty"`
}

func (x *UpdateAppConfigRequest) Reset() {
	*x = UpdateAppConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_config_services_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppConfigRequest) ProtoMessage() {}

func (x *UpdateAppConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_remote_config_services_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateAppConfigRequest) Descriptor() ([]byte, []int) {
	return file_remote_config_services_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateAppConfigRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UpdateAppConfigRequest) GetSchema() *structpb.Value {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *UpdateAppConfigRequest) GetBaseValue() *structpb.Value {
	if x != nil {
		return x.BaseValue
	}
	return nil
}

type DeleteAppConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DeleteAppConfigRequest) Reset() {
	*x = DeleteAppConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_config_services_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAppConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAppConfigRequest) ProtoMessage() {}

func (x *DeleteAppConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_remote_config_services_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAppConfigRequest.ProtoReflect.Descriptor instead.
func (*DeleteAppConfigRequest) Descriptor() ([]byte, []int) {
	return file_remote_config_services_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteAppConfigRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GetAppConfigsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appconfigs []*AppConfig `protobuf:"bytes,1,rep,name=appconfigs,proto3" json:"appconfigs,omitempty"`
}

func (x *GetAppConfigsResponse) Reset() {
	*x = GetAppConfigsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_config_services_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppConfigsResponse) ProtoMessage() {}

func (x *GetAppConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_config_services_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppConfigsResponse.ProtoReflect.Descriptor instead.
func (*GetAppConfigsResponse) Descriptor() ([]byte, []int) {
	return file_remote_config_services_proto_rawDescGZIP(), []int{6}
}

func (x *GetAppConfigsResponse) GetAppconfigs() []*AppConfig {
	if x != nil {
		return x.Appconfigs
	}
	return nil
}

type GetAppConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetAppConfigRequest) Reset() {
	*x = GetAppConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_config_services_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppConfigRequest) ProtoMessage() {}

func (x *GetAppConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_remote_config_services_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppConfigRequest.ProtoReflect.Descriptor instead.
func (*GetAppConfigRequest) Descriptor() ([]byte, []int) {
	return file_remote_config_services_proto_rawDescGZIP(), []int{7}
}

func (x *GetAppConfigRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GetAppConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *structpb.Value `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *GetAppConfigResponse) Reset() {
	*x = GetAppConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_config_services_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppConfigResponse) ProtoMessage() {}

func (x *GetAppConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_config_services_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppConfigResponse.ProtoReflect.Descriptor instead.
func (*GetAppConfigResponse) Descriptor() ([]byte, []int) {
	return file_remote_config_services_proto_rawDescGZIP(), []int{8}
}

func (x *GetAppConfigResponse) GetConfig() *structpb.Value {
	if x != nil {
		return x.Config
	}
	return nil
}

type AddOverrideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SortOrder       int32           `protobuf:"varint,1,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
	Name            string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Path            string          `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	AllUsers        bool            `protobuf:"varint,4,opt,name=all_users,json=allUsers,proto3" json:"all_users,omitempty"`
	SegmentName     string          `protobuf:"bytes,5,opt,name=segment_name,json=segmentName,proto3" json:"segment_name,omitempty"`
	Value           *structpb.Value `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	RampPercentage  int32           `protobuf:"varint,7,opt,name=ramp_percentage,json=rampPercentage,proto3" json:"ramp_percentage,omitempty"`
	OverrideUserIds []string        `protobuf:"bytes,8,rep,name=override_user_ids,json=overrideUserIds,proto3" json:"override_user_ids,omitempty"`
}

func (x *AddOverrideRequest) Reset() {
	*x = AddOverrideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_config_services_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOverrideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOverrideRequest) ProtoMessage() {}

func (x *AddOverrideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_remote_config_services_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOverrideRequest.ProtoReflect.Descriptor instead.
func (*AddOverrideRequest) Descriptor() ([]byte, []int) {
	return file_remote_config_services_proto_rawDescGZIP(), []int{9}
}

func (x *AddOverrideRequest) GetSortOrder() int32 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *AddOverrideRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddOverrideRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *AddOverrideRequest) GetAllUsers() bool {
	if x != nil {
		return x.AllUsers
	}
	return false
}

func (x *AddOverrideRequest) GetSegmentName() string {
	if x != nil {
		return x.SegmentName
	}
	return ""
}

func (x *AddOverrideRequest) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AddOverrideRequest) GetRampPercentage() int32 {
	if x != nil {
		return x.RampPercentage
	}
	return 0
}

func (x *AddOverrideRequest) GetOverrideUserIds() []string {
	if x != nil {
		return x.OverrideUserIds
	}
	return nil
}

type GetOverrideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOverrideRequest) Reset() {
	*x = GetOverrideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_config_services_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOverrideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOverrideRequest) ProtoMessage() {}

func (x *GetOverrideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_remote_config_services_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOverrideRequest.ProtoReflect.Descriptor instead.
func (*GetOverrideRequest) Descriptor() ([]byte, []int) {
	return file_remote_config_services_proto_rawDescGZIP(), []int{10}
}

func (x *GetOverrideRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOverridesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Overrides []*Override `protobuf:"bytes,1,rep,name=overrides,proto3" json:"overrides,omitempty"`
}

func (x *GetOverridesResponse) Reset() {
	*x = GetOverridesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_config_services_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOverridesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOverridesResponse) ProtoMessage() {}

func (x *GetOverridesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_config_services_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOverridesResponse.ProtoReflect.Descriptor instead.
func (*GetOverridesResponse) Descriptor() ([]byte, []int) {
	return file_remote_config_services_proto_rawDescGZIP(), []int{11}
}

func (x *GetOverridesResponse) GetOverrides() []*Override {
	if x != nil {
		return x.Overrides
	}
	return nil
}

type UpdateOverrideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SortOrder       int32           `protobuf:"varint,1,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
	Name            string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Path            string          `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	AllUsers        bool            `protobuf:"varint,4,opt,name=all_users,json=allUsers,proto3" json:"all_users,omitempty"`
	SegmentName     string          `protobuf:"bytes,5,opt,name=segment_name,json=segmentName,proto3" json:"segment_name,omitempty"`
	Value           *structpb.Value `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	RampPercentage  int32           `protobuf:"varint,7,opt,name=ramp_percentage,json=rampPercentage,proto3" json:"ramp_percentage,omitempty"`
	OverrideUserIds []string        `protobuf:"bytes,8,rep,name=override_user_ids,json=overrideUserIds,proto3" json:"override_user_ids,omitempty"`
}

func (x *UpdateOverrideRequest) Reset() {
	*x = UpdateOverrideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_config_services_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOverrideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOverrideRequest) ProtoMessage() {}

func (x *UpdateOverrideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_remote_config_services_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOverrideRequest.ProtoReflect.Descriptor instead.
func (*UpdateOverrideRequest) Descriptor() ([]byte, []int) {
	return file_remote_config_services_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateOverrideRequest) GetSortOrder() int32 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *UpdateOverrideRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOverrideRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *UpdateOverrideRequest) GetAllUsers() bool {
	if x != nil {
		return x.AllUsers
	}
	return false
}

func (x *UpdateOverrideRequest) GetSegmentName() string {
	if x != nil {
		return x.SegmentName
	}
	return ""
}

func (x *UpdateOverrideRequest) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UpdateOverrideRequest) GetRampPercentage() int32 {
	if x != nil {
		return x.RampPercentage
	}
	return 0
}

func (x *UpdateOverrideRequest) GetOverrideUserIds() []string {
	if x != nil {
		return x.OverrideUserIds
	}
	return nil
}

type DeleteOverrideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOverrideRequest) Reset() {
	*x = DeleteOverrideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_config_services_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOverrideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOverrideRequest) ProtoMessage() {}

func (x *DeleteOverrideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_remote_config_services_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOverrideRequest.ProtoReflect.Descriptor instead.
func (*DeleteOverrideRequest) Descriptor() ([]byte, []int) {
	return file_remote_config_services_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteOverrideRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RampOverrideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RampPercentage int32  `protobuf:"varint,7,opt,name=ramp_percentage,json=rampPercentage,proto3" json:"ramp_percentage,omitempty"`
}

func (x *RampOverrideRequest) Reset() {
	*x = RampOverrideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_config_services_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RampOverrideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RampOverrideRequest) ProtoMessage() {}

func (x *RampOverrideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_remote_config_services_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RampOverrideRequest.ProtoReflect.Descriptor instead.
func (*RampOverrideRequest) Descriptor() ([]byte, []int) {
	return file_remote_config_services_proto_rawDescGZIP(), []int{14}
}

func (x *RampOverrideRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RampOverrideRequest) GetRampPercentage() int32 {
	if x != nil {
		return x.RampPercentage
	}
	return 0
}

type AddOverrideUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OverrideUserIds []string `protobuf:"bytes,2,rep,name=override_user_ids,json=overrideUserIds,proto3" json:"override_user_ids,omitempty"`
}

func (x *AddOverrideUsersRequest) Reset() {
	*x = AddOverrideUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_config_services_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOverrideUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOverrideUsersRequest) ProtoMessage() {}

func (x *AddOverrideUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_remote_config_services_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOverrideUsersRequest.ProtoReflect.Descriptor instead.
func (*AddOverrideUsersRequest) Descriptor() ([]byte, []int) {
	return file_remote_config_services_proto_rawDescGZIP(), []int{15}
}

func (x *AddOverrideUsersRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddOverrideUsersRequest) GetOverrideUserIds() []string {
	if x != nil {
		return x.OverrideUserIds
	}
	return nil
}

type RemoveOverrideUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OverrideUserIds []string `protobuf:"bytes,2,rep,name=override_user_ids,json=overrideUserIds,proto3" json:"override_user_ids,omitempty"`
}

func (x *RemoveOverrideUsersRequest) Reset() {
	*x = RemoveOverrideUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_config_services_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveOverrideUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveOverrideUsersRequest) ProtoMessage() {}

func (x *RemoveOverrideUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_remote_config_services_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveOverrideUsersRequest.ProtoReflect.Descriptor instead.
func (*RemoveOverrideUsersRequest) Descriptor() ([]byte, []int) {
	return file_remote_config_services_proto_rawDescGZIP(), []int{16}
}

func (x *RemoveOverrideUsersRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RemoveOverrideUsersRequest) GetOverrideUserIds() []string {
	if x != nil {
		return x.OverrideUserIds
	}
	return nil
}

type PreviewConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Overrides []string `protobuf:"bytes,1,rep,name=overrides,proto3" json:"overrides,omitempty"`
}

func (x *PreviewConfigRequest) Reset() {
	*x = PreviewConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_config_services_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewConfigRequest) ProtoMessage() {}

func (x *PreviewConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_remote_config_services_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewConfigRequest.ProtoReflect.Descriptor instead.
func (*PreviewConfigRequest) Descriptor() ([]byte, []int) {
	return file_remote_config_services_proto_rawDescGZIP(), []int{17}
}

func (x *PreviewConfigRequest) GetOverrides() []string {
	if x != nil {
		return x.Overrides
	}
	return nil
}

type PreviewConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *structpb.Value `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *PreviewConfigResponse) Reset() {
	*x = PreviewConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_config_services_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewConfigResponse) ProtoMessage() {}

func (x *PreviewConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_config_services_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewConfigResponse.ProtoReflect.Descriptor instead.
func (*PreviewConfigResponse) Descriptor() ([]byte, []int) {
	return file_remote_config_services_proto_rawDescGZIP(), []int{18}
}

func (x *PreviewConfigResponse) GetConfig() *structpb.Value {
	if x != nil {
		return x.Config
	}
	return nil
}

type PreviewUserConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *PreviewUserConfigRequest) Reset() {
	*x = PreviewUserConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_config_services_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewUserConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewUserConfigRequest) ProtoMessage() {}

func (x *PreviewUserConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_remote_config_services_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewUserConfigRequest.ProtoReflect.Descriptor instead.
func (*PreviewUserConfigRequest) Descriptor() ([]byte, []int) {
	return file_remote_config_services_proto_rawDescGZIP(), []int{19}
}

func (x *PreviewUserConfigRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type PreviewUserConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *structpb.Value `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *PreviewUserConfigResponse) Reset() {
	*x = PreviewUserConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_config_services_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewUserConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewUserConfigResponse) ProtoMessage() {}

func (x *PreviewUserConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_config_services_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewUserConfigResponse.ProtoReflect.Descriptor instead.
func (*PreviewUserConfigResponse) Descriptor() ([]byte, []int) {
	return file_remote_config_services_proto_rawDescGZIP(), []int{20}
}

func (x *PreviewUserConfigResponse) GetConfig() *structpb.Value {
	if x != nil {
		return x.Config
	}
	return nil
}

type GetUserConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetUserConfigRequest) Reset() {
	*x = GetUserConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_config_services_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserConfigRequest) ProtoMessage() {}

func (x *GetUserConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_remote_config_services_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserConfigRequest.ProtoReflect.Descriptor instead.
func (*GetUserConfigRequest) Descriptor() ([]byte, []int) {
	return file_remote_config_services_proto_rawDescGZIP(), []int{21}
}

func (x *GetUserConfigRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetUserConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *structpb.Value `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *GetUserConfigResponse) Reset() {
	*x = GetUserConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_config_services_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserConfigResponse) ProtoMessage() {}

func (x *GetUserConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_config_services_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserConfigResponse.ProtoReflect.Descriptor instead.
func (*GetUserConfigResponse) Descriptor() ([]byte, []int) {
	return file_remote_config_services_proto_rawDescGZIP(), []int{22}
}

func (x *GetUserConfigResponse) GetConfig() *structpb.Value {
	if x != nil {
		return x.Config
	}
	return nil
}

var File_remote_config_services_proto protoreflect.FileDescriptor

var file_remote_config_services_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x69, 0x0a,
	0x18, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xda, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74,
	0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5d, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d, 0xfa, 0x42, 0x05, 0xa2, 0x01,
	0x02, 0x08, 0x01, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x1f, 0x32, 0x19, 0x4a, 0x53, 0x4f, 0x4e, 0x20,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x9a, 0x02, 0x01, 0x00, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x63, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2c, 0xfa, 0x42,
	0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x1e, 0x32, 0x18, 0x42, 0x61,
	0x73, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x9a, 0x02, 0x01, 0x00, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x44, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xfa, 0x42, 0x29, 0x72, 0x27, 0x10, 0x01,
	0x18, 0x64, 0x32, 0x21, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x5d, 0x29, 0x3f, 0x24, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01,
	0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x3f, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09,
	0x62, 0x61, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xfa, 0x42, 0x29, 0x72, 0x27, 0x10, 0x01, 0x18, 0x64,
	0x32, 0x21, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d,
	0x29, 0x3f, 0x24, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x3f, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x62, 0x61,
	0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x60, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x46, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2c, 0xfa, 0x42, 0x29, 0x72, 0x27, 0x10, 0x01, 0x18, 0x64, 0x32, 0x21, 0x28,
	0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0a, 0x61, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x7b, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x4a, 0xfa, 0x42, 0x29, 0x72, 0x27, 0x10, 0x01, 0x18, 0x64, 0x32,
	0x21, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29,
	0x3f, 0x24, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x18, 0x32, 0x12, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x9a, 0x02, 0x01, 0x07,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x63, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4b, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x32, 0x12,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61,
	0x70, 0x70, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xcd,
	0x05, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x26, 0xe0, 0x41, 0x02, 0x92, 0x41,
	0x20, 0x32, 0x1a, 0x53, 0x6f, 0x72, 0x74, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x9a, 0x02, 0x01,
	0x03, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x01, 0x18, 0x64, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x1a, 0x32, 0x14, 0x4e, 0x61, 0x6d,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x10, 0x01, 0x18, 0x80, 0x02, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x1f, 0x32, 0x19, 0x4a, 0x53, 0x4f,
	0x4e, 0x20, 0x50, 0x61, 0x74, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x5b, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x35, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62,
	0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x9a,
	0x02, 0x01, 0x02, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x64, 0x0a,
	0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x41, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x92, 0x41, 0x37, 0x32,
	0x31, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20,
	0x74, 0x6f, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x0b, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0xfa, 0x42, 0x05, 0xa2,
	0x01, 0x02, 0x08, 0x01, 0x92, 0x41, 0x28, 0x32, 0x22, 0x54, 0x68, 0x65, 0x20, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x74, 0x6f,
	0x20, 0x62, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x00, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5b, 0x0a, 0x0f, 0x72, 0x61, 0x6d, 0x70, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x32, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x28, 0x00, 0x92, 0x41, 0x26, 0x32, 0x20, 0x52,
	0x61, 0x6d, 0x70, 0x20, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x9a,
	0x02, 0x01, 0x03, 0x52, 0x0e, 0x72, 0x61, 0x6d, 0x70, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x69, 0x0a, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x3d,
	0xfa, 0x42, 0x20, 0x92, 0x01, 0x1d, 0x18, 0x01, 0x22, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32,
	0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f,
	0x5d, 0x2a, 0x24, 0x92, 0x41, 0x17, 0x32, 0x11, 0x55, 0x73, 0x65, 0x72, 0x20, 0x49, 0x44, 0x73,
	0x20, 0x6f, 0x66, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x9a, 0x02, 0x01, 0x01, 0x52, 0x0f, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x53,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x29, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0xe0, 0x41, 0x02,
	0x92, 0x41, 0x1a, 0x32, 0x14, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x22, 0xd6, 0x05, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0a,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x26, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x20, 0x32, 0x1a, 0x53, 0x6f, 0x72, 0x74, 0x20, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x29, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0xe0, 0x41, 0x02, 0x92,
	0x41, 0x1a, 0x32, 0x14, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2f, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x02, 0xe0, 0x41, 0x02, 0x92,
	0x41, 0x1f, 0x32, 0x19, 0x4a, 0x53, 0x4f, 0x4e, 0x20, 0x50, 0x61, 0x74, 0x68, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x9a, 0x02, 0x01,
	0x07, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x5b, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32,
	0x35, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6c, 0x6c,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x9a, 0x02, 0x01, 0x02, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x64, 0x0a, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x18, 0x64, 0x92, 0x41, 0x37, 0x32, 0x31, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x20, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x0b, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x64, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x36, 0xfa, 0x42, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0xe0, 0x41, 0x02, 0x92, 0x41,
	0x28, 0x32, 0x22, 0x54, 0x68, 0x65, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x5e, 0x0a, 0x0f, 0x72, 0x61, 0x6d, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x35, 0xfa, 0x42, 0x06, 0x1a, 0x04,
	0x18, 0x64, 0x28, 0x00, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x26, 0x32, 0x20, 0x52, 0x61, 0x6d, 0x70,
	0x20, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x9a, 0x02, 0x01, 0x03,
	0x52, 0x0e, 0x72, 0x61, 0x6d, 0x70, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x69, 0x0a, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x3d, 0xfa, 0x42, 0x20,
	0x92, 0x01, 0x1d, 0x18, 0x01, 0x22, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28,
	0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24,
	0x92, 0x41, 0x17, 0x32, 0x11, 0x55, 0x73, 0x65, 0x72, 0x20, 0x49, 0x44, 0x73, 0x20, 0x6f, 0x66,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x9a, 0x02, 0x01, 0x01, 0x52, 0x0f, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x56, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x29, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0xe0, 0x41, 0x02,
	0x92, 0x41, 0x1a, 0x32, 0x14, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x13, 0x52, 0x61, 0x6d, 0x70, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xfa, 0x42, 0x06, 0x72, 0x04,
	0x10, 0x01, 0x18, 0x64, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x1a, 0x32, 0x14, 0x4e, 0x61, 0x6d, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x9a, 0x02, 0x01, 0x07, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x72, 0x61,
	0x6d, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x35, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x28, 0x00, 0xe0, 0x41,
	0x02, 0x92, 0x41, 0x26, 0x32, 0x20, 0x52, 0x61, 0x6d, 0x70, 0x20, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x0e, 0x72, 0x61, 0x6d, 0x70,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x17, 0x41,
	0x64, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0xe0,
	0x41, 0x02, 0x92, 0x41, 0x1a, 0x32, 0x14, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x9a, 0x02, 0x01, 0x07, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6b, 0x0a, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x3f, 0xfa, 0x42, 0x22, 0x92, 0x01, 0x1f, 0x08, 0x01, 0x18, 0x01, 0x22, 0x19, 0x72, 0x17,
	0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x92, 0x41, 0x17, 0x32, 0x11, 0x55, 0x73, 0x65, 0x72,
	0x20, 0x49, 0x44, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x9a, 0x02, 0x01,
	0x01, 0x52, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x29, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x1a,
	0x32, 0x14, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x6b, 0x0a, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x3f, 0xfa, 0x42, 0x22,
	0x92, 0x01, 0x1f, 0x08, 0x01, 0x18, 0x01, 0x22, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32,
	0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d,
	0x2a, 0x24, 0x92, 0x41, 0x17, 0x32, 0x11, 0x55, 0x73, 0x65, 0x72, 0x20, 0x49, 0x44, 0x73, 0x20,
	0x6f, 0x66, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x9a, 0x02, 0x01, 0x01, 0x52, 0x0f, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x6b, 0x0a,
	0x14, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x35, 0xfa, 0x42, 0x0f, 0x92, 0x01, 0x0c,
	0x08, 0x01, 0x18, 0x01, 0x22, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0xe0, 0x41, 0x02, 0x92,
	0x41, 0x1d, 0x32, 0x17, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x20, 0x74, 0x6f,
	0x20, 0x62, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x01, 0x52,
	0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x22, 0x47, 0x0a, 0x15, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x70, 0x0a, 0x18, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x54, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x3b, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69,
	0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0xe0, 0x41,
	0x02, 0x92, 0x41, 0x19, 0x32, 0x13, 0x55, 0x73, 0x65, 0x72, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x19, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x6c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0xfa, 0x42, 0x19,
	0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x19, 0x32,
	0x13, 0x55, 0x73, 0x65, 0x72, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x65, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x06, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0xf5, 0x18, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x97, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x23, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0xfa, 0xd2,
	0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x26, 0x1a, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0x78, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x15, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x38, 0xfa, 0xd2, 0xe4, 0x93, 0x02,
	0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23,
	0x12, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x93, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41,
	0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x3f, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09,
	0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22,
	0x25, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x2d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0x9d, 0x01, 0x0a, 0x0f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x49,
	0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x34, 0x32, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2f, 0x61, 0x70, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x7b, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x98, 0x01, 0x0a, 0x0f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x46, 0xfa, 0xd2,
	0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x31, 0x2a, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f,
	0x61, 0x70, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x7d, 0x12, 0x8b, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xc8, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x22, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6f, 0xfa, 0xd2,
	0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x28, 0x12, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x70, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x92, 0x41, 0x30, 0x12, 0x0e, 0x47,
	0x65, 0x74, 0x20, 0x41, 0x70, 0x70, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x1e, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x12, 0x88, 0x01,
	0x0a, 0x0b, 0x41, 0x64, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x21, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x64,
	0x64, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3e, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09,
	0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22,
	0x24, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x88, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x23, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07,
	0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x12, 0x21, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22,
	0x42, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x12, 0x95, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x24, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x45, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x1a, 0x2b, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x92, 0x01, 0x0a, 0x0e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x24,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x42, 0xfa, 0xd2,
	0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2d, 0x2a, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x12, 0xa0, 0x01, 0x0a, 0x0c, 0x52, 0x61, 0x6d, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x12, 0x22, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x52, 0x61, 0x6d, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x54, 0xfa,
	0xd2, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x2c, 0x50,
	0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x1a, 0x30,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x61, 0x6d, 0x70,
	0x3a, 0x01, 0x2a, 0x12, 0x9f, 0x01, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x26, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x4b, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09,
	0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x22,
	0x31, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xa2, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x29, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x48, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54,
	0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x2a, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x0d, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12,
	0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0xaf, 0x01, 0x0a, 0x11, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x27, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x47, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56,
	0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xf2, 0x01, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x95, 0x01, 0xfa, 0xd2, 0xe4, 0x93, 0x02,
	0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12,
	0x27, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x55, 0x12, 0x0f, 0x47, 0x65, 0x74,
	0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x1f, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x72, 0x21, 0x0a,
	0x1f, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x55, 0x73, 0x65, 0x72, 0x20, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x28, 0x01,
	0x12, 0x8b, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x27, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x38, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x8e,
	0x01, 0x0a, 0x0e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x27, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x3b, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56,
	0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x42,
	0xa5, 0x02, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x92, 0x41, 0xe9, 0x01, 0x12, 0xa3,
	0x01, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x37, 0x53, 0x65, 0x74, 0x20, 0x75, 0x70, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x20, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x79, 0x6f, 0x75,
	0x72, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x52, 0x0a, 0x0c, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x65, 0x72, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x12, 0x42, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x39, 0x35, 0x38, 0x33, 0x37, 0x37, 0x31, 0x30,
	0x36, 0x37, 0x37, 0x36, 0x31, 0x36, 0x32, 0x33, 0x30, 0x34, 0x2f, 0x39, 0x35, 0x38, 0x33, 0x37,
	0x37, 0x32, 0x36, 0x31, 0x32, 0x33, 0x35, 0x35, 0x38, 0x35, 0x30, 0x36, 0x34, 0x32, 0x05, 0x30,
	0x2e, 0x31, 0x2e, 0x30, 0x52, 0x41, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x36, 0x0a, 0x1e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x14, 0x0a, 0x12, 0x1a, 0x10, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x41,
	0x70, 0x69, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_remote_config_services_proto_rawDescOnce sync.Once
	file_remote_config_services_proto_rawDescData = file_remote_config_services_proto_rawDesc
)

func file_remote_config_services_proto_rawDescGZIP() []byte {
	file_remote_config_services_proto_rawDescOnce.Do(func() {
		file_remote_config_services_proto_rawDescData = protoimpl.X.CompressGZIP(file_remote_config_services_proto_rawDescData)
	})
	return file_remote_config_services_proto_rawDescData
}

var file_remote_config_services_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_remote_config_services_proto_goTypes = []interface{}{
	(*SettingsImportExportData)(nil),   // 0: remote_config.SettingsImportExportData
	(*SetBaseConfigRequest)(nil),       // 1: remote_config.SetBaseConfigRequest
	(*SetBaseConfigResponse)(nil),      // 2: remote_config.SetBaseConfigResponse
	(*CreateAppConfigRequest)(nil),     // 3: remote_config.CreateAppConfigRequest
	(*UpdateAppConfigRequest)(nil),     // 4: remote_config.UpdateAppConfigRequest
	(*DeleteAppConfigRequest)(nil),     // 5: remote_config.DeleteAppConfigRequest
	(*GetAppConfigsResponse)(nil),      // 6: remote_config.GetAppConfigsResponse
	(*GetAppConfigRequest)(nil),        // 7: remote_config.GetAppConfigRequest
	(*GetAppConfigResponse)(nil),       // 8: remote_config.GetAppConfigResponse
	(*AddOverrideRequest)(nil),         // 9: remote_config.AddOverrideRequest
	(*GetOverrideRequest)(nil),         // 10: remote_config.GetOverrideRequest
	(*GetOverridesResponse)(nil),       // 11: remote_config.GetOverridesResponse
	(*UpdateOverrideRequest)(nil),      // 12: remote_config.UpdateOverrideRequest
	(*DeleteOverrideRequest)(nil),      // 13: remote_config.DeleteOverrideRequest
	(*RampOverrideRequest)(nil),        // 14: remote_config.RampOverrideRequest
	(*AddOverrideUsersRequest)(nil),    // 15: remote_config.AddOverrideUsersRequest
	(*RemoveOverrideUsersRequest)(nil), // 16: remote_config.RemoveOverrideUsersRequest
	(*PreviewConfigRequest)(nil),       // 17: remote_config.PreviewConfigRequest
	(*PreviewConfigResponse)(nil),      // 18: remote_config.PreviewConfigResponse
	(*PreviewUserConfigRequest)(nil),   // 19: remote_config.PreviewUserConfigRequest
	(*PreviewUserConfigResponse)(nil),  // 20: remote_config.PreviewUserConfigResponse
	(*GetUserConfigRequest)(nil),       // 21: remote_config.GetUserConfigRequest
	(*GetUserConfigResponse)(nil),      // 22: remote_config.GetUserConfigResponse
	(*structpb.Value)(nil),             // 23: google.protobuf.Value
	(*AppConfig)(nil),                  // 24: remote_config.AppConfig
	(*Override)(nil),                   // 25: remote_config.Override
	(*emptypb.Empty)(nil),              // 26: google.protobuf.Empty
	(*Config)(nil),                     // 27: remote_config.Config
}
var file_remote_config_services_proto_depIdxs = []int32{
	23, // 0: remote_config.SetBaseConfigRequest.schema:type_name -> google.protobuf.Value
	23, // 1: remote_config.SetBaseConfigRequest.base_value:type_name -> google.protobuf.Value
	23, // 2: remote_config.CreateAppConfigRequest.schema:type_name -> google.protobuf.Value
	23, // 3: remote_config.CreateAppConfigRequest.base_value:type_name -> google.protobuf.Value
	23, // 4: remote_config.UpdateAppConfigRequest.schema:type_name -> google.protobuf.Value
	23, // 5: remote_config.UpdateAppConfigRequest.base_value:type_name -> google.protobuf.Value
	24, // 6: remote_config.GetAppConfigsResponse.appconfigs:type_name -> remote_config.AppConfig
	23, // 7: remote_config.GetAppConfigResponse.config:type_name -> google.protobuf.Value
	23, // 8: remote_config.AddOverrideRequest.value:type_name -> google.protobuf.Value
	25, // 9: remote_config.GetOverridesResponse.overrides:type_name -> remote_config.Override
	23, // 10: remote_config.UpdateOverrideRequest.value:type_name -> google.protobuf.Value
	23, // 11: remote_config.PreviewConfigResponse.config:type_name -> google.protobuf.Value
	23, // 12: remote_config.PreviewUserConfigResponse.config:type_name -> google.protobuf.Value
	23, // 13: remote_config.GetUserConfigResponse.config:type_name -> google.protobuf.Value
	1,  // 14: remote_config.RemoteConfigService.SetBaseConfig:input_type -> remote_config.SetBaseConfigRequest
	26, // 15: remote_config.RemoteConfigService.GetBaseConfig:input_type -> google.protobuf.Empty
	3,  // 16: remote_config.RemoteConfigService.CreateAppConfig:input_type -> remote_config.CreateAppConfigRequest
	4,  // 17: remote_config.RemoteConfigService.UpdateAppConfig:input_type -> remote_config.UpdateAppConfigRequest
	5,  // 18: remote_config.RemoteConfigService.DeleteAppConfig:input_type -> remote_config.DeleteAppConfigRequest
	26, // 19: remote_config.RemoteConfigService.GetAppConfigs:input_type -> google.protobuf.Empty
	7,  // 20: remote_config.RemoteConfigService.GetAppConfig:input_type -> remote_config.GetAppConfigRequest
	9,  // 21: remote_config.RemoteConfigService.AddOverride:input_type -> remote_config.AddOverrideRequest
	26, // 22: remote_config.RemoteConfigService.GetOverrides:input_type -> google.protobuf.Empty
	10, // 23: remote_config.RemoteConfigService.GetOverride:input_type -> remote_config.GetOverrideRequest
	12, // 24: remote_config.RemoteConfigService.UpdateOverride:input_type -> remote_config.UpdateOverrideRequest
	13, // 25: remote_config.RemoteConfigService.DeleteOverride:input_type -> remote_config.DeleteOverrideRequest
	14, // 26: remote_config.RemoteConfigService.RampOverride:input_type -> remote_config.RampOverrideRequest
	15, // 27: remote_config.RemoteConfigService.AddOverrideUsers:input_type -> remote_config.AddOverrideUsersRequest
	16, // 28: remote_config.RemoteConfigService.RemoveOverrideUsers:input_type -> remote_config.RemoveOverrideUsersRequest
	17, // 29: remote_config.RemoteConfigService.PreviewConfig:input_type -> remote_config.PreviewConfigRequest
	19, // 30: remote_config.RemoteConfigService.PreviewUserConfig:input_type -> remote_config.PreviewUserConfigRequest
	21, // 31: remote_config.RemoteConfigService.GetUserConfig:input_type -> remote_config.GetUserConfigRequest
	26, // 32: remote_config.RemoteConfigService.ExportSettings:input_type -> google.protobuf.Empty
	0,  // 33: remote_config.RemoteConfigService.ImportSettings:input_type -> remote_config.SettingsImportExportData
	2,  // 34: remote_config.RemoteConfigService.SetBaseConfig:output_type -> remote_config.SetBaseConfigResponse
	27, // 35: remote_config.RemoteConfigService.GetBaseConfig:output_type -> remote_config.Config
	24, // 36: remote_config.RemoteConfigService.CreateAppConfig:output_type -> remote_config.AppConfig
	24, // 37: remote_config.RemoteConfigService.UpdateAppConfig:output_type -> remote_config.AppConfig
	26, // 38: remote_config.RemoteConfigService.DeleteAppConfig:output_type -> google.protobuf.Empty
	6,  // 39: remote_config.RemoteConfigService.GetAppConfigs:output_type -> remote_config.GetAppConfigsResponse
	8,  // 40: remote_config.RemoteConfigService.GetAppConfig:output_type -> remote_config.GetAppConfigResponse
	26, // 41: remote_config.RemoteConfigService.AddOverride:output_type -> google.protobuf.Empty
	11, // 42: remote_config.RemoteConfigService.GetOverrides:output_type -> remote_config.GetOverridesResponse
	25, // 43: remote_config.RemoteConfigService.GetOverride:output_type -> remote_config.Override
	26, // 44: remote_config.RemoteConfigService.UpdateOverride:output_type -> google.protobuf.Empty
	26, // 45: remote_config.RemoteConfigService.DeleteOverride:output_type -> google.protobuf.Empty
	26, // 46: remote_config.RemoteConfigService.RampOverride:output_type -> google.protobuf.Empty
	26, // 47: remote_config.RemoteConfigService.AddOverrideUsers:output_type -> google.protobuf.Empty
	26, // 48: remote_config.RemoteConfigService.RemoveOverrideUsers:output_type -> google.protobuf.Empty
	18, // 49: remote_config.RemoteConfigService.PreviewConfig:output_type -> remote_config.PreviewConfigResponse
	20, // 50: remote_config.RemoteConfigService.PreviewUserConfig:output_type -> remote_config.PreviewUserConfigResponse
	22, // 51: remote_config.RemoteConfigService.GetUserConfig:output_type -> remote_config.GetUserConfigResponse
	0,  // 52: remote_config.RemoteConfigService.ExportSettings:output_type -> remote_config.SettingsImportExportData
	26, // 53: remote_config.RemoteConfigService.ImportSettings:output_type -> google.protobuf.Empty
	34, // [34:54] is the sub-list for method output_type
	14, // [14:34] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_remote_config_services_proto_init() }
func file_remote_config_services_proto_init() {
	if File_remote_config_services_proto != nil {
		return
	}
	file_remote_config_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_remote_config_services_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingsImportExportData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_config_services_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBaseConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_config_services_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBaseConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_config_services_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_config_services_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_config_services_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAppConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_config_services_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppConfigsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_config_services_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_config_services_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_config_services_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOverrideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_config_services_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOverrideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_config_services_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOverridesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_config_services_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOverrideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_config_services_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOverrideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_config_services_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RampOverrideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_config_services_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOverrideUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_config_services_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveOverrideUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_config_services_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_config_services_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_config_services_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewUserConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_config_services_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewUserConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_config_services_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_config_services_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_remote_config_services_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_remote_config_services_proto_goTypes,
		DependencyIndexes: file_remote_config_services_proto_depIdxs,
		MessageInfos:      file_remote_config_services_proto_msgTypes,
	}.Build()
	File_remote_config_services_proto = out.File
	file_remote_config_services_proto_rawDesc = nil
	file_remote_config_services_proto_goTypes = nil
	file_remote_config_services_proto_depIdxs = nil
}
