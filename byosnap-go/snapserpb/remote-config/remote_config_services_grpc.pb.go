// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: remote_config_services.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RemoteConfigServiceClient is the client API for RemoteConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteConfigServiceClient interface {
	// SetBaseConfig
	//
	// Sets the base config schema and value
	SetBaseConfig(ctx context.Context, in *SetBaseConfigRequest, opts ...grpc.CallOption) (*SetBaseConfigResponse, error)
	// GetBaseConfig
	//
	// Returns the base config schema and value
	GetBaseConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config, error)
	// CreateAppConfig
	//
	// Create a new appconfig
	CreateAppConfig(ctx context.Context, in *CreateAppConfigRequest, opts ...grpc.CallOption) (*AppConfig, error)
	// UpdateAppConfig
	//
	// Updates a specific appconfig
	UpdateAppConfig(ctx context.Context, in *UpdateAppConfigRequest, opts ...grpc.CallOption) (*AppConfig, error)
	// DeleteAppConfig
	//
	// Delete a specific appconfig
	DeleteAppConfig(ctx context.Context, in *DeleteAppConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetAppConfigs
	//
	// Get all configured appconfigs
	GetAppConfigs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAppConfigsResponse, error)
	// GetAppConfig
	//
	// Get an appconfig by id
	GetAppConfig(ctx context.Context, in *GetAppConfigRequest, opts ...grpc.CallOption) (*GetAppConfigResponse, error)
	// AddOverride
	//
	// Adds an override
	AddOverride(ctx context.Context, in *AddOverrideRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetOverrides
	//
	// Returns all overrides in sort order
	GetOverrides(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetOverridesResponse, error)
	// GetOverride
	//
	// Returns the override with the given name
	GetOverride(ctx context.Context, in *GetOverrideRequest, opts ...grpc.CallOption) (*Override, error)
	// UpdateOverride
	//
	// Updates the override with the given name
	UpdateOverride(ctx context.Context, in *UpdateOverrideRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteOverride
	//
	// Deletes the override with the given name
	DeleteOverride(ctx context.Context, in *DeleteOverrideRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// RampOverride
	//
	// Sets the ramp percentage for the override with the given name
	RampOverride(ctx context.Context, in *RampOverrideRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// AddOverrideUsers
	//
	// Enforce override for the given users
	AddOverrideUsers(ctx context.Context, in *AddOverrideUsersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// RemoveOverrideUsers
	//
	// Remote enforced override for the given users
	RemoveOverrideUsers(ctx context.Context, in *RemoveOverrideUsersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// PreviewConfig
	//
	// Returns a preview of the config based on the selected overrides
	PreviewConfig(ctx context.Context, in *PreviewConfigRequest, opts ...grpc.CallOption) (*PreviewConfigResponse, error)
	// PreviewUserConfig
	//
	// Returns a preview of the config based on the selected overrides
	PreviewUserConfig(ctx context.Context, in *PreviewUserConfigRequest, opts ...grpc.CallOption) (*PreviewUserConfigResponse, error)
	// GetUserConfig
	//
	// Returns the config for the user
	GetUserConfig(ctx context.Context, in *GetUserConfigRequest, opts ...grpc.CallOption) (*GetUserConfigResponse, error)
	ExportSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SettingsImportExportData, error)
	ImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type remoteConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteConfigServiceClient(cc grpc.ClientConnInterface) RemoteConfigServiceClient {
	return &remoteConfigServiceClient{cc}
}

func (c *remoteConfigServiceClient) SetBaseConfig(ctx context.Context, in *SetBaseConfigRequest, opts ...grpc.CallOption) (*SetBaseConfigResponse, error) {
	out := new(SetBaseConfigResponse)
	err := c.cc.Invoke(ctx, "/remote_config.RemoteConfigService/SetBaseConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigServiceClient) GetBaseConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := c.cc.Invoke(ctx, "/remote_config.RemoteConfigService/GetBaseConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigServiceClient) CreateAppConfig(ctx context.Context, in *CreateAppConfigRequest, opts ...grpc.CallOption) (*AppConfig, error) {
	out := new(AppConfig)
	err := c.cc.Invoke(ctx, "/remote_config.RemoteConfigService/CreateAppConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigServiceClient) UpdateAppConfig(ctx context.Context, in *UpdateAppConfigRequest, opts ...grpc.CallOption) (*AppConfig, error) {
	out := new(AppConfig)
	err := c.cc.Invoke(ctx, "/remote_config.RemoteConfigService/UpdateAppConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigServiceClient) DeleteAppConfig(ctx context.Context, in *DeleteAppConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/remote_config.RemoteConfigService/DeleteAppConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigServiceClient) GetAppConfigs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAppConfigsResponse, error) {
	out := new(GetAppConfigsResponse)
	err := c.cc.Invoke(ctx, "/remote_config.RemoteConfigService/GetAppConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigServiceClient) GetAppConfig(ctx context.Context, in *GetAppConfigRequest, opts ...grpc.CallOption) (*GetAppConfigResponse, error) {
	out := new(GetAppConfigResponse)
	err := c.cc.Invoke(ctx, "/remote_config.RemoteConfigService/GetAppConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigServiceClient) AddOverride(ctx context.Context, in *AddOverrideRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/remote_config.RemoteConfigService/AddOverride", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigServiceClient) GetOverrides(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetOverridesResponse, error) {
	out := new(GetOverridesResponse)
	err := c.cc.Invoke(ctx, "/remote_config.RemoteConfigService/GetOverrides", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigServiceClient) GetOverride(ctx context.Context, in *GetOverrideRequest, opts ...grpc.CallOption) (*Override, error) {
	out := new(Override)
	err := c.cc.Invoke(ctx, "/remote_config.RemoteConfigService/GetOverride", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigServiceClient) UpdateOverride(ctx context.Context, in *UpdateOverrideRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/remote_config.RemoteConfigService/UpdateOverride", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigServiceClient) DeleteOverride(ctx context.Context, in *DeleteOverrideRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/remote_config.RemoteConfigService/DeleteOverride", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigServiceClient) RampOverride(ctx context.Context, in *RampOverrideRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/remote_config.RemoteConfigService/RampOverride", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigServiceClient) AddOverrideUsers(ctx context.Context, in *AddOverrideUsersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/remote_config.RemoteConfigService/AddOverrideUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigServiceClient) RemoveOverrideUsers(ctx context.Context, in *RemoveOverrideUsersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/remote_config.RemoteConfigService/RemoveOverrideUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigServiceClient) PreviewConfig(ctx context.Context, in *PreviewConfigRequest, opts ...grpc.CallOption) (*PreviewConfigResponse, error) {
	out := new(PreviewConfigResponse)
	err := c.cc.Invoke(ctx, "/remote_config.RemoteConfigService/PreviewConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigServiceClient) PreviewUserConfig(ctx context.Context, in *PreviewUserConfigRequest, opts ...grpc.CallOption) (*PreviewUserConfigResponse, error) {
	out := new(PreviewUserConfigResponse)
	err := c.cc.Invoke(ctx, "/remote_config.RemoteConfigService/PreviewUserConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigServiceClient) GetUserConfig(ctx context.Context, in *GetUserConfigRequest, opts ...grpc.CallOption) (*GetUserConfigResponse, error) {
	out := new(GetUserConfigResponse)
	err := c.cc.Invoke(ctx, "/remote_config.RemoteConfigService/GetUserConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigServiceClient) ExportSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SettingsImportExportData, error) {
	out := new(SettingsImportExportData)
	err := c.cc.Invoke(ctx, "/remote_config.RemoteConfigService/ExportSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigServiceClient) ImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/remote_config.RemoteConfigService/ImportSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteConfigServiceServer is the server API for RemoteConfigService service.
// All implementations must embed UnimplementedRemoteConfigServiceServer
// for forward compatibility
type RemoteConfigServiceServer interface {
	// SetBaseConfig
	//
	// Sets the base config schema and value
	SetBaseConfig(context.Context, *SetBaseConfigRequest) (*SetBaseConfigResponse, error)
	// GetBaseConfig
	//
	// Returns the base config schema and value
	GetBaseConfig(context.Context, *emptypb.Empty) (*Config, error)
	// CreateAppConfig
	//
	// Create a new appconfig
	CreateAppConfig(context.Context, *CreateAppConfigRequest) (*AppConfig, error)
	// UpdateAppConfig
	//
	// Updates a specific appconfig
	UpdateAppConfig(context.Context, *UpdateAppConfigRequest) (*AppConfig, error)
	// DeleteAppConfig
	//
	// Delete a specific appconfig
	DeleteAppConfig(context.Context, *DeleteAppConfigRequest) (*emptypb.Empty, error)
	// GetAppConfigs
	//
	// Get all configured appconfigs
	GetAppConfigs(context.Context, *emptypb.Empty) (*GetAppConfigsResponse, error)
	// GetAppConfig
	//
	// Get an appconfig by id
	GetAppConfig(context.Context, *GetAppConfigRequest) (*GetAppConfigResponse, error)
	// AddOverride
	//
	// Adds an override
	AddOverride(context.Context, *AddOverrideRequest) (*emptypb.Empty, error)
	// GetOverrides
	//
	// Returns all overrides in sort order
	GetOverrides(context.Context, *emptypb.Empty) (*GetOverridesResponse, error)
	// GetOverride
	//
	// Returns the override with the given name
	GetOverride(context.Context, *GetOverrideRequest) (*Override, error)
	// UpdateOverride
	//
	// Updates the override with the given name
	UpdateOverride(context.Context, *UpdateOverrideRequest) (*emptypb.Empty, error)
	// DeleteOverride
	//
	// Deletes the override with the given name
	DeleteOverride(context.Context, *DeleteOverrideRequest) (*emptypb.Empty, error)
	// RampOverride
	//
	// Sets the ramp percentage for the override with the given name
	RampOverride(context.Context, *RampOverrideRequest) (*emptypb.Empty, error)
	// AddOverrideUsers
	//
	// Enforce override for the given users
	AddOverrideUsers(context.Context, *AddOverrideUsersRequest) (*emptypb.Empty, error)
	// RemoveOverrideUsers
	//
	// Remote enforced override for the given users
	RemoveOverrideUsers(context.Context, *RemoveOverrideUsersRequest) (*emptypb.Empty, error)
	// PreviewConfig
	//
	// Returns a preview of the config based on the selected overrides
	PreviewConfig(context.Context, *PreviewConfigRequest) (*PreviewConfigResponse, error)
	// PreviewUserConfig
	//
	// Returns a preview of the config based on the selected overrides
	PreviewUserConfig(context.Context, *PreviewUserConfigRequest) (*PreviewUserConfigResponse, error)
	// GetUserConfig
	//
	// Returns the config for the user
	GetUserConfig(context.Context, *GetUserConfigRequest) (*GetUserConfigResponse, error)
	ExportSettings(context.Context, *emptypb.Empty) (*SettingsImportExportData, error)
	ImportSettings(context.Context, *SettingsImportExportData) (*emptypb.Empty, error)
	mustEmbedUnimplementedRemoteConfigServiceServer()
}

// UnimplementedRemoteConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteConfigServiceServer struct {
}

func (UnimplementedRemoteConfigServiceServer) SetBaseConfig(context.Context, *SetBaseConfigRequest) (*SetBaseConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBaseConfig not implemented")
}
func (UnimplementedRemoteConfigServiceServer) GetBaseConfig(context.Context, *emptypb.Empty) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBaseConfig not implemented")
}
func (UnimplementedRemoteConfigServiceServer) CreateAppConfig(context.Context, *CreateAppConfigRequest) (*AppConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppConfig not implemented")
}
func (UnimplementedRemoteConfigServiceServer) UpdateAppConfig(context.Context, *UpdateAppConfigRequest) (*AppConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppConfig not implemented")
}
func (UnimplementedRemoteConfigServiceServer) DeleteAppConfig(context.Context, *DeleteAppConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppConfig not implemented")
}
func (UnimplementedRemoteConfigServiceServer) GetAppConfigs(context.Context, *emptypb.Empty) (*GetAppConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppConfigs not implemented")
}
func (UnimplementedRemoteConfigServiceServer) GetAppConfig(context.Context, *GetAppConfigRequest) (*GetAppConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppConfig not implemented")
}
func (UnimplementedRemoteConfigServiceServer) AddOverride(context.Context, *AddOverrideRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOverride not implemented")
}
func (UnimplementedRemoteConfigServiceServer) GetOverrides(context.Context, *emptypb.Empty) (*GetOverridesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOverrides not implemented")
}
func (UnimplementedRemoteConfigServiceServer) GetOverride(context.Context, *GetOverrideRequest) (*Override, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOverride not implemented")
}
func (UnimplementedRemoteConfigServiceServer) UpdateOverride(context.Context, *UpdateOverrideRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOverride not implemented")
}
func (UnimplementedRemoteConfigServiceServer) DeleteOverride(context.Context, *DeleteOverrideRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOverride not implemented")
}
func (UnimplementedRemoteConfigServiceServer) RampOverride(context.Context, *RampOverrideRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RampOverride not implemented")
}
func (UnimplementedRemoteConfigServiceServer) AddOverrideUsers(context.Context, *AddOverrideUsersRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOverrideUsers not implemented")
}
func (UnimplementedRemoteConfigServiceServer) RemoveOverrideUsers(context.Context, *RemoveOverrideUsersRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOverrideUsers not implemented")
}
func (UnimplementedRemoteConfigServiceServer) PreviewConfig(context.Context, *PreviewConfigRequest) (*PreviewConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewConfig not implemented")
}
func (UnimplementedRemoteConfigServiceServer) PreviewUserConfig(context.Context, *PreviewUserConfigRequest) (*PreviewUserConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewUserConfig not implemented")
}
func (UnimplementedRemoteConfigServiceServer) GetUserConfig(context.Context, *GetUserConfigRequest) (*GetUserConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserConfig not implemented")
}
func (UnimplementedRemoteConfigServiceServer) ExportSettings(context.Context, *emptypb.Empty) (*SettingsImportExportData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportSettings not implemented")
}
func (UnimplementedRemoteConfigServiceServer) ImportSettings(context.Context, *SettingsImportExportData) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportSettings not implemented")
}
func (UnimplementedRemoteConfigServiceServer) mustEmbedUnimplementedRemoteConfigServiceServer() {}

// UnsafeRemoteConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteConfigServiceServer will
// result in compilation errors.
type UnsafeRemoteConfigServiceServer interface {
	mustEmbedUnimplementedRemoteConfigServiceServer()
}

func RegisterRemoteConfigServiceServer(s grpc.ServiceRegistrar, srv RemoteConfigServiceServer) {
	s.RegisterService(&RemoteConfigService_ServiceDesc, srv)
}

func _RemoteConfigService_SetBaseConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBaseConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServiceServer).SetBaseConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote_config.RemoteConfigService/SetBaseConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServiceServer).SetBaseConfig(ctx, req.(*SetBaseConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfigService_GetBaseConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServiceServer).GetBaseConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote_config.RemoteConfigService/GetBaseConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServiceServer).GetBaseConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfigService_CreateAppConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServiceServer).CreateAppConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote_config.RemoteConfigService/CreateAppConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServiceServer).CreateAppConfig(ctx, req.(*CreateAppConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfigService_UpdateAppConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServiceServer).UpdateAppConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote_config.RemoteConfigService/UpdateAppConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServiceServer).UpdateAppConfig(ctx, req.(*UpdateAppConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfigService_DeleteAppConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServiceServer).DeleteAppConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote_config.RemoteConfigService/DeleteAppConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServiceServer).DeleteAppConfig(ctx, req.(*DeleteAppConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfigService_GetAppConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServiceServer).GetAppConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote_config.RemoteConfigService/GetAppConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServiceServer).GetAppConfigs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfigService_GetAppConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServiceServer).GetAppConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote_config.RemoteConfigService/GetAppConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServiceServer).GetAppConfig(ctx, req.(*GetAppConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfigService_AddOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServiceServer).AddOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote_config.RemoteConfigService/AddOverride",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServiceServer).AddOverride(ctx, req.(*AddOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfigService_GetOverrides_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServiceServer).GetOverrides(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote_config.RemoteConfigService/GetOverrides",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServiceServer).GetOverrides(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfigService_GetOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServiceServer).GetOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote_config.RemoteConfigService/GetOverride",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServiceServer).GetOverride(ctx, req.(*GetOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfigService_UpdateOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServiceServer).UpdateOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote_config.RemoteConfigService/UpdateOverride",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServiceServer).UpdateOverride(ctx, req.(*UpdateOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfigService_DeleteOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServiceServer).DeleteOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote_config.RemoteConfigService/DeleteOverride",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServiceServer).DeleteOverride(ctx, req.(*DeleteOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfigService_RampOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RampOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServiceServer).RampOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote_config.RemoteConfigService/RampOverride",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServiceServer).RampOverride(ctx, req.(*RampOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfigService_AddOverrideUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOverrideUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServiceServer).AddOverrideUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote_config.RemoteConfigService/AddOverrideUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServiceServer).AddOverrideUsers(ctx, req.(*AddOverrideUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfigService_RemoveOverrideUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOverrideUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServiceServer).RemoveOverrideUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote_config.RemoteConfigService/RemoveOverrideUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServiceServer).RemoveOverrideUsers(ctx, req.(*RemoveOverrideUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfigService_PreviewConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreviewConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServiceServer).PreviewConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote_config.RemoteConfigService/PreviewConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServiceServer).PreviewConfig(ctx, req.(*PreviewConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfigService_PreviewUserConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreviewUserConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServiceServer).PreviewUserConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote_config.RemoteConfigService/PreviewUserConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServiceServer).PreviewUserConfig(ctx, req.(*PreviewUserConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfigService_GetUserConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServiceServer).GetUserConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote_config.RemoteConfigService/GetUserConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServiceServer).GetUserConfig(ctx, req.(*GetUserConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfigService_ExportSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServiceServer).ExportSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote_config.RemoteConfigService/ExportSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServiceServer).ExportSettings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfigService_ImportSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsImportExportData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServiceServer).ImportSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote_config.RemoteConfigService/ImportSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServiceServer).ImportSettings(ctx, req.(*SettingsImportExportData))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteConfigService_ServiceDesc is the grpc.ServiceDesc for RemoteConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "remote_config.RemoteConfigService",
	HandlerType: (*RemoteConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetBaseConfig",
			Handler:    _RemoteConfigService_SetBaseConfig_Handler,
		},
		{
			MethodName: "GetBaseConfig",
			Handler:    _RemoteConfigService_GetBaseConfig_Handler,
		},
		{
			MethodName: "CreateAppConfig",
			Handler:    _RemoteConfigService_CreateAppConfig_Handler,
		},
		{
			MethodName: "UpdateAppConfig",
			Handler:    _RemoteConfigService_UpdateAppConfig_Handler,
		},
		{
			MethodName: "DeleteAppConfig",
			Handler:    _RemoteConfigService_DeleteAppConfig_Handler,
		},
		{
			MethodName: "GetAppConfigs",
			Handler:    _RemoteConfigService_GetAppConfigs_Handler,
		},
		{
			MethodName: "GetAppConfig",
			Handler:    _RemoteConfigService_GetAppConfig_Handler,
		},
		{
			MethodName: "AddOverride",
			Handler:    _RemoteConfigService_AddOverride_Handler,
		},
		{
			MethodName: "GetOverrides",
			Handler:    _RemoteConfigService_GetOverrides_Handler,
		},
		{
			MethodName: "GetOverride",
			Handler:    _RemoteConfigService_GetOverride_Handler,
		},
		{
			MethodName: "UpdateOverride",
			Handler:    _RemoteConfigService_UpdateOverride_Handler,
		},
		{
			MethodName: "DeleteOverride",
			Handler:    _RemoteConfigService_DeleteOverride_Handler,
		},
		{
			MethodName: "RampOverride",
			Handler:    _RemoteConfigService_RampOverride_Handler,
		},
		{
			MethodName: "AddOverrideUsers",
			Handler:    _RemoteConfigService_AddOverrideUsers_Handler,
		},
		{
			MethodName: "RemoveOverrideUsers",
			Handler:    _RemoteConfigService_RemoveOverrideUsers_Handler,
		},
		{
			MethodName: "PreviewConfig",
			Handler:    _RemoteConfigService_PreviewConfig_Handler,
		},
		{
			MethodName: "PreviewUserConfig",
			Handler:    _RemoteConfigService_PreviewUserConfig_Handler,
		},
		{
			MethodName: "GetUserConfig",
			Handler:    _RemoteConfigService_GetUserConfig_Handler,
		},
		{
			MethodName: "ExportSettings",
			Handler:    _RemoteConfigService_ExportSettings_Handler,
		},
		{
			MethodName: "ImportSettings",
			Handler:    _RemoteConfigService_ImportSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "remote_config_services.proto",
}
