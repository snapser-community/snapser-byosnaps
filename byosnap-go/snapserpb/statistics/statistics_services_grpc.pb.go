// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: statistics_services.proto

package proto

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatisticsServiceClient is the client API for StatisticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatisticsServiceClient interface {
	// CreateStatistic
	//
	// Creates a statistic that can be incremented and track per user/player
	CreateStatistic(ctx context.Context, in *CreateStatisticRequest, opts ...grpc.CallOption) (*Statistic, error)
	// GetStatistics
	//
	// Gets all statistics for a cluster
	GetStatistics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStatisticsResponse, error)
	// GetStatistic
	//
	// Get a specific statistic by its unique key
	GetStatistic(ctx context.Context, in *GetStatisticRequest, opts ...grpc.CallOption) (*Statistic, error)
	// UpdateStatistic
	//
	// Update a specific statistic by its unique key and optionally rename associated user tracked stats
	UpdateStatistic(ctx context.Context, in *UpdateStatisticRequest, opts ...grpc.CallOption) (*Statistic, error)
	// DeleteStatistic
	//
	// Deletes a statistic from the cluster and optionally cascades to delete associated user stat for all players
	DeleteStatistic(ctx context.Context, in *DeleteStatisticRequest, opts ...grpc.CallOption) (*DeleteStatisticResponse, error)
	// GetUserStatistic
	//
	// Fetches a specific user statistic by user id and stat key
	GetUserStatistic(ctx context.Context, in *GetUserStatisticRequest, opts ...grpc.CallOption) (*UserStatistic, error)
	// GetUserStatistic
	//
	// Fetches a specific user statistic by user id and stat key
	GetBulkUserStatistics(ctx context.Context, in *GetBulkUserStatisticsRequest, opts ...grpc.CallOption) (*GetUserStatisticsResponse, error)
	// GetUserStatistics
	//
	// Fetches all user-statistics for user or stat. Params: key & user_id
	GetUserStatistics(ctx context.Context, in *GetUserStatisticsRequest, opts ...grpc.CallOption) (*GetUserStatisticsResponse, error)
	// IncrementUserStatistic
	//
	// Increments a user-statistic by delta. Delta can be positive or negative.
	IncrementUserStatistic(ctx context.Context, in *IncrementUserStatisticRequest, opts ...grpc.CallOption) (*UserStatistic, error)
	// SetUserStatistic
	//
	// Sets a user-statistic to the exact value provided
	SetUserStatistic(ctx context.Context, in *SetUserStatisticRequest, opts ...grpc.CallOption) (*UserStatistic, error)
	// BatchUpdateUserStatistics
	//
	// Updates user statistics in bulk
	BatchUpdateUserStatistics(ctx context.Context, in *BatchUpdateUserStatisticsRequest, opts ...grpc.CallOption) (*BatchUpdateUserStatisticsResponse, error)
	// DeleteUserData
	DeleteUserData(ctx context.Context, in *DeleteUserDataRequest, opts ...grpc.CallOption) (*DeleteUserDataResponse, error)
	// GetUserData
	GetUserData(ctx context.Context, in *GetUserDataRequest, opts ...grpc.CallOption) (*GetUserDataResponse, error)
	// GetOpenApiSpec
	//
	// Returns the generated openapi swagger document
	GetOpenApiSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// CreateSegment
	//
	// Create a new segment based on user statistics
	CreateSegment(ctx context.Context, in *CreateSegmentRequest, opts ...grpc.CallOption) (*Segment, error)
	// UpdateSegment
	//
	// Updates a specific segment by segment id
	UpdateSegment(ctx context.Context, in *UpdateSegmentRequest, opts ...grpc.CallOption) (*Segment, error)
	// GetSegment
	//
	// Fetch a segment by id
	GetSegment(ctx context.Context, in *GetSegmentRequest, opts ...grpc.CallOption) (*Segment, error)
	// GetSegments
	//
	// Fetches all segments
	// v1/statistics/segments?user_ids[]={user-id} # returns segments for a particular users
	GetSegments(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSegmentsResponse, error)
	// DeleteSegment
	//
	// Deletes a specific segment
	DeleteSegment(ctx context.Context, in *DeleteSegmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetUsersInSegment
	//
	// Returns user ids for users that are currently in the segment
	GetUsersInSegment(ctx context.Context, in *GetUsersInSegmentRequest, opts ...grpc.CallOption) (*GetUsersInSegmentResponse, error)
	// IsUserInSegment
	//
	// Returns true/false if user is in segment or not
	IsUserInSegment(ctx context.Context, in *IsUserInSegmentRequest, opts ...grpc.CallOption) (*IsUserInSegmentResponse, error)
	ExportSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SettingsImportExportData, error)
	ImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RegisterQuestCallback(ctx context.Context, in *RegisterQuestCallbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeregisterQuestCallback(ctx context.Context, in *DeregisterQuestCallbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type statisticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatisticsServiceClient(cc grpc.ClientConnInterface) StatisticsServiceClient {
	return &statisticsServiceClient{cc}
}

func (c *statisticsServiceClient) CreateStatistic(ctx context.Context, in *CreateStatisticRequest, opts ...grpc.CallOption) (*Statistic, error) {
	out := new(Statistic)
	err := c.cc.Invoke(ctx, "/statistics.StatisticsService/CreateStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) GetStatistics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStatisticsResponse, error) {
	out := new(GetStatisticsResponse)
	err := c.cc.Invoke(ctx, "/statistics.StatisticsService/GetStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) GetStatistic(ctx context.Context, in *GetStatisticRequest, opts ...grpc.CallOption) (*Statistic, error) {
	out := new(Statistic)
	err := c.cc.Invoke(ctx, "/statistics.StatisticsService/GetStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) UpdateStatistic(ctx context.Context, in *UpdateStatisticRequest, opts ...grpc.CallOption) (*Statistic, error) {
	out := new(Statistic)
	err := c.cc.Invoke(ctx, "/statistics.StatisticsService/UpdateStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) DeleteStatistic(ctx context.Context, in *DeleteStatisticRequest, opts ...grpc.CallOption) (*DeleteStatisticResponse, error) {
	out := new(DeleteStatisticResponse)
	err := c.cc.Invoke(ctx, "/statistics.StatisticsService/DeleteStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) GetUserStatistic(ctx context.Context, in *GetUserStatisticRequest, opts ...grpc.CallOption) (*UserStatistic, error) {
	out := new(UserStatistic)
	err := c.cc.Invoke(ctx, "/statistics.StatisticsService/GetUserStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) GetBulkUserStatistics(ctx context.Context, in *GetBulkUserStatisticsRequest, opts ...grpc.CallOption) (*GetUserStatisticsResponse, error) {
	out := new(GetUserStatisticsResponse)
	err := c.cc.Invoke(ctx, "/statistics.StatisticsService/GetBulkUserStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) GetUserStatistics(ctx context.Context, in *GetUserStatisticsRequest, opts ...grpc.CallOption) (*GetUserStatisticsResponse, error) {
	out := new(GetUserStatisticsResponse)
	err := c.cc.Invoke(ctx, "/statistics.StatisticsService/GetUserStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) IncrementUserStatistic(ctx context.Context, in *IncrementUserStatisticRequest, opts ...grpc.CallOption) (*UserStatistic, error) {
	out := new(UserStatistic)
	err := c.cc.Invoke(ctx, "/statistics.StatisticsService/IncrementUserStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) SetUserStatistic(ctx context.Context, in *SetUserStatisticRequest, opts ...grpc.CallOption) (*UserStatistic, error) {
	out := new(UserStatistic)
	err := c.cc.Invoke(ctx, "/statistics.StatisticsService/SetUserStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) BatchUpdateUserStatistics(ctx context.Context, in *BatchUpdateUserStatisticsRequest, opts ...grpc.CallOption) (*BatchUpdateUserStatisticsResponse, error) {
	out := new(BatchUpdateUserStatisticsResponse)
	err := c.cc.Invoke(ctx, "/statistics.StatisticsService/BatchUpdateUserStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) DeleteUserData(ctx context.Context, in *DeleteUserDataRequest, opts ...grpc.CallOption) (*DeleteUserDataResponse, error) {
	out := new(DeleteUserDataResponse)
	err := c.cc.Invoke(ctx, "/statistics.StatisticsService/DeleteUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) GetUserData(ctx context.Context, in *GetUserDataRequest, opts ...grpc.CallOption) (*GetUserDataResponse, error) {
	out := new(GetUserDataResponse)
	err := c.cc.Invoke(ctx, "/statistics.StatisticsService/GetUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) GetOpenApiSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/statistics.StatisticsService/GetOpenApiSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) CreateSegment(ctx context.Context, in *CreateSegmentRequest, opts ...grpc.CallOption) (*Segment, error) {
	out := new(Segment)
	err := c.cc.Invoke(ctx, "/statistics.StatisticsService/CreateSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) UpdateSegment(ctx context.Context, in *UpdateSegmentRequest, opts ...grpc.CallOption) (*Segment, error) {
	out := new(Segment)
	err := c.cc.Invoke(ctx, "/statistics.StatisticsService/UpdateSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) GetSegment(ctx context.Context, in *GetSegmentRequest, opts ...grpc.CallOption) (*Segment, error) {
	out := new(Segment)
	err := c.cc.Invoke(ctx, "/statistics.StatisticsService/GetSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) GetSegments(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSegmentsResponse, error) {
	out := new(GetSegmentsResponse)
	err := c.cc.Invoke(ctx, "/statistics.StatisticsService/GetSegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) DeleteSegment(ctx context.Context, in *DeleteSegmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/statistics.StatisticsService/DeleteSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) GetUsersInSegment(ctx context.Context, in *GetUsersInSegmentRequest, opts ...grpc.CallOption) (*GetUsersInSegmentResponse, error) {
	out := new(GetUsersInSegmentResponse)
	err := c.cc.Invoke(ctx, "/statistics.StatisticsService/GetUsersInSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) IsUserInSegment(ctx context.Context, in *IsUserInSegmentRequest, opts ...grpc.CallOption) (*IsUserInSegmentResponse, error) {
	out := new(IsUserInSegmentResponse)
	err := c.cc.Invoke(ctx, "/statistics.StatisticsService/IsUserInSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) ExportSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SettingsImportExportData, error) {
	out := new(SettingsImportExportData)
	err := c.cc.Invoke(ctx, "/statistics.StatisticsService/ExportSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) ImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/statistics.StatisticsService/ImportSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) RegisterQuestCallback(ctx context.Context, in *RegisterQuestCallbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/statistics.StatisticsService/RegisterQuestCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) DeregisterQuestCallback(ctx context.Context, in *DeregisterQuestCallbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/statistics.StatisticsService/DeregisterQuestCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatisticsServiceServer is the server API for StatisticsService service.
// All implementations must embed UnimplementedStatisticsServiceServer
// for forward compatibility
type StatisticsServiceServer interface {
	// CreateStatistic
	//
	// Creates a statistic that can be incremented and track per user/player
	CreateStatistic(context.Context, *CreateStatisticRequest) (*Statistic, error)
	// GetStatistics
	//
	// Gets all statistics for a cluster
	GetStatistics(context.Context, *emptypb.Empty) (*GetStatisticsResponse, error)
	// GetStatistic
	//
	// Get a specific statistic by its unique key
	GetStatistic(context.Context, *GetStatisticRequest) (*Statistic, error)
	// UpdateStatistic
	//
	// Update a specific statistic by its unique key and optionally rename associated user tracked stats
	UpdateStatistic(context.Context, *UpdateStatisticRequest) (*Statistic, error)
	// DeleteStatistic
	//
	// Deletes a statistic from the cluster and optionally cascades to delete associated user stat for all players
	DeleteStatistic(context.Context, *DeleteStatisticRequest) (*DeleteStatisticResponse, error)
	// GetUserStatistic
	//
	// Fetches a specific user statistic by user id and stat key
	GetUserStatistic(context.Context, *GetUserStatisticRequest) (*UserStatistic, error)
	// GetUserStatistic
	//
	// Fetches a specific user statistic by user id and stat key
	GetBulkUserStatistics(context.Context, *GetBulkUserStatisticsRequest) (*GetUserStatisticsResponse, error)
	// GetUserStatistics
	//
	// Fetches all user-statistics for user or stat. Params: key & user_id
	GetUserStatistics(context.Context, *GetUserStatisticsRequest) (*GetUserStatisticsResponse, error)
	// IncrementUserStatistic
	//
	// Increments a user-statistic by delta. Delta can be positive or negative.
	IncrementUserStatistic(context.Context, *IncrementUserStatisticRequest) (*UserStatistic, error)
	// SetUserStatistic
	//
	// Sets a user-statistic to the exact value provided
	SetUserStatistic(context.Context, *SetUserStatisticRequest) (*UserStatistic, error)
	// BatchUpdateUserStatistics
	//
	// Updates user statistics in bulk
	BatchUpdateUserStatistics(context.Context, *BatchUpdateUserStatisticsRequest) (*BatchUpdateUserStatisticsResponse, error)
	// DeleteUserData
	DeleteUserData(context.Context, *DeleteUserDataRequest) (*DeleteUserDataResponse, error)
	// GetUserData
	GetUserData(context.Context, *GetUserDataRequest) (*GetUserDataResponse, error)
	// GetOpenApiSpec
	//
	// Returns the generated openapi swagger document
	GetOpenApiSpec(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error)
	// CreateSegment
	//
	// Create a new segment based on user statistics
	CreateSegment(context.Context, *CreateSegmentRequest) (*Segment, error)
	// UpdateSegment
	//
	// Updates a specific segment by segment id
	UpdateSegment(context.Context, *UpdateSegmentRequest) (*Segment, error)
	// GetSegment
	//
	// Fetch a segment by id
	GetSegment(context.Context, *GetSegmentRequest) (*Segment, error)
	// GetSegments
	//
	// Fetches all segments
	// v1/statistics/segments?user_ids[]={user-id} # returns segments for a particular users
	GetSegments(context.Context, *emptypb.Empty) (*GetSegmentsResponse, error)
	// DeleteSegment
	//
	// Deletes a specific segment
	DeleteSegment(context.Context, *DeleteSegmentRequest) (*emptypb.Empty, error)
	// GetUsersInSegment
	//
	// Returns user ids for users that are currently in the segment
	GetUsersInSegment(context.Context, *GetUsersInSegmentRequest) (*GetUsersInSegmentResponse, error)
	// IsUserInSegment
	//
	// Returns true/false if user is in segment or not
	IsUserInSegment(context.Context, *IsUserInSegmentRequest) (*IsUserInSegmentResponse, error)
	ExportSettings(context.Context, *emptypb.Empty) (*SettingsImportExportData, error)
	ImportSettings(context.Context, *SettingsImportExportData) (*emptypb.Empty, error)
	RegisterQuestCallback(context.Context, *RegisterQuestCallbackRequest) (*emptypb.Empty, error)
	DeregisterQuestCallback(context.Context, *DeregisterQuestCallbackRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedStatisticsServiceServer()
}

// UnimplementedStatisticsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStatisticsServiceServer struct {
}

func (UnimplementedStatisticsServiceServer) CreateStatistic(context.Context, *CreateStatisticRequest) (*Statistic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStatistic not implemented")
}
func (UnimplementedStatisticsServiceServer) GetStatistics(context.Context, *emptypb.Empty) (*GetStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatistics not implemented")
}
func (UnimplementedStatisticsServiceServer) GetStatistic(context.Context, *GetStatisticRequest) (*Statistic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatistic not implemented")
}
func (UnimplementedStatisticsServiceServer) UpdateStatistic(context.Context, *UpdateStatisticRequest) (*Statistic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatistic not implemented")
}
func (UnimplementedStatisticsServiceServer) DeleteStatistic(context.Context, *DeleteStatisticRequest) (*DeleteStatisticResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStatistic not implemented")
}
func (UnimplementedStatisticsServiceServer) GetUserStatistic(context.Context, *GetUserStatisticRequest) (*UserStatistic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStatistic not implemented")
}
func (UnimplementedStatisticsServiceServer) GetBulkUserStatistics(context.Context, *GetBulkUserStatisticsRequest) (*GetUserStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBulkUserStatistics not implemented")
}
func (UnimplementedStatisticsServiceServer) GetUserStatistics(context.Context, *GetUserStatisticsRequest) (*GetUserStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStatistics not implemented")
}
func (UnimplementedStatisticsServiceServer) IncrementUserStatistic(context.Context, *IncrementUserStatisticRequest) (*UserStatistic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementUserStatistic not implemented")
}
func (UnimplementedStatisticsServiceServer) SetUserStatistic(context.Context, *SetUserStatisticRequest) (*UserStatistic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserStatistic not implemented")
}
func (UnimplementedStatisticsServiceServer) BatchUpdateUserStatistics(context.Context, *BatchUpdateUserStatisticsRequest) (*BatchUpdateUserStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateUserStatistics not implemented")
}
func (UnimplementedStatisticsServiceServer) DeleteUserData(context.Context, *DeleteUserDataRequest) (*DeleteUserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserData not implemented")
}
func (UnimplementedStatisticsServiceServer) GetUserData(context.Context, *GetUserDataRequest) (*GetUserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserData not implemented")
}
func (UnimplementedStatisticsServiceServer) GetOpenApiSpec(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenApiSpec not implemented")
}
func (UnimplementedStatisticsServiceServer) CreateSegment(context.Context, *CreateSegmentRequest) (*Segment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSegment not implemented")
}
func (UnimplementedStatisticsServiceServer) UpdateSegment(context.Context, *UpdateSegmentRequest) (*Segment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSegment not implemented")
}
func (UnimplementedStatisticsServiceServer) GetSegment(context.Context, *GetSegmentRequest) (*Segment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegment not implemented")
}
func (UnimplementedStatisticsServiceServer) GetSegments(context.Context, *emptypb.Empty) (*GetSegmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegments not implemented")
}
func (UnimplementedStatisticsServiceServer) DeleteSegment(context.Context, *DeleteSegmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSegment not implemented")
}
func (UnimplementedStatisticsServiceServer) GetUsersInSegment(context.Context, *GetUsersInSegmentRequest) (*GetUsersInSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersInSegment not implemented")
}
func (UnimplementedStatisticsServiceServer) IsUserInSegment(context.Context, *IsUserInSegmentRequest) (*IsUserInSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUserInSegment not implemented")
}
func (UnimplementedStatisticsServiceServer) ExportSettings(context.Context, *emptypb.Empty) (*SettingsImportExportData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportSettings not implemented")
}
func (UnimplementedStatisticsServiceServer) ImportSettings(context.Context, *SettingsImportExportData) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportSettings not implemented")
}
func (UnimplementedStatisticsServiceServer) RegisterQuestCallback(context.Context, *RegisterQuestCallbackRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterQuestCallback not implemented")
}
func (UnimplementedStatisticsServiceServer) DeregisterQuestCallback(context.Context, *DeregisterQuestCallbackRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterQuestCallback not implemented")
}
func (UnimplementedStatisticsServiceServer) mustEmbedUnimplementedStatisticsServiceServer() {}

// UnsafeStatisticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatisticsServiceServer will
// result in compilation errors.
type UnsafeStatisticsServiceServer interface {
	mustEmbedUnimplementedStatisticsServiceServer()
}

func RegisterStatisticsServiceServer(s grpc.ServiceRegistrar, srv StatisticsServiceServer) {
	s.RegisterService(&StatisticsService_ServiceDesc, srv)
}

func _StatisticsService_CreateStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStatisticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).CreateStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics.StatisticsService/CreateStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).CreateStatistic(ctx, req.(*CreateStatisticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_GetStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).GetStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics.StatisticsService/GetStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).GetStatistics(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_GetStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatisticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).GetStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics.StatisticsService/GetStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).GetStatistic(ctx, req.(*GetStatisticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_UpdateStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatisticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).UpdateStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics.StatisticsService/UpdateStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).UpdateStatistic(ctx, req.(*UpdateStatisticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_DeleteStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStatisticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).DeleteStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics.StatisticsService/DeleteStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).DeleteStatistic(ctx, req.(*DeleteStatisticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_GetUserStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStatisticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).GetUserStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics.StatisticsService/GetUserStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).GetUserStatistic(ctx, req.(*GetUserStatisticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_GetBulkUserStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBulkUserStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).GetBulkUserStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics.StatisticsService/GetBulkUserStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).GetBulkUserStatistics(ctx, req.(*GetBulkUserStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_GetUserStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).GetUserStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics.StatisticsService/GetUserStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).GetUserStatistics(ctx, req.(*GetUserStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_IncrementUserStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementUserStatisticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).IncrementUserStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics.StatisticsService/IncrementUserStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).IncrementUserStatistic(ctx, req.(*IncrementUserStatisticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_SetUserStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserStatisticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).SetUserStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics.StatisticsService/SetUserStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).SetUserStatistic(ctx, req.(*SetUserStatisticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_BatchUpdateUserStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateUserStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).BatchUpdateUserStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics.StatisticsService/BatchUpdateUserStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).BatchUpdateUserStatistics(ctx, req.(*BatchUpdateUserStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_DeleteUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).DeleteUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics.StatisticsService/DeleteUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).DeleteUserData(ctx, req.(*DeleteUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_GetUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).GetUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics.StatisticsService/GetUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).GetUserData(ctx, req.(*GetUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_GetOpenApiSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).GetOpenApiSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics.StatisticsService/GetOpenApiSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).GetOpenApiSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_CreateSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).CreateSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics.StatisticsService/CreateSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).CreateSegment(ctx, req.(*CreateSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_UpdateSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).UpdateSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics.StatisticsService/UpdateSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).UpdateSegment(ctx, req.(*UpdateSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_GetSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).GetSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics.StatisticsService/GetSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).GetSegment(ctx, req.(*GetSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_GetSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).GetSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics.StatisticsService/GetSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).GetSegments(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_DeleteSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).DeleteSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics.StatisticsService/DeleteSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).DeleteSegment(ctx, req.(*DeleteSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_GetUsersInSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersInSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).GetUsersInSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics.StatisticsService/GetUsersInSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).GetUsersInSegment(ctx, req.(*GetUsersInSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_IsUserInSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsUserInSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).IsUserInSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics.StatisticsService/IsUserInSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).IsUserInSegment(ctx, req.(*IsUserInSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_ExportSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).ExportSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics.StatisticsService/ExportSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).ExportSettings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_ImportSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsImportExportData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).ImportSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics.StatisticsService/ImportSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).ImportSettings(ctx, req.(*SettingsImportExportData))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_RegisterQuestCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterQuestCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).RegisterQuestCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics.StatisticsService/RegisterQuestCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).RegisterQuestCallback(ctx, req.(*RegisterQuestCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_DeregisterQuestCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeregisterQuestCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).DeregisterQuestCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statistics.StatisticsService/DeregisterQuestCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).DeregisterQuestCallback(ctx, req.(*DeregisterQuestCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatisticsService_ServiceDesc is the grpc.ServiceDesc for StatisticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatisticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "statistics.StatisticsService",
	HandlerType: (*StatisticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStatistic",
			Handler:    _StatisticsService_CreateStatistic_Handler,
		},
		{
			MethodName: "GetStatistics",
			Handler:    _StatisticsService_GetStatistics_Handler,
		},
		{
			MethodName: "GetStatistic",
			Handler:    _StatisticsService_GetStatistic_Handler,
		},
		{
			MethodName: "UpdateStatistic",
			Handler:    _StatisticsService_UpdateStatistic_Handler,
		},
		{
			MethodName: "DeleteStatistic",
			Handler:    _StatisticsService_DeleteStatistic_Handler,
		},
		{
			MethodName: "GetUserStatistic",
			Handler:    _StatisticsService_GetUserStatistic_Handler,
		},
		{
			MethodName: "GetBulkUserStatistics",
			Handler:    _StatisticsService_GetBulkUserStatistics_Handler,
		},
		{
			MethodName: "GetUserStatistics",
			Handler:    _StatisticsService_GetUserStatistics_Handler,
		},
		{
			MethodName: "IncrementUserStatistic",
			Handler:    _StatisticsService_IncrementUserStatistic_Handler,
		},
		{
			MethodName: "SetUserStatistic",
			Handler:    _StatisticsService_SetUserStatistic_Handler,
		},
		{
			MethodName: "BatchUpdateUserStatistics",
			Handler:    _StatisticsService_BatchUpdateUserStatistics_Handler,
		},
		{
			MethodName: "DeleteUserData",
			Handler:    _StatisticsService_DeleteUserData_Handler,
		},
		{
			MethodName: "GetUserData",
			Handler:    _StatisticsService_GetUserData_Handler,
		},
		{
			MethodName: "GetOpenApiSpec",
			Handler:    _StatisticsService_GetOpenApiSpec_Handler,
		},
		{
			MethodName: "CreateSegment",
			Handler:    _StatisticsService_CreateSegment_Handler,
		},
		{
			MethodName: "UpdateSegment",
			Handler:    _StatisticsService_UpdateSegment_Handler,
		},
		{
			MethodName: "GetSegment",
			Handler:    _StatisticsService_GetSegment_Handler,
		},
		{
			MethodName: "GetSegments",
			Handler:    _StatisticsService_GetSegments_Handler,
		},
		{
			MethodName: "DeleteSegment",
			Handler:    _StatisticsService_DeleteSegment_Handler,
		},
		{
			MethodName: "GetUsersInSegment",
			Handler:    _StatisticsService_GetUsersInSegment_Handler,
		},
		{
			MethodName: "IsUserInSegment",
			Handler:    _StatisticsService_IsUserInSegment_Handler,
		},
		{
			MethodName: "ExportSettings",
			Handler:    _StatisticsService_ExportSettings_Handler,
		},
		{
			MethodName: "ImportSettings",
			Handler:    _StatisticsService_ImportSettings_Handler,
		},
		{
			MethodName: "RegisterQuestCallback",
			Handler:    _StatisticsService_RegisterQuestCallback_Handler,
		},
		{
			MethodName: "DeregisterQuestCallback",
			Handler:    _StatisticsService_DeregisterQuestCallback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "statistics_services.proto",
}
