// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.23.3
// source: leaderboards_service.proto

package proto

import (



	
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SettingsImportExportData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Data       string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	ExportedAt int64  `protobuf:"varint,3,opt,name=exported_at,json=exportedAt,proto3" json:"exported_at,omitempty"`
}

func (x *SettingsImportExportData) Reset() {
	*x = SettingsImportExportData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboards_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingsImportExportData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingsImportExportData) ProtoMessage() {}

func (x *SettingsImportExportData) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboards_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingsImportExportData.ProtoReflect.Descriptor instead.
func (*SettingsImportExportData) Descriptor() ([]byte, []int) {
	return file_leaderboards_service_proto_rawDescGZIP(), []int{0}
}

func (x *SettingsImportExportData) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SettingsImportExportData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *SettingsImportExportData) GetExportedAt() int64 {
	if x != nil {
		return x.ExportedAt
	}
	return 0
}

type GetScoresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderboardName string `protobuf:"bytes,1,opt,name=leaderboard_name,json=leaderboardName,proto3" json:"leaderboard_name,omitempty"`
	UserId          string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Range           string `protobuf:"bytes,3,opt,name=range,proto3" json:"range,omitempty"`
	Count           int64  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Offset          int32  `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetScoresRequest) Reset() {
	*x = GetScoresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboards_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScoresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScoresRequest) ProtoMessage() {}

func (x *GetScoresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboards_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScoresRequest.ProtoReflect.Descriptor instead.
func (*GetScoresRequest) Descriptor() ([]byte, []int) {
	return file_leaderboards_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetScoresRequest) GetLeaderboardName() string {
	if x != nil {
		return x.LeaderboardName
	}
	return ""
}

func (x *GetScoresRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetScoresRequest) GetRange() string {
	if x != nil {
		return x.Range
	}
	return ""
}

func (x *GetScoresRequest) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetScoresRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetScoresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserScores []*UserScore `protobuf:"bytes,1,rep,name=user_scores,json=userScores,proto3" json:"user_scores,omitempty"`
	Tier       *Tier        `protobuf:"bytes,2,opt,name=tier,proto3" json:"tier,omitempty"`
}

func (x *GetScoresResponse) Reset() {
	*x = GetScoresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboards_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScoresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScoresResponse) ProtoMessage() {}

func (x *GetScoresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboards_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScoresResponse.ProtoReflect.Descriptor instead.
func (*GetScoresResponse) Descriptor() ([]byte, []int) {
	return file_leaderboards_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetScoresResponse) GetUserScores() []*UserScore {
	if x != nil {
		return x.UserScores
	}
	return nil
}

func (x *GetScoresResponse) GetTier() *Tier {
	if x != nil {
		return x.Tier
	}
	return nil
}

type SetScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderboardName string  `protobuf:"bytes,1,opt,name=leaderboard_name,json=leaderboardName,proto3" json:"leaderboard_name,omitempty"`
	TierName        string  `protobuf:"bytes,2,opt,name=tier_name,json=tierName,proto3" json:"tier_name,omitempty"`
	UserId          string  `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Score           float64 `protobuf:"fixed64,4,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *SetScoreRequest) Reset() {
	*x = SetScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboards_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetScoreRequest) ProtoMessage() {}

func (x *SetScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboards_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetScoreRequest.ProtoReflect.Descriptor instead.
func (*SetScoreRequest) Descriptor() ([]byte, []int) {
	return file_leaderboards_service_proto_rawDescGZIP(), []int{3}
}

func (x *SetScoreRequest) GetLeaderboardName() string {
	if x != nil {
		return x.LeaderboardName
	}
	return ""
}

func (x *SetScoreRequest) GetTierName() string {
	if x != nil {
		return x.TierName
	}
	return ""
}

func (x *SetScoreRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SetScoreRequest) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

type SetScoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score float64 `protobuf:"fixed64,1,opt,name=score,proto3" json:"score,omitempty"`
	Tier  *Tier   `protobuf:"bytes,2,opt,name=tier,proto3" json:"tier,omitempty"`
}

func (x *SetScoreResponse) Reset() {
	*x = SetScoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboards_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetScoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetScoreResponse) ProtoMessage() {}

func (x *SetScoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboards_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetScoreResponse.ProtoReflect.Descriptor instead.
func (*SetScoreResponse) Descriptor() ([]byte, []int) {
	return file_leaderboards_service_proto_rawDescGZIP(), []int{4}
}

func (x *SetScoreResponse) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SetScoreResponse) GetTier() *Tier {
	if x != nil {
		return x.Tier
	}
	return nil
}

type IncrementScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderboardName string  `protobuf:"bytes,1,opt,name=leaderboard_name,json=leaderboardName,proto3" json:"leaderboard_name,omitempty"`
	TierName        string  `protobuf:"bytes,2,opt,name=tier_name,json=tierName,proto3" json:"tier_name,omitempty"`
	UserId          string  `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Delta           float64 `protobuf:"fixed64,4,opt,name=delta,proto3" json:"delta,omitempty"`
}

func (x *IncrementScoreRequest) Reset() {
	*x = IncrementScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboards_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrementScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrementScoreRequest) ProtoMessage() {}

func (x *IncrementScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboards_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrementScoreRequest.ProtoReflect.Descriptor instead.
func (*IncrementScoreRequest) Descriptor() ([]byte, []int) {
	return file_leaderboards_service_proto_rawDescGZIP(), []int{5}
}

func (x *IncrementScoreRequest) GetLeaderboardName() string {
	if x != nil {
		return x.LeaderboardName
	}
	return ""
}

func (x *IncrementScoreRequest) GetTierName() string {
	if x != nil {
		return x.TierName
	}
	return ""
}

func (x *IncrementScoreRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *IncrementScoreRequest) GetDelta() float64 {
	if x != nil {
		return x.Delta
	}
	return 0
}

type IncrementScoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score float64 `protobuf:"fixed64,1,opt,name=score,proto3" json:"score,omitempty"`
	Rank  int64   `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	Tier  *Tier   `protobuf:"bytes,3,opt,name=tier,proto3" json:"tier,omitempty"`
}

func (x *IncrementScoreResponse) Reset() {
	*x = IncrementScoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboards_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrementScoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrementScoreResponse) ProtoMessage() {}

func (x *IncrementScoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboards_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrementScoreResponse.ProtoReflect.Descriptor instead.
func (*IncrementScoreResponse) Descriptor() ([]byte, []int) {
	return file_leaderboards_service_proto_rawDescGZIP(), []int{6}
}

func (x *IncrementScoreResponse) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *IncrementScoreResponse) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *IncrementScoreResponse) GetTier() *Tier {
	if x != nil {
		return x.Tier
	}
	return nil
}

type GetLeaderboardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GetLeaderboardsRequest) Reset() {
	*x = GetLeaderboardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboards_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeaderboardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeaderboardsRequest) ProtoMessage() {}

func (x *GetLeaderboardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboards_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeaderboardsRequest.ProtoReflect.Descriptor instead.
func (*GetLeaderboardsRequest) Descriptor() ([]byte, []int) {
	return file_leaderboards_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetLeaderboardsRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type GetLeaderboardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leaderboards []*Leaderboard `protobuf:"bytes,1,rep,name=leaderboards,proto3" json:"leaderboards,omitempty"`
}

func (x *GetLeaderboardsResponse) Reset() {
	*x = GetLeaderboardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboards_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeaderboardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeaderboardsResponse) ProtoMessage() {}

func (x *GetLeaderboardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboards_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeaderboardsResponse.ProtoReflect.Descriptor instead.
func (*GetLeaderboardsResponse) Descriptor() ([]byte, []int) {
	return file_leaderboards_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetLeaderboardsResponse) GetLeaderboards() []*Leaderboard {
	if x != nil {
		return x.Leaderboards
	}
	return nil
}

type GetUserDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetUserDataRequest) Reset() {
	*x = GetUserDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboards_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserDataRequest) ProtoMessage() {}

func (x *GetUserDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboards_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserDataRequest.ProtoReflect.Descriptor instead.
func (*GetUserDataRequest) Descriptor() ([]byte, []int) {
	return file_leaderboards_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetUserDataRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetUserDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userdata []*UserData `protobuf:"bytes,1,rep,name=userdata,proto3" json:"userdata,omitempty"`
}

func (x *GetUserDataResponse) Reset() {
	*x = GetUserDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboards_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserDataResponse) ProtoMessage() {}

func (x *GetUserDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboards_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserDataResponse.ProtoReflect.Descriptor instead.
func (*GetUserDataResponse) Descriptor() ([]byte, []int) {
	return file_leaderboards_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetUserDataResponse) GetUserdata() []*UserData {
	if x != nil {
		return x.Userdata
	}
	return nil
}

type DeleteUserDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *DeleteUserDataRequest) Reset() {
	*x = DeleteUserDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboards_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserDataRequest) ProtoMessage() {}

func (x *DeleteUserDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboards_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserDataRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserDataRequest) Descriptor() ([]byte, []int) {
	return file_leaderboards_service_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteUserDataRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type DeleteUserDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteUserDataResponse) Reset() {
	*x = DeleteUserDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboards_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserDataResponse) ProtoMessage() {}

func (x *DeleteUserDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboards_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserDataResponse.ProtoReflect.Descriptor instead.
func (*DeleteUserDataResponse) Descriptor() ([]byte, []int) {
	return file_leaderboards_service_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteUserDataResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type CreateLeaderboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Behavior    string  `protobuf:"bytes,3,opt,name=behavior,proto3" json:"behavior,omitempty"`
	Sort        string  `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Scope       string  `protobuf:"bytes,5,opt,name=scope,proto3" json:"scope,omitempty"`
	StartTime   int64   `protobuf:"varint,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Duration    uint64  `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"`
	TimeUnit    string  `protobuf:"bytes,8,opt,name=time_unit,json=timeUnit,proto3" json:"time_unit,omitempty"`
	Type        string  `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	Tiers       []*Tier `protobuf:"bytes,10,rep,name=tiers,proto3" json:"tiers,omitempty"`
}

func (x *CreateLeaderboardRequest) Reset() {
	*x = CreateLeaderboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboards_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLeaderboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLeaderboardRequest) ProtoMessage() {}

func (x *CreateLeaderboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboards_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLeaderboardRequest.ProtoReflect.Descriptor instead.
func (*CreateLeaderboardRequest) Descriptor() ([]byte, []int) {
	return file_leaderboards_service_proto_rawDescGZIP(), []int{13}
}

func (x *CreateLeaderboardRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateLeaderboardRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateLeaderboardRequest) GetBehavior() string {
	if x != nil {
		return x.Behavior
	}
	return ""
}

func (x *CreateLeaderboardRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *CreateLeaderboardRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *CreateLeaderboardRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *CreateLeaderboardRequest) GetDuration() uint64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *CreateLeaderboardRequest) GetTimeUnit() string {
	if x != nil {
		return x.TimeUnit
	}
	return ""
}

func (x *CreateLeaderboardRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateLeaderboardRequest) GetTiers() []*Tier {
	if x != nil {
		return x.Tiers
	}
	return nil
}

type CreateLeaderboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leaderboard *Leaderboard `protobuf:"bytes,1,opt,name=leaderboard,proto3" json:"leaderboard,omitempty"`
}

func (x *CreateLeaderboardResponse) Reset() {
	*x = CreateLeaderboardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboards_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLeaderboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLeaderboardResponse) ProtoMessage() {}

func (x *CreateLeaderboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboards_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLeaderboardResponse.ProtoReflect.Descriptor instead.
func (*CreateLeaderboardResponse) Descriptor() ([]byte, []int) {
	return file_leaderboards_service_proto_rawDescGZIP(), []int{14}
}

func (x *CreateLeaderboardResponse) GetLeaderboard() *Leaderboard {
	if x != nil {
		return x.Leaderboard
	}
	return nil
}

type DeleteLeaderboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteLeaderboardRequest) Reset() {
	*x = DeleteLeaderboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboards_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLeaderboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLeaderboardRequest) ProtoMessage() {}

func (x *DeleteLeaderboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboards_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLeaderboardRequest.ProtoReflect.Descriptor instead.
func (*DeleteLeaderboardRequest) Descriptor() ([]byte, []int) {
	return file_leaderboards_service_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteLeaderboardRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CleanupLeaderboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retain uint64 `protobuf:"varint,1,opt,name=retain,proto3" json:"retain,omitempty"`
}

func (x *CleanupLeaderboardRequest) Reset() {
	*x = CleanupLeaderboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboards_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanupLeaderboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanupLeaderboardRequest) ProtoMessage() {}

func (x *CleanupLeaderboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboards_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanupLeaderboardRequest.ProtoReflect.Descriptor instead.
func (*CleanupLeaderboardRequest) Descriptor() ([]byte, []int) {
	return file_leaderboards_service_proto_rawDescGZIP(), []int{16}
}

func (x *CleanupLeaderboardRequest) GetRetain() uint64 {
	if x != nil {
		return x.Retain
	}
	return 0
}

type GetTieredLeaderboardDiagnosticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderboardName string `protobuf:"bytes,1,opt,name=leaderboard_name,json=leaderboardName,proto3" json:"leaderboard_name,omitempty"`
}

func (x *GetTieredLeaderboardDiagnosticsRequest) Reset() {
	*x = GetTieredLeaderboardDiagnosticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_leaderboards_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTieredLeaderboardDiagnosticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTieredLeaderboardDiagnosticsRequest) ProtoMessage() {}

func (x *GetTieredLeaderboardDiagnosticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboards_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTieredLeaderboardDiagnosticsRequest.ProtoReflect.Descriptor instead.
func (*GetTieredLeaderboardDiagnosticsRequest) Descriptor() ([]byte, []int) {
	return file_leaderboards_service_proto_rawDescGZIP(), []int{17}
}

func (x *GetTieredLeaderboardDiagnosticsRequest) GetLeaderboardName() string {
	if x != nil {
		return x.LeaderboardName
	}
	return ""
}

var File_leaderboards_service_proto protoreflect.FileDescriptor

var file_leaderboards_service_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x62, 0x6f, 0x64, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x69, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xfe, 0x04, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x7a, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0xfa, 0x42, 0x29, 0x72,
	0x27, 0x10, 0x01, 0x18, 0x32, 0x32, 0x21, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x5b, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x1d, 0x32, 0x17,
	0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x0f, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x7d, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x64, 0xe0,
	0x41, 0x01, 0xfa, 0x42, 0x1c, 0x72, 0x1a, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69,
	0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0xd0, 0x01,
	0x01, 0x92, 0x41, 0x3f, 0x32, 0x39, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x20, 0x49, 0x44, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x20, 0x77, 0x68, 0x6f, 0x27, 0x73, 0x20, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x9a,
	0x02, 0x01, 0x07, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0xa7, 0x01, 0x0a, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x90, 0x01, 0xfa, 0x42,
	0x17, 0x72, 0x15, 0x52, 0x06, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x03, 0x74, 0x6f, 0x70,
	0x52, 0x06, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x70, 0x32, 0x52,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x3a, 0x20, 0x27, 0x74, 0x6f, 0x70, 0x27, 0x2c, 0x20, 0x27, 0x62, 0x6f, 0x74, 0x74,
	0x6f, 0x6d, 0x27, 0x20, 0x6f, 0x72, 0x20, 0x27, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x27, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x9a, 0x02, 0x01, 0x07, 0xf2, 0x02, 0x03, 0x74, 0x6f, 0x70, 0xf2, 0x02, 0x06, 0x62,
	0x6f, 0x74, 0x74, 0x6f, 0x6d, 0xf2, 0x02, 0x06, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x35, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0xe0, 0x41, 0x02,
	0x92, 0x41, 0x28, 0x32, 0x22, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x72,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x78, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x60, 0xe0, 0x41, 0x01, 0x92, 0x41, 0x5a, 0x32, 0x54, 0x46, 0x6f, 0x72, 0x20,
	0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x20, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x9a, 0x02, 0x01, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xf0, 0x01, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x78, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x35, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x9a, 0x02, 0x01, 0x01,
	0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x04,
	0x74, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x42, 0x39,
	0x92, 0x41, 0x36, 0x32, 0x30, 0x54, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x20, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x22,
	0xb5, 0x03, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x7a, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0xfa,
	0x42, 0x29, 0x72, 0x27, 0x10, 0x01, 0x18, 0x32, 0x32, 0x21, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a,
	0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0xe0, 0x41, 0x02, 0x92, 0x41,
	0x1d, 0x32, 0x17, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x0f,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x68, 0x0a, 0x09, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x4b, 0xfa, 0x42, 0x2c, 0x72, 0x2a, 0x10, 0x01, 0x18, 0x20, 0x32, 0x21, 0x28,
	0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24,
	0xd0, 0x01, 0x01, 0xe0, 0x41, 0x01, 0x92, 0x41, 0x16, 0x32, 0x10, 0x4e, 0x61, 0x6d, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x07, 0x52,
	0x08, 0x74, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x72, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x59, 0xfa, 0x42, 0x19, 0x72,
	0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x37, 0x32, 0x31,
	0x55, 0x73, 0x65, 0x72, 0x20, 0x49, 0x44, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x20, 0x77, 0x68, 0x6f, 0x27, 0x73, 0x20, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x48, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x32, 0xfa, 0x42,
	0x0b, 0x12, 0x09, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x41, 0x02, 0x92,
	0x41, 0x1e, 0x32, 0x18, 0x4e, 0x65, 0x77, 0x20, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x6f,
	0x20, 0x62, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x05,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x42, 0x24, 0x92, 0x41, 0x21,
	0x32, 0x1b, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x20, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x20, 0x74,
	0x6f, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x9a, 0x02, 0x01,
	0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x61, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x42, 0x39, 0x92, 0x41, 0x36, 0x32,
	0x30, 0x54, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2e, 0x20, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x22, 0xb8, 0x03, 0x0a, 0x15,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7a, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4f, 0xfa, 0x42, 0x29, 0x72, 0x27, 0x10, 0x01, 0x18, 0x32, 0x32, 0x21, 0x28, 0x3f, 0x69, 0x29,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f,
	0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0xe0, 0x41, 0x02,
	0x92, 0x41, 0x1d, 0x32, 0x17, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x9a, 0x02, 0x01, 0x07,
	0x52, 0x0f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x68, 0x0a, 0x09, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x4b, 0xfa, 0x42, 0x2c, 0x72, 0x2a, 0x10, 0x01, 0x18, 0x20, 0x32,
	0x21, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29,
	0x3f, 0x24, 0xd0, 0x01, 0x01, 0xe0, 0x41, 0x01, 0x92, 0x41, 0x16, 0x32, 0x10, 0x4e, 0x61, 0x6d,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x65, 0x72, 0x9a, 0x02, 0x01,
	0x07, 0x52, 0x08, 0x74, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x72, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x59, 0xfa, 0x42,
	0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x37,
	0x32, 0x31, 0x55, 0x73, 0x65, 0x72, 0x20, 0x49, 0x44, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x77, 0x68, 0x6f, 0x27, 0x73, 0x20, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x45, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x2f,
	0xe0, 0x41, 0x02, 0x92, 0x41, 0x29, 0x32, 0x23, 0x54, 0x68, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x20, 0x74,
	0x6f, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x9a, 0x02, 0x01, 0x05, 0x52,
	0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x22, 0xf5, 0x01, 0x0a, 0x16, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3f, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x20, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x65, 0x64, 0x20, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1a, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x20, 0x72, 0x61,
	0x6e, 0x6b, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x9a, 0x02, 0x01, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x61, 0x0a, 0x04, 0x74,
	0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x42, 0x39, 0x92,
	0x41, 0x36, 0x32, 0x30, 0x54, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x20, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x22, 0x67,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0xe0, 0x41, 0x01, 0xfa, 0x42, 0x15, 0x72, 0x13,
	0x52, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x06, 0x74, 0x69, 0x65, 0x72, 0x65, 0x64,
	0xd0, 0x01, 0x01, 0x92, 0x41, 0x1b, 0x32, 0x15, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x61, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x9a, 0x02, 0x01,
	0x07, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x58, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x22, 0x8d, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x77, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5e, 0xfa, 0x42, 0x19, 0x72, 0x17,
	0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x3c, 0x32, 0x36, 0x55,
	0x73, 0x65, 0x72, 0x20, 0x49, 0x44, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x20, 0x77, 0x68, 0x6f, 0x27, 0x73, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x49, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8f, 0x01, 0x0a,
	0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x76, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5d, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10, 0x01,
	0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x3b, 0x32, 0x35, 0x55, 0x73, 0x65,
	0x72, 0x20, 0x49, 0x44, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x77, 0x68, 0x6f, 0x27, 0x73, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x32,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0x8e, 0x04, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xfa,
	0x42, 0x29, 0x72, 0x27, 0x10, 0x01, 0x18, 0x32, 0x32, 0x21, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a,
	0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xfa, 0x42, 0x30, 0x72, 0x2e, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x07,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x11, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x08, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1c, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x22, 0x02, 0x28, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0xfa, 0x42, 0x21, 0x72, 0x1f, 0x52, 0x05, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x04, 0x64, 0x61,
	0x79, 0x73, 0x52, 0x05, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x52, 0x06, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x73, 0xd0, 0x01, 0x01, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x29,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xfa, 0x42,
	0x12, 0x72, 0x10, 0x52, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x06, 0x74, 0x69, 0x65,
	0x72, 0x65, 0x64, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x69, 0x65,
	0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x52, 0x05, 0x74, 0x69,
	0x65, 0x72, 0x73, 0x22, 0x58, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x52, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x22, 0x37, 0x0a,
	0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x19, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75,
	0x70, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x28, 0x01, 0x52, 0x06, 0x72, 0x65,
	0x74, 0x61, 0x69, 0x6e, 0x22, 0x5c, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x54, 0x69, 0x65, 0x72, 0x65,
	0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x10, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x32, 0xd4, 0x12, 0x0a, 0x13, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xd0, 0x01, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x01, 0xfa, 0xd2, 0xe4, 0x93,
	0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12,
	0x12, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x92, 0x41, 0x58, 0x12, 0x0a, 0x47, 0x65, 0x74, 0x20, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x1a, 0x27, 0x47, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x72, 0x21, 0x0a, 0x1f, 0x0a, 0x05,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x55, 0x73, 0x65, 0x72, 0x20, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x28, 0x01, 0x12, 0xb2, 0x02,
	0x0a, 0x08, 0x53, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x2e, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe6, 0x01, 0xfa, 0xd2, 0xe4, 0x93,
	0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d,
	0x1a, 0x38, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2f, 0x7b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x91,
	0x01, 0x12, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x1a, 0x5d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x28, 0x6f,
	0x6e, 0x6c, 0x79, 0x20, 0x6e, 0x6f, 0x6e, 0x20, 0x27, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x27, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x29, 0x72,
	0x21, 0x0a, 0x1f, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x55, 0x73, 0x65, 0x72,
	0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x28, 0x01, 0x12, 0xc3, 0x02, 0x0a, 0x0e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xe5, 0x01, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x32, 0x38, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x90, 0x01, 0x12, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x20, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x1a, 0x5c, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x20, 0x6f, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x20,
	0x69, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x28, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x27, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x27, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x29, 0x72, 0x21, 0x0a, 0x1f, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x12, 0x55, 0x73, 0x65, 0x72, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x28, 0x01, 0x12, 0x90, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x24, 0x2e, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0xfa, 0xd2, 0xe4, 0x93, 0x02,
	0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x12, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0xd4, 0x01, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x54, 0x69, 0x65, 0x72, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x34, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x69, 0x65, 0x72, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x56, 0xfa, 0xd2, 0xe4, 0x93,
	0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x41, 0x12, 0x3f, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x74, 0x69, 0x65, 0x72, 0x65, 0x64, 0x2f,
	0x7b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x12, 0x98, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12,
	0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d,
	0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xa1, 0x01,
	0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x23, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0xfa, 0xd2, 0xe4,
	0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2f, 0x2a, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x12, 0x99, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x26, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09,
	0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22,
	0x19, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x8c, 0x01,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x12, 0x26, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x37, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49,
	0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x2a, 0x20, 0x2f, 0x76, 0x31, 0x2f,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x8a, 0x01, 0x0a,
	0x12, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x12, 0x27, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x33, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76,
	0x31, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x63,
	0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0x73, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x4f, 0x70, 0x65, 0x6e, 0x41, 0x70, 0x69, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x33, 0xfa, 0xd2, 0xe4, 0x93, 0x02,
	0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e,
	0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x73, 0x70, 0x65, 0x63, 0x12, 0x89,
	0x01, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x37, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41,
	0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x8c, 0x01, 0x0a, 0x0e, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x2e,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3a, 0xfa,
	0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x42, 0x8d, 0x02, 0x5a, 0x35, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72,
	0x2d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x92, 0x41, 0xd2, 0x01, 0x12, 0x8c, 0x01, 0x0a, 0x0c, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x21, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x65, 0x72, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x52, 0x0a, 0x0c, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x12, 0x42, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x39, 0x35, 0x38, 0x33, 0x37, 0x37,
	0x31, 0x30, 0x36, 0x37, 0x37, 0x36, 0x31, 0x36, 0x32, 0x33, 0x30, 0x34, 0x2f, 0x39, 0x35, 0x38,
	0x33, 0x37, 0x37, 0x32, 0x36, 0x31, 0x32, 0x33, 0x35, 0x35, 0x38, 0x35, 0x30, 0x36, 0x34, 0x32,
	0x05, 0x30, 0x2e, 0x31, 0x2e, 0x30, 0x52, 0x41, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x36, 0x0a, 0x1e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x6f, 0x6e,
	0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x12, 0x1a, 0x10, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x2e, 0x41, 0x70, 0x69, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_leaderboards_service_proto_rawDescOnce sync.Once
	file_leaderboards_service_proto_rawDescData = file_leaderboards_service_proto_rawDesc
)

func file_leaderboards_service_proto_rawDescGZIP() []byte {
	file_leaderboards_service_proto_rawDescOnce.Do(func() {
		file_leaderboards_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_leaderboards_service_proto_rawDescData)
	})
	return file_leaderboards_service_proto_rawDescData
}

var file_leaderboards_service_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_leaderboards_service_proto_goTypes = []interface{}{
	(*SettingsImportExportData)(nil),               // 0: leaderboards.SettingsImportExportData
	(*GetScoresRequest)(nil),                       // 1: leaderboards.GetScoresRequest
	(*GetScoresResponse)(nil),                      // 2: leaderboards.GetScoresResponse
	(*SetScoreRequest)(nil),                        // 3: leaderboards.SetScoreRequest
	(*SetScoreResponse)(nil),                       // 4: leaderboards.SetScoreResponse
	(*IncrementScoreRequest)(nil),                  // 5: leaderboards.IncrementScoreRequest
	(*IncrementScoreResponse)(nil),                 // 6: leaderboards.IncrementScoreResponse
	(*GetLeaderboardsRequest)(nil),                 // 7: leaderboards.GetLeaderboardsRequest
	(*GetLeaderboardsResponse)(nil),                // 8: leaderboards.GetLeaderboardsResponse
	(*GetUserDataRequest)(nil),                     // 9: leaderboards.GetUserDataRequest
	(*GetUserDataResponse)(nil),                    // 10: leaderboards.GetUserDataResponse
	(*DeleteUserDataRequest)(nil),                  // 11: leaderboards.DeleteUserDataRequest
	(*DeleteUserDataResponse)(nil),                 // 12: leaderboards.DeleteUserDataResponse
	(*CreateLeaderboardRequest)(nil),               // 13: leaderboards.CreateLeaderboardRequest
	(*CreateLeaderboardResponse)(nil),              // 14: leaderboards.CreateLeaderboardResponse
	(*DeleteLeaderboardRequest)(nil),               // 15: leaderboards.DeleteLeaderboardRequest
	(*CleanupLeaderboardRequest)(nil),              // 16: leaderboards.CleanupLeaderboardRequest
	(*GetTieredLeaderboardDiagnosticsRequest)(nil), // 17: leaderboards.GetTieredLeaderboardDiagnosticsRequest
	(*UserScore)(nil),                              // 18: leaderboards.UserScore
	(*Tier)(nil),                                   // 19: leaderboards.Tier
	(*Leaderboard)(nil),                            // 20: leaderboards.Leaderboard
	(*UserData)(nil),                               // 21: leaderboards.UserData
	(*emptypb.Empty)(nil),                          // 22: google.protobuf.Empty
	(*TieredLeaderboardInfo)(nil),                  // 23: leaderboards.TieredLeaderboardInfo
	(*httpbody.HttpBody)(nil),                      // 24: google.api.HttpBody
}
var file_leaderboards_service_proto_depIdxs = []int32{
	18, // 0: leaderboards.GetScoresResponse.user_scores:type_name -> leaderboards.UserScore
	19, // 1: leaderboards.GetScoresResponse.tier:type_name -> leaderboards.Tier
	19, // 2: leaderboards.SetScoreResponse.tier:type_name -> leaderboards.Tier
	19, // 3: leaderboards.IncrementScoreResponse.tier:type_name -> leaderboards.Tier
	20, // 4: leaderboards.GetLeaderboardsResponse.leaderboards:type_name -> leaderboards.Leaderboard
	21, // 5: leaderboards.GetUserDataResponse.userdata:type_name -> leaderboards.UserData
	19, // 6: leaderboards.CreateLeaderboardRequest.tiers:type_name -> leaderboards.Tier
	20, // 7: leaderboards.CreateLeaderboardResponse.leaderboard:type_name -> leaderboards.Leaderboard
	1,  // 8: leaderboards.LeaderboardsService.GetScores:input_type -> leaderboards.GetScoresRequest
	3,  // 9: leaderboards.LeaderboardsService.SetScore:input_type -> leaderboards.SetScoreRequest
	5,  // 10: leaderboards.LeaderboardsService.IncrementScore:input_type -> leaderboards.IncrementScoreRequest
	7,  // 11: leaderboards.LeaderboardsService.GetLeaderboards:input_type -> leaderboards.GetLeaderboardsRequest
	17, // 12: leaderboards.LeaderboardsService.GetTieredLeaderboardDiagnostics:input_type -> leaderboards.GetTieredLeaderboardDiagnosticsRequest
	9,  // 13: leaderboards.LeaderboardsService.GetUserData:input_type -> leaderboards.GetUserDataRequest
	11, // 14: leaderboards.LeaderboardsService.DeleteUserData:input_type -> leaderboards.DeleteUserDataRequest
	13, // 15: leaderboards.LeaderboardsService.CreateLeaderboard:input_type -> leaderboards.CreateLeaderboardRequest
	15, // 16: leaderboards.LeaderboardsService.DeleteLeaderboard:input_type -> leaderboards.DeleteLeaderboardRequest
	16, // 17: leaderboards.LeaderboardsService.CleanupLeaderboard:input_type -> leaderboards.CleanupLeaderboardRequest
	22, // 18: leaderboards.LeaderboardsService.GetOpenApiSpec:input_type -> google.protobuf.Empty
	22, // 19: leaderboards.LeaderboardsService.ExportSettings:input_type -> google.protobuf.Empty
	0,  // 20: leaderboards.LeaderboardsService.ImportSettings:input_type -> leaderboards.SettingsImportExportData
	2,  // 21: leaderboards.LeaderboardsService.GetScores:output_type -> leaderboards.GetScoresResponse
	4,  // 22: leaderboards.LeaderboardsService.SetScore:output_type -> leaderboards.SetScoreResponse
	6,  // 23: leaderboards.LeaderboardsService.IncrementScore:output_type -> leaderboards.IncrementScoreResponse
	8,  // 24: leaderboards.LeaderboardsService.GetLeaderboards:output_type -> leaderboards.GetLeaderboardsResponse
	23, // 25: leaderboards.LeaderboardsService.GetTieredLeaderboardDiagnostics:output_type -> leaderboards.TieredLeaderboardInfo
	10, // 26: leaderboards.LeaderboardsService.GetUserData:output_type -> leaderboards.GetUserDataResponse
	12, // 27: leaderboards.LeaderboardsService.DeleteUserData:output_type -> leaderboards.DeleteUserDataResponse
	14, // 28: leaderboards.LeaderboardsService.CreateLeaderboard:output_type -> leaderboards.CreateLeaderboardResponse
	22, // 29: leaderboards.LeaderboardsService.DeleteLeaderboard:output_type -> google.protobuf.Empty
	22, // 30: leaderboards.LeaderboardsService.CleanupLeaderboard:output_type -> google.protobuf.Empty
	24, // 31: leaderboards.LeaderboardsService.GetOpenApiSpec:output_type -> google.api.HttpBody
	0,  // 32: leaderboards.LeaderboardsService.ExportSettings:output_type -> leaderboards.SettingsImportExportData
	22, // 33: leaderboards.LeaderboardsService.ImportSettings:output_type -> google.protobuf.Empty
	21, // [21:34] is the sub-list for method output_type
	8,  // [8:21] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_leaderboards_service_proto_init() }
func file_leaderboards_service_proto_init() {
	if File_leaderboards_service_proto != nil {
		return
	}
	file_leaderboards_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_leaderboards_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingsImportExportData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboards_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScoresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboards_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScoresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboards_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboards_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetScoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboards_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrementScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboards_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrementScoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboards_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeaderboardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboards_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeaderboardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboards_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboards_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboards_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboards_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboards_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLeaderboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboards_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLeaderboardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboards_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLeaderboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboards_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanupLeaderboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_leaderboards_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTieredLeaderboardDiagnosticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_leaderboards_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_leaderboards_service_proto_goTypes,
		DependencyIndexes: file_leaderboards_service_proto_depIdxs,
		MessageInfos:      file_leaderboards_service_proto_msgTypes,
	}.Build()
	File_leaderboards_service_proto = out.File
	file_leaderboards_service_proto_rawDesc = nil
	file_leaderboards_service_proto_goTypes = nil
	file_leaderboards_service_proto_depIdxs = nil
}
