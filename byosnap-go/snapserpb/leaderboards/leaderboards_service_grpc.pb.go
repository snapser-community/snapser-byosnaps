// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: leaderboards_service.proto

package proto

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LeaderboardsServiceClient is the client API for LeaderboardsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaderboardsServiceClient interface {
	// GetScores
	//
	// GetScores gets the standings within a leaderboard
	GetScores(ctx context.Context, in *GetScoresRequest, opts ...grpc.CallOption) (*GetScoresResponse, error)
	// SetScore
	//
	// SetScore updates the score on the leaderboard for the logged in user (if applicable)
	SetScore(ctx context.Context, in *SetScoreRequest, opts ...grpc.CallOption) (*SetScoreResponse, error)
	// IncrementScore
	//
	// IncrementScore increments the score on the leaderboard for the logged in user
	IncrementScore(ctx context.Context, in *IncrementScoreRequest, opts ...grpc.CallOption) (*IncrementScoreResponse, error)
	// GetLeaderboards
	//
	// GetLeaderboards returns all the leaderboards within the cluster
	GetLeaderboards(ctx context.Context, in *GetLeaderboardsRequest, opts ...grpc.CallOption) (*GetLeaderboardsResponse, error)
	GetTieredLeaderboardDiagnostics(ctx context.Context, in *GetTieredLeaderboardDiagnosticsRequest, opts ...grpc.CallOption) (*TieredLeaderboardInfo, error)
	// GetUserData
	//
	// GetUserData returns all the leaderboards data for user within the cluster
	GetUserData(ctx context.Context, in *GetUserDataRequest, opts ...grpc.CallOption) (*GetUserDataResponse, error)
	// DeleteUserData
	//
	// DeleteLeaderboards deletes the leaderboard data for user
	DeleteUserData(ctx context.Context, in *DeleteUserDataRequest, opts ...grpc.CallOption) (*DeleteUserDataResponse, error)
	// CreateLeaderboard
	//
	// CreateLeaderboard creates a new leaderboard with the given settings
	CreateLeaderboard(ctx context.Context, in *CreateLeaderboardRequest, opts ...grpc.CallOption) (*CreateLeaderboardResponse, error)
	DeleteLeaderboard(ctx context.Context, in *DeleteLeaderboardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CleanupLeaderboard(ctx context.Context, in *CleanupLeaderboardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetOpenApiSpec
	//
	// Returns the generated openapi swagger document
	GetOpenApiSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	ExportSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SettingsImportExportData, error)
	ImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type leaderboardsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaderboardsServiceClient(cc grpc.ClientConnInterface) LeaderboardsServiceClient {
	return &leaderboardsServiceClient{cc}
}

func (c *leaderboardsServiceClient) GetScores(ctx context.Context, in *GetScoresRequest, opts ...grpc.CallOption) (*GetScoresResponse, error) {
	out := new(GetScoresResponse)
	err := c.cc.Invoke(ctx, "/leaderboards.LeaderboardsService/GetScores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderboardsServiceClient) SetScore(ctx context.Context, in *SetScoreRequest, opts ...grpc.CallOption) (*SetScoreResponse, error) {
	out := new(SetScoreResponse)
	err := c.cc.Invoke(ctx, "/leaderboards.LeaderboardsService/SetScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderboardsServiceClient) IncrementScore(ctx context.Context, in *IncrementScoreRequest, opts ...grpc.CallOption) (*IncrementScoreResponse, error) {
	out := new(IncrementScoreResponse)
	err := c.cc.Invoke(ctx, "/leaderboards.LeaderboardsService/IncrementScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderboardsServiceClient) GetLeaderboards(ctx context.Context, in *GetLeaderboardsRequest, opts ...grpc.CallOption) (*GetLeaderboardsResponse, error) {
	out := new(GetLeaderboardsResponse)
	err := c.cc.Invoke(ctx, "/leaderboards.LeaderboardsService/GetLeaderboards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderboardsServiceClient) GetTieredLeaderboardDiagnostics(ctx context.Context, in *GetTieredLeaderboardDiagnosticsRequest, opts ...grpc.CallOption) (*TieredLeaderboardInfo, error) {
	out := new(TieredLeaderboardInfo)
	err := c.cc.Invoke(ctx, "/leaderboards.LeaderboardsService/GetTieredLeaderboardDiagnostics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderboardsServiceClient) GetUserData(ctx context.Context, in *GetUserDataRequest, opts ...grpc.CallOption) (*GetUserDataResponse, error) {
	out := new(GetUserDataResponse)
	err := c.cc.Invoke(ctx, "/leaderboards.LeaderboardsService/GetUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderboardsServiceClient) DeleteUserData(ctx context.Context, in *DeleteUserDataRequest, opts ...grpc.CallOption) (*DeleteUserDataResponse, error) {
	out := new(DeleteUserDataResponse)
	err := c.cc.Invoke(ctx, "/leaderboards.LeaderboardsService/DeleteUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderboardsServiceClient) CreateLeaderboard(ctx context.Context, in *CreateLeaderboardRequest, opts ...grpc.CallOption) (*CreateLeaderboardResponse, error) {
	out := new(CreateLeaderboardResponse)
	err := c.cc.Invoke(ctx, "/leaderboards.LeaderboardsService/CreateLeaderboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderboardsServiceClient) DeleteLeaderboard(ctx context.Context, in *DeleteLeaderboardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/leaderboards.LeaderboardsService/DeleteLeaderboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderboardsServiceClient) CleanupLeaderboard(ctx context.Context, in *CleanupLeaderboardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/leaderboards.LeaderboardsService/CleanupLeaderboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderboardsServiceClient) GetOpenApiSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/leaderboards.LeaderboardsService/GetOpenApiSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderboardsServiceClient) ExportSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SettingsImportExportData, error) {
	out := new(SettingsImportExportData)
	err := c.cc.Invoke(ctx, "/leaderboards.LeaderboardsService/ExportSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderboardsServiceClient) ImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/leaderboards.LeaderboardsService/ImportSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaderboardsServiceServer is the server API for LeaderboardsService service.
// All implementations must embed UnimplementedLeaderboardsServiceServer
// for forward compatibility
type LeaderboardsServiceServer interface {
	// GetScores
	//
	// GetScores gets the standings within a leaderboard
	GetScores(context.Context, *GetScoresRequest) (*GetScoresResponse, error)
	// SetScore
	//
	// SetScore updates the score on the leaderboard for the logged in user (if applicable)
	SetScore(context.Context, *SetScoreRequest) (*SetScoreResponse, error)
	// IncrementScore
	//
	// IncrementScore increments the score on the leaderboard for the logged in user
	IncrementScore(context.Context, *IncrementScoreRequest) (*IncrementScoreResponse, error)
	// GetLeaderboards
	//
	// GetLeaderboards returns all the leaderboards within the cluster
	GetLeaderboards(context.Context, *GetLeaderboardsRequest) (*GetLeaderboardsResponse, error)
	GetTieredLeaderboardDiagnostics(context.Context, *GetTieredLeaderboardDiagnosticsRequest) (*TieredLeaderboardInfo, error)
	// GetUserData
	//
	// GetUserData returns all the leaderboards data for user within the cluster
	GetUserData(context.Context, *GetUserDataRequest) (*GetUserDataResponse, error)
	// DeleteUserData
	//
	// DeleteLeaderboards deletes the leaderboard data for user
	DeleteUserData(context.Context, *DeleteUserDataRequest) (*DeleteUserDataResponse, error)
	// CreateLeaderboard
	//
	// CreateLeaderboard creates a new leaderboard with the given settings
	CreateLeaderboard(context.Context, *CreateLeaderboardRequest) (*CreateLeaderboardResponse, error)
	DeleteLeaderboard(context.Context, *DeleteLeaderboardRequest) (*emptypb.Empty, error)
	CleanupLeaderboard(context.Context, *CleanupLeaderboardRequest) (*emptypb.Empty, error)
	// GetOpenApiSpec
	//
	// Returns the generated openapi swagger document
	GetOpenApiSpec(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error)
	ExportSettings(context.Context, *emptypb.Empty) (*SettingsImportExportData, error)
	ImportSettings(context.Context, *SettingsImportExportData) (*emptypb.Empty, error)
	mustEmbedUnimplementedLeaderboardsServiceServer()
}

// UnimplementedLeaderboardsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLeaderboardsServiceServer struct {
}

func (UnimplementedLeaderboardsServiceServer) GetScores(context.Context, *GetScoresRequest) (*GetScoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScores not implemented")
}
func (UnimplementedLeaderboardsServiceServer) SetScore(context.Context, *SetScoreRequest) (*SetScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetScore not implemented")
}
func (UnimplementedLeaderboardsServiceServer) IncrementScore(context.Context, *IncrementScoreRequest) (*IncrementScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementScore not implemented")
}
func (UnimplementedLeaderboardsServiceServer) GetLeaderboards(context.Context, *GetLeaderboardsRequest) (*GetLeaderboardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaderboards not implemented")
}
func (UnimplementedLeaderboardsServiceServer) GetTieredLeaderboardDiagnostics(context.Context, *GetTieredLeaderboardDiagnosticsRequest) (*TieredLeaderboardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTieredLeaderboardDiagnostics not implemented")
}
func (UnimplementedLeaderboardsServiceServer) GetUserData(context.Context, *GetUserDataRequest) (*GetUserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserData not implemented")
}
func (UnimplementedLeaderboardsServiceServer) DeleteUserData(context.Context, *DeleteUserDataRequest) (*DeleteUserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserData not implemented")
}
func (UnimplementedLeaderboardsServiceServer) CreateLeaderboard(context.Context, *CreateLeaderboardRequest) (*CreateLeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLeaderboard not implemented")
}
func (UnimplementedLeaderboardsServiceServer) DeleteLeaderboard(context.Context, *DeleteLeaderboardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLeaderboard not implemented")
}
func (UnimplementedLeaderboardsServiceServer) CleanupLeaderboard(context.Context, *CleanupLeaderboardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanupLeaderboard not implemented")
}
func (UnimplementedLeaderboardsServiceServer) GetOpenApiSpec(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenApiSpec not implemented")
}
func (UnimplementedLeaderboardsServiceServer) ExportSettings(context.Context, *emptypb.Empty) (*SettingsImportExportData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportSettings not implemented")
}
func (UnimplementedLeaderboardsServiceServer) ImportSettings(context.Context, *SettingsImportExportData) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportSettings not implemented")
}
func (UnimplementedLeaderboardsServiceServer) mustEmbedUnimplementedLeaderboardsServiceServer() {}

// UnsafeLeaderboardsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaderboardsServiceServer will
// result in compilation errors.
type UnsafeLeaderboardsServiceServer interface {
	mustEmbedUnimplementedLeaderboardsServiceServer()
}

func RegisterLeaderboardsServiceServer(s grpc.ServiceRegistrar, srv LeaderboardsServiceServer) {
	s.RegisterService(&LeaderboardsService_ServiceDesc, srv)
}

func _LeaderboardsService_GetScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardsServiceServer).GetScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaderboards.LeaderboardsService/GetScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardsServiceServer).GetScores(ctx, req.(*GetScoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderboardsService_SetScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardsServiceServer).SetScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaderboards.LeaderboardsService/SetScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardsServiceServer).SetScore(ctx, req.(*SetScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderboardsService_IncrementScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardsServiceServer).IncrementScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaderboards.LeaderboardsService/IncrementScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardsServiceServer).IncrementScore(ctx, req.(*IncrementScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderboardsService_GetLeaderboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderboardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardsServiceServer).GetLeaderboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaderboards.LeaderboardsService/GetLeaderboards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardsServiceServer).GetLeaderboards(ctx, req.(*GetLeaderboardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderboardsService_GetTieredLeaderboardDiagnostics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTieredLeaderboardDiagnosticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardsServiceServer).GetTieredLeaderboardDiagnostics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaderboards.LeaderboardsService/GetTieredLeaderboardDiagnostics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardsServiceServer).GetTieredLeaderboardDiagnostics(ctx, req.(*GetTieredLeaderboardDiagnosticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderboardsService_GetUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardsServiceServer).GetUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaderboards.LeaderboardsService/GetUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardsServiceServer).GetUserData(ctx, req.(*GetUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderboardsService_DeleteUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardsServiceServer).DeleteUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaderboards.LeaderboardsService/DeleteUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardsServiceServer).DeleteUserData(ctx, req.(*DeleteUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderboardsService_CreateLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardsServiceServer).CreateLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaderboards.LeaderboardsService/CreateLeaderboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardsServiceServer).CreateLeaderboard(ctx, req.(*CreateLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderboardsService_DeleteLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardsServiceServer).DeleteLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaderboards.LeaderboardsService/DeleteLeaderboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardsServiceServer).DeleteLeaderboard(ctx, req.(*DeleteLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderboardsService_CleanupLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanupLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardsServiceServer).CleanupLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaderboards.LeaderboardsService/CleanupLeaderboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardsServiceServer).CleanupLeaderboard(ctx, req.(*CleanupLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderboardsService_GetOpenApiSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardsServiceServer).GetOpenApiSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaderboards.LeaderboardsService/GetOpenApiSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardsServiceServer).GetOpenApiSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderboardsService_ExportSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardsServiceServer).ExportSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaderboards.LeaderboardsService/ExportSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardsServiceServer).ExportSettings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderboardsService_ImportSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsImportExportData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardsServiceServer).ImportSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaderboards.LeaderboardsService/ImportSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardsServiceServer).ImportSettings(ctx, req.(*SettingsImportExportData))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaderboardsService_ServiceDesc is the grpc.ServiceDesc for LeaderboardsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaderboardsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "leaderboards.LeaderboardsService",
	HandlerType: (*LeaderboardsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScores",
			Handler:    _LeaderboardsService_GetScores_Handler,
		},
		{
			MethodName: "SetScore",
			Handler:    _LeaderboardsService_SetScore_Handler,
		},
		{
			MethodName: "IncrementScore",
			Handler:    _LeaderboardsService_IncrementScore_Handler,
		},
		{
			MethodName: "GetLeaderboards",
			Handler:    _LeaderboardsService_GetLeaderboards_Handler,
		},
		{
			MethodName: "GetTieredLeaderboardDiagnostics",
			Handler:    _LeaderboardsService_GetTieredLeaderboardDiagnostics_Handler,
		},
		{
			MethodName: "GetUserData",
			Handler:    _LeaderboardsService_GetUserData_Handler,
		},
		{
			MethodName: "DeleteUserData",
			Handler:    _LeaderboardsService_DeleteUserData_Handler,
		},
		{
			MethodName: "CreateLeaderboard",
			Handler:    _LeaderboardsService_CreateLeaderboard_Handler,
		},
		{
			MethodName: "DeleteLeaderboard",
			Handler:    _LeaderboardsService_DeleteLeaderboard_Handler,
		},
		{
			MethodName: "CleanupLeaderboard",
			Handler:    _LeaderboardsService_CleanupLeaderboard_Handler,
		},
		{
			MethodName: "GetOpenApiSpec",
			Handler:    _LeaderboardsService_GetOpenApiSpec_Handler,
		},
		{
			MethodName: "ExportSettings",
			Handler:    _LeaderboardsService_ExportSettings_Handler,
		},
		{
			MethodName: "ImportSettings",
			Handler:    _LeaderboardsService_ImportSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "leaderboards_service.proto",
}
