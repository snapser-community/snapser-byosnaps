# coding: utf-8

"""
    game-dev

    Your custom SDK

    The version of the OpenAPI document: game-dev: v2 SDK
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictStr, conbytes, conlist, constr, validator
from snapser_internal.models.protobuf_any import ProtobufAny

class ApiHttpBody(BaseModel):
    """
    Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page.   This message can be used both in streaming and non-streaming API methods in the request as well as the response.  It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body.  Example:      message GetResourceRequest {       // A unique request id.       string request_id = 1;        // The raw HTTP body is bound to this field.       google.api.HttpBody http_body = 2;      }      service ResourceService {       rpc GetResource(GetResourceRequest)         returns (google.api.HttpBody);       rpc UpdateResource(google.api.HttpBody)         returns (google.protobuf.Empty);      }  Example with streaming methods:      service CaldavService {       rpc GetCalendar(stream google.api.HttpBody)         returns (stream google.api.HttpBody);       rpc UpdateCalendar(stream google.api.HttpBody)         returns (stream google.api.HttpBody);      }  Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged.  # noqa: E501
    """
    content_type: Optional[StrictStr] = Field(None, description="The HTTP Content-Type header value specifying the content type of the body.")
    data: Optional[Union[conbytes(strict=True), constr(strict=True)]] = Field(None, description="The HTTP request/response body as raw binary.")
    extensions: Optional[conlist(ProtobufAny)] = Field(None, description="Application specific response metadata. Must be set in the first response for streaming APIs.")
    __properties = ["content_type", "data", "extensions"]

    @validator('data')
    def data_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$", value):
            raise ValueError(r"must validate the regular expression /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiHttpBody:
        """Create an instance of ApiHttpBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in extensions (list)
        _items = []
        if self.extensions:
            for _item in self.extensions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['extensions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiHttpBody:
        """Create an instance of ApiHttpBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiHttpBody.parse_obj(obj)

        _obj = ApiHttpBody.parse_obj({
            "content_type": obj.get("content_type"),
            "data": obj.get("data"),
            "extensions": [ProtobufAny.from_dict(_item) for _item in obj.get("extensions")] if obj.get("extensions") is not None else None
        })
        return _obj


