# coding: utf-8

"""
    juhi-dev

    Your custom SDK

    The version of the OpenAPI document: juhi-dev: v5 SDK
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, StrictStr
from snapser_internal.models.storage_get_blob_request import StorageGetBlobRequest
from snapser_internal.models.storage_user_blob_response import StorageUserBlobResponse

class StorageBatchGetBlobsSingleResponse(BaseModel):
    """
    StorageBatchGetBlobsSingleResponse
    """
    message: Optional[StrictStr] = None
    request: Optional[StorageGetBlobRequest] = None
    response: Optional[StorageUserBlobResponse] = None
    success: Optional[StrictBool] = None
    __properties = ["message", "request", "response", "success"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StorageBatchGetBlobsSingleResponse:
        """Create an instance of StorageBatchGetBlobsSingleResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of request
        if self.request:
            _dict['request'] = self.request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of response
        if self.response:
            _dict['response'] = self.response.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StorageBatchGetBlobsSingleResponse:
        """Create an instance of StorageBatchGetBlobsSingleResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StorageBatchGetBlobsSingleResponse.parse_obj(obj)

        _obj = StorageBatchGetBlobsSingleResponse.parse_obj({
            "message": obj.get("message"),
            "request": StorageGetBlobRequest.from_dict(obj.get("request")) if obj.get("request") is not None else None,
            "response": StorageUserBlobResponse.from_dict(obj.get("response")) if obj.get("response") is not None else None,
            "success": obj.get("success")
        })
        return _obj


