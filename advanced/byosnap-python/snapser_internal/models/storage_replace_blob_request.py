# coding: utf-8

"""
    juhi-dev

    Your custom SDK

    The version of the OpenAPI document: juhi-dev: v5 SDK
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint, validator

class StorageReplaceBlobRequest(BaseModel):
    """
    StorageReplaceBlobRequest
    """
    access_type: StrictStr = Field(..., description="Access to the blob. (public/protected/private)")
    blob_key: StrictStr = Field(..., description="Blob key")
    cas: Optional[StrictStr] = Field(None, description="CAS value retrieved from the last operation")
    create: Optional[StrictBool] = Field(None, description="Whether the blob should be created if it doesn't exist")
    owner_id: StrictStr = Field(..., description="Blob owner's user ID")
    ttl: Optional[conint()] = Field(None, description="Optional TTL for the blob")
    value: StrictStr = Field(..., description="Blob value to be inserted")
    __properties = ["access_type", "blob_key", "cas", "create", "owner_id", "ttl", "value"]

    @validator('access_type')
    def access_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('public', 'private', 'protected'):
            raise ValueError("must be one of enum values ('public', 'private', 'protected')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StorageReplaceBlobRequest:
        """Create an instance of StorageReplaceBlobRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StorageReplaceBlobRequest:
        """Create an instance of StorageReplaceBlobRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StorageReplaceBlobRequest.parse_obj(obj)

        _obj = StorageReplaceBlobRequest.parse_obj({
            "access_type": obj.get("access_type"),
            "blob_key": obj.get("blob_key"),
            "cas": obj.get("cas"),
            "create": obj.get("create"),
            "owner_id": obj.get("owner_id"),
            "ttl": obj.get("ttl"),
            "value": obj.get("value")
        })
        return _obj


