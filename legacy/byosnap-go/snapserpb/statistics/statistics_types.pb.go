// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.25.3
// source: statistics_types.proto

package proto

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Service Events
type StatisticsEventType int32

const (
	StatisticsEventType_UNKNOWN_EVENT_TYPE         StatisticsEventType = 0
	StatisticsEventType_STATISTICS_UPDATED         StatisticsEventType = 1
	StatisticsEventType_STATISTICS_SEGMENT_UPDATED StatisticsEventType = 2
)

// Enum value maps for StatisticsEventType.
var (
	StatisticsEventType_name = map[int32]string{
		0: "UNKNOWN_EVENT_TYPE",
		1: "STATISTICS_UPDATED",
		2: "STATISTICS_SEGMENT_UPDATED",
	}
	StatisticsEventType_value = map[string]int32{
		"UNKNOWN_EVENT_TYPE":         0,
		"STATISTICS_UPDATED":         1,
		"STATISTICS_SEGMENT_UPDATED": 2,
	}
)

func (x StatisticsEventType) Enum() *StatisticsEventType {
	p := new(StatisticsEventType)
	*p = x
	return p
}

func (x StatisticsEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatisticsEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_statistics_types_proto_enumTypes[0].Descriptor()
}

func (StatisticsEventType) Type() protoreflect.EnumType {
	return &file_statistics_types_proto_enumTypes[0]
}

func (x StatisticsEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatisticsEventType.Descriptor instead.
func (StatisticsEventType) EnumDescriptor() ([]byte, []int) {
	return file_statistics_types_proto_rawDescGZIP(), []int{0}
}

type GetUserStatisticRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetUserStatisticRequest) Reset() {
	*x = GetUserStatisticRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistics_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserStatisticRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserStatisticRequest) ProtoMessage() {}

func (x *GetUserStatisticRequest) ProtoReflect() protoreflect.Message {
	mi := &file_statistics_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserStatisticRequest.ProtoReflect.Descriptor instead.
func (*GetUserStatisticRequest) Descriptor() ([]byte, []int) {
	return file_statistics_types_proto_rawDescGZIP(), []int{0}
}

func (x *GetUserStatisticRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetUserStatisticRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetUserStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetUserStatisticsRequest) Reset() {
	*x = GetUserStatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistics_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserStatisticsRequest) ProtoMessage() {}

func (x *GetUserStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_statistics_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserStatisticsRequest.ProtoReflect.Descriptor instead.
func (*GetUserStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_statistics_types_proto_rawDescGZIP(), []int{1}
}

func (x *GetUserStatisticsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetBulkUserStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Keys   []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *GetBulkUserStatisticsRequest) Reset() {
	*x = GetBulkUserStatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistics_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBulkUserStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBulkUserStatisticsRequest) ProtoMessage() {}

func (x *GetBulkUserStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_statistics_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBulkUserStatisticsRequest.ProtoReflect.Descriptor instead.
func (*GetBulkUserStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_statistics_types_proto_rawDescGZIP(), []int{2}
}

func (x *GetBulkUserStatisticsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetBulkUserStatisticsRequest) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type GetUserStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserStatistics []*UserStatistic `protobuf:"bytes,1,rep,name=user_statistics,json=userStatistics,proto3" json:"user_statistics,omitempty"`
}

func (x *GetUserStatisticsResponse) Reset() {
	*x = GetUserStatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistics_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserStatisticsResponse) ProtoMessage() {}

func (x *GetUserStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_statistics_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserStatisticsResponse.ProtoReflect.Descriptor instead.
func (*GetUserStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_statistics_types_proto_rawDescGZIP(), []int{3}
}

func (x *GetUserStatisticsResponse) GetUserStatistics() []*UserStatistic {
	if x != nil {
		return x.UserStatistics
	}
	return nil
}

type IncrementUserStatisticRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Delta  int64  `protobuf:"varint,3,opt,name=delta,proto3" json:"delta,omitempty"`
}

func (x *IncrementUserStatisticRequest) Reset() {
	*x = IncrementUserStatisticRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistics_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrementUserStatisticRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrementUserStatisticRequest) ProtoMessage() {}

func (x *IncrementUserStatisticRequest) ProtoReflect() protoreflect.Message {
	mi := &file_statistics_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrementUserStatisticRequest.ProtoReflect.Descriptor instead.
func (*IncrementUserStatisticRequest) Descriptor() ([]byte, []int) {
	return file_statistics_types_proto_rawDescGZIP(), []int{4}
}

func (x *IncrementUserStatisticRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *IncrementUserStatisticRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *IncrementUserStatisticRequest) GetDelta() int64 {
	if x != nil {
		return x.Delta
	}
	return 0
}

type SetUserStatisticRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Value  string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SetUserStatisticRequest) Reset() {
	*x = SetUserStatisticRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistics_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserStatisticRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserStatisticRequest) ProtoMessage() {}

func (x *SetUserStatisticRequest) ProtoReflect() protoreflect.Message {
	mi := &file_statistics_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserStatisticRequest.ProtoReflect.Descriptor instead.
func (*SetUserStatisticRequest) Descriptor() ([]byte, []int) {
	return file_statistics_types_proto_rawDescGZIP(), []int{5}
}

func (x *SetUserStatisticRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SetUserStatisticRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SetUserStatisticRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type BatchUpdateUserStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   []*BatchUpdateUserStatisticsItem `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	UserId string                           `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *BatchUpdateUserStatisticsRequest) Reset() {
	*x = BatchUpdateUserStatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistics_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateUserStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateUserStatisticsRequest) ProtoMessage() {}

func (x *BatchUpdateUserStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_statistics_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateUserStatisticsRequest.ProtoReflect.Descriptor instead.
func (*BatchUpdateUserStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_statistics_types_proto_rawDescGZIP(), []int{6}
}

func (x *BatchUpdateUserStatisticsRequest) GetData() []*BatchUpdateUserStatisticsItem {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BatchUpdateUserStatisticsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type BatchUpdateUserStatisticsItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idx       int64  `protobuf:"varint,1,opt,name=idx,proto3" json:"idx,omitempty"`
	Operation string `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"`
	Key       string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value     string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BatchUpdateUserStatisticsItem) Reset() {
	*x = BatchUpdateUserStatisticsItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistics_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateUserStatisticsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateUserStatisticsItem) ProtoMessage() {}

func (x *BatchUpdateUserStatisticsItem) ProtoReflect() protoreflect.Message {
	mi := &file_statistics_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateUserStatisticsItem.ProtoReflect.Descriptor instead.
func (*BatchUpdateUserStatisticsItem) Descriptor() ([]byte, []int) {
	return file_statistics_types_proto_rawDescGZIP(), []int{7}
}

func (x *BatchUpdateUserStatisticsItem) GetIdx() int64 {
	if x != nil {
		return x.Idx
	}
	return 0
}

func (x *BatchUpdateUserStatisticsItem) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *BatchUpdateUserStatisticsItem) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *BatchUpdateUserStatisticsItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type BatchUpdateUserStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserStatistics []*UserStatistic `protobuf:"bytes,1,rep,name=user_statistics,json=userStatistics,proto3" json:"user_statistics,omitempty"`
}

func (x *BatchUpdateUserStatisticsResponse) Reset() {
	*x = BatchUpdateUserStatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistics_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateUserStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateUserStatisticsResponse) ProtoMessage() {}

func (x *BatchUpdateUserStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_statistics_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateUserStatisticsResponse.ProtoReflect.Descriptor instead.
func (*BatchUpdateUserStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_statistics_types_proto_rawDescGZIP(), []int{8}
}

func (x *BatchUpdateUserStatisticsResponse) GetUserStatistics() []*UserStatistic {
	if x != nil {
		return x.UserStatistics
	}
	return nil
}

type BatchGetUserStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId []string `protobuf:"bytes,1,rep,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *BatchGetUserStatisticsRequest) Reset() {
	*x = BatchGetUserStatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistics_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetUserStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetUserStatisticsRequest) ProtoMessage() {}

func (x *BatchGetUserStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_statistics_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetUserStatisticsRequest.ProtoReflect.Descriptor instead.
func (*BatchGetUserStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_statistics_types_proto_rawDescGZIP(), []int{9}
}

func (x *BatchGetUserStatisticsRequest) GetUserId() []string {
	if x != nil {
		return x.UserId
	}
	return nil
}

type BatchSetUserStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*SetUserStatisticRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BatchSetUserStatisticsRequest) Reset() {
	*x = BatchSetUserStatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistics_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSetUserStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSetUserStatisticsRequest) ProtoMessage() {}

func (x *BatchSetUserStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_statistics_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSetUserStatisticsRequest.ProtoReflect.Descriptor instead.
func (*BatchSetUserStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_statistics_types_proto_rawDescGZIP(), []int{10}
}

func (x *BatchSetUserStatisticsRequest) GetRequests() []*SetUserStatisticRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BatchGetUserStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsersStatistics map[string]*MultiUserStatistics `protobuf:"bytes,1,rep,name=users_statistics,json=usersStatistics,proto3" json:"users_statistics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchGetUserStatisticsResponse) Reset() {
	*x = BatchGetUserStatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistics_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetUserStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetUserStatisticsResponse) ProtoMessage() {}

func (x *BatchGetUserStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_statistics_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetUserStatisticsResponse.ProtoReflect.Descriptor instead.
func (*BatchGetUserStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_statistics_types_proto_rawDescGZIP(), []int{11}
}

func (x *BatchGetUserStatisticsResponse) GetUsersStatistics() map[string]*MultiUserStatistics {
	if x != nil {
		return x.UsersStatistics
	}
	return nil
}

type MultiUserStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserStatistics []*UserStatistic `protobuf:"bytes,1,rep,name=user_statistics,json=userStatistics,proto3" json:"user_statistics,omitempty"`
}

func (x *MultiUserStatistics) Reset() {
	*x = MultiUserStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistics_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiUserStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiUserStatistics) ProtoMessage() {}

func (x *MultiUserStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_statistics_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiUserStatistics.ProtoReflect.Descriptor instead.
func (*MultiUserStatistics) Descriptor() ([]byte, []int) {
	return file_statistics_types_proto_rawDescGZIP(), []int{12}
}

func (x *MultiUserStatistics) GetUserStatistics() []*UserStatistic {
	if x != nil {
		return x.UserStatistics
	}
	return nil
}

type BatchSetUserStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserStatistics []*UserStatistic `protobuf:"bytes,1,rep,name=user_statistics,json=userStatistics,proto3" json:"user_statistics,omitempty"`
}

func (x *BatchSetUserStatisticsResponse) Reset() {
	*x = BatchSetUserStatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistics_types_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSetUserStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSetUserStatisticsResponse) ProtoMessage() {}

func (x *BatchSetUserStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_statistics_types_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSetUserStatisticsResponse.ProtoReflect.Descriptor instead.
func (*BatchSetUserStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_statistics_types_proto_rawDescGZIP(), []int{13}
}

func (x *BatchSetUserStatisticsResponse) GetUserStatistics() []*UserStatistic {
	if x != nil {
		return x.UserStatistics
	}
	return nil
}

type IsUserInSegmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *IsUserInSegmentRequest) Reset() {
	*x = IsUserInSegmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistics_types_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsUserInSegmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsUserInSegmentRequest) ProtoMessage() {}

func (x *IsUserInSegmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_statistics_types_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsUserInSegmentRequest.ProtoReflect.Descriptor instead.
func (*IsUserInSegmentRequest) Descriptor() ([]byte, []int) {
	return file_statistics_types_proto_rawDescGZIP(), []int{14}
}

func (x *IsUserInSegmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IsUserInSegmentRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type IsUserInSegmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInSegment bool `protobuf:"varint,1,opt,name=userInSegment,proto3" json:"userInSegment,omitempty"`
}

func (x *IsUserInSegmentResponse) Reset() {
	*x = IsUserInSegmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistics_types_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsUserInSegmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsUserInSegmentResponse) ProtoMessage() {}

func (x *IsUserInSegmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_statistics_types_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsUserInSegmentResponse.ProtoReflect.Descriptor instead.
func (*IsUserInSegmentResponse) Descriptor() ([]byte, []int) {
	return file_statistics_types_proto_rawDescGZIP(), []int{15}
}

func (x *IsUserInSegmentResponse) GetUserInSegment() bool {
	if x != nil {
		return x.UserInSegment
	}
	return false
}

// Message Types and Enums
type UserStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Value  string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UserStatistic) Reset() {
	*x = UserStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistics_types_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStatistic) ProtoMessage() {}

func (x *UserStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_statistics_types_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStatistic.ProtoReflect.Descriptor instead.
func (*UserStatistic) Descriptor() ([]byte, []int) {
	return file_statistics_types_proto_rawDescGZIP(), []int{16}
}

func (x *UserStatistic) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *UserStatistic) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserStatistic) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventStatisticsUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType    StatisticsEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=statistics.StatisticsEventType" json:"event_type,omitempty"`
	PublishedAt  int64               `protobuf:"varint,2,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	UserId       string              `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Key          string              `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	CurrentValue string              `protobuf:"bytes,5,opt,name=current_value,json=currentValue,proto3" json:"current_value,omitempty"`
}

func (x *EventStatisticsUpdated) Reset() {
	*x = EventStatisticsUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistics_types_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventStatisticsUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStatisticsUpdated) ProtoMessage() {}

func (x *EventStatisticsUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_statistics_types_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStatisticsUpdated.ProtoReflect.Descriptor instead.
func (*EventStatisticsUpdated) Descriptor() ([]byte, []int) {
	return file_statistics_types_proto_rawDescGZIP(), []int{17}
}

func (x *EventStatisticsUpdated) GetEventType() StatisticsEventType {
	if x != nil {
		return x.EventType
	}
	return StatisticsEventType_UNKNOWN_EVENT_TYPE
}

func (x *EventStatisticsUpdated) GetPublishedAt() int64 {
	if x != nil {
		return x.PublishedAt
	}
	return 0
}

func (x *EventStatisticsUpdated) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EventStatisticsUpdated) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *EventStatisticsUpdated) GetCurrentValue() string {
	if x != nil {
		return x.CurrentValue
	}
	return ""
}

type EventStatisticsSegmentUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType       StatisticsEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=statistics.StatisticsEventType" json:"event_type,omitempty"`
	PublishedAt     int64               `protobuf:"varint,2,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	UserId          string              `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EnteredSegments []string            `protobuf:"bytes,4,rep,name=entered_segments,json=enteredSegments,proto3" json:"entered_segments,omitempty"`
	ExitedSegments  []string            `protobuf:"bytes,5,rep,name=exited_segments,json=exitedSegments,proto3" json:"exited_segments,omitempty"`
}

func (x *EventStatisticsSegmentUpdated) Reset() {
	*x = EventStatisticsSegmentUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistics_types_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventStatisticsSegmentUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStatisticsSegmentUpdated) ProtoMessage() {}

func (x *EventStatisticsSegmentUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_statistics_types_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStatisticsSegmentUpdated.ProtoReflect.Descriptor instead.
func (*EventStatisticsSegmentUpdated) Descriptor() ([]byte, []int) {
	return file_statistics_types_proto_rawDescGZIP(), []int{18}
}

func (x *EventStatisticsSegmentUpdated) GetEventType() StatisticsEventType {
	if x != nil {
		return x.EventType
	}
	return StatisticsEventType_UNKNOWN_EVENT_TYPE
}

func (x *EventStatisticsSegmentUpdated) GetPublishedAt() int64 {
	if x != nil {
		return x.PublishedAt
	}
	return 0
}

func (x *EventStatisticsSegmentUpdated) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EventStatisticsSegmentUpdated) GetEnteredSegments() []string {
	if x != nil {
		return x.EnteredSegments
	}
	return nil
}

func (x *EventStatisticsSegmentUpdated) GetExitedSegments() []string {
	if x != nil {
		return x.ExitedSegments
	}
	return nil
}

var File_statistics_types_proto protoreflect.FileDescriptor

var file_statistics_types_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd5,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x52, 0x92, 0x41, 0x20, 0x32, 0x1a, 0x4e, 0x61,
	0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x29, 0x72, 0x27, 0x10, 0x01, 0x18, 0x64, 0x32, 0x21, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a,
	0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x54, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x3b, 0x92, 0x41, 0x19, 0x32, 0x13, 0x55, 0x73, 0x65, 0x72, 0x20, 0x49, 0x44, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x07, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69,
	0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x54, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x19, 0x32, 0x13, 0x55, 0x73, 0x65, 0x72, 0x20, 0x49,
	0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01,
	0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28,
	0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xdf, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x6c, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x19, 0x32,
	0x13, 0x55, 0x73, 0x65, 0x72, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x19, 0x72, 0x17,
	0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x69, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x55, 0x92,
	0x41, 0x1c, 0x32, 0x1a, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x30, 0x92, 0x01, 0x2d, 0x08, 0x01, 0x22, 0x29, 0x72, 0x27, 0x10, 0x01, 0x18,
	0x64, 0x32, 0x21, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x5d, 0x29, 0x3f, 0x24, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x5f, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0e, 0x75, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xe4, 0x02, 0x0a, 0x1d,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x64, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x52, 0x92, 0x41, 0x20, 0x32,
	0x1a, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x9a, 0x02, 0x01, 0x07, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x29, 0x72, 0x27, 0x10, 0x01, 0x18, 0x64, 0x32, 0x21, 0x28, 0x3f, 0x69,
	0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d,
	0x5f, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x74, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x5b, 0x92, 0x41, 0x39, 0x32, 0x33, 0x55, 0x73, 0x65, 0x72, 0x20,
	0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x77,
	0x68, 0x6f, 0x27, 0x73, 0x20, 0x73, 0x74, 0x61, 0x74, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x62,
	0x65, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x9a, 0x02,
	0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11,
	0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a,
	0x24, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x05, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x51, 0x92, 0x41, 0x44, 0x32, 0x3e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x20,
	0x62, 0x79, 0x2e, 0x20, 0x55, 0x73, 0x65, 0x20, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x9a, 0x02, 0x01,
	0x03, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x38, 0x00, 0x52, 0x05, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x22, 0xbd, 0x02, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x64,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x52, 0x92, 0x41, 0x20,
	0x32, 0x1a, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x9a, 0x02, 0x01, 0x07,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x29, 0x72, 0x27, 0x10, 0x01, 0x18, 0x64, 0x32, 0x21, 0x28, 0x3f,
	0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x2d, 0x5f, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x74, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5b, 0x92, 0x41, 0x39, 0x32, 0x33, 0x55, 0x73, 0x65, 0x72,
	0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x77, 0x68, 0x6f, 0x27, 0x73, 0x20, 0x73, 0x74, 0x61, 0x74, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20,
	0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x9a,
	0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32,
	0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d,
	0x2a, 0x24, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x23, 0x32, 0x1d,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x20, 0x74, 0x6f, 0x9a, 0x02, 0x01,
	0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x94, 0x02, 0x0a, 0x20, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x76, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x74, 0x65, 0x6d,
	0x42, 0x37, 0x92, 0x41, 0x29, 0x32, 0x23, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x6f, 0x66, 0x20,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65,
	0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x01, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x78, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x5f, 0x92, 0x41, 0x3e, 0x32, 0x38, 0x55, 0x73, 0x65, 0x72, 0x20, 0x49, 0x44, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x77,
	0x68, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x73, 0x20, 0x61, 0x72,
	0x65, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x9a,
	0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x01, 0x18, 0x32, 0x32,
	0x10, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5c, 0x64, 0x2d, 0x5f, 0x5d, 0x2a,
	0x24, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb9, 0x03, 0x0a, 0x1d, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x67, 0x0a, 0x03, 0x69,
	0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x55, 0x92, 0x41, 0x48, 0x32, 0x42, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x20, 0x69, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52,
	0x03, 0x69, 0x64, 0x78, 0x12, 0x6d, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0x92, 0x41, 0x31, 0x32, 0x2b, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x20, 0x28, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x20, 0x2f, 0x20, 0x73, 0x65, 0x74, 0x29, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x15, 0x72, 0x13, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x03, 0x73, 0x65, 0x74, 0xd0, 0x01, 0x01, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x49, 0x92, 0x41, 0x20, 0x32, 0x1a, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x20, 0x72, 0x1e, 0x10, 0x01, 0x18,
	0x64, 0x32, 0x18, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x7b, 0x31, 0x7d,
	0x5b, 0x61, 0x2d, 0x7a, 0x5c, 0x64, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x63, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4d, 0x92, 0x41, 0x40, 0x32, 0x3a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x20, 0x73,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x20,
	0x2f, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79,
	0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x67, 0x0a, 0x21, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0e,
	0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x8f,
	0x01, 0x0a, 0x1d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x6e, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x55, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x49, 0x44, 0x28, 0x73, 0x29, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x28, 0x73, 0x29, 0x20, 0x74, 0x6f, 0x20,
	0x67, 0x65, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x20, 0x66,
	0x6f, 0x72, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x20, 0x92, 0x01, 0x1d, 0x08, 0x01, 0x22, 0x19, 0x72,
	0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x99, 0x01, 0x0a, 0x1d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x78, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x37, 0x92, 0x41, 0x29, 0x32, 0x23,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02,
	0x08, 0x01, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xf1, 0x01, 0x0a,
	0x1e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6a, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x63, 0x0a, 0x14, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x59, 0x0a, 0x13, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0e, 0x75, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x64, 0x0a, 0x1e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a,
	0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x22, 0xcf, 0x01, 0x0a, 0x16, 0x49, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4b, 0x92, 0x41, 0x19, 0x32,
	0x13, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x29, 0x72, 0x27,
	0x10, 0x01, 0x18, 0x64, 0x32, 0x21, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d,
	0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b,
	0x92, 0x41, 0x19, 0x32, 0x13, 0x55, 0x73, 0x65, 0x72, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x17, 0x49, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x50, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x1d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x65, 0x78, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x69, 0x74, 0x65, 0x64, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2a, 0x65, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x49, 0x53, 0x54,
	0x49, 0x43, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a,
	0x1a, 0x53, 0x54, 0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x53, 0x45, 0x47, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x42, 0x35, 0x5a,
	0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x65, 0x72, 0x2d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_statistics_types_proto_rawDescOnce sync.Once
	file_statistics_types_proto_rawDescData = file_statistics_types_proto_rawDesc
)

func file_statistics_types_proto_rawDescGZIP() []byte {
	file_statistics_types_proto_rawDescOnce.Do(func() {
		file_statistics_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_statistics_types_proto_rawDescData)
	})
	return file_statistics_types_proto_rawDescData
}

var file_statistics_types_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_statistics_types_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_statistics_types_proto_goTypes = []interface{}{
	(StatisticsEventType)(0),                  // 0: statistics.StatisticsEventType
	(*GetUserStatisticRequest)(nil),           // 1: statistics.GetUserStatisticRequest
	(*GetUserStatisticsRequest)(nil),          // 2: statistics.GetUserStatisticsRequest
	(*GetBulkUserStatisticsRequest)(nil),      // 3: statistics.GetBulkUserStatisticsRequest
	(*GetUserStatisticsResponse)(nil),         // 4: statistics.GetUserStatisticsResponse
	(*IncrementUserStatisticRequest)(nil),     // 5: statistics.IncrementUserStatisticRequest
	(*SetUserStatisticRequest)(nil),           // 6: statistics.SetUserStatisticRequest
	(*BatchUpdateUserStatisticsRequest)(nil),  // 7: statistics.BatchUpdateUserStatisticsRequest
	(*BatchUpdateUserStatisticsItem)(nil),     // 8: statistics.BatchUpdateUserStatisticsItem
	(*BatchUpdateUserStatisticsResponse)(nil), // 9: statistics.BatchUpdateUserStatisticsResponse
	(*BatchGetUserStatisticsRequest)(nil),     // 10: statistics.BatchGetUserStatisticsRequest
	(*BatchSetUserStatisticsRequest)(nil),     // 11: statistics.BatchSetUserStatisticsRequest
	(*BatchGetUserStatisticsResponse)(nil),    // 12: statistics.BatchGetUserStatisticsResponse
	(*MultiUserStatistics)(nil),               // 13: statistics.MultiUserStatistics
	(*BatchSetUserStatisticsResponse)(nil),    // 14: statistics.BatchSetUserStatisticsResponse
	(*IsUserInSegmentRequest)(nil),            // 15: statistics.IsUserInSegmentRequest
	(*IsUserInSegmentResponse)(nil),           // 16: statistics.IsUserInSegmentResponse
	(*UserStatistic)(nil),                     // 17: statistics.UserStatistic
	(*EventStatisticsUpdated)(nil),            // 18: statistics.EventStatisticsUpdated
	(*EventStatisticsSegmentUpdated)(nil),     // 19: statistics.EventStatisticsSegmentUpdated
	nil,                                       // 20: statistics.BatchGetUserStatisticsResponse.UsersStatisticsEntry
}
var file_statistics_types_proto_depIdxs = []int32{
	17, // 0: statistics.GetUserStatisticsResponse.user_statistics:type_name -> statistics.UserStatistic
	8,  // 1: statistics.BatchUpdateUserStatisticsRequest.data:type_name -> statistics.BatchUpdateUserStatisticsItem
	17, // 2: statistics.BatchUpdateUserStatisticsResponse.user_statistics:type_name -> statistics.UserStatistic
	6,  // 3: statistics.BatchSetUserStatisticsRequest.requests:type_name -> statistics.SetUserStatisticRequest
	20, // 4: statistics.BatchGetUserStatisticsResponse.users_statistics:type_name -> statistics.BatchGetUserStatisticsResponse.UsersStatisticsEntry
	17, // 5: statistics.MultiUserStatistics.user_statistics:type_name -> statistics.UserStatistic
	17, // 6: statistics.BatchSetUserStatisticsResponse.user_statistics:type_name -> statistics.UserStatistic
	0,  // 7: statistics.EventStatisticsUpdated.event_type:type_name -> statistics.StatisticsEventType
	0,  // 8: statistics.EventStatisticsSegmentUpdated.event_type:type_name -> statistics.StatisticsEventType
	13, // 9: statistics.BatchGetUserStatisticsResponse.UsersStatisticsEntry.value:type_name -> statistics.MultiUserStatistics
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_statistics_types_proto_init() }
func file_statistics_types_proto_init() {
	if File_statistics_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_statistics_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserStatisticRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistics_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserStatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistics_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBulkUserStatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistics_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserStatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistics_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrementUserStatisticRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistics_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserStatisticRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistics_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateUserStatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistics_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateUserStatisticsItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistics_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateUserStatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistics_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetUserStatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistics_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSetUserStatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistics_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetUserStatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistics_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiUserStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistics_types_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSetUserStatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistics_types_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsUserInSegmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistics_types_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsUserInSegmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistics_types_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistics_types_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventStatisticsUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistics_types_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventStatisticsSegmentUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_statistics_types_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_statistics_types_proto_goTypes,
		DependencyIndexes: file_statistics_types_proto_depIdxs,
		EnumInfos:         file_statistics_types_proto_enumTypes,
		MessageInfos:      file_statistics_types_proto_msgTypes,
	}.Build()
	File_statistics_types_proto = out.File
	file_statistics_types_proto_rawDesc = nil
	file_statistics_types_proto_goTypes = nil
	file_statistics_types_proto_depIdxs = nil
}
