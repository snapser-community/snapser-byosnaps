// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v5.26.1
// source: auth_services.proto

package proto

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/structpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SettingsImportExportData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    string                `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Data       *MultiEnvAuthSettings `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	ExportedAt int64                 `protobuf:"varint,3,opt,name=exported_at,json=exportedAt,proto3" json:"exported_at,omitempty"`
}

func (x *SettingsImportExportData) Reset() {
	*x = SettingsImportExportData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingsImportExportData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingsImportExportData) ProtoMessage() {}

func (x *SettingsImportExportData) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingsImportExportData.ProtoReflect.Descriptor instead.
func (*SettingsImportExportData) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{0}
}

func (x *SettingsImportExportData) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SettingsImportExportData) GetData() *MultiEnvAuthSettings {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SettingsImportExportData) GetExportedAt() int64 {
	if x != nil {
		return x.ExportedAt
	}
	return 0
}

type InviteUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email     string         `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	LoginId   string         `protobuf:"bytes,2,opt,name=login_id,json=loginId,proto3" json:"login_id,omitempty"`
	LoginType LoginType_Type `protobuf:"varint,3,opt,name=login_type,json=loginType,proto3,enum=auth.LoginType_Type" json:"login_type,omitempty"`
}

func (x *InviteUserRequest) Reset() {
	*x = InviteUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteUserRequest) ProtoMessage() {}

func (x *InviteUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteUserRequest.ProtoReflect.Descriptor instead.
func (*InviteUserRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{1}
}

func (x *InviteUserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *InviteUserRequest) GetLoginId() string {
	if x != nil {
		return x.LoginId
	}
	return ""
}

func (x *InviteUserRequest) GetLoginType() LoginType_Type {
	if x != nil {
		return x.LoginType
	}
	return LoginType_UNSPECIFIED_LOGIN_TYPE
}

type InviteUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *InviteUserResponse) Reset() {
	*x = InviteUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteUserResponse) ProtoMessage() {}

func (x *InviteUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteUserResponse.ProtoReflect.Descriptor instead.
func (*InviteUserResponse) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{2}
}

func (x *InviteUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type GetEmailsByUserIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds []string `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *GetEmailsByUserIdsRequest) Reset() {
	*x = GetEmailsByUserIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEmailsByUserIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmailsByUserIdsRequest) ProtoMessage() {}

func (x *GetEmailsByUserIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmailsByUserIdsRequest.ProtoReflect.Descriptor instead.
func (*GetEmailsByUserIdsRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{3}
}

func (x *GetEmailsByUserIdsRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type GetEmailsByUserIdsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Emails map[string]string `protobuf:"bytes,1,rep,name=emails,proto3" json:"emails,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetEmailsByUserIdsResponse) Reset() {
	*x = GetEmailsByUserIdsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEmailsByUserIdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmailsByUserIdsResponse) ProtoMessage() {}

func (x *GetEmailsByUserIdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmailsByUserIdsResponse.ProtoReflect.Descriptor instead.
func (*GetEmailsByUserIdsResponse) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{4}
}

func (x *GetEmailsByUserIdsResponse) GetEmails() map[string]string {
	if x != nil {
		return x.Emails
	}
	return nil
}

type GetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identifier:
	//
	//	*GetUserRequest_Id
	//	*GetUserRequest_Username
	Identifier isGetUserRequest_Identifier `protobuf_oneof:"identifier"`
	UserId     string                      `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	LoginId    string                      `protobuf:"bytes,4,opt,name=login_id,json=loginId,proto3" json:"login_id,omitempty"`
	LoginType  LoginType_Type              `protobuf:"varint,5,opt,name=login_type,json=loginType,proto3,enum=auth.LoginType_Type" json:"login_type,omitempty"`
}

func (x *GetUserRequest) Reset() {
	*x = GetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRequest) ProtoMessage() {}

func (x *GetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{5}
}

func (m *GetUserRequest) GetIdentifier() isGetUserRequest_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *GetUserRequest) GetId() string {
	if x, ok := x.GetIdentifier().(*GetUserRequest_Id); ok {
		return x.Id
	}
	return ""
}

func (x *GetUserRequest) GetUsername() string {
	if x, ok := x.GetIdentifier().(*GetUserRequest_Username); ok {
		return x.Username
	}
	return ""
}

func (x *GetUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserRequest) GetLoginId() string {
	if x != nil {
		return x.LoginId
	}
	return ""
}

func (x *GetUserRequest) GetLoginType() LoginType_Type {
	if x != nil {
		return x.LoginType
	}
	return LoginType_UNSPECIFIED_LOGIN_TYPE
}

type isGetUserRequest_Identifier interface {
	isGetUserRequest_Identifier()
}

type GetUserRequest_Id struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type GetUserRequest_Username struct {
	Username string `protobuf:"bytes,2,opt,name=username,proto3,oneof"`
}

func (*GetUserRequest_Id) isGetUserRequest_Identifier() {}

func (*GetUserRequest_Username) isGetUserRequest_Identifier() {}

type GetUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GetUserResponse) Reset() {
	*x = GetUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserResponse) ProtoMessage() {}

func (x *GetUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserResponse.ProtoReflect.Descriptor instead.
func (*GetUserResponse) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{6}
}

func (x *GetUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type GetUserDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetUserDataRequest) Reset() {
	*x = GetUserDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserDataRequest) ProtoMessage() {}

func (x *GetUserDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserDataRequest.ProtoReflect.Descriptor instead.
func (*GetUserDataRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{7}
}

func (x *GetUserDataRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetUserDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GetUserDataResponse) Reset() {
	*x = GetUserDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserDataResponse) ProtoMessage() {}

func (x *GetUserDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserDataResponse.ProtoReflect.Descriptor instead.
func (*GetUserDataResponse) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{8}
}

func (x *GetUserDataResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type UpdateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	User *User  `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *UpdateUserRequest) Reset() {
	*x = UpdateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRequest) ProtoMessage() {}

func (x *UpdateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateUserRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateUserRequest) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type BanUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *BanUserRequest) Reset() {
	*x = BanUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanUserRequest) ProtoMessage() {}

func (x *BanUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanUserRequest.ProtoReflect.Descriptor instead.
func (*BanUserRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{10}
}

func (x *BanUserRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UnbanUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UnbanUserRequest) Reset() {
	*x = UnbanUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnbanUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbanUserRequest) ProtoMessage() {}

func (x *UnbanUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbanUserRequest.ProtoReflect.Descriptor instead.
func (*UnbanUserRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{11}
}

func (x *UnbanUserRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdateUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *UpdateUserResponse) Reset() {
	*x = UpdateUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserResponse) ProtoMessage() {}

func (x *UpdateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserResponse) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type GetUserIdsByLoginIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoginIds  string `protobuf:"bytes,1,opt,name=login_ids,json=loginIds,proto3" json:"login_ids,omitempty"`
	LoginType string `protobuf:"bytes,2,opt,name=login_type,json=loginType,proto3" json:"login_type,omitempty"`
}

func (x *GetUserIdsByLoginIdsRequest) Reset() {
	*x = GetUserIdsByLoginIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserIdsByLoginIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserIdsByLoginIdsRequest) ProtoMessage() {}

func (x *GetUserIdsByLoginIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserIdsByLoginIdsRequest.ProtoReflect.Descriptor instead.
func (*GetUserIdsByLoginIdsRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{13}
}

func (x *GetUserIdsByLoginIdsRequest) GetLoginIds() string {
	if x != nil {
		return x.LoginIds
	}
	return ""
}

func (x *GetUserIdsByLoginIdsRequest) GetLoginType() string {
	if x != nil {
		return x.LoginType
	}
	return ""
}

type GetUserIdsByLoginIdsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds map[string]string `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetUserIdsByLoginIdsResponse) Reset() {
	*x = GetUserIdsByLoginIdsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserIdsByLoginIdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserIdsByLoginIdsResponse) ProtoMessage() {}

func (x *GetUserIdsByLoginIdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserIdsByLoginIdsResponse.ProtoReflect.Descriptor instead.
func (*GetUserIdsByLoginIdsResponse) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{14}
}

func (x *GetUserIdsByLoginIdsResponse) GetUserIds() map[string]string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type GetUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *GetUsersRequest) Reset() {
	*x = GetUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersRequest) ProtoMessage() {}

func (x *GetUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersRequest.ProtoReflect.Descriptor instead.
func (*GetUsersRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{15}
}

func (x *GetUsersRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users map[string]*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetUsersResponse) Reset() {
	*x = GetUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersResponse) ProtoMessage() {}

func (x *GetUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersResponse.ProtoReflect.Descriptor instead.
func (*GetUsersResponse) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{16}
}

func (x *GetUsersResponse) GetUsers() map[string]*User {
	if x != nil {
		return x.Users
	}
	return nil
}

type DeleteUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteUserRequest) Reset() {
	*x = DeleteUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserRequest) ProtoMessage() {}

func (x *DeleteUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteUserRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteUserDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *DeleteUserDataRequest) Reset() {
	*x = DeleteUserDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserDataRequest) ProtoMessage() {}

func (x *DeleteUserDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserDataRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserDataRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteUserDataRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type DeleteUserDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteUserDataResponse) Reset() {
	*x = DeleteUserDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserDataResponse) ProtoMessage() {}

func (x *DeleteUserDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserDataResponse.ProtoReflect.Descriptor instead.
func (*DeleteUserDataResponse) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteUserDataResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DisassociateLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	LoginType string `protobuf:"bytes,2,opt,name=login_type,json=loginType,proto3" json:"login_type,omitempty"`
}

func (x *DisassociateLoginRequest) Reset() {
	*x = DisassociateLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisassociateLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisassociateLoginRequest) ProtoMessage() {}

func (x *DisassociateLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisassociateLoginRequest.ProtoReflect.Descriptor instead.
func (*DisassociateLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{20}
}

func (x *DisassociateLoginRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DisassociateLoginRequest) GetLoginType() string {
	if x != nil {
		return x.LoginType
	}
	return ""
}

type ValidateInternalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User     *User      `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	LoginIds []*LoginId `protobuf:"bytes,2,rep,name=login_ids,json=loginIds,proto3" json:"login_ids,omitempty"`
}

func (x *ValidateInternalResponse) Reset() {
	*x = ValidateInternalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateInternalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateInternalResponse) ProtoMessage() {}

func (x *ValidateInternalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateInternalResponse.ProtoReflect.Descriptor instead.
func (*ValidateInternalResponse) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{21}
}

func (x *ValidateInternalResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ValidateInternalResponse) GetLoginIds() []*LoginId {
	if x != nil {
		return x.LoginIds
	}
	return nil
}

type GetSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthSettings *AuthSettings `protobuf:"bytes,1,opt,name=auth_settings,json=authSettings,proto3" json:"auth_settings,omitempty"`
}

func (x *GetSettingsResponse) Reset() {
	*x = GetSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingsResponse) ProtoMessage() {}

func (x *GetSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingsResponse.ProtoReflect.Descriptor instead.
func (*GetSettingsResponse) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{22}
}

func (x *GetSettingsResponse) GetAuthSettings() *AuthSettings {
	if x != nil {
		return x.AuthSettings
	}
	return nil
}

type EnableAnonLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment string `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *EnableAnonLoginRequest) Reset() {
	*x = EnableAnonLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableAnonLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableAnonLoginRequest) ProtoMessage() {}

func (x *EnableAnonLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableAnonLoginRequest.ProtoReflect.Descriptor instead.
func (*EnableAnonLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{23}
}

func (x *EnableAnonLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type EnableEmailLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtpLength            uint32                    `protobuf:"varint,1,opt,name=otp_length,json=otpLength,proto3" json:"otp_length,omitempty"`
	OtpValidity          uint32                    `protobuf:"varint,2,opt,name=otp_validity,json=otpValidity,proto3" json:"otp_validity,omitempty"`
	OtpRateLimitSettings *FixedRateLimiterSettings `protobuf:"bytes,3,opt,name=otp_rate_limit_settings,json=otpRateLimitSettings,proto3" json:"otp_rate_limit_settings,omitempty"`
	Environment          string                    `protobuf:"bytes,4,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *EnableEmailLoginRequest) Reset() {
	*x = EnableEmailLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableEmailLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableEmailLoginRequest) ProtoMessage() {}

func (x *EnableEmailLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableEmailLoginRequest.ProtoReflect.Descriptor instead.
func (*EnableEmailLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{24}
}

func (x *EnableEmailLoginRequest) GetOtpLength() uint32 {
	if x != nil {
		return x.OtpLength
	}
	return 0
}

func (x *EnableEmailLoginRequest) GetOtpValidity() uint32 {
	if x != nil {
		return x.OtpValidity
	}
	return 0
}

func (x *EnableEmailLoginRequest) GetOtpRateLimitSettings() *FixedRateLimiterSettings {
	if x != nil {
		return x.OtpRateLimitSettings
	}
	return nil
}

func (x *EnableEmailLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type EnableAppleLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId   string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	TeamId      string `protobuf:"bytes,2,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	KeyId       string `protobuf:"bytes,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	PrivateKey  string `protobuf:"bytes,4,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	Environment string `protobuf:"bytes,5,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *EnableAppleLoginRequest) Reset() {
	*x = EnableAppleLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableAppleLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableAppleLoginRequest) ProtoMessage() {}

func (x *EnableAppleLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableAppleLoginRequest.ProtoReflect.Descriptor instead.
func (*EnableAppleLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{25}
}

func (x *EnableAppleLoginRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *EnableAppleLoginRequest) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *EnableAppleLoginRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *EnableAppleLoginRequest) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *EnableAppleLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type EnableFacebookLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	Environment  string `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *EnableFacebookLoginRequest) Reset() {
	*x = EnableFacebookLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableFacebookLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableFacebookLoginRequest) ProtoMessage() {}

func (x *EnableFacebookLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableFacebookLoginRequest.ProtoReflect.Descriptor instead.
func (*EnableFacebookLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{26}
}

func (x *EnableFacebookLoginRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *EnableFacebookLoginRequest) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *EnableFacebookLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type EnableGoogleLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	Environment  string `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *EnableGoogleLoginRequest) Reset() {
	*x = EnableGoogleLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableGoogleLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableGoogleLoginRequest) ProtoMessage() {}

func (x *EnableGoogleLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableGoogleLoginRequest.ProtoReflect.Descriptor instead.
func (*EnableGoogleLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{27}
}

func (x *EnableGoogleLoginRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *EnableGoogleLoginRequest) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *EnableGoogleLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type EnableSteamLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebApiKey       string `protobuf:"bytes,1,opt,name=web_api_key,json=webApiKey,proto3" json:"web_api_key,omitempty"`
	PublisherApiKey string `protobuf:"bytes,2,opt,name=publisher_api_key,json=publisherApiKey,proto3" json:"publisher_api_key,omitempty"`
	AppId           uint32 `protobuf:"varint,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Environment     string `protobuf:"bytes,4,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *EnableSteamLoginRequest) Reset() {
	*x = EnableSteamLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableSteamLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableSteamLoginRequest) ProtoMessage() {}

func (x *EnableSteamLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableSteamLoginRequest.ProtoReflect.Descriptor instead.
func (*EnableSteamLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{28}
}

func (x *EnableSteamLoginRequest) GetWebApiKey() string {
	if x != nil {
		return x.WebApiKey
	}
	return ""
}

func (x *EnableSteamLoginRequest) GetPublisherApiKey() string {
	if x != nil {
		return x.PublisherApiKey
	}
	return ""
}

func (x *EnableSteamLoginRequest) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *EnableSteamLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type EnableXboxLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	Environment  string `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *EnableXboxLoginRequest) Reset() {
	*x = EnableXboxLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableXboxLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableXboxLoginRequest) ProtoMessage() {}

func (x *EnableXboxLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableXboxLoginRequest.ProtoReflect.Descriptor instead.
func (*EnableXboxLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{29}
}

func (x *EnableXboxLoginRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *EnableXboxLoginRequest) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *EnableXboxLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type EnableEpicLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	Environment  string `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *EnableEpicLoginRequest) Reset() {
	*x = EnableEpicLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableEpicLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableEpicLoginRequest) ProtoMessage() {}

func (x *EnableEpicLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableEpicLoginRequest.ProtoReflect.Descriptor instead.
func (*EnableEpicLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{30}
}

func (x *EnableEpicLoginRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *EnableEpicLoginRequest) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *EnableEpicLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type EnableDiscordLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	Environment  string `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *EnableDiscordLoginRequest) Reset() {
	*x = EnableDiscordLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableDiscordLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableDiscordLoginRequest) ProtoMessage() {}

func (x *EnableDiscordLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableDiscordLoginRequest.ProtoReflect.Descriptor instead.
func (*EnableDiscordLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{31}
}

func (x *EnableDiscordLoginRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *EnableDiscordLoginRequest) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *EnableDiscordLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type EnableEmailPasswordLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerificationCodeLength   uint32 `protobuf:"varint,1,opt,name=verification_code_length,json=verificationCodeLength,proto3" json:"verification_code_length,omitempty"`
	VerificationCodeValidity uint32 `protobuf:"varint,2,opt,name=verification_code_validity,json=verificationCodeValidity,proto3" json:"verification_code_validity,omitempty"`
	EnablePasswordUpdate     bool   `protobuf:"varint,3,opt,name=enable_password_update,json=enablePasswordUpdate,proto3" json:"enable_password_update,omitempty"`
	PasswordRegex            string `protobuf:"bytes,4,opt,name=password_regex,json=passwordRegex,proto3" json:"password_regex,omitempty"`
	Environment              string `protobuf:"bytes,5,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *EnableEmailPasswordLoginRequest) Reset() {
	*x = EnableEmailPasswordLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableEmailPasswordLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableEmailPasswordLoginRequest) ProtoMessage() {}

func (x *EnableEmailPasswordLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableEmailPasswordLoginRequest.ProtoReflect.Descriptor instead.
func (*EnableEmailPasswordLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{32}
}

func (x *EnableEmailPasswordLoginRequest) GetVerificationCodeLength() uint32 {
	if x != nil {
		return x.VerificationCodeLength
	}
	return 0
}

func (x *EnableEmailPasswordLoginRequest) GetVerificationCodeValidity() uint32 {
	if x != nil {
		return x.VerificationCodeValidity
	}
	return 0
}

func (x *EnableEmailPasswordLoginRequest) GetEnablePasswordUpdate() bool {
	if x != nil {
		return x.EnablePasswordUpdate
	}
	return false
}

func (x *EnableEmailPasswordLoginRequest) GetPasswordRegex() string {
	if x != nil {
		return x.PasswordRegex
	}
	return ""
}

func (x *EnableEmailPasswordLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type EnableUsernamePasswordLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PasswordRegex string `protobuf:"bytes,1,opt,name=password_regex,json=passwordRegex,proto3" json:"password_regex,omitempty"`
	Environment   string `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *EnableUsernamePasswordLoginRequest) Reset() {
	*x = EnableUsernamePasswordLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableUsernamePasswordLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableUsernamePasswordLoginRequest) ProtoMessage() {}

func (x *EnableUsernamePasswordLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableUsernamePasswordLoginRequest.ProtoReflect.Descriptor instead.
func (*EnableUsernamePasswordLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{33}
}

func (x *EnableUsernamePasswordLoginRequest) GetPasswordRegex() string {
	if x != nil {
		return x.PasswordRegex
	}
	return ""
}

func (x *EnableUsernamePasswordLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type ToggleAnonLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled     bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Environment string `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *ToggleAnonLoginRequest) Reset() {
	*x = ToggleAnonLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleAnonLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleAnonLoginRequest) ProtoMessage() {}

func (x *ToggleAnonLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleAnonLoginRequest.ProtoReflect.Descriptor instead.
func (*ToggleAnonLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{34}
}

func (x *ToggleAnonLoginRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ToggleAnonLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type ToggleEmailLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled     bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Environment string `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *ToggleEmailLoginRequest) Reset() {
	*x = ToggleEmailLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleEmailLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleEmailLoginRequest) ProtoMessage() {}

func (x *ToggleEmailLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleEmailLoginRequest.ProtoReflect.Descriptor instead.
func (*ToggleEmailLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{35}
}

func (x *ToggleEmailLoginRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ToggleEmailLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type ToggleAppleLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled     bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Environment string `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *ToggleAppleLoginRequest) Reset() {
	*x = ToggleAppleLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleAppleLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleAppleLoginRequest) ProtoMessage() {}

func (x *ToggleAppleLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleAppleLoginRequest.ProtoReflect.Descriptor instead.
func (*ToggleAppleLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{36}
}

func (x *ToggleAppleLoginRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ToggleAppleLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type ToggleFacebookLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled     bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Environment string `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *ToggleFacebookLoginRequest) Reset() {
	*x = ToggleFacebookLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleFacebookLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleFacebookLoginRequest) ProtoMessage() {}

func (x *ToggleFacebookLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleFacebookLoginRequest.ProtoReflect.Descriptor instead.
func (*ToggleFacebookLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{37}
}

func (x *ToggleFacebookLoginRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ToggleFacebookLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type ToggleGoogleLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled     bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Environment string `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *ToggleGoogleLoginRequest) Reset() {
	*x = ToggleGoogleLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleGoogleLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleGoogleLoginRequest) ProtoMessage() {}

func (x *ToggleGoogleLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleGoogleLoginRequest.ProtoReflect.Descriptor instead.
func (*ToggleGoogleLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{38}
}

func (x *ToggleGoogleLoginRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ToggleGoogleLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type ToggleSteamLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled     bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Environment string `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *ToggleSteamLoginRequest) Reset() {
	*x = ToggleSteamLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleSteamLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleSteamLoginRequest) ProtoMessage() {}

func (x *ToggleSteamLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleSteamLoginRequest.ProtoReflect.Descriptor instead.
func (*ToggleSteamLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{39}
}

func (x *ToggleSteamLoginRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ToggleSteamLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type ToggleEpicLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled     bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Environment string `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *ToggleEpicLoginRequest) Reset() {
	*x = ToggleEpicLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleEpicLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleEpicLoginRequest) ProtoMessage() {}

func (x *ToggleEpicLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleEpicLoginRequest.ProtoReflect.Descriptor instead.
func (*ToggleEpicLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{40}
}

func (x *ToggleEpicLoginRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ToggleEpicLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type ToggleXboxLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled     bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Environment string `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *ToggleXboxLoginRequest) Reset() {
	*x = ToggleXboxLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleXboxLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleXboxLoginRequest) ProtoMessage() {}

func (x *ToggleXboxLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleXboxLoginRequest.ProtoReflect.Descriptor instead.
func (*ToggleXboxLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{41}
}

func (x *ToggleXboxLoginRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ToggleXboxLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type ToggleDiscordLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled     bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Environment string `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *ToggleDiscordLoginRequest) Reset() {
	*x = ToggleDiscordLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleDiscordLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleDiscordLoginRequest) ProtoMessage() {}

func (x *ToggleDiscordLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleDiscordLoginRequest.ProtoReflect.Descriptor instead.
func (*ToggleDiscordLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{42}
}

func (x *ToggleDiscordLoginRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ToggleDiscordLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type ToggleEmailPasswordLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled     bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Environment string `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *ToggleEmailPasswordLoginRequest) Reset() {
	*x = ToggleEmailPasswordLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleEmailPasswordLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleEmailPasswordLoginRequest) ProtoMessage() {}

func (x *ToggleEmailPasswordLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleEmailPasswordLoginRequest.ProtoReflect.Descriptor instead.
func (*ToggleEmailPasswordLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{43}
}

func (x *ToggleEmailPasswordLoginRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ToggleEmailPasswordLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type ToggleUsernamePasswordLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled     bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Environment string `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *ToggleUsernamePasswordLoginRequest) Reset() {
	*x = ToggleUsernamePasswordLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleUsernamePasswordLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleUsernamePasswordLoginRequest) ProtoMessage() {}

func (x *ToggleUsernamePasswordLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleUsernamePasswordLoginRequest.ProtoReflect.Descriptor instead.
func (*ToggleUsernamePasswordLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{44}
}

func (x *ToggleUsernamePasswordLoginRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ToggleUsernamePasswordLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type DeleteAnonLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment string `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *DeleteAnonLoginRequest) Reset() {
	*x = DeleteAnonLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAnonLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAnonLoginRequest) ProtoMessage() {}

func (x *DeleteAnonLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAnonLoginRequest.ProtoReflect.Descriptor instead.
func (*DeleteAnonLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{45}
}

func (x *DeleteAnonLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type DeleteEmailLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment string `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *DeleteEmailLoginRequest) Reset() {
	*x = DeleteEmailLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEmailLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEmailLoginRequest) ProtoMessage() {}

func (x *DeleteEmailLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEmailLoginRequest.ProtoReflect.Descriptor instead.
func (*DeleteEmailLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{46}
}

func (x *DeleteEmailLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type DeleteAppleLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment string `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *DeleteAppleLoginRequest) Reset() {
	*x = DeleteAppleLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAppleLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAppleLoginRequest) ProtoMessage() {}

func (x *DeleteAppleLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAppleLoginRequest.ProtoReflect.Descriptor instead.
func (*DeleteAppleLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{47}
}

func (x *DeleteAppleLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type DeleteFacebookLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment string `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *DeleteFacebookLoginRequest) Reset() {
	*x = DeleteFacebookLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFacebookLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFacebookLoginRequest) ProtoMessage() {}

func (x *DeleteFacebookLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFacebookLoginRequest.ProtoReflect.Descriptor instead.
func (*DeleteFacebookLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{48}
}

func (x *DeleteFacebookLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type DeleteGoogleLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment string `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *DeleteGoogleLoginRequest) Reset() {
	*x = DeleteGoogleLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGoogleLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGoogleLoginRequest) ProtoMessage() {}

func (x *DeleteGoogleLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGoogleLoginRequest.ProtoReflect.Descriptor instead.
func (*DeleteGoogleLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{49}
}

func (x *DeleteGoogleLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type DeleteSteamLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment string `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *DeleteSteamLoginRequest) Reset() {
	*x = DeleteSteamLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSteamLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSteamLoginRequest) ProtoMessage() {}

func (x *DeleteSteamLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSteamLoginRequest.ProtoReflect.Descriptor instead.
func (*DeleteSteamLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{50}
}

func (x *DeleteSteamLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type DeleteEpicLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment string `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *DeleteEpicLoginRequest) Reset() {
	*x = DeleteEpicLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEpicLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEpicLoginRequest) ProtoMessage() {}

func (x *DeleteEpicLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEpicLoginRequest.ProtoReflect.Descriptor instead.
func (*DeleteEpicLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{51}
}

func (x *DeleteEpicLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type DeleteXboxLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment string `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *DeleteXboxLoginRequest) Reset() {
	*x = DeleteXboxLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteXboxLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteXboxLoginRequest) ProtoMessage() {}

func (x *DeleteXboxLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteXboxLoginRequest.ProtoReflect.Descriptor instead.
func (*DeleteXboxLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{52}
}

func (x *DeleteXboxLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type DeleteDiscordLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment string `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *DeleteDiscordLoginRequest) Reset() {
	*x = DeleteDiscordLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDiscordLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDiscordLoginRequest) ProtoMessage() {}

func (x *DeleteDiscordLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDiscordLoginRequest.ProtoReflect.Descriptor instead.
func (*DeleteDiscordLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{53}
}

func (x *DeleteDiscordLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type DeleteEmailPasswordLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment string `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *DeleteEmailPasswordLoginRequest) Reset() {
	*x = DeleteEmailPasswordLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEmailPasswordLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEmailPasswordLoginRequest) ProtoMessage() {}

func (x *DeleteEmailPasswordLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEmailPasswordLoginRequest.ProtoReflect.Descriptor instead.
func (*DeleteEmailPasswordLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{54}
}

func (x *DeleteEmailPasswordLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type DeleteUsernamePasswordLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment string `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *DeleteUsernamePasswordLoginRequest) Reset() {
	*x = DeleteUsernamePasswordLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUsernamePasswordLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUsernamePasswordLoginRequest) ProtoMessage() {}

func (x *DeleteUsernamePasswordLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUsernamePasswordLoginRequest.ProtoReflect.Descriptor instead.
func (*DeleteUsernamePasswordLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{55}
}

func (x *DeleteUsernamePasswordLoginRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type UpdateSessionTokenValidityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionTokenValidity     uint32 `protobuf:"varint,1,opt,name=session_token_validity,json=sessionTokenValidity,proto3" json:"session_token_validity,omitempty"`
	SessionInactivityTimeout uint32 `protobuf:"varint,2,opt,name=session_inactivity_timeout,json=sessionInactivityTimeout,proto3" json:"session_inactivity_timeout,omitempty"`
	Environment              string `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *UpdateSessionTokenValidityRequest) Reset() {
	*x = UpdateSessionTokenValidityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSessionTokenValidityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSessionTokenValidityRequest) ProtoMessage() {}

func (x *UpdateSessionTokenValidityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSessionTokenValidityRequest.ProtoReflect.Descriptor instead.
func (*UpdateSessionTokenValidityRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{56}
}

func (x *UpdateSessionTokenValidityRequest) GetSessionTokenValidity() uint32 {
	if x != nil {
		return x.SessionTokenValidity
	}
	return 0
}

func (x *UpdateSessionTokenValidityRequest) GetSessionInactivityTimeout() uint32 {
	if x != nil {
		return x.SessionInactivityTimeout
	}
	return 0
}

func (x *UpdateSessionTokenValidityRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type GetOtpRateLimitSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtpRateLimitSettings *FixedRateLimiterSettings `protobuf:"bytes,1,opt,name=otp_rate_limit_settings,json=otpRateLimitSettings,proto3" json:"otp_rate_limit_settings,omitempty"`
}

func (x *GetOtpRateLimitSettingsResponse) Reset() {
	*x = GetOtpRateLimitSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOtpRateLimitSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOtpRateLimitSettingsResponse) ProtoMessage() {}

func (x *GetOtpRateLimitSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOtpRateLimitSettingsResponse.ProtoReflect.Descriptor instead.
func (*GetOtpRateLimitSettingsResponse) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{57}
}

func (x *GetOtpRateLimitSettingsResponse) GetOtpRateLimitSettings() *FixedRateLimiterSettings {
	if x != nil {
		return x.OtpRateLimitSettings
	}
	return nil
}

type DeleteSessionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *DeleteSessionsRequest) Reset() {
	*x = DeleteSessionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSessionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSessionsRequest) ProtoMessage() {}

func (x *DeleteSessionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSessionsRequest.ProtoReflect.Descriptor instead.
func (*DeleteSessionsRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{58}
}

func (x *DeleteSessionsRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type DeleteSessionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionsDeleted int64 `protobuf:"varint,1,opt,name=sessions_deleted,json=sessionsDeleted,proto3" json:"sessions_deleted,omitempty"`
}

func (x *DeleteSessionsResponse) Reset() {
	*x = DeleteSessionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSessionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSessionsResponse) ProtoMessage() {}

func (x *DeleteSessionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSessionsResponse.ProtoReflect.Descriptor instead.
func (*DeleteSessionsResponse) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{59}
}

func (x *DeleteSessionsResponse) GetSessionsDeleted() int64 {
	if x != nil {
		return x.SessionsDeleted
	}
	return 0
}

type SuspendUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SuspendFor uint64 `protobuf:"varint,2,opt,name=suspend_for,json=suspendFor,proto3" json:"suspend_for,omitempty"`
}

func (x *SuspendUserRequest) Reset() {
	*x = SuspendUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuspendUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendUserRequest) ProtoMessage() {}

func (x *SuspendUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendUserRequest.ProtoReflect.Descriptor instead.
func (*SuspendUserRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{60}
}

func (x *SuspendUserRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SuspendUserRequest) GetSuspendFor() uint64 {
	if x != nil {
		return x.SuspendFor
	}
	return 0
}

type SuspendUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuspendedUntil int64 `protobuf:"varint,1,opt,name=suspended_until,json=suspendedUntil,proto3" json:"suspended_until,omitempty"`
}

func (x *SuspendUserResponse) Reset() {
	*x = SuspendUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuspendUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendUserResponse) ProtoMessage() {}

func (x *SuspendUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendUserResponse.ProtoReflect.Descriptor instead.
func (*SuspendUserResponse) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{61}
}

func (x *SuspendUserResponse) GetSuspendedUntil() int64 {
	if x != nil {
		return x.SuspendedUntil
	}
	return 0
}

type CreateAppKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CreateAppKeyRequest) Reset() {
	*x = CreateAppKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppKeyRequest) ProtoMessage() {}

func (x *CreateAppKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppKeyRequest.ProtoReflect.Descriptor instead.
func (*CreateAppKeyRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{62}
}

func (x *CreateAppKeyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAppKeyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type AppKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Key         string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	CreatedAt   int64  `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	LastUsedAt  int64  `protobuf:"varint,5,opt,name=last_used_at,json=lastUsedAt,proto3" json:"last_used_at,omitempty"`
}

func (x *AppKey) Reset() {
	*x = AppKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppKey) ProtoMessage() {}

func (x *AppKey) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppKey.ProtoReflect.Descriptor instead.
func (*AppKey) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{63}
}

func (x *AppKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AppKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AppKey) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AppKey) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AppKey) GetLastUsedAt() int64 {
	if x != nil {
		return x.LastUsedAt
	}
	return 0
}

type DeleteAppKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteAppKeyRequest) Reset() {
	*x = DeleteAppKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAppKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAppKeyRequest) ProtoMessage() {}

func (x *DeleteAppKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAppKeyRequest.ProtoReflect.Descriptor instead.
func (*DeleteAppKeyRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{64}
}

func (x *DeleteAppKeyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetAppKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetAppKeysRequest) Reset() {
	*x = GetAppKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppKeysRequest) ProtoMessage() {}

func (x *GetAppKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppKeysRequest.ProtoReflect.Descriptor instead.
func (*GetAppKeysRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{65}
}

func (x *GetAppKeysRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetAppKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppKeys []*AppKey `protobuf:"bytes,1,rep,name=app_keys,json=appKeys,proto3" json:"app_keys,omitempty"`
}

func (x *GetAppKeysResponse) Reset() {
	*x = GetAppKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppKeysResponse) ProtoMessage() {}

func (x *GetAppKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppKeysResponse.ProtoReflect.Descriptor instead.
func (*GetAppKeysResponse) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{66}
}

func (x *GetAppKeysResponse) GetAppKeys() []*AppKey {
	if x != nil {
		return x.AppKeys
	}
	return nil
}

type ValidateAppKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ValidateAppKeyRequest) Reset() {
	*x = ValidateAppKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateAppKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateAppKeyRequest) ProtoMessage() {}

func (x *ValidateAppKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateAppKeyRequest.ProtoReflect.Descriptor instead.
func (*ValidateAppKeyRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{67}
}

func (x *ValidateAppKeyRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type MultiEnvAuthSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev            *AuthSettings    `protobuf:"bytes,1,opt,name=dev,proto3" json:"dev,omitempty"`
	Stage          *AuthSettings    `protobuf:"bytes,2,opt,name=stage,proto3" json:"stage,omitempty"`
	Prod           *AuthSettings    `protobuf:"bytes,3,opt,name=prod,proto3" json:"prod,omitempty"`
	EmailTemplates []*EmailTemplate `protobuf:"bytes,4,rep,name=email_templates,json=emailTemplates,proto3" json:"email_templates,omitempty"`
}

func (x *MultiEnvAuthSettings) Reset() {
	*x = MultiEnvAuthSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiEnvAuthSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiEnvAuthSettings) ProtoMessage() {}

func (x *MultiEnvAuthSettings) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiEnvAuthSettings.ProtoReflect.Descriptor instead.
func (*MultiEnvAuthSettings) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{68}
}

func (x *MultiEnvAuthSettings) GetDev() *AuthSettings {
	if x != nil {
		return x.Dev
	}
	return nil
}

func (x *MultiEnvAuthSettings) GetStage() *AuthSettings {
	if x != nil {
		return x.Stage
	}
	return nil
}

func (x *MultiEnvAuthSettings) GetProd() *AuthSettings {
	if x != nil {
		return x.Prod
	}
	return nil
}

func (x *MultiEnvAuthSettings) GetEmailTemplates() []*EmailTemplate {
	if x != nil {
		return x.EmailTemplates
	}
	return nil
}

type GetSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment string `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *GetSettingsRequest) Reset() {
	*x = GetSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingsRequest) ProtoMessage() {}

func (x *GetSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetSettingsRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{69}
}

func (x *GetSettingsRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type EnableAppVerifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientSecret string `protobuf:"bytes,1,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	Environment  string `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *EnableAppVerifyRequest) Reset() {
	*x = EnableAppVerifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableAppVerifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableAppVerifyRequest) ProtoMessage() {}

func (x *EnableAppVerifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableAppVerifyRequest.ProtoReflect.Descriptor instead.
func (*EnableAppVerifyRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{70}
}

func (x *EnableAppVerifyRequest) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *EnableAppVerifyRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type DisableAppVerifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment string `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *DisableAppVerifyRequest) Reset() {
	*x = DisableAppVerifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableAppVerifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableAppVerifyRequest) ProtoMessage() {}

func (x *DisableAppVerifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableAppVerifyRequest.ProtoReflect.Descriptor instead.
func (*DisableAppVerifyRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{71}
}

func (x *DisableAppVerifyRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type EnableAppAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment string `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *EnableAppAuthRequest) Reset() {
	*x = EnableAppAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableAppAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableAppAuthRequest) ProtoMessage() {}

func (x *EnableAppAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableAppAuthRequest.ProtoReflect.Descriptor instead.
func (*EnableAppAuthRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{72}
}

func (x *EnableAppAuthRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type DisableAppAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment string `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *DisableAppAuthRequest) Reset() {
	*x = DisableAppAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableAppAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableAppAuthRequest) ProtoMessage() {}

func (x *DisableAppAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableAppAuthRequest.ProtoReflect.Descriptor instead.
func (*DisableAppAuthRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{73}
}

func (x *DisableAppAuthRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type GetEmailTemplatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GetEmailTemplatesRequest) Reset() {
	*x = GetEmailTemplatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEmailTemplatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmailTemplatesRequest) ProtoMessage() {}

func (x *GetEmailTemplatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmailTemplatesRequest.ProtoReflect.Descriptor instead.
func (*GetEmailTemplatesRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{74}
}

func (x *GetEmailTemplatesRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type GetEmailTemplatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmailTemplates []*EmailTemplate `protobuf:"bytes,1,rep,name=email_templates,json=emailTemplates,proto3" json:"email_templates,omitempty"`
}

func (x *GetEmailTemplatesResponse) Reset() {
	*x = GetEmailTemplatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEmailTemplatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmailTemplatesResponse) ProtoMessage() {}

func (x *GetEmailTemplatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmailTemplatesResponse.ProtoReflect.Descriptor instead.
func (*GetEmailTemplatesResponse) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{75}
}

func (x *GetEmailTemplatesResponse) GetEmailTemplates() []*EmailTemplate {
	if x != nil {
		return x.EmailTemplates
	}
	return nil
}

type EmailTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Sender      string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Subject     string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	ContentType string `protobuf:"bytes,3,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	Body        string `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *EmailTemplate) Reset() {
	*x = EmailTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailTemplate) ProtoMessage() {}

func (x *EmailTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailTemplate.ProtoReflect.Descriptor instead.
func (*EmailTemplate) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{76}
}

func (x *EmailTemplate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EmailTemplate) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *EmailTemplate) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *EmailTemplate) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *EmailTemplate) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type DeleteEmailTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *DeleteEmailTemplateRequest) Reset() {
	*x = DeleteEmailTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEmailTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEmailTemplateRequest) ProtoMessage() {}

func (x *DeleteEmailTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEmailTemplateRequest.ProtoReflect.Descriptor instead.
func (*DeleteEmailTemplateRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{77}
}

func (x *DeleteEmailTemplateRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type CreateApiKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description   string           `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Environment   string           `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
	State         ApiKeyState      `protobuf:"varint,4,opt,name=state,proto3,enum=auth.ApiKeyState" json:"state,omitempty"` // Only ENABLED/DISABLED is allowed from the client
	ExpirySeconds int64            `protobuf:"varint,5,opt,name=expiry_seconds,json=expirySeconds,proto3" json:"expiry_seconds,omitempty"`
	NeverExpire   bool             `protobuf:"varint,6,opt,name=never_expire,json=neverExpire,proto3" json:"never_expire,omitempty"`
	Length        int32            `protobuf:"varint,7,opt,name=length,proto3" json:"length,omitempty"`
	Apis          *ApiKeyEndpoints `protobuf:"bytes,8,opt,name=apis,proto3" json:"apis,omitempty"`
	RotateFrom    string           `protobuf:"bytes,9,opt,name=rotate_from,json=rotateFrom,proto3" json:"rotate_from,omitempty"`
}

func (x *CreateApiKeyRequest) Reset() {
	*x = CreateApiKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateApiKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApiKeyRequest) ProtoMessage() {}

func (x *CreateApiKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApiKeyRequest.ProtoReflect.Descriptor instead.
func (*CreateApiKeyRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{78}
}

func (x *CreateApiKeyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateApiKeyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateApiKeyRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *CreateApiKeyRequest) GetState() ApiKeyState {
	if x != nil {
		return x.State
	}
	return ApiKeyState_API_KEY_STATE_UNSPECIFIED
}

func (x *CreateApiKeyRequest) GetExpirySeconds() int64 {
	if x != nil {
		return x.ExpirySeconds
	}
	return 0
}

func (x *CreateApiKeyRequest) GetNeverExpire() bool {
	if x != nil {
		return x.NeverExpire
	}
	return false
}

func (x *CreateApiKeyRequest) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *CreateApiKeyRequest) GetApis() *ApiKeyEndpoints {
	if x != nil {
		return x.Apis
	}
	return nil
}

func (x *CreateApiKeyRequest) GetRotateFrom() string {
	if x != nil {
		return x.RotateFrom
	}
	return ""
}

type CreateApiKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey *ApiKey `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *CreateApiKeyResponse) Reset() {
	*x = CreateApiKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateApiKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApiKeyResponse) ProtoMessage() {}

func (x *CreateApiKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApiKeyResponse.ProtoReflect.Descriptor instead.
func (*CreateApiKeyResponse) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{79}
}

func (x *CreateApiKeyResponse) GetApiKey() *ApiKey {
	if x != nil {
		return x.ApiKey
	}
	return nil
}

type DeleteApiKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Environment string `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *DeleteApiKeyRequest) Reset() {
	*x = DeleteApiKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteApiKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApiKeyRequest) ProtoMessage() {}

func (x *DeleteApiKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApiKeyRequest.ProtoReflect.Descriptor instead.
func (*DeleteApiKeyRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{80}
}

func (x *DeleteApiKeyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteApiKeyRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type DeleteApiKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteApiKeyResponse) Reset() {
	*x = DeleteApiKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteApiKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApiKeyResponse) ProtoMessage() {}

func (x *DeleteApiKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApiKeyResponse.ProtoReflect.Descriptor instead.
func (*DeleteApiKeyResponse) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{81}
}

func (x *DeleteApiKeyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetApiKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names       []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	Environment string   `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *GetApiKeysRequest) Reset() {
	*x = GetApiKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApiKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApiKeysRequest) ProtoMessage() {}

func (x *GetApiKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApiKeysRequest.ProtoReflect.Descriptor instead.
func (*GetApiKeysRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{82}
}

func (x *GetApiKeysRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *GetApiKeysRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type GetApiKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKeys []*ApiKey `protobuf:"bytes,1,rep,name=api_keys,json=apiKeys,proto3" json:"api_keys,omitempty"`
}

func (x *GetApiKeysResponse) Reset() {
	*x = GetApiKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApiKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApiKeysResponse) ProtoMessage() {}

func (x *GetApiKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApiKeysResponse.ProtoReflect.Descriptor instead.
func (*GetApiKeysResponse) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{83}
}

func (x *GetApiKeysResponse) GetApiKeys() []*ApiKey {
	if x != nil {
		return x.ApiKeys
	}
	return nil
}

type UpdateApiKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Environment   string                `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
	Description   string                `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ExpirySeconds int64                 `protobuf:"varint,4,opt,name=expiry_seconds,json=expirySeconds,proto3" json:"expiry_seconds,omitempty"`
	NeverExpire   *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=never_expire,json=neverExpire,proto3" json:"never_expire,omitempty"`
	State         ApiKeyState           `protobuf:"varint,6,opt,name=state,proto3,enum=auth.ApiKeyState" json:"state,omitempty"` // Only ENABLED/DISABLED is allowed from the client
	Apis          *ApiKeyEndpoints      `protobuf:"bytes,7,opt,name=apis,proto3" json:"apis,omitempty"`
}

func (x *UpdateApiKeyRequest) Reset() {
	*x = UpdateApiKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateApiKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApiKeyRequest) ProtoMessage() {}

func (x *UpdateApiKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApiKeyRequest.ProtoReflect.Descriptor instead.
func (*UpdateApiKeyRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{84}
}

func (x *UpdateApiKeyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateApiKeyRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *UpdateApiKeyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateApiKeyRequest) GetExpirySeconds() int64 {
	if x != nil {
		return x.ExpirySeconds
	}
	return 0
}

func (x *UpdateApiKeyRequest) GetNeverExpire() *wrapperspb.BoolValue {
	if x != nil {
		return x.NeverExpire
	}
	return nil
}

func (x *UpdateApiKeyRequest) GetState() ApiKeyState {
	if x != nil {
		return x.State
	}
	return ApiKeyState_API_KEY_STATE_UNSPECIFIED
}

func (x *UpdateApiKeyRequest) GetApis() *ApiKeyEndpoints {
	if x != nil {
		return x.Apis
	}
	return nil
}

type UpdateApiKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpdateApiKeyResponse) Reset() {
	*x = UpdateApiKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateApiKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApiKeyResponse) ProtoMessage() {}

func (x *UpdateApiKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApiKeyResponse.ProtoReflect.Descriptor instead.
func (*UpdateApiKeyResponse) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{85}
}

func (x *UpdateApiKeyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type UpdateUserAuthRestrictionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment  string                 `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
	Restrictions []*UserAuthRestriction `protobuf:"bytes,2,rep,name=restrictions,proto3" json:"restrictions,omitempty"`
}

func (x *UpdateUserAuthRestrictionsRequest) Reset() {
	*x = UpdateUserAuthRestrictionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserAuthRestrictionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserAuthRestrictionsRequest) ProtoMessage() {}

func (x *UpdateUserAuthRestrictionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserAuthRestrictionsRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserAuthRestrictionsRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{86}
}

func (x *UpdateUserAuthRestrictionsRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *UpdateUserAuthRestrictionsRequest) GetRestrictions() []*UserAuthRestriction {
	if x != nil {
		return x.Restrictions
	}
	return nil
}

type UpdateUserAuthRestrictionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Restrictions []*UserAuthRestriction `protobuf:"bytes,1,rep,name=restrictions,proto3" json:"restrictions,omitempty"`
}

func (x *UpdateUserAuthRestrictionsResponse) Reset() {
	*x = UpdateUserAuthRestrictionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserAuthRestrictionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserAuthRestrictionsResponse) ProtoMessage() {}

func (x *UpdateUserAuthRestrictionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserAuthRestrictionsResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserAuthRestrictionsResponse) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{87}
}

func (x *UpdateUserAuthRestrictionsResponse) GetRestrictions() []*UserAuthRestriction {
	if x != nil {
		return x.Restrictions
	}
	return nil
}

type GetUserAuthRestrictionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapIds     []string              `protobuf:"bytes,1,rep,name=snap_ids,json=snapIds,proto3" json:"snap_ids,omitempty"`
	Environment string                `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
	System      *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=system,proto3" json:"system,omitempty"`
}

func (x *GetUserAuthRestrictionsRequest) Reset() {
	*x = GetUserAuthRestrictionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserAuthRestrictionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserAuthRestrictionsRequest) ProtoMessage() {}

func (x *GetUserAuthRestrictionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserAuthRestrictionsRequest.ProtoReflect.Descriptor instead.
func (*GetUserAuthRestrictionsRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{88}
}

func (x *GetUserAuthRestrictionsRequest) GetSnapIds() []string {
	if x != nil {
		return x.SnapIds
	}
	return nil
}

func (x *GetUserAuthRestrictionsRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *GetUserAuthRestrictionsRequest) GetSystem() *wrapperspb.BoolValue {
	if x != nil {
		return x.System
	}
	return nil
}

type GetUserAuthRestrictionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Restrictions []*UserAuthRestriction `protobuf:"bytes,1,rep,name=restrictions,proto3" json:"restrictions,omitempty"`
}

func (x *GetUserAuthRestrictionsResponse) Reset() {
	*x = GetUserAuthRestrictionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserAuthRestrictionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserAuthRestrictionsResponse) ProtoMessage() {}

func (x *GetUserAuthRestrictionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserAuthRestrictionsResponse.ProtoReflect.Descriptor instead.
func (*GetUserAuthRestrictionsResponse) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{89}
}

func (x *GetUserAuthRestrictionsResponse) GetRestrictions() []*UserAuthRestriction {
	if x != nil {
		return x.Restrictions
	}
	return nil
}

type ValidateApiKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	Method string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Path   string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *ValidateApiKeyRequest) Reset() {
	*x = ValidateApiKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateApiKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateApiKeyRequest) ProtoMessage() {}

func (x *ValidateApiKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateApiKeyRequest.ProtoReflect.Descriptor instead.
func (*ValidateApiKeyRequest) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{90}
}

func (x *ValidateApiKeyRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *ValidateApiKeyRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *ValidateApiKeyRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ValidateApiKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ValidateApiKeyResponse) Reset() {
	*x = ValidateApiKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_services_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateApiKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateApiKeyResponse) ProtoMessage() {}

func (x *ValidateApiKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_services_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateApiKeyResponse.ProtoReflect.Descriptor instead.
func (*ValidateApiKeyResponse) Descriptor() ([]byte, []int) {
	return file_auth_services_proto_rawDescGZIP(), []int{91}
}

func (x *ValidateApiKeyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_auth_services_proto protoreflect.FileDescriptor

var file_auth_services_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x61, 0x75, 0x74, 0x68, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x62, 0x6f, 0x64,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x45, 0x6e, 0x76, 0x41, 0x75, 0x74,
	0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0xdf, 0x02, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x85, 0x01, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6f, 0x92, 0x41, 0x5f, 0x32, 0x59, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x64, 0x20, 0x28, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x3a, 0x20, 0x75, 0x73, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x69, 0x6e,
	0x73, 0x74, 0x65, 0x61, 0x64, 0x29, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0xd0, 0x01, 0x01, 0x60, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x53,
	0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x38, 0x92, 0x41, 0x28, 0x32, 0x22, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x49, 0x44, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x62,
	0x65, 0x20, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x6d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x38, 0x92,
	0x41, 0x2a, 0x32, 0x24, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65,
	0x20, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x05, 0x82, 0x01, 0x02, 0x20, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x34, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x48, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x10, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x0a, 0x92,
	0x01, 0x07, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xb3, 0x02, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3f, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x26, 0x92, 0x41, 0x18, 0x32, 0x12, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x07, 0xfa, 0x42, 0x08,
	0x72, 0x06, 0xd0, 0x01, 0x01, 0xb0, 0x01, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x42, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x1a, 0x32, 0x14, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x49,
	0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01,
	0x07, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x07, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x1f,
	0x92, 0x41, 0x1c, 0x32, 0x16, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x07, 0x52,
	0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x31, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x55, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3f, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x18, 0x32, 0x12, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x07, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x35, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x79, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x26, 0x32,
	0x20, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x22, 0x55, 0x0a, 0x0e, 0x42, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x25, 0x32, 0x1f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x62,
	0x65, 0x20, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x59, 0x0a, 0x10, 0x55,
	0x6e, 0x62, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x45, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x27,
	0x32, 0x21, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x75, 0x6e, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x34, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xb0, 0x02, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x42, 0x79, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x65, 0x0a, 0x09,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x48, 0x92, 0x41, 0x3b, 0x32, 0x35, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x20, 0x73, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x49, 0x44, 0x73, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x62,
	0x65, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x07, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x49, 0x64, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x89, 0x01, 0x92, 0x41, 0x7c, 0x32, 0x76,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x20, 0x62, 0x79, 0x2e, 0x20, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20,
	0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x27,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x27, 0x2c, 0x20, 0x27, 0x61, 0x6e, 0x6f, 0x6e, 0x27, 0x2c, 0x20,
	0x27, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x27, 0x2c, 0x20, 0x27, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x27, 0x2c, 0x20, 0x27, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x27, 0x2c, 0x20, 0x27,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x27, 0x2c, 0x20, 0x27, 0x78, 0x62, 0x6f, 0x78, 0x27, 0x2c, 0x20,
	0x27, 0x65, 0x70, 0x69, 0x63, 0x27, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xa6, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x42, 0x79,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x42, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x1a, 0x3a, 0x0a, 0x0c,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x35, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x10, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x0a,
	0x92, 0x01, 0x07, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22,
	0x91, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x44, 0x0a,
	0x0a, 0x55, 0x73, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x59, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x26, 0x32, 0x20, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f,
	0x20, 0x62, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x07, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x66,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x26, 0x32, 0x20, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x9a,
	0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x18, 0x44,
	0x69, 0x73, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x27, 0x32, 0x21, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x75, 0x6e, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x10,
	0x32, 0x0a, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x74, 0x79, 0x70, 0x65, 0x9a, 0x02, 0x01, 0x07,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x66,
	0x0a, 0x18, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x09, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x4e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x0d, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x53, 0x0a, 0x16, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x6e, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x52, 0x03, 0x64, 0x65,
	0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x0b,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x85, 0x02, 0x0a, 0x17,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0a, 0x6f, 0x74, 0x70, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xfa, 0x42, 0x06,
	0x2a, 0x04, 0x18, 0x08, 0x28, 0x04, 0x52, 0x09, 0x6f, 0x74, 0x70, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x2e, 0x0a, 0x0c, 0x6f, 0x74, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x2a, 0x06, 0x18, 0x84,
	0x07, 0x28, 0xac, 0x02, 0x52, 0x0b, 0x6f, 0x74, 0x70, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x12, 0x55, 0x0a, 0x17, 0x6f, 0x74, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x14, 0x6f, 0x74, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa,
	0x42, 0x14, 0x72, 0x12, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0xe8, 0x01, 0x0a, 0x17, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0b, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x52,
	0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x72, 0x6f,
	0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xab,
	0x01, 0x0a, 0x1a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x52, 0x03, 0x64,
	0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x52,
	0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa9, 0x01, 0x0a,
	0x18, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x39, 0x0a,
	0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x17, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x41, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42,
	0x14, 0x72, 0x12, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x16, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x58, 0x62, 0x6f,
	0x78, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa,
	0x42, 0x14, 0x72, 0x12, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0xa7, 0x01, 0x0a, 0x16, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x70,
	0x69, 0x63, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x52, 0x03,
	0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64,
	0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xaa, 0x01,
	0x0a, 0x19, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x52, 0x03, 0x64, 0x65, 0x76,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xd2, 0x02, 0x0a, 0x1f, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43,
	0x0a, 0x18, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18, 0x0a, 0x28, 0x04, 0x52, 0x16, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x49, 0x0a, 0x1a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x2a, 0x06, 0x18, 0x90,
	0x1c, 0x28, 0xac, 0x02, 0x52, 0x18, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x34,
	0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x67, 0x65, 0x78, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12,
	0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x72,
	0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x8f, 0x01, 0x0a, 0x22, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14,
	0x72, 0x12, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x04,
	0x70, 0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x6d, 0x0a, 0x16, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41, 0x6e, 0x6f, 0x6e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72,
	0x12, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70,
	0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x6e, 0x0a, 0x17, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72,
	0x12, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70,
	0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x6e, 0x0a, 0x17, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72,
	0x12, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70,
	0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x71, 0x0a, 0x1a, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa,
	0x42, 0x14, 0x72, 0x12, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x6f, 0x0a, 0x18, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0xfa, 0x42, 0x14, 0x72, 0x12, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x6e, 0x0a, 0x17, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0xfa, 0x42, 0x14, 0x72, 0x12, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x6d, 0x0a, 0x16, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x45, 0x70,
	0x69, 0x63, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa,
	0x42, 0x14, 0x72, 0x12, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x6d, 0x0a, 0x16, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x58, 0x62, 0x6f,
	0x78, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42,
	0x14, 0x72, 0x12, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x70, 0x0a, 0x19, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0xfa, 0x42, 0x14, 0x72, 0x12, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x76, 0x0a, 0x1f, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x52, 0x03, 0x64,
	0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x52,
	0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x79, 0x0a, 0x22,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0b,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x53, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x6e, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x52, 0x03, 0x64,
	0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x52,
	0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x17,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42,
	0x14, 0x72, 0x12, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x54, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a,
	0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x57, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14,
	0x72, 0x12, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x04,
	0x70, 0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x55, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a,
	0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x52,
	0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x72, 0x6f,
	0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x53,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x70, 0x69, 0x63, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa,
	0x42, 0x14, 0x72, 0x12, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x53, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x58, 0x62, 0x6f,
	0x78, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a,
	0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x56, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72,
	0x12, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70,
	0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x5c, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x52,
	0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x72, 0x6f,
	0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x5f,
	0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12,
	0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x72,
	0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0xee, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x16, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x2a, 0x07, 0x18, 0x80, 0x9a, 0x9e,
	0x01, 0x28, 0x1e, 0x52, 0x14, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x1a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xfa,
	0x42, 0x09, 0x2a, 0x07, 0x18, 0x80, 0x9a, 0x9e, 0x01, 0x28, 0x1e, 0x52, 0x18, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72,
	0x12, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70,
	0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x78, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4f, 0x74, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x17, 0x6f, 0x74, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x14, 0x6f, 0x74, 0x70, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x3b, 0x0a, 0x15, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x72, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x43, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xcc, 0x01, 0x0a,
	0x12, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x36, 0x92, 0x41, 0x28, 0x32, 0x22, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x73,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x6e, 0x0a, 0x0b, 0x73,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x4d, 0x92, 0x41, 0x40, 0x32, 0x3a, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x69, 0x6e, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x77,
	0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x28, 0x00, 0x52,
	0x0a, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x22, 0x74, 0x0a, 0x13, 0x53,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f,
	0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x34, 0x92, 0x41, 0x31,
	0x32, 0x2b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x75, 0x6e, 0x74, 0x69,
	0x6c, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x69, 0x73, 0x20, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x9a, 0x02, 0x01,
	0x03, 0x52, 0x0e, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69,
	0x6c, 0x22, 0x4b, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x91,
	0x01, 0x0a, 0x06, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x32, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x27, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x3d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41,
	0x70, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x32,
	0x0a, 0x15, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x22, 0xcc, 0x01, 0x0a, 0x14, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x45, 0x6e, 0x76, 0x41,
	0x75, 0x74, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x03, 0x64,
	0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x03, 0x64, 0x65,
	0x76, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x70,
	0x72, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x04, 0x70,
	0x72, 0x6f, 0x64, 0x12, 0x3c, 0x0a, 0x0f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x22, 0x4f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42,
	0x14, 0x72, 0x12, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x16, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x70,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x17, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x52, 0x03, 0x64,
	0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x52,
	0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x51, 0x0a, 0x14,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12,
	0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x72,
	0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x52, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa,
	0x42, 0x14, 0x72, 0x12, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x68, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xfa,
	0x42, 0x35, 0x72, 0x33, 0x52, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x12, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x59, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x0d, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xfa, 0x42, 0x35, 0x72, 0x33, 0x52,
	0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x12, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x22, 0x6a, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xfa,
	0x42, 0x35, 0x72, 0x33, 0x52, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x12, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xca, 0x03,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1e, 0xfa, 0x42, 0x1b, 0x72, 0x19, 0x10, 0x01, 0x18, 0x3c, 0x32, 0x10,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x2b, 0x24,
	0xd0, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b,
	0xfa, 0x42, 0x08, 0x72, 0x06, 0x18, 0xfa, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xfa,
	0x42, 0x17, 0x72, 0x15, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x82, 0x01, 0x06,
	0x18, 0x00, 0x18, 0x01, 0x18, 0x02, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x65, 0x76, 0x65,
	0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x1a, 0x08, 0x30, 0x00,
	0x30, 0x80, 0x01, 0x30, 0x80, 0x02, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x29,
	0x0a, 0x04, 0x61, 0x70, 0x69, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x52, 0x04, 0x61, 0x70, 0x69, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x6f, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e,
	0xfa, 0x42, 0x1b, 0x72, 0x19, 0x10, 0x01, 0x18, 0x3c, 0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x2b, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x0a,
	0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x22, 0x3d, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x70, 0x69, 0x4b, 0x65,
	0x79, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x81, 0x01, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x01, 0x18, 0x64, 0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x52, 0x03,
	0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64,
	0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x30, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x89, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x20, 0xfa, 0x42, 0x1d, 0x92, 0x01, 0x1a, 0x22, 0x18, 0x72, 0x16,
	0x10, 0x01, 0x18, 0x64, 0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d,
	0x39, 0x5f, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a,
	0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1a, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0xd0, 0x01, 0x01, 0x52, 0x0b,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3d, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x27, 0x0a, 0x08, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x70, 0x69, 0x4b, 0x65,
	0x79, 0x52, 0x07, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x73, 0x22, 0xf7, 0x02, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x01, 0x18, 0x64, 0x32, 0x10, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x52,
	0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x72, 0x6f,
	0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x18, 0x64, 0xd0, 0x01, 0x01, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x82, 0x01, 0x06, 0x18, 0x00, 0x18, 0x01,
	0x18, 0x02, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x61, 0x70, 0x69,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41,
	0x70, 0x69, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x04,
	0x61, 0x70, 0x69, 0x73, 0x22, 0x30, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x63, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x6e, 0x61, 0x70, 0x49, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a,
	0xfa, 0x42, 0x17, 0x72, 0x15, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x60, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x77, 0x0a,
	0x15, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x32, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0xe7, 0x86, 0x01, 0x0a, 0x0b,
	0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x78, 0x0a, 0x0a, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0xfa, 0xd2,
	0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x68, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0f,
	0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x12,
	0x5c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12,
	0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x12, 0x6d, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c,
	0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x1a, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x69, 0x0a, 0x07,
	0x42, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x42,
	0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x30, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50,
	0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x1a,
	0x16, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x62, 0x61, 0x6e, 0x12, 0x6f, 0x0a, 0x09, 0x55, 0x6e, 0x62, 0x61, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x55, 0x6e, 0x62, 0x61,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x32, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x1a, 0x18,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x2f, 0x75, 0x6e, 0x62, 0x61, 0x6e, 0x12, 0xf2, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x42, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x64,
	0x73, 0x12, 0x21, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x42, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x42, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x92, 0x01, 0x92, 0x41, 0x6b, 0x12, 0x0c,
	0x47, 0x65, 0x74, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x49, 0x64, 0x73, 0x1a, 0x28, 0x47, 0x65,
	0x74, 0x20, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x20, 0x62, 0x79, 0x20, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x20, 0x49, 0x44, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x6a, 0x31, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x19,
	0x32, 0x17, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12,
	0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x4a, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x15, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0f, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09,
	0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x12, 0x4e, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x0f, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09,
	0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x12, 0x81, 0x01, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d,
	0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x8a, 0x01,
	0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0xfa, 0xd2, 0xe4,
	0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x28, 0x2a, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x89, 0x02, 0x0a, 0x11, 0x44,
	0x69, 0x73, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x12, 0x1e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xbb, 0x01, 0x92, 0x41, 0x78, 0x12, 0x0c,
	0x44, 0x69, 0x73, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x1a, 0x2d, 0x44, 0x69,
	0x73, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20,
	0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6a, 0x39, 0x0a, 0x14, 0x78,
	0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a,
	0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69, 0x73, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x80, 0x02, 0x0a, 0x03, 0x4f, 0x74, 0x70, 0x12, 0x10,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x4f, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xce, 0x01, 0x92, 0x41, 0xa5, 0x01, 0x12,
	0x0b, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x1a, 0x39, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x4f, 0x54, 0x50, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x69, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x6a, 0x20, 0x0a, 0x1a, 0x78, 0x2d, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x12, 0x02, 0x20, 0x01, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a,
	0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x6f, 0x74, 0x70, 0x12, 0xaa, 0x02, 0x0a, 0x0a, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x17, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe8, 0x01, 0x92, 0x41,
	0xb7, 0x01, 0x12, 0x0b, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x1a,
	0x4b, 0x4c, 0x6f, 0x67, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x4f, 0x54, 0x50, 0x20, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x73, 0x20, 0x61, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x6a, 0x20, 0x0a, 0x1a,
	0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x70,
	0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x12, 0x02, 0x20, 0x01, 0x6a, 0x39,
	0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12,
	0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a,
	0x1a, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x2f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0xac, 0x02, 0x0a, 0x09, 0x41, 0x6e, 0x6f, 0x6e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x6e, 0x6f, 0x6e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x41, 0x6e, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xed, 0x01, 0x92, 0x41, 0xbd, 0x01, 0x12, 0x0f, 0x41, 0x6e,
	0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x20, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x1a, 0x4d, 0x4c,
	0x6f, 0x67, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x72,
	0x79, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x73, 0x20, 0x61, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x6a, 0x20, 0x0a, 0x1a,
	0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x70,
	0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x12, 0x02, 0x20, 0x01, 0x6a, 0x39,
	0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12,
	0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a,
	0x1a, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x2f, 0x61, 0x6e, 0x6f, 0x6e, 0x12, 0xb3, 0x02, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x17, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf1, 0x01, 0x92, 0x41, 0xc0, 0x01, 0x12, 0x0b,
	0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x1a, 0x54, 0x4c, 0x6f, 0x67,
	0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x62, 0x61,
	0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x6a, 0x20, 0x0a, 0x1a, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61,
	0x75, 0x74, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x12,
	0x02, 0x20, 0x01, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72,
	0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a,
	0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b,
	0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2,
	0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x19, 0x3a, 0x01, 0x2a, 0x1a, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x12, 0xc5, 0x02, 0x0a, 0x0d,
	0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfa, 0x01, 0x92, 0x41, 0xc6, 0x01, 0x12, 0x0e, 0x46,
	0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x20, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x1a, 0x57, 0x4c,
	0x6f, 0x67, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x61, 0x63,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x6a, 0x20, 0x0a, 0x1a, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x12, 0x02, 0x20, 0x01, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07,
	0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x1a, 0x17, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x66, 0x61, 0x63, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x12, 0xb9, 0x02, 0x0a, 0x0b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf4, 0x01, 0x92, 0x41, 0xc2, 0x01, 0x12,
	0x0c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x20, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x1a, 0x55, 0x4c,
	0x6f, 0x67, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x6a, 0x20, 0x0a, 0x1a, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65,
	0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x12, 0x02, 0x20, 0x01, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21,
	0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70,
	0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x1a, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x12,
	0xac, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x17,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xea, 0x01, 0x92, 0x41, 0xb7, 0x01, 0x12, 0x0b, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x20,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x1a, 0x49, 0x4c, 0x6f, 0x67, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x58, 0x01, 0x6a, 0x20, 0x0a, 0x1a, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d,
	0x61, 0x75, 0x74, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68,
	0x12, 0x02, 0x20, 0x01, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65,
	0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f,
	0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d,
	0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa,
	0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x5a, 0x19, 0x3a, 0x01, 0x2a, 0x1a, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x12, 0xc3,
	0x02, 0x0a, 0x10, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x1d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf5, 0x01, 0x92,
	0x41, 0xbd, 0x01, 0x12, 0x0b, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x1a, 0x51, 0x4c, 0x6f, 0x67, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x6f, 0x70, 0x65, 0x6e, 0x20, 0x49, 0x44, 0x20, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x6a, 0x20, 0x0a, 0x1a, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72,
	0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x12, 0x02, 0x20, 0x01, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32,
	0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69,
	0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x1a, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x2f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0xda, 0x02, 0x0a, 0x17, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x12, 0x24, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xfe, 0x01, 0x92, 0x41, 0xbe, 0x01, 0x12, 0x0b, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x1a, 0x52, 0x4c, 0x6f, 0x67, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x20, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61,
	0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x6a, 0x20, 0x0a, 0x1a, 0x78, 0x2d, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x74,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x12, 0x02, 0x20, 0x01, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09,
	0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x1a, 0x23, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x12, 0xa2, 0x02, 0x0a, 0x09, 0x58, 0x62, 0x6f, 0x78, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x16, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x58, 0x62, 0x6f, 0x78, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x58,
	0x62, 0x6f, 0x78, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xe3, 0x01, 0x92, 0x41, 0xb3, 0x01, 0x12, 0x0a, 0x58, 0x62, 0x6f, 0x78, 0x20, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x1a, 0x48, 0x4c, 0x6f, 0x67, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x78, 0x62, 0x6f, 0x78, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x6a, 0x20, 0x0a,
	0x1a, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d,
	0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x12, 0x02, 0x20, 0x01, 0x6a,
	0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74,
	0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a,
	0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08,
	0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01,
	0x2a, 0x1a, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x2f, 0x78, 0x62, 0x6f, 0x78, 0x12, 0xa8, 0x02, 0x0a, 0x09, 0x45, 0x70, 0x69, 0x63, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x45, 0x70, 0x69, 0x63,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x45, 0x70, 0x69, 0x63, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe9, 0x01, 0x92, 0x41, 0xb9, 0x01, 0x12, 0x0a, 0x45, 0x70,
	0x69, 0x63, 0x20, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x1a, 0x4e, 0x4c, 0x6f, 0x67, 0x73, 0x20, 0x69,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64,
	0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x70, 0x69, 0x63, 0x20, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61,
	0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x6a, 0x20, 0x0a, 0x1a, 0x78, 0x2d, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x74,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x12, 0x02, 0x20, 0x01, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09,
	0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x1a, 0x13, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x65, 0x70, 0x69,
	0x63, 0x12, 0xb4, 0x02, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0x19, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x72,
	0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xec, 0x01, 0x92, 0x41, 0xb9, 0x01,
	0x12, 0x0d, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x1a,
	0x4b, 0x4c, 0x6f, 0x67, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x73, 0x20, 0x61, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x6a, 0x20, 0x0a, 0x1a,
	0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x70,
	0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x12, 0x02, 0x20, 0x01, 0x6a, 0x39,
	0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12,
	0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a,
	0x1a, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0xd9, 0x02, 0x0a, 0x12, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x1f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xff, 0x01, 0x92, 0x41, 0xc5, 0x01, 0x12, 0x14, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x20, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x1a,
	0x50, 0x4c, 0x6f, 0x67, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x6a, 0x20, 0x0a, 0x1a, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61,
	0x75, 0x74, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x12,
	0x02, 0x20, 0x01, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72,
	0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a,
	0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b,
	0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2,
	0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x22, 0x3a, 0x01, 0x2a, 0x1a, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0xa3, 0x02, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xde, 0x01, 0x92, 0x41, 0x9d, 0x01,
	0x12, 0x14, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x20, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x1a, 0x28, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x73,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x6a, 0x20, 0x0a, 0x1a, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75,
	0x74, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x12, 0x02,
	0x20, 0x01, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d,
	0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06,
	0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65,
	0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4,
	0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2f, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xbb, 0x02, 0x0a, 0x13, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x20, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xe9, 0x01, 0x92,
	0x41, 0xa4, 0x01, 0x12, 0x14, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x20, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x1a, 0x2f, 0x53, 0x65, 0x6e, 0x64, 0x73,
	0x20, 0x61, 0x6e, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x6a, 0x20, 0x0a, 0x1a, 0x78, 0x2d,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x70, 0x61, 0x73,
	0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x12, 0x02, 0x20, 0x01, 0x6a, 0x39, 0x0a, 0x14,
	0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2d, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0xae, 0x02, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x20, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xdc, 0x01, 0x92, 0x41, 0x9f,
	0x01, 0x12, 0x14, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x20, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x1a, 0x2a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x6a, 0x20, 0x0a, 0x1a, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72,
	0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x12, 0x02, 0x20, 0x01, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32,
	0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69,
	0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x1a, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x2f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0xeb, 0x02, 0x0a, 0x15, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x22, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x02, 0x92,
	0x41, 0xcb, 0x01, 0x12, 0x17, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x1a, 0x53, 0x4c, 0x6f,
	0x67, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x62,
	0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x6a, 0x20, 0x0a, 0x1a, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61,
	0x75, 0x74, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x12,
	0x02, 0x20, 0x01, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72,
	0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a,
	0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b,
	0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2,
	0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x25, 0x3a, 0x01, 0x2a, 0x1a, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0xc5, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x24, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xdc, 0x01, 0x92, 0x41, 0x9b, 0x01, 0x12, 0x17, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x20, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x1a, 0x23, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x6a, 0x20, 0x0a, 0x1a, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x12, 0x02, 0x20, 0x01, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61,
	0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x2f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x9b, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x23, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xc3, 0x01, 0x92, 0x41, 0x83, 0x01, 0x12, 0x17,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x20, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x1a, 0x2d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21,
	0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70,
	0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x1a, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2d, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0xfc, 0x01,
	0x0a, 0x15, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0xa6, 0x01, 0x92, 0x41, 0x69, 0x12, 0x17, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x20, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x1a, 0x2c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x6a, 0x20, 0x0a, 0x1a, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75,
	0x74, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x12, 0x02,
	0x20, 0x01, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54,
	0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x1a, 0x20, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2d, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0xa3, 0x02, 0x0a,
	0x09, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x16, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0xe7, 0x01, 0x92, 0x41, 0xb3, 0x01, 0x12,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x4d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x73,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x74, 0x79, 0x70, 0x65, 0x6a, 0x20, 0x0a, 0x1a, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x12, 0x02, 0x20, 0x01, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61,
	0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x61, 0x70, 0x70, 0x2d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2f, 0x7b, 0x74, 0x79, 0x70,
	0x65, 0x7d, 0x12, 0xad, 0x02, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x1c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xe3, 0x01, 0x92,
	0x41, 0xad, 0x01, 0x12, 0x19, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x20, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x73, 0x1a, 0x33,
	0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x77, 0x6f, 0x20, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x73, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x69, 0x72, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x6a, 0x20, 0x0a, 0x1a, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72,
	0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x12, 0x02, 0x20, 0x01, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32,
	0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69,
	0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x1a, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x2f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x73, 0x12, 0xf7, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x14,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbe, 0x01, 0x92, 0x41,
	0x91, 0x01, 0x12, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x4d, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x6e,
	0x65, 0x77, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x64, 0x20,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07,
	0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x32, 0x10, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x2f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0xd6, 0x01, 0x0a,
	0x06, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x4c,
	0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x9e, 0x01, 0x92, 0x41, 0x6e, 0x12, 0x0b, 0x4c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x20, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x24, 0x45, 0x6e, 0x64, 0x73, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6a, 0x39, 0x0a,
	0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x2a, 0x17, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x2f, 0x7b, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x7d, 0x12, 0x8b, 0x02, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x15, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xcf, 0x01, 0x92, 0x41, 0xa1, 0x01, 0x12, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a,
	0x3b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x6a, 0x20, 0x0a, 0x1a,
	0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x70,
	0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x12, 0x02, 0x20, 0x01, 0x6a, 0x39,
	0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12,
	0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a,
	0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x7f, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x15, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34,
	0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x12, 0x82, 0x01, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x35, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56,
	0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x2d, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xce, 0x01, 0x0a, 0x0e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x01, 0x92, 0x41, 0x4c, 0x12, 0x1b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x6e,
	0x67, 0x65, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12,
	0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x2a, 0x1a,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6c, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28,
	0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x10, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1d, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x37, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x1a, 0x1d,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x82, 0x01,
	0x0a, 0x10, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0x1d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x37, 0xfa, 0xd2, 0xe4, 0x93, 0x02,
	0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22,
	0x3a, 0x01, 0x2a, 0x32, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2d, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0x7f, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x34, 0xfa,
	0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1f, 0x2a, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2d, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x7f, 0x0a, 0x0f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6e, 0x6f,
	0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x6e, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x36, 0xfa, 0xd2,
	0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x1a, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x61, 0x6e, 0x6f, 0x6e, 0x2d, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x7f, 0x0a, 0x0f, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41, 0x6e,
	0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x54,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41, 0x6e, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x36, 0xfa,
	0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x32, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x61, 0x6e, 0x6f, 0x6e, 0x2d,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x7c, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x6e, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x33,
	0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x2a, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x61, 0x6e, 0x6f, 0x6e, 0x2d, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x37, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x1a, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x2d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x10, 0x54, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1d, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x37, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x32, 0x1d,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x2d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x8b, 0x01,
	0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x20, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x3a, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x1a, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x66, 0x61, 0x63,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x8b, 0x01, 0x0a, 0x13,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x20, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3a, 0xfa,
	0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x32, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x66, 0x61, 0x63, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x2d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x88, 0x01, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x12, 0x20, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x37, 0xfa, 0xd2, 0xe4,
	0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x22, 0x2a, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x85, 0x01, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x38, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56,
	0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x1a, 0x1e, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x85, 0x01, 0x0a,
	0x11, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0x1e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x38, 0xfa, 0xd2, 0xe4, 0x93,
	0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x23, 0x3a, 0x01, 0x2a, 0x32, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2d, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x35, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56,
	0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x2a, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x10, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1d,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x37, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50,
	0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x1a,
	0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x82,
	0x01, 0x0a, 0x10, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x1d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x37, 0xfa, 0xd2, 0xe4, 0x93,
	0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x3a, 0x01, 0x2a, 0x32, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2d, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x7f, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x34,
	0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x2a, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2d, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x7f, 0x0a, 0x0f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x58, 0x62,
	0x6f, 0x78, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x58, 0x62, 0x6f, 0x78, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x36, 0xfa,
	0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x1a, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x78, 0x62, 0x6f, 0x78, 0x2d,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x7f, 0x0a, 0x0f, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x58,
	0x62, 0x6f, 0x78, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x58, 0x62, 0x6f, 0x78, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x36,
	0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x32, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x78, 0x62, 0x6f, 0x78,
	0x2d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x7c, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x58, 0x62, 0x6f, 0x78, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x58, 0x62, 0x6f, 0x78, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x33, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x2a, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x78, 0x62, 0x6f, 0x78, 0x2d, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x7f, 0x0a, 0x0f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x70,
	0x69, 0x63, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x70, 0x69, 0x63, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x36, 0xfa,
	0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x1a, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x65, 0x70, 0x69, 0x63, 0x2d,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x7f, 0x0a, 0x0f, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x45,
	0x70, 0x69, 0x63, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x45, 0x70, 0x69, 0x63, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x36,
	0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x32, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x65, 0x70, 0x69, 0x63,
	0x2d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x7c, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x70, 0x69, 0x63, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x70, 0x69, 0x63, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x33, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x2a, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x65, 0x70, 0x69, 0x63, 0x2d, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x88, 0x01, 0x0a, 0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1f, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x39, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x1a, 0x1f,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x88, 0x01, 0x0a, 0x12, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x72,
	0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x54, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x39, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x32, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x72, 0x64, 0x2d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x85, 0x01, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x12, 0x1f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x36, 0xfa, 0xd2, 0xe4, 0x93,
	0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x21, 0x2a, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2d, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0x9b, 0x01, 0x0a, 0x18, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x25, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x40,
	0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x1a, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2d, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x12, 0x9b, 0x01, 0x0a, 0x18, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x40, 0xfa, 0xd2,
	0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x32, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2d,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x98,
	0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3d, 0xfa, 0xd2, 0xe4, 0x93,
	0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x28, 0x2a, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x2d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0xa4, 0x01, 0x0a, 0x1b, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x28, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x43, 0xfa, 0xd2, 0xe4,
	0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x1a, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2d, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x12, 0xa4, 0x01, 0x0a, 0x1b, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x12, 0x28, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x43, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56,
	0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x32, 0x29, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x2d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0xa1, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x28, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x40, 0xfa, 0xd2, 0xe4, 0x93, 0x02,
	0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b,
	0x2a, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2d, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x2d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x7f, 0x0a, 0x0f, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x1c,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x36, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x1a, 0x1c,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2f, 0x61, 0x70, 0x70, 0x2d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x7e, 0x0a, 0x10,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x12, 0x1d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x70, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x33, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12,
	0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x2a, 0x1c,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2f, 0x61, 0x70, 0x70, 0x2d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0xa1, 0x01, 0x0a,
	0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x27, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x42, 0xfa, 0xd2,
	0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x1a, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x12, 0x79, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x2f, 0xfa, 0xd2, 0xe4, 0x93,
	0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x7c, 0x0a, 0x0e, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1e, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x32, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50,
	0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22,
	0x18, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x95, 0x01, 0x0a, 0x16, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x1e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x1e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x3b, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x78, 0x0a, 0x0b, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50,
	0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x1a,
	0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x79, 0x0a, 0x0d, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x34, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54,
	0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x1a, 0x1a, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x61, 0x70,
	0x70, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x12, 0x78, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x70, 0x70, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x31, 0xfa,
	0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1c, 0x2a, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x2d, 0x61, 0x75, 0x74, 0x68,
	0x12, 0x6c, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79,
	0x12, 0x19, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x22, 0x33, 0xfa, 0xd2, 0xe4, 0x93, 0x02,
	0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e,
	0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x12, 0x71,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x17, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x30, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x2d, 0x6b, 0x65,
	0x79, 0x12, 0x7a, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x4b, 0x65,
	0x79, 0x12, 0x19, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x37, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x2a, 0x20, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x61,
	0x70, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x9b, 0x01,
	0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79,
	0x12, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x54, 0x92, 0x41, 0x1e, 0x12, 0x07, 0x41, 0x70, 0x70, 0x20,
	0x4b, 0x65, 0x79, 0x1a, 0x13, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e,
	0x20, 0x61, 0x70, 0x70, 0x20, 0x6b, 0x65, 0x79, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07,
	0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a,
	0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x2d, 0x6b, 0x65, 0x79, 0x12, 0x92, 0x01, 0x0a, 0x17,
	0x4c, 0x6f, 0x67, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x67, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x47, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12,
	0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01,
	0x2a, 0x22, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x65, 0x6e,
	0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x8e, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12,
	0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x7f, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3b, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50,
	0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22,
	0x21, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x38, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x2a, 0x21, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x7b,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x19,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50,
	0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22,
	0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x72, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x17, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0xfa, 0xd2,
	0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x12,
	0x7f, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12,
	0x19, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07,
	0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x2a, 0x21, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2f, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x12, 0x82, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x4b, 0x65,
	0x79, 0x12, 0x19, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09,
	0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a,
	0x01, 0x2a, 0x32, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xb3, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12,
	0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01,
	0x2a, 0x1a, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0xd0, 0x01, 0x92, 0x41, 0x9d, 0x01, 0x12, 0x9a, 0x01, 0x0a,
	0x18, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x23, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x52,
	0x0a, 0x0c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x12, 0x42,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x39, 0x35, 0x38,
	0x33, 0x37, 0x37, 0x31, 0x30, 0x36, 0x37, 0x37, 0x36, 0x31, 0x36, 0x32, 0x33, 0x30, 0x34, 0x2f,
	0x39, 0x35, 0x38, 0x33, 0x37, 0x37, 0x32, 0x36, 0x31, 0x32, 0x33, 0x35, 0x35, 0x38, 0x35, 0x30,
	0x36, 0x34, 0x32, 0x05, 0x30, 0x2e, 0x31, 0x2e, 0x30, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_auth_services_proto_rawDescOnce sync.Once
	file_auth_services_proto_rawDescData = file_auth_services_proto_rawDesc
)

func file_auth_services_proto_rawDescGZIP() []byte {
	file_auth_services_proto_rawDescOnce.Do(func() {
		file_auth_services_proto_rawDescData = protoimpl.X.CompressGZIP(file_auth_services_proto_rawDescData)
	})
	return file_auth_services_proto_rawDescData
}

var file_auth_services_proto_msgTypes = make([]protoimpl.MessageInfo, 95)
var file_auth_services_proto_goTypes = []interface{}{
	(*SettingsImportExportData)(nil),           // 0: auth.SettingsImportExportData
	(*InviteUserRequest)(nil),                  // 1: auth.InviteUserRequest
	(*InviteUserResponse)(nil),                 // 2: auth.InviteUserResponse
	(*GetEmailsByUserIdsRequest)(nil),          // 3: auth.GetEmailsByUserIdsRequest
	(*GetEmailsByUserIdsResponse)(nil),         // 4: auth.GetEmailsByUserIdsResponse
	(*GetUserRequest)(nil),                     // 5: auth.GetUserRequest
	(*GetUserResponse)(nil),                    // 6: auth.GetUserResponse
	(*GetUserDataRequest)(nil),                 // 7: auth.GetUserDataRequest
	(*GetUserDataResponse)(nil),                // 8: auth.GetUserDataResponse
	(*UpdateUserRequest)(nil),                  // 9: auth.UpdateUserRequest
	(*BanUserRequest)(nil),                     // 10: auth.BanUserRequest
	(*UnbanUserRequest)(nil),                   // 11: auth.UnbanUserRequest
	(*UpdateUserResponse)(nil),                 // 12: auth.UpdateUserResponse
	(*GetUserIdsByLoginIdsRequest)(nil),        // 13: auth.GetUserIdsByLoginIdsRequest
	(*GetUserIdsByLoginIdsResponse)(nil),       // 14: auth.GetUserIdsByLoginIdsResponse
	(*GetUsersRequest)(nil),                    // 15: auth.GetUsersRequest
	(*GetUsersResponse)(nil),                   // 16: auth.GetUsersResponse
	(*DeleteUserRequest)(nil),                  // 17: auth.DeleteUserRequest
	(*DeleteUserDataRequest)(nil),              // 18: auth.DeleteUserDataRequest
	(*DeleteUserDataResponse)(nil),             // 19: auth.DeleteUserDataResponse
	(*DisassociateLoginRequest)(nil),           // 20: auth.DisassociateLoginRequest
	(*ValidateInternalResponse)(nil),           // 21: auth.ValidateInternalResponse
	(*GetSettingsResponse)(nil),                // 22: auth.GetSettingsResponse
	(*EnableAnonLoginRequest)(nil),             // 23: auth.EnableAnonLoginRequest
	(*EnableEmailLoginRequest)(nil),            // 24: auth.EnableEmailLoginRequest
	(*EnableAppleLoginRequest)(nil),            // 25: auth.EnableAppleLoginRequest
	(*EnableFacebookLoginRequest)(nil),         // 26: auth.EnableFacebookLoginRequest
	(*EnableGoogleLoginRequest)(nil),           // 27: auth.EnableGoogleLoginRequest
	(*EnableSteamLoginRequest)(nil),            // 28: auth.EnableSteamLoginRequest
	(*EnableXboxLoginRequest)(nil),             // 29: auth.EnableXboxLoginRequest
	(*EnableEpicLoginRequest)(nil),             // 30: auth.EnableEpicLoginRequest
	(*EnableDiscordLoginRequest)(nil),          // 31: auth.EnableDiscordLoginRequest
	(*EnableEmailPasswordLoginRequest)(nil),    // 32: auth.EnableEmailPasswordLoginRequest
	(*EnableUsernamePasswordLoginRequest)(nil), // 33: auth.EnableUsernamePasswordLoginRequest
	(*ToggleAnonLoginRequest)(nil),             // 34: auth.ToggleAnonLoginRequest
	(*ToggleEmailLoginRequest)(nil),            // 35: auth.ToggleEmailLoginRequest
	(*ToggleAppleLoginRequest)(nil),            // 36: auth.ToggleAppleLoginRequest
	(*ToggleFacebookLoginRequest)(nil),         // 37: auth.ToggleFacebookLoginRequest
	(*ToggleGoogleLoginRequest)(nil),           // 38: auth.ToggleGoogleLoginRequest
	(*ToggleSteamLoginRequest)(nil),            // 39: auth.ToggleSteamLoginRequest
	(*ToggleEpicLoginRequest)(nil),             // 40: auth.ToggleEpicLoginRequest
	(*ToggleXboxLoginRequest)(nil),             // 41: auth.ToggleXboxLoginRequest
	(*ToggleDiscordLoginRequest)(nil),          // 42: auth.ToggleDiscordLoginRequest
	(*ToggleEmailPasswordLoginRequest)(nil),    // 43: auth.ToggleEmailPasswordLoginRequest
	(*ToggleUsernamePasswordLoginRequest)(nil), // 44: auth.ToggleUsernamePasswordLoginRequest
	(*DeleteAnonLoginRequest)(nil),             // 45: auth.DeleteAnonLoginRequest
	(*DeleteEmailLoginRequest)(nil),            // 46: auth.DeleteEmailLoginRequest
	(*DeleteAppleLoginRequest)(nil),            // 47: auth.DeleteAppleLoginRequest
	(*DeleteFacebookLoginRequest)(nil),         // 48: auth.DeleteFacebookLoginRequest
	(*DeleteGoogleLoginRequest)(nil),           // 49: auth.DeleteGoogleLoginRequest
	(*DeleteSteamLoginRequest)(nil),            // 50: auth.DeleteSteamLoginRequest
	(*DeleteEpicLoginRequest)(nil),             // 51: auth.DeleteEpicLoginRequest
	(*DeleteXboxLoginRequest)(nil),             // 52: auth.DeleteXboxLoginRequest
	(*DeleteDiscordLoginRequest)(nil),          // 53: auth.DeleteDiscordLoginRequest
	(*DeleteEmailPasswordLoginRequest)(nil),    // 54: auth.DeleteEmailPasswordLoginRequest
	(*DeleteUsernamePasswordLoginRequest)(nil), // 55: auth.DeleteUsernamePasswordLoginRequest
	(*UpdateSessionTokenValidityRequest)(nil),  // 56: auth.UpdateSessionTokenValidityRequest
	(*GetOtpRateLimitSettingsResponse)(nil),    // 57: auth.GetOtpRateLimitSettingsResponse
	(*DeleteSessionsRequest)(nil),              // 58: auth.DeleteSessionsRequest
	(*DeleteSessionsResponse)(nil),             // 59: auth.DeleteSessionsResponse
	(*SuspendUserRequest)(nil),                 // 60: auth.SuspendUserRequest
	(*SuspendUserResponse)(nil),                // 61: auth.SuspendUserResponse
	(*CreateAppKeyRequest)(nil),                // 62: auth.CreateAppKeyRequest
	(*AppKey)(nil),                             // 63: auth.AppKey
	(*DeleteAppKeyRequest)(nil),                // 64: auth.DeleteAppKeyRequest
	(*GetAppKeysRequest)(nil),                  // 65: auth.GetAppKeysRequest
	(*GetAppKeysResponse)(nil),                 // 66: auth.GetAppKeysResponse
	(*ValidateAppKeyRequest)(nil),              // 67: auth.ValidateAppKeyRequest
	(*MultiEnvAuthSettings)(nil),               // 68: auth.MultiEnvAuthSettings
	(*GetSettingsRequest)(nil),                 // 69: auth.GetSettingsRequest
	(*EnableAppVerifyRequest)(nil),             // 70: auth.EnableAppVerifyRequest
	(*DisableAppVerifyRequest)(nil),            // 71: auth.DisableAppVerifyRequest
	(*EnableAppAuthRequest)(nil),               // 72: auth.EnableAppAuthRequest
	(*DisableAppAuthRequest)(nil),              // 73: auth.DisableAppAuthRequest
	(*GetEmailTemplatesRequest)(nil),           // 74: auth.GetEmailTemplatesRequest
	(*GetEmailTemplatesResponse)(nil),          // 75: auth.GetEmailTemplatesResponse
	(*EmailTemplate)(nil),                      // 76: auth.EmailTemplate
	(*DeleteEmailTemplateRequest)(nil),         // 77: auth.DeleteEmailTemplateRequest
	(*CreateApiKeyRequest)(nil),                // 78: auth.CreateApiKeyRequest
	(*CreateApiKeyResponse)(nil),               // 79: auth.CreateApiKeyResponse
	(*DeleteApiKeyRequest)(nil),                // 80: auth.DeleteApiKeyRequest
	(*DeleteApiKeyResponse)(nil),               // 81: auth.DeleteApiKeyResponse
	(*GetApiKeysRequest)(nil),                  // 82: auth.GetApiKeysRequest
	(*GetApiKeysResponse)(nil),                 // 83: auth.GetApiKeysResponse
	(*UpdateApiKeyRequest)(nil),                // 84: auth.UpdateApiKeyRequest
	(*UpdateApiKeyResponse)(nil),               // 85: auth.UpdateApiKeyResponse
	(*UpdateUserAuthRestrictionsRequest)(nil),  // 86: auth.UpdateUserAuthRestrictionsRequest
	(*UpdateUserAuthRestrictionsResponse)(nil), // 87: auth.UpdateUserAuthRestrictionsResponse
	(*GetUserAuthRestrictionsRequest)(nil),     // 88: auth.GetUserAuthRestrictionsRequest
	(*GetUserAuthRestrictionsResponse)(nil),    // 89: auth.GetUserAuthRestrictionsResponse
	(*ValidateApiKeyRequest)(nil),              // 90: auth.ValidateApiKeyRequest
	(*ValidateApiKeyResponse)(nil),             // 91: auth.ValidateApiKeyResponse
	nil,                                        // 92: auth.GetEmailsByUserIdsResponse.EmailsEntry
	nil,                                        // 93: auth.GetUserIdsByLoginIdsResponse.UserIdsEntry
	nil,                                        // 94: auth.GetUsersResponse.UsersEntry
	(LoginType_Type)(0),                        // 95: auth.LoginType.Type
	(*User)(nil),                               // 96: auth.User
	(*LoginId)(nil),                            // 97: auth.LoginId
	(*AuthSettings)(nil),                       // 98: auth.AuthSettings
	(*FixedRateLimiterSettings)(nil),           // 99: auth.FixedRateLimiterSettings
	(ApiKeyState)(0),                           // 100: auth.ApiKeyState
	(*ApiKeyEndpoints)(nil),                    // 101: auth.ApiKeyEndpoints
	(*ApiKey)(nil),                             // 102: auth.ApiKey
	(*wrapperspb.BoolValue)(nil),               // 103: google.protobuf.BoolValue
	(*UserAuthRestriction)(nil),                // 104: auth.UserAuthRestriction
	(*OtpRequest)(nil),                         // 105: auth.OtpRequest
	(*EmailLoginRequest)(nil),                  // 106: auth.EmailLoginRequest
	(*AnonLoginRequest)(nil),                   // 107: auth.AnonLoginRequest
	(*AppleLoginRequest)(nil),                  // 108: auth.AppleLoginRequest
	(*FacebookLoginRequest)(nil),               // 109: auth.FacebookLoginRequest
	(*GoogleLoginRequest)(nil),                 // 110: auth.GoogleLoginRequest
	(*SteamLoginRequest)(nil),                  // 111: auth.SteamLoginRequest
	(*SteamOpenIdLoginRequest)(nil),            // 112: auth.SteamOpenIdLoginRequest
	(*SteamSessionTicketLoginRequest)(nil),     // 113: auth.SteamSessionTicketLoginRequest
	(*XboxLoginRequest)(nil),                   // 114: auth.XboxLoginRequest
	(*EpicLoginRequest)(nil),                   // 115: auth.EpicLoginRequest
	(*DiscordLoginRequest)(nil),                // 116: auth.DiscordLoginRequest
	(*EmailPasswordLoginRequest)(nil),          // 117: auth.EmailPasswordLoginRequest
	(*VerifyEmailRequest)(nil),                 // 118: auth.VerifyEmailRequest
	(*RecoverEmailAccountRequest)(nil),         // 119: auth.RecoverEmailAccountRequest
	(*UpdateEmailPasswordRequest)(nil),         // 120: auth.UpdateEmailPasswordRequest
	(*UsernamePasswordLoginRequest)(nil),       // 121: auth.UsernamePasswordLoginRequest
	(*GetUsernameAvailabilityRequest)(nil),     // 122: auth.GetUsernameAvailabilityRequest
	(*UpdateUsernamePasswordRequest)(nil),      // 123: auth.UpdateUsernamePasswordRequest
	(*ResetUsernamePasswordRequest)(nil),       // 124: auth.ResetUsernamePasswordRequest
	(*AppVerifyRequest)(nil),                   // 125: auth.AppVerifyRequest
	(*AssociateLoginsRequest)(nil),             // 126: auth.AssociateLoginsRequest
	(*RefreshRequest)(nil),                     // 127: auth.RefreshRequest
	(*LogoutRequest)(nil),                      // 128: auth.LogoutRequest
	(*ValidateRequest)(nil),                    // 129: auth.ValidateRequest
	(*emptypb.Empty)(nil),                      // 130: google.protobuf.Empty
	(*EmailLoginResponse)(nil),                 // 131: auth.EmailLoginResponse
	(*AnonLoginResponse)(nil),                  // 132: auth.AnonLoginResponse
	(*AppleLoginResponse)(nil),                 // 133: auth.AppleLoginResponse
	(*FacebookLoginResponse)(nil),              // 134: auth.FacebookLoginResponse
	(*GoogleLoginResponse)(nil),                // 135: auth.GoogleLoginResponse
	(*SteamLoginResponse)(nil),                 // 136: auth.SteamLoginResponse
	(*XboxLoginResponse)(nil),                  // 137: auth.XboxLoginResponse
	(*EpicLoginResponse)(nil),                  // 138: auth.EpicLoginResponse
	(*DiscordLoginResponse)(nil),               // 139: auth.DiscordLoginResponse
	(*EmailPasswordLoginResponse)(nil),         // 140: auth.EmailPasswordLoginResponse
	(*VerifyEmailResponse)(nil),                // 141: auth.VerifyEmailResponse
	(*UsernamePasswordLoginResponse)(nil),      // 142: auth.UsernamePasswordLoginResponse
	(*GetUsernameAvailabilityResponse)(nil),    // 143: auth.GetUsernameAvailabilityResponse
	(*httpbody.HttpBody)(nil),                  // 144: google.api.HttpBody
	(*RefreshResponse)(nil),                    // 145: auth.RefreshResponse
	(*ValidateResponse)(nil),                   // 146: auth.ValidateResponse
}
var file_auth_services_proto_depIdxs = []int32{
	68,  // 0: auth.SettingsImportExportData.data:type_name -> auth.MultiEnvAuthSettings
	95,  // 1: auth.InviteUserRequest.login_type:type_name -> auth.LoginType.Type
	96,  // 2: auth.InviteUserResponse.user:type_name -> auth.User
	92,  // 3: auth.GetEmailsByUserIdsResponse.emails:type_name -> auth.GetEmailsByUserIdsResponse.EmailsEntry
	95,  // 4: auth.GetUserRequest.login_type:type_name -> auth.LoginType.Type
	96,  // 5: auth.GetUserResponse.user:type_name -> auth.User
	96,  // 6: auth.GetUserDataResponse.user:type_name -> auth.User
	96,  // 7: auth.UpdateUserRequest.user:type_name -> auth.User
	96,  // 8: auth.UpdateUserResponse.user:type_name -> auth.User
	93,  // 9: auth.GetUserIdsByLoginIdsResponse.user_ids:type_name -> auth.GetUserIdsByLoginIdsResponse.UserIdsEntry
	94,  // 10: auth.GetUsersResponse.users:type_name -> auth.GetUsersResponse.UsersEntry
	96,  // 11: auth.ValidateInternalResponse.user:type_name -> auth.User
	97,  // 12: auth.ValidateInternalResponse.login_ids:type_name -> auth.LoginId
	98,  // 13: auth.GetSettingsResponse.auth_settings:type_name -> auth.AuthSettings
	99,  // 14: auth.EnableEmailLoginRequest.otp_rate_limit_settings:type_name -> auth.FixedRateLimiterSettings
	99,  // 15: auth.GetOtpRateLimitSettingsResponse.otp_rate_limit_settings:type_name -> auth.FixedRateLimiterSettings
	63,  // 16: auth.GetAppKeysResponse.app_keys:type_name -> auth.AppKey
	98,  // 17: auth.MultiEnvAuthSettings.dev:type_name -> auth.AuthSettings
	98,  // 18: auth.MultiEnvAuthSettings.stage:type_name -> auth.AuthSettings
	98,  // 19: auth.MultiEnvAuthSettings.prod:type_name -> auth.AuthSettings
	76,  // 20: auth.MultiEnvAuthSettings.email_templates:type_name -> auth.EmailTemplate
	76,  // 21: auth.GetEmailTemplatesResponse.email_templates:type_name -> auth.EmailTemplate
	100, // 22: auth.CreateApiKeyRequest.state:type_name -> auth.ApiKeyState
	101, // 23: auth.CreateApiKeyRequest.apis:type_name -> auth.ApiKeyEndpoints
	102, // 24: auth.CreateApiKeyResponse.api_key:type_name -> auth.ApiKey
	102, // 25: auth.GetApiKeysResponse.api_keys:type_name -> auth.ApiKey
	103, // 26: auth.UpdateApiKeyRequest.never_expire:type_name -> google.protobuf.BoolValue
	100, // 27: auth.UpdateApiKeyRequest.state:type_name -> auth.ApiKeyState
	101, // 28: auth.UpdateApiKeyRequest.apis:type_name -> auth.ApiKeyEndpoints
	104, // 29: auth.UpdateUserAuthRestrictionsRequest.restrictions:type_name -> auth.UserAuthRestriction
	104, // 30: auth.UpdateUserAuthRestrictionsResponse.restrictions:type_name -> auth.UserAuthRestriction
	103, // 31: auth.GetUserAuthRestrictionsRequest.system:type_name -> google.protobuf.BoolValue
	104, // 32: auth.GetUserAuthRestrictionsResponse.restrictions:type_name -> auth.UserAuthRestriction
	96,  // 33: auth.GetUsersResponse.UsersEntry.value:type_name -> auth.User
	1,   // 34: auth.AuthService.InviteUser:input_type -> auth.InviteUserRequest
	3,   // 35: auth.AuthService.GetEmailsByUserIds:input_type -> auth.GetEmailsByUserIdsRequest
	5,   // 36: auth.AuthService.GetUser:input_type -> auth.GetUserRequest
	9,   // 37: auth.AuthService.UpdateUser:input_type -> auth.UpdateUserRequest
	10,  // 38: auth.AuthService.BanUser:input_type -> auth.BanUserRequest
	11,  // 39: auth.AuthService.UnbanUser:input_type -> auth.UnbanUserRequest
	13,  // 40: auth.AuthService.GetUserIdsByLoginIds:input_type -> auth.GetUserIdsByLoginIdsRequest
	15,  // 41: auth.AuthService.GetUsers:input_type -> auth.GetUsersRequest
	17,  // 42: auth.AuthService.DeleteUser:input_type -> auth.DeleteUserRequest
	7,   // 43: auth.AuthService.GetUserData:input_type -> auth.GetUserDataRequest
	18,  // 44: auth.AuthService.DeleteUserData:input_type -> auth.DeleteUserDataRequest
	20,  // 45: auth.AuthService.DisassociateLogin:input_type -> auth.DisassociateLoginRequest
	105, // 46: auth.AuthService.Otp:input_type -> auth.OtpRequest
	106, // 47: auth.AuthService.EmailLogin:input_type -> auth.EmailLoginRequest
	107, // 48: auth.AuthService.AnonLogin:input_type -> auth.AnonLoginRequest
	108, // 49: auth.AuthService.AppleLogin:input_type -> auth.AppleLoginRequest
	109, // 50: auth.AuthService.FacebookLogin:input_type -> auth.FacebookLoginRequest
	110, // 51: auth.AuthService.GoogleLogin:input_type -> auth.GoogleLoginRequest
	111, // 52: auth.AuthService.SteamLogin:input_type -> auth.SteamLoginRequest
	112, // 53: auth.AuthService.SteamOpenIdLogin:input_type -> auth.SteamOpenIdLoginRequest
	113, // 54: auth.AuthService.SteamSessionTicketLogin:input_type -> auth.SteamSessionTicketLoginRequest
	114, // 55: auth.AuthService.XboxLogin:input_type -> auth.XboxLoginRequest
	115, // 56: auth.AuthService.EpicLogin:input_type -> auth.EpicLoginRequest
	116, // 57: auth.AuthService.DiscordLogin:input_type -> auth.DiscordLoginRequest
	117, // 58: auth.AuthService.EmailPasswordLogin:input_type -> auth.EmailPasswordLoginRequest
	118, // 59: auth.AuthService.VerifyEmail:input_type -> auth.VerifyEmailRequest
	119, // 60: auth.AuthService.RecoverEmailAccount:input_type -> auth.RecoverEmailAccountRequest
	120, // 61: auth.AuthService.UpdateEmailPassword:input_type -> auth.UpdateEmailPasswordRequest
	121, // 62: auth.AuthService.UsernamePasswordLogin:input_type -> auth.UsernamePasswordLoginRequest
	122, // 63: auth.AuthService.GetUsernameAvailability:input_type -> auth.GetUsernameAvailabilityRequest
	123, // 64: auth.AuthService.UpdateUsernamePassword:input_type -> auth.UpdateUsernamePasswordRequest
	124, // 65: auth.AuthService.ResetUsernamePassword:input_type -> auth.ResetUsernamePasswordRequest
	125, // 66: auth.AuthService.AppVerify:input_type -> auth.AppVerifyRequest
	126, // 67: auth.AuthService.AssociateLogins:input_type -> auth.AssociateLoginsRequest
	127, // 68: auth.AuthService.Refresh:input_type -> auth.RefreshRequest
	128, // 69: auth.AuthService.Logout:input_type -> auth.LogoutRequest
	129, // 70: auth.AuthService.Validate:input_type -> auth.ValidateRequest
	129, // 71: auth.AuthService.ValidateInternal:input_type -> auth.ValidateRequest
	90,  // 72: auth.AuthService.ValidateApiKey:input_type -> auth.ValidateApiKeyRequest
	58,  // 73: auth.AuthService.DeleteSessions:input_type -> auth.DeleteSessionsRequest
	69,  // 74: auth.AuthService.GetSettings:input_type -> auth.GetSettingsRequest
	24,  // 75: auth.AuthService.EnableEmailLogin:input_type -> auth.EnableEmailLoginRequest
	35,  // 76: auth.AuthService.ToggleEmailLogin:input_type -> auth.ToggleEmailLoginRequest
	46,  // 77: auth.AuthService.DeleteEmailLogin:input_type -> auth.DeleteEmailLoginRequest
	23,  // 78: auth.AuthService.EnableAnonLogin:input_type -> auth.EnableAnonLoginRequest
	34,  // 79: auth.AuthService.ToggleAnonLogin:input_type -> auth.ToggleAnonLoginRequest
	45,  // 80: auth.AuthService.DeleteAnonLogin:input_type -> auth.DeleteAnonLoginRequest
	25,  // 81: auth.AuthService.EnableAppleLogin:input_type -> auth.EnableAppleLoginRequest
	36,  // 82: auth.AuthService.ToggleAppleLogin:input_type -> auth.ToggleAppleLoginRequest
	26,  // 83: auth.AuthService.EnableFacebookLogin:input_type -> auth.EnableFacebookLoginRequest
	37,  // 84: auth.AuthService.ToggleFacebookLogin:input_type -> auth.ToggleFacebookLoginRequest
	48,  // 85: auth.AuthService.DeleteFacebookLogin:input_type -> auth.DeleteFacebookLoginRequest
	27,  // 86: auth.AuthService.EnableGoogleLogin:input_type -> auth.EnableGoogleLoginRequest
	38,  // 87: auth.AuthService.ToggleGoogleLogin:input_type -> auth.ToggleGoogleLoginRequest
	49,  // 88: auth.AuthService.DeleteGoogleLogin:input_type -> auth.DeleteGoogleLoginRequest
	28,  // 89: auth.AuthService.EnableSteamLogin:input_type -> auth.EnableSteamLoginRequest
	39,  // 90: auth.AuthService.ToggleSteamLogin:input_type -> auth.ToggleSteamLoginRequest
	50,  // 91: auth.AuthService.DeleteSteamLogin:input_type -> auth.DeleteSteamLoginRequest
	29,  // 92: auth.AuthService.EnableXboxLogin:input_type -> auth.EnableXboxLoginRequest
	41,  // 93: auth.AuthService.ToggleXboxLogin:input_type -> auth.ToggleXboxLoginRequest
	52,  // 94: auth.AuthService.DeleteXboxLogin:input_type -> auth.DeleteXboxLoginRequest
	30,  // 95: auth.AuthService.EnableEpicLogin:input_type -> auth.EnableEpicLoginRequest
	40,  // 96: auth.AuthService.ToggleEpicLogin:input_type -> auth.ToggleEpicLoginRequest
	51,  // 97: auth.AuthService.DeleteEpicLogin:input_type -> auth.DeleteEpicLoginRequest
	31,  // 98: auth.AuthService.EnableDiscordLogin:input_type -> auth.EnableDiscordLoginRequest
	42,  // 99: auth.AuthService.ToggleDiscordLogin:input_type -> auth.ToggleDiscordLoginRequest
	53,  // 100: auth.AuthService.DeleteDiscordLogin:input_type -> auth.DeleteDiscordLoginRequest
	32,  // 101: auth.AuthService.EnableEmailPasswordLogin:input_type -> auth.EnableEmailPasswordLoginRequest
	43,  // 102: auth.AuthService.ToggleEmailPasswordLogin:input_type -> auth.ToggleEmailPasswordLoginRequest
	54,  // 103: auth.AuthService.DeleteEmailPasswordLogin:input_type -> auth.DeleteEmailPasswordLoginRequest
	33,  // 104: auth.AuthService.EnableUsernamePasswordLogin:input_type -> auth.EnableUsernamePasswordLoginRequest
	44,  // 105: auth.AuthService.ToggleUsernamePasswordLogin:input_type -> auth.ToggleUsernamePasswordLoginRequest
	55,  // 106: auth.AuthService.DeleteUsernamePasswordLogin:input_type -> auth.DeleteUsernamePasswordLoginRequest
	70,  // 107: auth.AuthService.EnableAppVerify:input_type -> auth.EnableAppVerifyRequest
	71,  // 108: auth.AuthService.DisableAppVerify:input_type -> auth.DisableAppVerifyRequest
	56,  // 109: auth.AuthService.UpdateSessionTokenValidity:input_type -> auth.UpdateSessionTokenValidityRequest
	130, // 110: auth.AuthService.ExportSettings:input_type -> google.protobuf.Empty
	0,   // 111: auth.AuthService.ImportSettings:input_type -> auth.SettingsImportExportData
	0,   // 112: auth.AuthService.ValidateImportSettings:input_type -> auth.SettingsImportExportData
	60,  // 113: auth.AuthService.SuspendUser:input_type -> auth.SuspendUserRequest
	72,  // 114: auth.AuthService.EnableAppAuth:input_type -> auth.EnableAppAuthRequest
	73,  // 115: auth.AuthService.DisableAppAuth:input_type -> auth.DisableAppAuthRequest
	62,  // 116: auth.AuthService.CreateAppKey:input_type -> auth.CreateAppKeyRequest
	65,  // 117: auth.AuthService.GetAppKeys:input_type -> auth.GetAppKeysRequest
	64,  // 118: auth.AuthService.DeleteAppKey:input_type -> auth.DeleteAppKeyRequest
	67,  // 119: auth.AuthService.ValidateAppKey:input_type -> auth.ValidateAppKeyRequest
	130, // 120: auth.AuthService.LogUserEngagmentMetrics:input_type -> google.protobuf.Empty
	74,  // 121: auth.AuthService.GetEmailTemplates:input_type -> auth.GetEmailTemplatesRequest
	76,  // 122: auth.AuthService.UpdateEmailTemplate:input_type -> auth.EmailTemplate
	77,  // 123: auth.AuthService.DeleteEmailTemplate:input_type -> auth.DeleteEmailTemplateRequest
	78,  // 124: auth.AuthService.CreateApiKey:input_type -> auth.CreateApiKeyRequest
	82,  // 125: auth.AuthService.GetApiKeys:input_type -> auth.GetApiKeysRequest
	80,  // 126: auth.AuthService.DeleteApiKey:input_type -> auth.DeleteApiKeyRequest
	84,  // 127: auth.AuthService.UpdateApiKey:input_type -> auth.UpdateApiKeyRequest
	86,  // 128: auth.AuthService.UpdateUserAuthRestrictions:input_type -> auth.UpdateUserAuthRestrictionsRequest
	88,  // 129: auth.AuthService.GetUserAuthRestrictions:input_type -> auth.GetUserAuthRestrictionsRequest
	2,   // 130: auth.AuthService.InviteUser:output_type -> auth.InviteUserResponse
	4,   // 131: auth.AuthService.GetEmailsByUserIds:output_type -> auth.GetEmailsByUserIdsResponse
	6,   // 132: auth.AuthService.GetUser:output_type -> auth.GetUserResponse
	12,  // 133: auth.AuthService.UpdateUser:output_type -> auth.UpdateUserResponse
	130, // 134: auth.AuthService.BanUser:output_type -> google.protobuf.Empty
	130, // 135: auth.AuthService.UnbanUser:output_type -> google.protobuf.Empty
	14,  // 136: auth.AuthService.GetUserIdsByLoginIds:output_type -> auth.GetUserIdsByLoginIdsResponse
	16,  // 137: auth.AuthService.GetUsers:output_type -> auth.GetUsersResponse
	130, // 138: auth.AuthService.DeleteUser:output_type -> google.protobuf.Empty
	8,   // 139: auth.AuthService.GetUserData:output_type -> auth.GetUserDataResponse
	19,  // 140: auth.AuthService.DeleteUserData:output_type -> auth.DeleteUserDataResponse
	130, // 141: auth.AuthService.DisassociateLogin:output_type -> google.protobuf.Empty
	130, // 142: auth.AuthService.Otp:output_type -> google.protobuf.Empty
	131, // 143: auth.AuthService.EmailLogin:output_type -> auth.EmailLoginResponse
	132, // 144: auth.AuthService.AnonLogin:output_type -> auth.AnonLoginResponse
	133, // 145: auth.AuthService.AppleLogin:output_type -> auth.AppleLoginResponse
	134, // 146: auth.AuthService.FacebookLogin:output_type -> auth.FacebookLoginResponse
	135, // 147: auth.AuthService.GoogleLogin:output_type -> auth.GoogleLoginResponse
	136, // 148: auth.AuthService.SteamLogin:output_type -> auth.SteamLoginResponse
	136, // 149: auth.AuthService.SteamOpenIdLogin:output_type -> auth.SteamLoginResponse
	136, // 150: auth.AuthService.SteamSessionTicketLogin:output_type -> auth.SteamLoginResponse
	137, // 151: auth.AuthService.XboxLogin:output_type -> auth.XboxLoginResponse
	138, // 152: auth.AuthService.EpicLogin:output_type -> auth.EpicLoginResponse
	139, // 153: auth.AuthService.DiscordLogin:output_type -> auth.DiscordLoginResponse
	140, // 154: auth.AuthService.EmailPasswordLogin:output_type -> auth.EmailPasswordLoginResponse
	141, // 155: auth.AuthService.VerifyEmail:output_type -> auth.VerifyEmailResponse
	130, // 156: auth.AuthService.RecoverEmailAccount:output_type -> google.protobuf.Empty
	130, // 157: auth.AuthService.UpdateEmailPassword:output_type -> google.protobuf.Empty
	142, // 158: auth.AuthService.UsernamePasswordLogin:output_type -> auth.UsernamePasswordLoginResponse
	143, // 159: auth.AuthService.GetUsernameAvailability:output_type -> auth.GetUsernameAvailabilityResponse
	130, // 160: auth.AuthService.UpdateUsernamePassword:output_type -> google.protobuf.Empty
	130, // 161: auth.AuthService.ResetUsernamePassword:output_type -> google.protobuf.Empty
	144, // 162: auth.AuthService.AppVerify:output_type -> google.api.HttpBody
	130, // 163: auth.AuthService.AssociateLogins:output_type -> google.protobuf.Empty
	145, // 164: auth.AuthService.Refresh:output_type -> auth.RefreshResponse
	130, // 165: auth.AuthService.Logout:output_type -> google.protobuf.Empty
	146, // 166: auth.AuthService.Validate:output_type -> auth.ValidateResponse
	21,  // 167: auth.AuthService.ValidateInternal:output_type -> auth.ValidateInternalResponse
	91,  // 168: auth.AuthService.ValidateApiKey:output_type -> auth.ValidateApiKeyResponse
	59,  // 169: auth.AuthService.DeleteSessions:output_type -> auth.DeleteSessionsResponse
	22,  // 170: auth.AuthService.GetSettings:output_type -> auth.GetSettingsResponse
	130, // 171: auth.AuthService.EnableEmailLogin:output_type -> google.protobuf.Empty
	130, // 172: auth.AuthService.ToggleEmailLogin:output_type -> google.protobuf.Empty
	130, // 173: auth.AuthService.DeleteEmailLogin:output_type -> google.protobuf.Empty
	130, // 174: auth.AuthService.EnableAnonLogin:output_type -> google.protobuf.Empty
	130, // 175: auth.AuthService.ToggleAnonLogin:output_type -> google.protobuf.Empty
	130, // 176: auth.AuthService.DeleteAnonLogin:output_type -> google.protobuf.Empty
	130, // 177: auth.AuthService.EnableAppleLogin:output_type -> google.protobuf.Empty
	130, // 178: auth.AuthService.ToggleAppleLogin:output_type -> google.protobuf.Empty
	130, // 179: auth.AuthService.EnableFacebookLogin:output_type -> google.protobuf.Empty
	130, // 180: auth.AuthService.ToggleFacebookLogin:output_type -> google.protobuf.Empty
	130, // 181: auth.AuthService.DeleteFacebookLogin:output_type -> google.protobuf.Empty
	130, // 182: auth.AuthService.EnableGoogleLogin:output_type -> google.protobuf.Empty
	130, // 183: auth.AuthService.ToggleGoogleLogin:output_type -> google.protobuf.Empty
	130, // 184: auth.AuthService.DeleteGoogleLogin:output_type -> google.protobuf.Empty
	130, // 185: auth.AuthService.EnableSteamLogin:output_type -> google.protobuf.Empty
	130, // 186: auth.AuthService.ToggleSteamLogin:output_type -> google.protobuf.Empty
	130, // 187: auth.AuthService.DeleteSteamLogin:output_type -> google.protobuf.Empty
	130, // 188: auth.AuthService.EnableXboxLogin:output_type -> google.protobuf.Empty
	130, // 189: auth.AuthService.ToggleXboxLogin:output_type -> google.protobuf.Empty
	130, // 190: auth.AuthService.DeleteXboxLogin:output_type -> google.protobuf.Empty
	130, // 191: auth.AuthService.EnableEpicLogin:output_type -> google.protobuf.Empty
	130, // 192: auth.AuthService.ToggleEpicLogin:output_type -> google.protobuf.Empty
	130, // 193: auth.AuthService.DeleteEpicLogin:output_type -> google.protobuf.Empty
	130, // 194: auth.AuthService.EnableDiscordLogin:output_type -> google.protobuf.Empty
	130, // 195: auth.AuthService.ToggleDiscordLogin:output_type -> google.protobuf.Empty
	130, // 196: auth.AuthService.DeleteDiscordLogin:output_type -> google.protobuf.Empty
	130, // 197: auth.AuthService.EnableEmailPasswordLogin:output_type -> google.protobuf.Empty
	130, // 198: auth.AuthService.ToggleEmailPasswordLogin:output_type -> google.protobuf.Empty
	130, // 199: auth.AuthService.DeleteEmailPasswordLogin:output_type -> google.protobuf.Empty
	130, // 200: auth.AuthService.EnableUsernamePasswordLogin:output_type -> google.protobuf.Empty
	130, // 201: auth.AuthService.ToggleUsernamePasswordLogin:output_type -> google.protobuf.Empty
	130, // 202: auth.AuthService.DeleteUsernamePasswordLogin:output_type -> google.protobuf.Empty
	130, // 203: auth.AuthService.EnableAppVerify:output_type -> google.protobuf.Empty
	130, // 204: auth.AuthService.DisableAppVerify:output_type -> google.protobuf.Empty
	130, // 205: auth.AuthService.UpdateSessionTokenValidity:output_type -> google.protobuf.Empty
	0,   // 206: auth.AuthService.ExportSettings:output_type -> auth.SettingsImportExportData
	130, // 207: auth.AuthService.ImportSettings:output_type -> google.protobuf.Empty
	0,   // 208: auth.AuthService.ValidateImportSettings:output_type -> auth.SettingsImportExportData
	61,  // 209: auth.AuthService.SuspendUser:output_type -> auth.SuspendUserResponse
	130, // 210: auth.AuthService.EnableAppAuth:output_type -> google.protobuf.Empty
	130, // 211: auth.AuthService.DisableAppAuth:output_type -> google.protobuf.Empty
	63,  // 212: auth.AuthService.CreateAppKey:output_type -> auth.AppKey
	66,  // 213: auth.AuthService.GetAppKeys:output_type -> auth.GetAppKeysResponse
	130, // 214: auth.AuthService.DeleteAppKey:output_type -> google.protobuf.Empty
	130, // 215: auth.AuthService.ValidateAppKey:output_type -> google.protobuf.Empty
	130, // 216: auth.AuthService.LogUserEngagmentMetrics:output_type -> google.protobuf.Empty
	75,  // 217: auth.AuthService.GetEmailTemplates:output_type -> auth.GetEmailTemplatesResponse
	130, // 218: auth.AuthService.UpdateEmailTemplate:output_type -> google.protobuf.Empty
	130, // 219: auth.AuthService.DeleteEmailTemplate:output_type -> google.protobuf.Empty
	79,  // 220: auth.AuthService.CreateApiKey:output_type -> auth.CreateApiKeyResponse
	83,  // 221: auth.AuthService.GetApiKeys:output_type -> auth.GetApiKeysResponse
	81,  // 222: auth.AuthService.DeleteApiKey:output_type -> auth.DeleteApiKeyResponse
	85,  // 223: auth.AuthService.UpdateApiKey:output_type -> auth.UpdateApiKeyResponse
	87,  // 224: auth.AuthService.UpdateUserAuthRestrictions:output_type -> auth.UpdateUserAuthRestrictionsResponse
	89,  // 225: auth.AuthService.GetUserAuthRestrictions:output_type -> auth.GetUserAuthRestrictionsResponse
	130, // [130:226] is the sub-list for method output_type
	34,  // [34:130] is the sub-list for method input_type
	34,  // [34:34] is the sub-list for extension type_name
	34,  // [34:34] is the sub-list for extension extendee
	0,   // [0:34] is the sub-list for field type_name
}

func init() { file_auth_services_proto_init() }
func file_auth_services_proto_init() {
	if File_auth_services_proto != nil {
		return
	}
	file_auth_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_auth_services_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingsImportExportData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEmailsByUserIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEmailsByUserIdsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnbanUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserIdsByLoginIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserIdsByLoginIdsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisassociateLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateInternalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableAnonLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableEmailLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableAppleLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableFacebookLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableGoogleLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableSteamLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableXboxLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableEpicLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableDiscordLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableEmailPasswordLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableUsernamePasswordLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleAnonLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleEmailLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleAppleLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleFacebookLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleGoogleLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleSteamLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleEpicLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleXboxLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleDiscordLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleEmailPasswordLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleUsernamePasswordLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAnonLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEmailLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAppleLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFacebookLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGoogleLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSteamLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEpicLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteXboxLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDiscordLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEmailPasswordLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUsernamePasswordLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSessionTokenValidityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOtpRateLimitSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSessionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSessionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuspendUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuspendUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAppKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateAppKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiEnvAuthSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableAppVerifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableAppVerifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableAppAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableAppAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEmailTemplatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEmailTemplatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEmailTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateApiKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateApiKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteApiKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteApiKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApiKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApiKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateApiKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateApiKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserAuthRestrictionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserAuthRestrictionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserAuthRestrictionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserAuthRestrictionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateApiKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_services_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateApiKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_auth_services_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*GetUserRequest_Id)(nil),
		(*GetUserRequest_Username)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_auth_services_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   95,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_auth_services_proto_goTypes,
		DependencyIndexes: file_auth_services_proto_depIdxs,
		MessageInfos:      file_auth_services_proto_msgTypes,
	}.Build()
	File_auth_services_proto = out.File
	file_auth_services_proto_rawDesc = nil
	file_auth_services_proto_goTypes = nil
	file_auth_services_proto_depIdxs = nil
}
