// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: auth_services.proto

package proto

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthService_InviteUser_FullMethodName                  = "/auth.AuthService/InviteUser"
	AuthService_GetEmailsByUserIds_FullMethodName          = "/auth.AuthService/GetEmailsByUserIds"
	AuthService_GetUser_FullMethodName                     = "/auth.AuthService/GetUser"
	AuthService_UpdateUser_FullMethodName                  = "/auth.AuthService/UpdateUser"
	AuthService_BanUser_FullMethodName                     = "/auth.AuthService/BanUser"
	AuthService_UnbanUser_FullMethodName                   = "/auth.AuthService/UnbanUser"
	AuthService_GetUserIdsByLoginIds_FullMethodName        = "/auth.AuthService/GetUserIdsByLoginIds"
	AuthService_GetUsers_FullMethodName                    = "/auth.AuthService/GetUsers"
	AuthService_DeleteUser_FullMethodName                  = "/auth.AuthService/DeleteUser"
	AuthService_GetUserData_FullMethodName                 = "/auth.AuthService/GetUserData"
	AuthService_DeleteUserData_FullMethodName              = "/auth.AuthService/DeleteUserData"
	AuthService_DisassociateLogin_FullMethodName           = "/auth.AuthService/DisassociateLogin"
	AuthService_Otp_FullMethodName                         = "/auth.AuthService/Otp"
	AuthService_EmailLogin_FullMethodName                  = "/auth.AuthService/EmailLogin"
	AuthService_AnonLogin_FullMethodName                   = "/auth.AuthService/AnonLogin"
	AuthService_AppleLogin_FullMethodName                  = "/auth.AuthService/AppleLogin"
	AuthService_FacebookLogin_FullMethodName               = "/auth.AuthService/FacebookLogin"
	AuthService_GoogleLogin_FullMethodName                 = "/auth.AuthService/GoogleLogin"
	AuthService_SteamLogin_FullMethodName                  = "/auth.AuthService/SteamLogin"
	AuthService_SteamOpenIdLogin_FullMethodName            = "/auth.AuthService/SteamOpenIdLogin"
	AuthService_SteamSessionTicketLogin_FullMethodName     = "/auth.AuthService/SteamSessionTicketLogin"
	AuthService_XboxLogin_FullMethodName                   = "/auth.AuthService/XboxLogin"
	AuthService_EpicLogin_FullMethodName                   = "/auth.AuthService/EpicLogin"
	AuthService_DiscordLogin_FullMethodName                = "/auth.AuthService/DiscordLogin"
	AuthService_EmailPasswordLogin_FullMethodName          = "/auth.AuthService/EmailPasswordLogin"
	AuthService_VerifyEmail_FullMethodName                 = "/auth.AuthService/VerifyEmail"
	AuthService_RecoverEmailAccount_FullMethodName         = "/auth.AuthService/RecoverEmailAccount"
	AuthService_UpdateEmailPassword_FullMethodName         = "/auth.AuthService/UpdateEmailPassword"
	AuthService_UsernamePasswordLogin_FullMethodName       = "/auth.AuthService/UsernamePasswordLogin"
	AuthService_GetUsernameAvailability_FullMethodName     = "/auth.AuthService/GetUsernameAvailability"
	AuthService_UpdateUsernamePassword_FullMethodName      = "/auth.AuthService/UpdateUsernamePassword"
	AuthService_ResetUsernamePassword_FullMethodName       = "/auth.AuthService/ResetUsernamePassword"
	AuthService_AppVerify_FullMethodName                   = "/auth.AuthService/AppVerify"
	AuthService_AssociateLogins_FullMethodName             = "/auth.AuthService/AssociateLogins"
	AuthService_Refresh_FullMethodName                     = "/auth.AuthService/Refresh"
	AuthService_Logout_FullMethodName                      = "/auth.AuthService/Logout"
	AuthService_Validate_FullMethodName                    = "/auth.AuthService/Validate"
	AuthService_ValidateInternal_FullMethodName            = "/auth.AuthService/ValidateInternal"
	AuthService_ValidateApiKey_FullMethodName              = "/auth.AuthService/ValidateApiKey"
	AuthService_DeleteSessions_FullMethodName              = "/auth.AuthService/DeleteSessions"
	AuthService_GetSettings_FullMethodName                 = "/auth.AuthService/GetSettings"
	AuthService_EnableEmailLogin_FullMethodName            = "/auth.AuthService/EnableEmailLogin"
	AuthService_ToggleEmailLogin_FullMethodName            = "/auth.AuthService/ToggleEmailLogin"
	AuthService_DeleteEmailLogin_FullMethodName            = "/auth.AuthService/DeleteEmailLogin"
	AuthService_EnableAnonLogin_FullMethodName             = "/auth.AuthService/EnableAnonLogin"
	AuthService_ToggleAnonLogin_FullMethodName             = "/auth.AuthService/ToggleAnonLogin"
	AuthService_DeleteAnonLogin_FullMethodName             = "/auth.AuthService/DeleteAnonLogin"
	AuthService_EnableAppleLogin_FullMethodName            = "/auth.AuthService/EnableAppleLogin"
	AuthService_ToggleAppleLogin_FullMethodName            = "/auth.AuthService/ToggleAppleLogin"
	AuthService_EnableFacebookLogin_FullMethodName         = "/auth.AuthService/EnableFacebookLogin"
	AuthService_ToggleFacebookLogin_FullMethodName         = "/auth.AuthService/ToggleFacebookLogin"
	AuthService_DeleteFacebookLogin_FullMethodName         = "/auth.AuthService/DeleteFacebookLogin"
	AuthService_EnableGoogleLogin_FullMethodName           = "/auth.AuthService/EnableGoogleLogin"
	AuthService_ToggleGoogleLogin_FullMethodName           = "/auth.AuthService/ToggleGoogleLogin"
	AuthService_DeleteGoogleLogin_FullMethodName           = "/auth.AuthService/DeleteGoogleLogin"
	AuthService_EnableSteamLogin_FullMethodName            = "/auth.AuthService/EnableSteamLogin"
	AuthService_ToggleSteamLogin_FullMethodName            = "/auth.AuthService/ToggleSteamLogin"
	AuthService_DeleteSteamLogin_FullMethodName            = "/auth.AuthService/DeleteSteamLogin"
	AuthService_EnableXboxLogin_FullMethodName             = "/auth.AuthService/EnableXboxLogin"
	AuthService_ToggleXboxLogin_FullMethodName             = "/auth.AuthService/ToggleXboxLogin"
	AuthService_DeleteXboxLogin_FullMethodName             = "/auth.AuthService/DeleteXboxLogin"
	AuthService_EnableEpicLogin_FullMethodName             = "/auth.AuthService/EnableEpicLogin"
	AuthService_ToggleEpicLogin_FullMethodName             = "/auth.AuthService/ToggleEpicLogin"
	AuthService_DeleteEpicLogin_FullMethodName             = "/auth.AuthService/DeleteEpicLogin"
	AuthService_EnableDiscordLogin_FullMethodName          = "/auth.AuthService/EnableDiscordLogin"
	AuthService_ToggleDiscordLogin_FullMethodName          = "/auth.AuthService/ToggleDiscordLogin"
	AuthService_DeleteDiscordLogin_FullMethodName          = "/auth.AuthService/DeleteDiscordLogin"
	AuthService_EnableEmailPasswordLogin_FullMethodName    = "/auth.AuthService/EnableEmailPasswordLogin"
	AuthService_ToggleEmailPasswordLogin_FullMethodName    = "/auth.AuthService/ToggleEmailPasswordLogin"
	AuthService_DeleteEmailPasswordLogin_FullMethodName    = "/auth.AuthService/DeleteEmailPasswordLogin"
	AuthService_EnableUsernamePasswordLogin_FullMethodName = "/auth.AuthService/EnableUsernamePasswordLogin"
	AuthService_ToggleUsernamePasswordLogin_FullMethodName = "/auth.AuthService/ToggleUsernamePasswordLogin"
	AuthService_DeleteUsernamePasswordLogin_FullMethodName = "/auth.AuthService/DeleteUsernamePasswordLogin"
	AuthService_EnableAppVerify_FullMethodName             = "/auth.AuthService/EnableAppVerify"
	AuthService_DisableAppVerify_FullMethodName            = "/auth.AuthService/DisableAppVerify"
	AuthService_UpdateSessionTokenValidity_FullMethodName  = "/auth.AuthService/UpdateSessionTokenValidity"
	AuthService_ExportSettings_FullMethodName              = "/auth.AuthService/ExportSettings"
	AuthService_ImportSettings_FullMethodName              = "/auth.AuthService/ImportSettings"
	AuthService_ValidateImportSettings_FullMethodName      = "/auth.AuthService/ValidateImportSettings"
	AuthService_SuspendUser_FullMethodName                 = "/auth.AuthService/SuspendUser"
	AuthService_EnableAppAuth_FullMethodName               = "/auth.AuthService/EnableAppAuth"
	AuthService_DisableAppAuth_FullMethodName              = "/auth.AuthService/DisableAppAuth"
	AuthService_CreateAppKey_FullMethodName                = "/auth.AuthService/CreateAppKey"
	AuthService_GetAppKeys_FullMethodName                  = "/auth.AuthService/GetAppKeys"
	AuthService_DeleteAppKey_FullMethodName                = "/auth.AuthService/DeleteAppKey"
	AuthService_ValidateAppKey_FullMethodName              = "/auth.AuthService/ValidateAppKey"
	AuthService_LogUserEngagmentMetrics_FullMethodName     = "/auth.AuthService/LogUserEngagmentMetrics"
	AuthService_GetEmailTemplates_FullMethodName           = "/auth.AuthService/GetEmailTemplates"
	AuthService_UpdateEmailTemplate_FullMethodName         = "/auth.AuthService/UpdateEmailTemplate"
	AuthService_DeleteEmailTemplate_FullMethodName         = "/auth.AuthService/DeleteEmailTemplate"
	AuthService_CreateApiKey_FullMethodName                = "/auth.AuthService/CreateApiKey"
	AuthService_GetApiKeys_FullMethodName                  = "/auth.AuthService/GetApiKeys"
	AuthService_DeleteApiKey_FullMethodName                = "/auth.AuthService/DeleteApiKey"
	AuthService_UpdateApiKey_FullMethodName                = "/auth.AuthService/UpdateApiKey"
	AuthService_UpdateUserAuthRestrictions_FullMethodName  = "/auth.AuthService/UpdateUserAuthRestrictions"
	AuthService_GetUserAuthRestrictions_FullMethodName     = "/auth.AuthService/GetUserAuthRestrictions"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	// InviteUser
	//
	// InviteUser Invites a new user based on the email specified
	InviteUser(ctx context.Context, in *InviteUserRequest, opts ...grpc.CallOption) (*InviteUserResponse, error)
	GetEmailsByUserIds(ctx context.Context, in *GetEmailsByUserIdsRequest, opts ...grpc.CallOption) (*GetEmailsByUserIdsResponse, error)
	// GetUser
	//
	// GetUser Retrieves a user based on username or user_id
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	BanUser(ctx context.Context, in *BanUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnbanUser(ctx context.Context, in *UnbanUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetUserIdsByLoginIds
	//
	// GetUserIdsByLoginIds Retrieves multiple user IDs based on login ID and login type
	GetUserIdsByLoginIds(ctx context.Context, in *GetUserIdsByLoginIdsRequest, opts ...grpc.CallOption) (*GetUserIdsByLoginIdsResponse, error)
	// GetUsers
	//
	// GetUsers Retrieves multiple users based on username
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	// DeleteUser
	//
	// DeleteUser Deletes the user based on a user ID
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetUserData
	GetUserData(ctx context.Context, in *GetUserDataRequest, opts ...grpc.CallOption) (*GetUserDataResponse, error)
	// DeleteUserData
	DeleteUserData(ctx context.Context, in *DeleteUserDataRequest, opts ...grpc.CallOption) (*DeleteUserDataResponse, error)
	// DisassociateLogin
	DisassociateLogin(ctx context.Context, in *DisassociateLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Otp
	//
	// Generates an OTP and sends to the email for login
	Otp(ctx context.Context, in *OtpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// EmailLogin
	//
	// EmailLogin Logs in the user based on the OTP credentials specified and returns a session
	EmailLogin(ctx context.Context, in *EmailLoginRequest, opts ...grpc.CallOption) (*EmailLoginResponse, error)
	// AnonLogin
	//
	// AnonLogin Logs in the user based on the anon auth specified and returns a session
	AnonLogin(ctx context.Context, in *AnonLoginRequest, opts ...grpc.CallOption) (*AnonLoginResponse, error)
	// AppleLogin
	//
	// Logs in the user based on the apple credential token specified and returns a session
	AppleLogin(ctx context.Context, in *AppleLoginRequest, opts ...grpc.CallOption) (*AppleLoginResponse, error)
	// FacebookLogin
	//
	// Logs in the user based on the facebook credential token specified and returns a session
	FacebookLogin(ctx context.Context, in *FacebookLoginRequest, opts ...grpc.CallOption) (*FacebookLoginResponse, error)
	// GoogleLogin
	//
	// Logs in the user based on the google credential token specified and returns a session
	GoogleLogin(ctx context.Context, in *GoogleLoginRequest, opts ...grpc.CallOption) (*GoogleLoginResponse, error)
	// SteamLogin
	//
	// Logs in the user based on the steam token specified and returns a session
	SteamLogin(ctx context.Context, in *SteamLoginRequest, opts ...grpc.CallOption) (*SteamLoginResponse, error)
	// SteamOpenIdLogin
	//
	// Logs in the user based on the steam open ID parameters specified and returns a session
	SteamOpenIdLogin(ctx context.Context, in *SteamOpenIdLoginRequest, opts ...grpc.CallOption) (*SteamLoginResponse, error)
	// SteamSessionTicketLogin
	//
	// Logs in the user based on the steam session ticket specified and returns a session
	SteamSessionTicketLogin(ctx context.Context, in *SteamSessionTicketLoginRequest, opts ...grpc.CallOption) (*SteamLoginResponse, error)
	// XboxLogin
	//
	// Logs in the user based on the steam token specified and returns a session
	XboxLogin(ctx context.Context, in *XboxLoginRequest, opts ...grpc.CallOption) (*XboxLoginResponse, error)
	// EpicLogin
	//
	// Logs in the user based on the steam token specified and returns a session
	EpicLogin(ctx context.Context, in *EpicLoginRequest, opts ...grpc.CallOption) (*EpicLoginResponse, error)
	// DiscordLogin
	//
	// Logs in the user based on the discord token specified and returns a session
	DiscordLogin(ctx context.Context, in *DiscordLoginRequest, opts ...grpc.CallOption) (*DiscordLoginResponse, error)
	// EmailPasswordLogin
	//
	// Logs in the user based on the email and password specified and returns a session
	EmailPasswordLogin(ctx context.Context, in *EmailPasswordLoginRequest, opts ...grpc.CallOption) (*EmailPasswordLoginResponse, error)
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error)
	RecoverEmailAccount(ctx context.Context, in *RecoverEmailAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateEmailPassword(ctx context.Context, in *UpdateEmailPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UsernamePasswordLogin
	//
	// Logs in the user based on the username and password specified and returns a session
	UsernamePasswordLogin(ctx context.Context, in *UsernamePasswordLoginRequest, opts ...grpc.CallOption) (*UsernamePasswordLoginResponse, error)
	GetUsernameAvailability(ctx context.Context, in *GetUsernameAvailabilityRequest, opts ...grpc.CallOption) (*GetUsernameAvailabilityResponse, error)
	// UpdateUsernamePassword
	//
	// Updates the username and password of the user
	UpdateUsernamePassword(ctx context.Context, in *UpdateUsernamePasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ResetUsernamePassword(ctx context.Context, in *ResetUsernamePasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AppVerify(ctx context.Context, in *AppVerifyRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// AssociateLogins
	//
	// AssociateLogins associates two logins based on their session tokens
	AssociateLogins(ctx context.Context, in *AssociateLoginsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Refresh
	//
	// Refreshes the session
	Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error)
	// Logout
	//
	// Logout Ends the current session of the user
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Validate
	//
	// Validate validates the session of the user and returns the user info
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
	// ValidateInternal
	//
	// ValidateInternal validates the session of the user and returns the user info
	ValidateInternal(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateInternalResponse, error)
	ValidateApiKey(ctx context.Context, in *ValidateApiKeyRequest, opts ...grpc.CallOption) (*ValidateApiKeyResponse, error)
	// DeleteInvalidatedSessions
	//
	// Deletes invalidated sessions
	DeleteSessions(ctx context.Context, in *DeleteSessionsRequest, opts ...grpc.CallOption) (*DeleteSessionsResponse, error)
	// GetSettings
	//
	// Shows the user settings for admin tools
	GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*GetSettingsResponse, error)
	// EnableEmailLogin
	//
	// Enables the email, OTP based login
	EnableEmailLogin(ctx context.Context, in *EnableEmailLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ToggleEmailLogin
	//
	// Toggles the email/OTP based login on or off
	ToggleEmailLogin(ctx context.Context, in *ToggleEmailLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteEmailLogin
	//
	// Deletes the email/OTP based login
	DeleteEmailLogin(ctx context.Context, in *DeleteEmailLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// EnableAnonLogin
	//
	// Enables anonymous login
	EnableAnonLogin(ctx context.Context, in *EnableAnonLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ToggleAnonLogin
	//
	// Toggles the anonymous login on or off
	ToggleAnonLogin(ctx context.Context, in *ToggleAnonLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteAnonLogin
	//
	// Deletes the anonymous login
	DeleteAnonLogin(ctx context.Context, in *DeleteAnonLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// EnableAppleLogin
	//
	// Enables the Apple ID based login
	EnableAppleLogin(ctx context.Context, in *EnableAppleLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ToggleAppleLogin
	//
	// Toggles the Apple ID based login on or off
	ToggleAppleLogin(ctx context.Context, in *ToggleAppleLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// EnableFacebookLogin
	//
	// Enables the facebook based login
	EnableFacebookLogin(ctx context.Context, in *EnableFacebookLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ToggleFacebookLogin
	//
	// Toggles the facebook based login on or off
	ToggleFacebookLogin(ctx context.Context, in *ToggleFacebookLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteFacebookLogin
	//
	// Deletes the facebook based login
	DeleteFacebookLogin(ctx context.Context, in *DeleteFacebookLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// EnableGoogleLogin
	//
	// Enables the Google ID based login
	EnableGoogleLogin(ctx context.Context, in *EnableGoogleLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ToggleGoogleLogin
	//
	// Toggles the Google ID based login on or off
	ToggleGoogleLogin(ctx context.Context, in *ToggleGoogleLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteGoogleLogin
	//
	// Deletes the Google ID based login
	DeleteGoogleLogin(ctx context.Context, in *DeleteGoogleLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// EnableSteamLogin
	//
	// Enables the Steam based login
	EnableSteamLogin(ctx context.Context, in *EnableSteamLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ToggleSteamLogin
	//
	// Toggles the Steam based login on or off
	ToggleSteamLogin(ctx context.Context, in *ToggleSteamLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteSteamLogin
	//
	// Deletes the Steam based login
	DeleteSteamLogin(ctx context.Context, in *DeleteSteamLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// EnableXboxLogin
	//
	// Enables the Steam based login
	EnableXboxLogin(ctx context.Context, in *EnableXboxLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ToggleXboxLogin
	//
	// Toggles the Xbox based login on or off
	ToggleXboxLogin(ctx context.Context, in *ToggleXboxLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteXboxLogin
	//
	// Deletes the Xbox based login
	DeleteXboxLogin(ctx context.Context, in *DeleteXboxLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// EnableEpicLogin
	//
	// Enables the Steam based login
	EnableEpicLogin(ctx context.Context, in *EnableEpicLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ToggleEpicLogin
	//
	// Toggles the Epic based login on or off
	ToggleEpicLogin(ctx context.Context, in *ToggleEpicLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteEpicLogin
	//
	// Deletes the Epic based login
	DeleteEpicLogin(ctx context.Context, in *DeleteEpicLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// EnableDiscordLogin
	//
	// Enables the Discord based login
	EnableDiscordLogin(ctx context.Context, in *EnableDiscordLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ToggleDiscordLogin
	//
	// Toggles the Discord based login on or off
	ToggleDiscordLogin(ctx context.Context, in *ToggleDiscordLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteDiscordLogin
	//
	// Deletes the Discord based login
	DeleteDiscordLogin(ctx context.Context, in *DeleteDiscordLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// EnableEmailPasswordLogin
	//
	// Enables the email, password based login
	EnableEmailPasswordLogin(ctx context.Context, in *EnableEmailPasswordLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ToggleEmailPasswordLogin
	//
	// Toggles the email, password based login on or off
	ToggleEmailPasswordLogin(ctx context.Context, in *ToggleEmailPasswordLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteEmailPasswordLogin
	//
	// Deletes the email, password based login
	DeleteEmailPasswordLogin(ctx context.Context, in *DeleteEmailPasswordLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// EnableUsernamePasswordLogin
	//
	// Enables the username, password based login
	EnableUsernamePasswordLogin(ctx context.Context, in *EnableUsernamePasswordLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ToggleUsernamePasswordLogin
	//
	// Toggles the username, password based login on or off
	ToggleUsernamePasswordLogin(ctx context.Context, in *ToggleUsernamePasswordLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteUsernamePasswordLogin
	//
	// Deletes the username, password based login
	DeleteUsernamePasswordLogin(ctx context.Context, in *DeleteUsernamePasswordLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// EnableAppVerify
	//
	// Enables the app verify
	EnableAppVerify(ctx context.Context, in *EnableAppVerifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DisableAppVerify
	//
	// Disables the app verify
	DisableAppVerify(ctx context.Context, in *DisableAppVerifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpdateSessionTokenValidity
	//
	// Updates the session token validity time
	UpdateSessionTokenValidity(ctx context.Context, in *UpdateSessionTokenValidityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ExportSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SettingsImportExportData, error)
	ImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ValidateImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*SettingsImportExportData, error)
	SuspendUser(ctx context.Context, in *SuspendUserRequest, opts ...grpc.CallOption) (*SuspendUserResponse, error)
	// EnableAppAuth
	//
	// Enables app auth
	EnableAppAuth(ctx context.Context, in *EnableAppAuthRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DisableAppAuth
	//
	// Disables app auth
	DisableAppAuth(ctx context.Context, in *DisableAppAuthRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateAppKey
	//
	// Creates a new app key
	CreateAppKey(ctx context.Context, in *CreateAppKeyRequest, opts ...grpc.CallOption) (*AppKey, error)
	// GetAppKeys
	//
	// Gets name & last used at details for the app key
	GetAppKeys(ctx context.Context, in *GetAppKeysRequest, opts ...grpc.CallOption) (*GetAppKeysResponse, error)
	// DeleteAppKey
	//
	// Deletes an active app key
	DeleteAppKey(ctx context.Context, in *DeleteAppKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ValidateAppKey
	//
	// Validates an app key
	ValidateAppKey(ctx context.Context, in *ValidateAppKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// LogUserEngagementMetrics
	//
	// Logs the user engagement metrics like dau, mau, installs etc.
	LogUserEngagmentMetrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetEmailTemplate
	//
	// Gets the email template used for otp
	GetEmailTemplates(ctx context.Context, in *GetEmailTemplatesRequest, opts ...grpc.CallOption) (*GetEmailTemplatesResponse, error)
	// UpdateEmailTemplate
	//
	// Updates the email template used for otp
	UpdateEmailTemplate(ctx context.Context, in *EmailTemplate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteEmailTemplate
	//
	// Delete the custom email template used for otp
	DeleteEmailTemplate(ctx context.Context, in *DeleteEmailTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateApiKey(ctx context.Context, in *CreateApiKeyRequest, opts ...grpc.CallOption) (*CreateApiKeyResponse, error)
	GetApiKeys(ctx context.Context, in *GetApiKeysRequest, opts ...grpc.CallOption) (*GetApiKeysResponse, error)
	DeleteApiKey(ctx context.Context, in *DeleteApiKeyRequest, opts ...grpc.CallOption) (*DeleteApiKeyResponse, error)
	UpdateApiKey(ctx context.Context, in *UpdateApiKeyRequest, opts ...grpc.CallOption) (*UpdateApiKeyResponse, error)
	UpdateUserAuthRestrictions(ctx context.Context, in *UpdateUserAuthRestrictionsRequest, opts ...grpc.CallOption) (*UpdateUserAuthRestrictionsResponse, error)
	GetUserAuthRestrictions(ctx context.Context, in *GetUserAuthRestrictionsRequest, opts ...grpc.CallOption) (*GetUserAuthRestrictionsResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) InviteUser(ctx context.Context, in *InviteUserRequest, opts ...grpc.CallOption) (*InviteUserResponse, error) {
	out := new(InviteUserResponse)
	err := c.cc.Invoke(ctx, AuthService_InviteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetEmailsByUserIds(ctx context.Context, in *GetEmailsByUserIdsRequest, opts ...grpc.CallOption) (*GetEmailsByUserIdsResponse, error) {
	out := new(GetEmailsByUserIdsResponse)
	err := c.cc.Invoke(ctx, AuthService_GetEmailsByUserIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, AuthService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, AuthService_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) BanUser(ctx context.Context, in *BanUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_BanUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UnbanUser(ctx context.Context, in *UnbanUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_UnbanUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetUserIdsByLoginIds(ctx context.Context, in *GetUserIdsByLoginIdsRequest, opts ...grpc.CallOption) (*GetUserIdsByLoginIdsResponse, error) {
	out := new(GetUserIdsByLoginIdsResponse)
	err := c.cc.Invoke(ctx, AuthService_GetUserIdsByLoginIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, AuthService_GetUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetUserData(ctx context.Context, in *GetUserDataRequest, opts ...grpc.CallOption) (*GetUserDataResponse, error) {
	out := new(GetUserDataResponse)
	err := c.cc.Invoke(ctx, AuthService_GetUserData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteUserData(ctx context.Context, in *DeleteUserDataRequest, opts ...grpc.CallOption) (*DeleteUserDataResponse, error) {
	out := new(DeleteUserDataResponse)
	err := c.cc.Invoke(ctx, AuthService_DeleteUserData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DisassociateLogin(ctx context.Context, in *DisassociateLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DisassociateLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Otp(ctx context.Context, in *OtpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_Otp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EmailLogin(ctx context.Context, in *EmailLoginRequest, opts ...grpc.CallOption) (*EmailLoginResponse, error) {
	out := new(EmailLoginResponse)
	err := c.cc.Invoke(ctx, AuthService_EmailLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AnonLogin(ctx context.Context, in *AnonLoginRequest, opts ...grpc.CallOption) (*AnonLoginResponse, error) {
	out := new(AnonLoginResponse)
	err := c.cc.Invoke(ctx, AuthService_AnonLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AppleLogin(ctx context.Context, in *AppleLoginRequest, opts ...grpc.CallOption) (*AppleLoginResponse, error) {
	out := new(AppleLoginResponse)
	err := c.cc.Invoke(ctx, AuthService_AppleLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) FacebookLogin(ctx context.Context, in *FacebookLoginRequest, opts ...grpc.CallOption) (*FacebookLoginResponse, error) {
	out := new(FacebookLoginResponse)
	err := c.cc.Invoke(ctx, AuthService_FacebookLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GoogleLogin(ctx context.Context, in *GoogleLoginRequest, opts ...grpc.CallOption) (*GoogleLoginResponse, error) {
	out := new(GoogleLoginResponse)
	err := c.cc.Invoke(ctx, AuthService_GoogleLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SteamLogin(ctx context.Context, in *SteamLoginRequest, opts ...grpc.CallOption) (*SteamLoginResponse, error) {
	out := new(SteamLoginResponse)
	err := c.cc.Invoke(ctx, AuthService_SteamLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SteamOpenIdLogin(ctx context.Context, in *SteamOpenIdLoginRequest, opts ...grpc.CallOption) (*SteamLoginResponse, error) {
	out := new(SteamLoginResponse)
	err := c.cc.Invoke(ctx, AuthService_SteamOpenIdLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SteamSessionTicketLogin(ctx context.Context, in *SteamSessionTicketLoginRequest, opts ...grpc.CallOption) (*SteamLoginResponse, error) {
	out := new(SteamLoginResponse)
	err := c.cc.Invoke(ctx, AuthService_SteamSessionTicketLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) XboxLogin(ctx context.Context, in *XboxLoginRequest, opts ...grpc.CallOption) (*XboxLoginResponse, error) {
	out := new(XboxLoginResponse)
	err := c.cc.Invoke(ctx, AuthService_XboxLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EpicLogin(ctx context.Context, in *EpicLoginRequest, opts ...grpc.CallOption) (*EpicLoginResponse, error) {
	out := new(EpicLoginResponse)
	err := c.cc.Invoke(ctx, AuthService_EpicLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DiscordLogin(ctx context.Context, in *DiscordLoginRequest, opts ...grpc.CallOption) (*DiscordLoginResponse, error) {
	out := new(DiscordLoginResponse)
	err := c.cc.Invoke(ctx, AuthService_DiscordLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EmailPasswordLogin(ctx context.Context, in *EmailPasswordLoginRequest, opts ...grpc.CallOption) (*EmailPasswordLoginResponse, error) {
	out := new(EmailPasswordLoginResponse)
	err := c.cc.Invoke(ctx, AuthService_EmailPasswordLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error) {
	out := new(VerifyEmailResponse)
	err := c.cc.Invoke(ctx, AuthService_VerifyEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RecoverEmailAccount(ctx context.Context, in *RecoverEmailAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_RecoverEmailAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateEmailPassword(ctx context.Context, in *UpdateEmailPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_UpdateEmailPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UsernamePasswordLogin(ctx context.Context, in *UsernamePasswordLoginRequest, opts ...grpc.CallOption) (*UsernamePasswordLoginResponse, error) {
	out := new(UsernamePasswordLoginResponse)
	err := c.cc.Invoke(ctx, AuthService_UsernamePasswordLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetUsernameAvailability(ctx context.Context, in *GetUsernameAvailabilityRequest, opts ...grpc.CallOption) (*GetUsernameAvailabilityResponse, error) {
	out := new(GetUsernameAvailabilityResponse)
	err := c.cc.Invoke(ctx, AuthService_GetUsernameAvailability_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateUsernamePassword(ctx context.Context, in *UpdateUsernamePasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_UpdateUsernamePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ResetUsernamePassword(ctx context.Context, in *ResetUsernamePasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_ResetUsernamePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AppVerify(ctx context.Context, in *AppVerifyRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, AuthService_AppVerify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AssociateLogins(ctx context.Context, in *AssociateLoginsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_AssociateLogins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error) {
	out := new(RefreshResponse)
	err := c.cc.Invoke(ctx, AuthService_Refresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	err := c.cc.Invoke(ctx, AuthService_Validate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ValidateInternal(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateInternalResponse, error) {
	out := new(ValidateInternalResponse)
	err := c.cc.Invoke(ctx, AuthService_ValidateInternal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ValidateApiKey(ctx context.Context, in *ValidateApiKeyRequest, opts ...grpc.CallOption) (*ValidateApiKeyResponse, error) {
	out := new(ValidateApiKeyResponse)
	err := c.cc.Invoke(ctx, AuthService_ValidateApiKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteSessions(ctx context.Context, in *DeleteSessionsRequest, opts ...grpc.CallOption) (*DeleteSessionsResponse, error) {
	out := new(DeleteSessionsResponse)
	err := c.cc.Invoke(ctx, AuthService_DeleteSessions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*GetSettingsResponse, error) {
	out := new(GetSettingsResponse)
	err := c.cc.Invoke(ctx, AuthService_GetSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EnableEmailLogin(ctx context.Context, in *EnableEmailLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_EnableEmailLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ToggleEmailLogin(ctx context.Context, in *ToggleEmailLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_ToggleEmailLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteEmailLogin(ctx context.Context, in *DeleteEmailLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteEmailLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EnableAnonLogin(ctx context.Context, in *EnableAnonLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_EnableAnonLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ToggleAnonLogin(ctx context.Context, in *ToggleAnonLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_ToggleAnonLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAnonLogin(ctx context.Context, in *DeleteAnonLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteAnonLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EnableAppleLogin(ctx context.Context, in *EnableAppleLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_EnableAppleLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ToggleAppleLogin(ctx context.Context, in *ToggleAppleLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_ToggleAppleLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EnableFacebookLogin(ctx context.Context, in *EnableFacebookLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_EnableFacebookLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ToggleFacebookLogin(ctx context.Context, in *ToggleFacebookLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_ToggleFacebookLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteFacebookLogin(ctx context.Context, in *DeleteFacebookLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteFacebookLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EnableGoogleLogin(ctx context.Context, in *EnableGoogleLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_EnableGoogleLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ToggleGoogleLogin(ctx context.Context, in *ToggleGoogleLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_ToggleGoogleLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteGoogleLogin(ctx context.Context, in *DeleteGoogleLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteGoogleLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EnableSteamLogin(ctx context.Context, in *EnableSteamLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_EnableSteamLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ToggleSteamLogin(ctx context.Context, in *ToggleSteamLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_ToggleSteamLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteSteamLogin(ctx context.Context, in *DeleteSteamLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteSteamLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EnableXboxLogin(ctx context.Context, in *EnableXboxLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_EnableXboxLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ToggleXboxLogin(ctx context.Context, in *ToggleXboxLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_ToggleXboxLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteXboxLogin(ctx context.Context, in *DeleteXboxLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteXboxLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EnableEpicLogin(ctx context.Context, in *EnableEpicLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_EnableEpicLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ToggleEpicLogin(ctx context.Context, in *ToggleEpicLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_ToggleEpicLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteEpicLogin(ctx context.Context, in *DeleteEpicLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteEpicLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EnableDiscordLogin(ctx context.Context, in *EnableDiscordLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_EnableDiscordLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ToggleDiscordLogin(ctx context.Context, in *ToggleDiscordLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_ToggleDiscordLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteDiscordLogin(ctx context.Context, in *DeleteDiscordLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteDiscordLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EnableEmailPasswordLogin(ctx context.Context, in *EnableEmailPasswordLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_EnableEmailPasswordLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ToggleEmailPasswordLogin(ctx context.Context, in *ToggleEmailPasswordLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_ToggleEmailPasswordLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteEmailPasswordLogin(ctx context.Context, in *DeleteEmailPasswordLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteEmailPasswordLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EnableUsernamePasswordLogin(ctx context.Context, in *EnableUsernamePasswordLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_EnableUsernamePasswordLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ToggleUsernamePasswordLogin(ctx context.Context, in *ToggleUsernamePasswordLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_ToggleUsernamePasswordLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteUsernamePasswordLogin(ctx context.Context, in *DeleteUsernamePasswordLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteUsernamePasswordLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EnableAppVerify(ctx context.Context, in *EnableAppVerifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_EnableAppVerify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DisableAppVerify(ctx context.Context, in *DisableAppVerifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DisableAppVerify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateSessionTokenValidity(ctx context.Context, in *UpdateSessionTokenValidityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_UpdateSessionTokenValidity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ExportSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SettingsImportExportData, error) {
	out := new(SettingsImportExportData)
	err := c.cc.Invoke(ctx, AuthService_ExportSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_ImportSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ValidateImportSettings(ctx context.Context, in *SettingsImportExportData, opts ...grpc.CallOption) (*SettingsImportExportData, error) {
	out := new(SettingsImportExportData)
	err := c.cc.Invoke(ctx, AuthService_ValidateImportSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SuspendUser(ctx context.Context, in *SuspendUserRequest, opts ...grpc.CallOption) (*SuspendUserResponse, error) {
	out := new(SuspendUserResponse)
	err := c.cc.Invoke(ctx, AuthService_SuspendUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EnableAppAuth(ctx context.Context, in *EnableAppAuthRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_EnableAppAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DisableAppAuth(ctx context.Context, in *DisableAppAuthRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DisableAppAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateAppKey(ctx context.Context, in *CreateAppKeyRequest, opts ...grpc.CallOption) (*AppKey, error) {
	out := new(AppKey)
	err := c.cc.Invoke(ctx, AuthService_CreateAppKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetAppKeys(ctx context.Context, in *GetAppKeysRequest, opts ...grpc.CallOption) (*GetAppKeysResponse, error) {
	out := new(GetAppKeysResponse)
	err := c.cc.Invoke(ctx, AuthService_GetAppKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteAppKey(ctx context.Context, in *DeleteAppKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteAppKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ValidateAppKey(ctx context.Context, in *ValidateAppKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_ValidateAppKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) LogUserEngagmentMetrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_LogUserEngagmentMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetEmailTemplates(ctx context.Context, in *GetEmailTemplatesRequest, opts ...grpc.CallOption) (*GetEmailTemplatesResponse, error) {
	out := new(GetEmailTemplatesResponse)
	err := c.cc.Invoke(ctx, AuthService_GetEmailTemplates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateEmailTemplate(ctx context.Context, in *EmailTemplate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_UpdateEmailTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteEmailTemplate(ctx context.Context, in *DeleteEmailTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_DeleteEmailTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateApiKey(ctx context.Context, in *CreateApiKeyRequest, opts ...grpc.CallOption) (*CreateApiKeyResponse, error) {
	out := new(CreateApiKeyResponse)
	err := c.cc.Invoke(ctx, AuthService_CreateApiKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetApiKeys(ctx context.Context, in *GetApiKeysRequest, opts ...grpc.CallOption) (*GetApiKeysResponse, error) {
	out := new(GetApiKeysResponse)
	err := c.cc.Invoke(ctx, AuthService_GetApiKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteApiKey(ctx context.Context, in *DeleteApiKeyRequest, opts ...grpc.CallOption) (*DeleteApiKeyResponse, error) {
	out := new(DeleteApiKeyResponse)
	err := c.cc.Invoke(ctx, AuthService_DeleteApiKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateApiKey(ctx context.Context, in *UpdateApiKeyRequest, opts ...grpc.CallOption) (*UpdateApiKeyResponse, error) {
	out := new(UpdateApiKeyResponse)
	err := c.cc.Invoke(ctx, AuthService_UpdateApiKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateUserAuthRestrictions(ctx context.Context, in *UpdateUserAuthRestrictionsRequest, opts ...grpc.CallOption) (*UpdateUserAuthRestrictionsResponse, error) {
	out := new(UpdateUserAuthRestrictionsResponse)
	err := c.cc.Invoke(ctx, AuthService_UpdateUserAuthRestrictions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetUserAuthRestrictions(ctx context.Context, in *GetUserAuthRestrictionsRequest, opts ...grpc.CallOption) (*GetUserAuthRestrictionsResponse, error) {
	out := new(GetUserAuthRestrictionsResponse)
	err := c.cc.Invoke(ctx, AuthService_GetUserAuthRestrictions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	// InviteUser
	//
	// InviteUser Invites a new user based on the email specified
	InviteUser(context.Context, *InviteUserRequest) (*InviteUserResponse, error)
	GetEmailsByUserIds(context.Context, *GetEmailsByUserIdsRequest) (*GetEmailsByUserIdsResponse, error)
	// GetUser
	//
	// GetUser Retrieves a user based on username or user_id
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	BanUser(context.Context, *BanUserRequest) (*emptypb.Empty, error)
	UnbanUser(context.Context, *UnbanUserRequest) (*emptypb.Empty, error)
	// GetUserIdsByLoginIds
	//
	// GetUserIdsByLoginIds Retrieves multiple user IDs based on login ID and login type
	GetUserIdsByLoginIds(context.Context, *GetUserIdsByLoginIdsRequest) (*GetUserIdsByLoginIdsResponse, error)
	// GetUsers
	//
	// GetUsers Retrieves multiple users based on username
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	// DeleteUser
	//
	// DeleteUser Deletes the user based on a user ID
	DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error)
	// GetUserData
	GetUserData(context.Context, *GetUserDataRequest) (*GetUserDataResponse, error)
	// DeleteUserData
	DeleteUserData(context.Context, *DeleteUserDataRequest) (*DeleteUserDataResponse, error)
	// DisassociateLogin
	DisassociateLogin(context.Context, *DisassociateLoginRequest) (*emptypb.Empty, error)
	// Otp
	//
	// Generates an OTP and sends to the email for login
	Otp(context.Context, *OtpRequest) (*emptypb.Empty, error)
	// EmailLogin
	//
	// EmailLogin Logs in the user based on the OTP credentials specified and returns a session
	EmailLogin(context.Context, *EmailLoginRequest) (*EmailLoginResponse, error)
	// AnonLogin
	//
	// AnonLogin Logs in the user based on the anon auth specified and returns a session
	AnonLogin(context.Context, *AnonLoginRequest) (*AnonLoginResponse, error)
	// AppleLogin
	//
	// Logs in the user based on the apple credential token specified and returns a session
	AppleLogin(context.Context, *AppleLoginRequest) (*AppleLoginResponse, error)
	// FacebookLogin
	//
	// Logs in the user based on the facebook credential token specified and returns a session
	FacebookLogin(context.Context, *FacebookLoginRequest) (*FacebookLoginResponse, error)
	// GoogleLogin
	//
	// Logs in the user based on the google credential token specified and returns a session
	GoogleLogin(context.Context, *GoogleLoginRequest) (*GoogleLoginResponse, error)
	// SteamLogin
	//
	// Logs in the user based on the steam token specified and returns a session
	SteamLogin(context.Context, *SteamLoginRequest) (*SteamLoginResponse, error)
	// SteamOpenIdLogin
	//
	// Logs in the user based on the steam open ID parameters specified and returns a session
	SteamOpenIdLogin(context.Context, *SteamOpenIdLoginRequest) (*SteamLoginResponse, error)
	// SteamSessionTicketLogin
	//
	// Logs in the user based on the steam session ticket specified and returns a session
	SteamSessionTicketLogin(context.Context, *SteamSessionTicketLoginRequest) (*SteamLoginResponse, error)
	// XboxLogin
	//
	// Logs in the user based on the steam token specified and returns a session
	XboxLogin(context.Context, *XboxLoginRequest) (*XboxLoginResponse, error)
	// EpicLogin
	//
	// Logs in the user based on the steam token specified and returns a session
	EpicLogin(context.Context, *EpicLoginRequest) (*EpicLoginResponse, error)
	// DiscordLogin
	//
	// Logs in the user based on the discord token specified and returns a session
	DiscordLogin(context.Context, *DiscordLoginRequest) (*DiscordLoginResponse, error)
	// EmailPasswordLogin
	//
	// Logs in the user based on the email and password specified and returns a session
	EmailPasswordLogin(context.Context, *EmailPasswordLoginRequest) (*EmailPasswordLoginResponse, error)
	VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error)
	RecoverEmailAccount(context.Context, *RecoverEmailAccountRequest) (*emptypb.Empty, error)
	UpdateEmailPassword(context.Context, *UpdateEmailPasswordRequest) (*emptypb.Empty, error)
	// UsernamePasswordLogin
	//
	// Logs in the user based on the username and password specified and returns a session
	UsernamePasswordLogin(context.Context, *UsernamePasswordLoginRequest) (*UsernamePasswordLoginResponse, error)
	GetUsernameAvailability(context.Context, *GetUsernameAvailabilityRequest) (*GetUsernameAvailabilityResponse, error)
	// UpdateUsernamePassword
	//
	// Updates the username and password of the user
	UpdateUsernamePassword(context.Context, *UpdateUsernamePasswordRequest) (*emptypb.Empty, error)
	ResetUsernamePassword(context.Context, *ResetUsernamePasswordRequest) (*emptypb.Empty, error)
	AppVerify(context.Context, *AppVerifyRequest) (*httpbody.HttpBody, error)
	// AssociateLogins
	//
	// AssociateLogins associates two logins based on their session tokens
	AssociateLogins(context.Context, *AssociateLoginsRequest) (*emptypb.Empty, error)
	// Refresh
	//
	// Refreshes the session
	Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error)
	// Logout
	//
	// Logout Ends the current session of the user
	Logout(context.Context, *LogoutRequest) (*emptypb.Empty, error)
	// Validate
	//
	// Validate validates the session of the user and returns the user info
	Validate(context.Context, *ValidateRequest) (*ValidateResponse, error)
	// ValidateInternal
	//
	// ValidateInternal validates the session of the user and returns the user info
	ValidateInternal(context.Context, *ValidateRequest) (*ValidateInternalResponse, error)
	ValidateApiKey(context.Context, *ValidateApiKeyRequest) (*ValidateApiKeyResponse, error)
	// DeleteInvalidatedSessions
	//
	// Deletes invalidated sessions
	DeleteSessions(context.Context, *DeleteSessionsRequest) (*DeleteSessionsResponse, error)
	// GetSettings
	//
	// Shows the user settings for admin tools
	GetSettings(context.Context, *GetSettingsRequest) (*GetSettingsResponse, error)
	// EnableEmailLogin
	//
	// Enables the email, OTP based login
	EnableEmailLogin(context.Context, *EnableEmailLoginRequest) (*emptypb.Empty, error)
	// ToggleEmailLogin
	//
	// Toggles the email/OTP based login on or off
	ToggleEmailLogin(context.Context, *ToggleEmailLoginRequest) (*emptypb.Empty, error)
	// DeleteEmailLogin
	//
	// Deletes the email/OTP based login
	DeleteEmailLogin(context.Context, *DeleteEmailLoginRequest) (*emptypb.Empty, error)
	// EnableAnonLogin
	//
	// Enables anonymous login
	EnableAnonLogin(context.Context, *EnableAnonLoginRequest) (*emptypb.Empty, error)
	// ToggleAnonLogin
	//
	// Toggles the anonymous login on or off
	ToggleAnonLogin(context.Context, *ToggleAnonLoginRequest) (*emptypb.Empty, error)
	// DeleteAnonLogin
	//
	// Deletes the anonymous login
	DeleteAnonLogin(context.Context, *DeleteAnonLoginRequest) (*emptypb.Empty, error)
	// EnableAppleLogin
	//
	// Enables the Apple ID based login
	EnableAppleLogin(context.Context, *EnableAppleLoginRequest) (*emptypb.Empty, error)
	// ToggleAppleLogin
	//
	// Toggles the Apple ID based login on or off
	ToggleAppleLogin(context.Context, *ToggleAppleLoginRequest) (*emptypb.Empty, error)
	// EnableFacebookLogin
	//
	// Enables the facebook based login
	EnableFacebookLogin(context.Context, *EnableFacebookLoginRequest) (*emptypb.Empty, error)
	// ToggleFacebookLogin
	//
	// Toggles the facebook based login on or off
	ToggleFacebookLogin(context.Context, *ToggleFacebookLoginRequest) (*emptypb.Empty, error)
	// DeleteFacebookLogin
	//
	// Deletes the facebook based login
	DeleteFacebookLogin(context.Context, *DeleteFacebookLoginRequest) (*emptypb.Empty, error)
	// EnableGoogleLogin
	//
	// Enables the Google ID based login
	EnableGoogleLogin(context.Context, *EnableGoogleLoginRequest) (*emptypb.Empty, error)
	// ToggleGoogleLogin
	//
	// Toggles the Google ID based login on or off
	ToggleGoogleLogin(context.Context, *ToggleGoogleLoginRequest) (*emptypb.Empty, error)
	// DeleteGoogleLogin
	//
	// Deletes the Google ID based login
	DeleteGoogleLogin(context.Context, *DeleteGoogleLoginRequest) (*emptypb.Empty, error)
	// EnableSteamLogin
	//
	// Enables the Steam based login
	EnableSteamLogin(context.Context, *EnableSteamLoginRequest) (*emptypb.Empty, error)
	// ToggleSteamLogin
	//
	// Toggles the Steam based login on or off
	ToggleSteamLogin(context.Context, *ToggleSteamLoginRequest) (*emptypb.Empty, error)
	// DeleteSteamLogin
	//
	// Deletes the Steam based login
	DeleteSteamLogin(context.Context, *DeleteSteamLoginRequest) (*emptypb.Empty, error)
	// EnableXboxLogin
	//
	// Enables the Steam based login
	EnableXboxLogin(context.Context, *EnableXboxLoginRequest) (*emptypb.Empty, error)
	// ToggleXboxLogin
	//
	// Toggles the Xbox based login on or off
	ToggleXboxLogin(context.Context, *ToggleXboxLoginRequest) (*emptypb.Empty, error)
	// DeleteXboxLogin
	//
	// Deletes the Xbox based login
	DeleteXboxLogin(context.Context, *DeleteXboxLoginRequest) (*emptypb.Empty, error)
	// EnableEpicLogin
	//
	// Enables the Steam based login
	EnableEpicLogin(context.Context, *EnableEpicLoginRequest) (*emptypb.Empty, error)
	// ToggleEpicLogin
	//
	// Toggles the Epic based login on or off
	ToggleEpicLogin(context.Context, *ToggleEpicLoginRequest) (*emptypb.Empty, error)
	// DeleteEpicLogin
	//
	// Deletes the Epic based login
	DeleteEpicLogin(context.Context, *DeleteEpicLoginRequest) (*emptypb.Empty, error)
	// EnableDiscordLogin
	//
	// Enables the Discord based login
	EnableDiscordLogin(context.Context, *EnableDiscordLoginRequest) (*emptypb.Empty, error)
	// ToggleDiscordLogin
	//
	// Toggles the Discord based login on or off
	ToggleDiscordLogin(context.Context, *ToggleDiscordLoginRequest) (*emptypb.Empty, error)
	// DeleteDiscordLogin
	//
	// Deletes the Discord based login
	DeleteDiscordLogin(context.Context, *DeleteDiscordLoginRequest) (*emptypb.Empty, error)
	// EnableEmailPasswordLogin
	//
	// Enables the email, password based login
	EnableEmailPasswordLogin(context.Context, *EnableEmailPasswordLoginRequest) (*emptypb.Empty, error)
	// ToggleEmailPasswordLogin
	//
	// Toggles the email, password based login on or off
	ToggleEmailPasswordLogin(context.Context, *ToggleEmailPasswordLoginRequest) (*emptypb.Empty, error)
	// DeleteEmailPasswordLogin
	//
	// Deletes the email, password based login
	DeleteEmailPasswordLogin(context.Context, *DeleteEmailPasswordLoginRequest) (*emptypb.Empty, error)
	// EnableUsernamePasswordLogin
	//
	// Enables the username, password based login
	EnableUsernamePasswordLogin(context.Context, *EnableUsernamePasswordLoginRequest) (*emptypb.Empty, error)
	// ToggleUsernamePasswordLogin
	//
	// Toggles the username, password based login on or off
	ToggleUsernamePasswordLogin(context.Context, *ToggleUsernamePasswordLoginRequest) (*emptypb.Empty, error)
	// DeleteUsernamePasswordLogin
	//
	// Deletes the username, password based login
	DeleteUsernamePasswordLogin(context.Context, *DeleteUsernamePasswordLoginRequest) (*emptypb.Empty, error)
	// EnableAppVerify
	//
	// Enables the app verify
	EnableAppVerify(context.Context, *EnableAppVerifyRequest) (*emptypb.Empty, error)
	// DisableAppVerify
	//
	// Disables the app verify
	DisableAppVerify(context.Context, *DisableAppVerifyRequest) (*emptypb.Empty, error)
	// UpdateSessionTokenValidity
	//
	// Updates the session token validity time
	UpdateSessionTokenValidity(context.Context, *UpdateSessionTokenValidityRequest) (*emptypb.Empty, error)
	ExportSettings(context.Context, *emptypb.Empty) (*SettingsImportExportData, error)
	ImportSettings(context.Context, *SettingsImportExportData) (*emptypb.Empty, error)
	ValidateImportSettings(context.Context, *SettingsImportExportData) (*SettingsImportExportData, error)
	SuspendUser(context.Context, *SuspendUserRequest) (*SuspendUserResponse, error)
	// EnableAppAuth
	//
	// Enables app auth
	EnableAppAuth(context.Context, *EnableAppAuthRequest) (*emptypb.Empty, error)
	// DisableAppAuth
	//
	// Disables app auth
	DisableAppAuth(context.Context, *DisableAppAuthRequest) (*emptypb.Empty, error)
	// CreateAppKey
	//
	// Creates a new app key
	CreateAppKey(context.Context, *CreateAppKeyRequest) (*AppKey, error)
	// GetAppKeys
	//
	// Gets name & last used at details for the app key
	GetAppKeys(context.Context, *GetAppKeysRequest) (*GetAppKeysResponse, error)
	// DeleteAppKey
	//
	// Deletes an active app key
	DeleteAppKey(context.Context, *DeleteAppKeyRequest) (*emptypb.Empty, error)
	// ValidateAppKey
	//
	// Validates an app key
	ValidateAppKey(context.Context, *ValidateAppKeyRequest) (*emptypb.Empty, error)
	// LogUserEngagementMetrics
	//
	// Logs the user engagement metrics like dau, mau, installs etc.
	LogUserEngagmentMetrics(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// GetEmailTemplate
	//
	// Gets the email template used for otp
	GetEmailTemplates(context.Context, *GetEmailTemplatesRequest) (*GetEmailTemplatesResponse, error)
	// UpdateEmailTemplate
	//
	// Updates the email template used for otp
	UpdateEmailTemplate(context.Context, *EmailTemplate) (*emptypb.Empty, error)
	// DeleteEmailTemplate
	//
	// Delete the custom email template used for otp
	DeleteEmailTemplate(context.Context, *DeleteEmailTemplateRequest) (*emptypb.Empty, error)
	CreateApiKey(context.Context, *CreateApiKeyRequest) (*CreateApiKeyResponse, error)
	GetApiKeys(context.Context, *GetApiKeysRequest) (*GetApiKeysResponse, error)
	DeleteApiKey(context.Context, *DeleteApiKeyRequest) (*DeleteApiKeyResponse, error)
	UpdateApiKey(context.Context, *UpdateApiKeyRequest) (*UpdateApiKeyResponse, error)
	UpdateUserAuthRestrictions(context.Context, *UpdateUserAuthRestrictionsRequest) (*UpdateUserAuthRestrictionsResponse, error)
	GetUserAuthRestrictions(context.Context, *GetUserAuthRestrictionsRequest) (*GetUserAuthRestrictionsResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) InviteUser(context.Context, *InviteUserRequest) (*InviteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteUser not implemented")
}
func (UnimplementedAuthServiceServer) GetEmailsByUserIds(context.Context, *GetEmailsByUserIdsRequest) (*GetEmailsByUserIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailsByUserIds not implemented")
}
func (UnimplementedAuthServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAuthServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAuthServiceServer) BanUser(context.Context, *BanUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanUser not implemented")
}
func (UnimplementedAuthServiceServer) UnbanUser(context.Context, *UnbanUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbanUser not implemented")
}
func (UnimplementedAuthServiceServer) GetUserIdsByLoginIds(context.Context, *GetUserIdsByLoginIdsRequest) (*GetUserIdsByLoginIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIdsByLoginIds not implemented")
}
func (UnimplementedAuthServiceServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedAuthServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAuthServiceServer) GetUserData(context.Context, *GetUserDataRequest) (*GetUserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserData not implemented")
}
func (UnimplementedAuthServiceServer) DeleteUserData(context.Context, *DeleteUserDataRequest) (*DeleteUserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserData not implemented")
}
func (UnimplementedAuthServiceServer) DisassociateLogin(context.Context, *DisassociateLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisassociateLogin not implemented")
}
func (UnimplementedAuthServiceServer) Otp(context.Context, *OtpRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Otp not implemented")
}
func (UnimplementedAuthServiceServer) EmailLogin(context.Context, *EmailLoginRequest) (*EmailLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailLogin not implemented")
}
func (UnimplementedAuthServiceServer) AnonLogin(context.Context, *AnonLoginRequest) (*AnonLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnonLogin not implemented")
}
func (UnimplementedAuthServiceServer) AppleLogin(context.Context, *AppleLoginRequest) (*AppleLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppleLogin not implemented")
}
func (UnimplementedAuthServiceServer) FacebookLogin(context.Context, *FacebookLoginRequest) (*FacebookLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FacebookLogin not implemented")
}
func (UnimplementedAuthServiceServer) GoogleLogin(context.Context, *GoogleLoginRequest) (*GoogleLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoogleLogin not implemented")
}
func (UnimplementedAuthServiceServer) SteamLogin(context.Context, *SteamLoginRequest) (*SteamLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SteamLogin not implemented")
}
func (UnimplementedAuthServiceServer) SteamOpenIdLogin(context.Context, *SteamOpenIdLoginRequest) (*SteamLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SteamOpenIdLogin not implemented")
}
func (UnimplementedAuthServiceServer) SteamSessionTicketLogin(context.Context, *SteamSessionTicketLoginRequest) (*SteamLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SteamSessionTicketLogin not implemented")
}
func (UnimplementedAuthServiceServer) XboxLogin(context.Context, *XboxLoginRequest) (*XboxLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method XboxLogin not implemented")
}
func (UnimplementedAuthServiceServer) EpicLogin(context.Context, *EpicLoginRequest) (*EpicLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpicLogin not implemented")
}
func (UnimplementedAuthServiceServer) DiscordLogin(context.Context, *DiscordLoginRequest) (*DiscordLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscordLogin not implemented")
}
func (UnimplementedAuthServiceServer) EmailPasswordLogin(context.Context, *EmailPasswordLoginRequest) (*EmailPasswordLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailPasswordLogin not implemented")
}
func (UnimplementedAuthServiceServer) VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedAuthServiceServer) RecoverEmailAccount(context.Context, *RecoverEmailAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverEmailAccount not implemented")
}
func (UnimplementedAuthServiceServer) UpdateEmailPassword(context.Context, *UpdateEmailPasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailPassword not implemented")
}
func (UnimplementedAuthServiceServer) UsernamePasswordLogin(context.Context, *UsernamePasswordLoginRequest) (*UsernamePasswordLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsernamePasswordLogin not implemented")
}
func (UnimplementedAuthServiceServer) GetUsernameAvailability(context.Context, *GetUsernameAvailabilityRequest) (*GetUsernameAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsernameAvailability not implemented")
}
func (UnimplementedAuthServiceServer) UpdateUsernamePassword(context.Context, *UpdateUsernamePasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUsernamePassword not implemented")
}
func (UnimplementedAuthServiceServer) ResetUsernamePassword(context.Context, *ResetUsernamePasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetUsernamePassword not implemented")
}
func (UnimplementedAuthServiceServer) AppVerify(context.Context, *AppVerifyRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppVerify not implemented")
}
func (UnimplementedAuthServiceServer) AssociateLogins(context.Context, *AssociateLoginsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssociateLogins not implemented")
}
func (UnimplementedAuthServiceServer) Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedAuthServiceServer) Logout(context.Context, *LogoutRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAuthServiceServer) Validate(context.Context, *ValidateRequest) (*ValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedAuthServiceServer) ValidateInternal(context.Context, *ValidateRequest) (*ValidateInternalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateInternal not implemented")
}
func (UnimplementedAuthServiceServer) ValidateApiKey(context.Context, *ValidateApiKeyRequest) (*ValidateApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateApiKey not implemented")
}
func (UnimplementedAuthServiceServer) DeleteSessions(context.Context, *DeleteSessionsRequest) (*DeleteSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSessions not implemented")
}
func (UnimplementedAuthServiceServer) GetSettings(context.Context, *GetSettingsRequest) (*GetSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettings not implemented")
}
func (UnimplementedAuthServiceServer) EnableEmailLogin(context.Context, *EnableEmailLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableEmailLogin not implemented")
}
func (UnimplementedAuthServiceServer) ToggleEmailLogin(context.Context, *ToggleEmailLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleEmailLogin not implemented")
}
func (UnimplementedAuthServiceServer) DeleteEmailLogin(context.Context, *DeleteEmailLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmailLogin not implemented")
}
func (UnimplementedAuthServiceServer) EnableAnonLogin(context.Context, *EnableAnonLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableAnonLogin not implemented")
}
func (UnimplementedAuthServiceServer) ToggleAnonLogin(context.Context, *ToggleAnonLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleAnonLogin not implemented")
}
func (UnimplementedAuthServiceServer) DeleteAnonLogin(context.Context, *DeleteAnonLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnonLogin not implemented")
}
func (UnimplementedAuthServiceServer) EnableAppleLogin(context.Context, *EnableAppleLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableAppleLogin not implemented")
}
func (UnimplementedAuthServiceServer) ToggleAppleLogin(context.Context, *ToggleAppleLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleAppleLogin not implemented")
}
func (UnimplementedAuthServiceServer) EnableFacebookLogin(context.Context, *EnableFacebookLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableFacebookLogin not implemented")
}
func (UnimplementedAuthServiceServer) ToggleFacebookLogin(context.Context, *ToggleFacebookLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleFacebookLogin not implemented")
}
func (UnimplementedAuthServiceServer) DeleteFacebookLogin(context.Context, *DeleteFacebookLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFacebookLogin not implemented")
}
func (UnimplementedAuthServiceServer) EnableGoogleLogin(context.Context, *EnableGoogleLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableGoogleLogin not implemented")
}
func (UnimplementedAuthServiceServer) ToggleGoogleLogin(context.Context, *ToggleGoogleLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleGoogleLogin not implemented")
}
func (UnimplementedAuthServiceServer) DeleteGoogleLogin(context.Context, *DeleteGoogleLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGoogleLogin not implemented")
}
func (UnimplementedAuthServiceServer) EnableSteamLogin(context.Context, *EnableSteamLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableSteamLogin not implemented")
}
func (UnimplementedAuthServiceServer) ToggleSteamLogin(context.Context, *ToggleSteamLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleSteamLogin not implemented")
}
func (UnimplementedAuthServiceServer) DeleteSteamLogin(context.Context, *DeleteSteamLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSteamLogin not implemented")
}
func (UnimplementedAuthServiceServer) EnableXboxLogin(context.Context, *EnableXboxLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableXboxLogin not implemented")
}
func (UnimplementedAuthServiceServer) ToggleXboxLogin(context.Context, *ToggleXboxLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleXboxLogin not implemented")
}
func (UnimplementedAuthServiceServer) DeleteXboxLogin(context.Context, *DeleteXboxLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteXboxLogin not implemented")
}
func (UnimplementedAuthServiceServer) EnableEpicLogin(context.Context, *EnableEpicLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableEpicLogin not implemented")
}
func (UnimplementedAuthServiceServer) ToggleEpicLogin(context.Context, *ToggleEpicLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleEpicLogin not implemented")
}
func (UnimplementedAuthServiceServer) DeleteEpicLogin(context.Context, *DeleteEpicLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEpicLogin not implemented")
}
func (UnimplementedAuthServiceServer) EnableDiscordLogin(context.Context, *EnableDiscordLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableDiscordLogin not implemented")
}
func (UnimplementedAuthServiceServer) ToggleDiscordLogin(context.Context, *ToggleDiscordLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleDiscordLogin not implemented")
}
func (UnimplementedAuthServiceServer) DeleteDiscordLogin(context.Context, *DeleteDiscordLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDiscordLogin not implemented")
}
func (UnimplementedAuthServiceServer) EnableEmailPasswordLogin(context.Context, *EnableEmailPasswordLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableEmailPasswordLogin not implemented")
}
func (UnimplementedAuthServiceServer) ToggleEmailPasswordLogin(context.Context, *ToggleEmailPasswordLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleEmailPasswordLogin not implemented")
}
func (UnimplementedAuthServiceServer) DeleteEmailPasswordLogin(context.Context, *DeleteEmailPasswordLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmailPasswordLogin not implemented")
}
func (UnimplementedAuthServiceServer) EnableUsernamePasswordLogin(context.Context, *EnableUsernamePasswordLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableUsernamePasswordLogin not implemented")
}
func (UnimplementedAuthServiceServer) ToggleUsernamePasswordLogin(context.Context, *ToggleUsernamePasswordLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleUsernamePasswordLogin not implemented")
}
func (UnimplementedAuthServiceServer) DeleteUsernamePasswordLogin(context.Context, *DeleteUsernamePasswordLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUsernamePasswordLogin not implemented")
}
func (UnimplementedAuthServiceServer) EnableAppVerify(context.Context, *EnableAppVerifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableAppVerify not implemented")
}
func (UnimplementedAuthServiceServer) DisableAppVerify(context.Context, *DisableAppVerifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableAppVerify not implemented")
}
func (UnimplementedAuthServiceServer) UpdateSessionTokenValidity(context.Context, *UpdateSessionTokenValidityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSessionTokenValidity not implemented")
}
func (UnimplementedAuthServiceServer) ExportSettings(context.Context, *emptypb.Empty) (*SettingsImportExportData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportSettings not implemented")
}
func (UnimplementedAuthServiceServer) ImportSettings(context.Context, *SettingsImportExportData) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportSettings not implemented")
}
func (UnimplementedAuthServiceServer) ValidateImportSettings(context.Context, *SettingsImportExportData) (*SettingsImportExportData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateImportSettings not implemented")
}
func (UnimplementedAuthServiceServer) SuspendUser(context.Context, *SuspendUserRequest) (*SuspendUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendUser not implemented")
}
func (UnimplementedAuthServiceServer) EnableAppAuth(context.Context, *EnableAppAuthRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableAppAuth not implemented")
}
func (UnimplementedAuthServiceServer) DisableAppAuth(context.Context, *DisableAppAuthRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableAppAuth not implemented")
}
func (UnimplementedAuthServiceServer) CreateAppKey(context.Context, *CreateAppKeyRequest) (*AppKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppKey not implemented")
}
func (UnimplementedAuthServiceServer) GetAppKeys(context.Context, *GetAppKeysRequest) (*GetAppKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppKeys not implemented")
}
func (UnimplementedAuthServiceServer) DeleteAppKey(context.Context, *DeleteAppKeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppKey not implemented")
}
func (UnimplementedAuthServiceServer) ValidateAppKey(context.Context, *ValidateAppKeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAppKey not implemented")
}
func (UnimplementedAuthServiceServer) LogUserEngagmentMetrics(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogUserEngagmentMetrics not implemented")
}
func (UnimplementedAuthServiceServer) GetEmailTemplates(context.Context, *GetEmailTemplatesRequest) (*GetEmailTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailTemplates not implemented")
}
func (UnimplementedAuthServiceServer) UpdateEmailTemplate(context.Context, *EmailTemplate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailTemplate not implemented")
}
func (UnimplementedAuthServiceServer) DeleteEmailTemplate(context.Context, *DeleteEmailTemplateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmailTemplate not implemented")
}
func (UnimplementedAuthServiceServer) CreateApiKey(context.Context, *CreateApiKeyRequest) (*CreateApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApiKey not implemented")
}
func (UnimplementedAuthServiceServer) GetApiKeys(context.Context, *GetApiKeysRequest) (*GetApiKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiKeys not implemented")
}
func (UnimplementedAuthServiceServer) DeleteApiKey(context.Context, *DeleteApiKeyRequest) (*DeleteApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApiKey not implemented")
}
func (UnimplementedAuthServiceServer) UpdateApiKey(context.Context, *UpdateApiKeyRequest) (*UpdateApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApiKey not implemented")
}
func (UnimplementedAuthServiceServer) UpdateUserAuthRestrictions(context.Context, *UpdateUserAuthRestrictionsRequest) (*UpdateUserAuthRestrictionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAuthRestrictions not implemented")
}
func (UnimplementedAuthServiceServer) GetUserAuthRestrictions(context.Context, *GetUserAuthRestrictionsRequest) (*GetUserAuthRestrictionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAuthRestrictions not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_InviteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).InviteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_InviteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).InviteUser(ctx, req.(*InviteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetEmailsByUserIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailsByUserIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetEmailsByUserIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetEmailsByUserIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetEmailsByUserIds(ctx, req.(*GetEmailsByUserIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_BanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).BanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_BanUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).BanUser(ctx, req.(*BanUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UnbanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbanUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UnbanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UnbanUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UnbanUser(ctx, req.(*UnbanUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetUserIdsByLoginIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIdsByLoginIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetUserIdsByLoginIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetUserIdsByLoginIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetUserIdsByLoginIds(ctx, req.(*GetUserIdsByLoginIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetUserData(ctx, req.(*GetUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteUserData(ctx, req.(*DeleteUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DisassociateLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisassociateLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DisassociateLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DisassociateLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DisassociateLogin(ctx, req.(*DisassociateLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Otp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Otp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Otp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Otp(ctx, req.(*OtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EmailLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EmailLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_EmailLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EmailLogin(ctx, req.(*EmailLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AnonLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnonLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AnonLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AnonLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AnonLogin(ctx, req.(*AnonLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AppleLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppleLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AppleLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AppleLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AppleLogin(ctx, req.(*AppleLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_FacebookLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FacebookLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).FacebookLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_FacebookLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).FacebookLogin(ctx, req.(*FacebookLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GoogleLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoogleLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GoogleLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GoogleLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GoogleLogin(ctx, req.(*GoogleLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SteamLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SteamLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SteamLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SteamLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SteamLogin(ctx, req.(*SteamLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SteamOpenIdLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SteamOpenIdLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SteamOpenIdLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SteamOpenIdLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SteamOpenIdLogin(ctx, req.(*SteamOpenIdLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SteamSessionTicketLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SteamSessionTicketLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SteamSessionTicketLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SteamSessionTicketLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SteamSessionTicketLogin(ctx, req.(*SteamSessionTicketLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_XboxLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XboxLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).XboxLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_XboxLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).XboxLogin(ctx, req.(*XboxLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EpicLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EpicLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EpicLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_EpicLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EpicLogin(ctx, req.(*EpicLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DiscordLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscordLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DiscordLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DiscordLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DiscordLogin(ctx, req.(*DiscordLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EmailPasswordLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailPasswordLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EmailPasswordLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_EmailPasswordLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EmailPasswordLogin(ctx, req.(*EmailPasswordLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyEmail(ctx, req.(*VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RecoverEmailAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverEmailAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RecoverEmailAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RecoverEmailAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RecoverEmailAccount(ctx, req.(*RecoverEmailAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateEmailPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateEmailPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateEmailPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateEmailPassword(ctx, req.(*UpdateEmailPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UsernamePasswordLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernamePasswordLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UsernamePasswordLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UsernamePasswordLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UsernamePasswordLogin(ctx, req.(*UsernamePasswordLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetUsernameAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsernameAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetUsernameAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetUsernameAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetUsernameAvailability(ctx, req.(*GetUsernameAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateUsernamePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUsernamePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateUsernamePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateUsernamePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateUsernamePassword(ctx, req.(*UpdateUsernamePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ResetUsernamePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetUsernamePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ResetUsernamePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ResetUsernamePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ResetUsernamePassword(ctx, req.(*ResetUsernamePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AppVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AppVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AppVerify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AppVerify(ctx, req.(*AppVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AssociateLogins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociateLoginsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AssociateLogins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AssociateLogins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AssociateLogins(ctx, req.(*AssociateLoginsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Refresh(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Validate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ValidateInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ValidateInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ValidateInternal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ValidateInternal(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ValidateApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ValidateApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ValidateApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ValidateApiKey(ctx, req.(*ValidateApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteSessions(ctx, req.(*DeleteSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetSettings(ctx, req.(*GetSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EnableEmailLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableEmailLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EnableEmailLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_EnableEmailLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EnableEmailLogin(ctx, req.(*EnableEmailLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ToggleEmailLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleEmailLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ToggleEmailLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ToggleEmailLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ToggleEmailLogin(ctx, req.(*ToggleEmailLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteEmailLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmailLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteEmailLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteEmailLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteEmailLogin(ctx, req.(*DeleteEmailLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EnableAnonLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableAnonLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EnableAnonLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_EnableAnonLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EnableAnonLogin(ctx, req.(*EnableAnonLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ToggleAnonLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleAnonLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ToggleAnonLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ToggleAnonLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ToggleAnonLogin(ctx, req.(*ToggleAnonLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAnonLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnonLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAnonLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteAnonLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAnonLogin(ctx, req.(*DeleteAnonLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EnableAppleLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableAppleLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EnableAppleLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_EnableAppleLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EnableAppleLogin(ctx, req.(*EnableAppleLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ToggleAppleLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleAppleLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ToggleAppleLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ToggleAppleLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ToggleAppleLogin(ctx, req.(*ToggleAppleLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EnableFacebookLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableFacebookLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EnableFacebookLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_EnableFacebookLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EnableFacebookLogin(ctx, req.(*EnableFacebookLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ToggleFacebookLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleFacebookLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ToggleFacebookLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ToggleFacebookLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ToggleFacebookLogin(ctx, req.(*ToggleFacebookLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteFacebookLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFacebookLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteFacebookLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteFacebookLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteFacebookLogin(ctx, req.(*DeleteFacebookLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EnableGoogleLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableGoogleLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EnableGoogleLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_EnableGoogleLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EnableGoogleLogin(ctx, req.(*EnableGoogleLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ToggleGoogleLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleGoogleLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ToggleGoogleLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ToggleGoogleLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ToggleGoogleLogin(ctx, req.(*ToggleGoogleLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteGoogleLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGoogleLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteGoogleLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteGoogleLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteGoogleLogin(ctx, req.(*DeleteGoogleLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EnableSteamLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableSteamLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EnableSteamLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_EnableSteamLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EnableSteamLogin(ctx, req.(*EnableSteamLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ToggleSteamLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleSteamLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ToggleSteamLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ToggleSteamLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ToggleSteamLogin(ctx, req.(*ToggleSteamLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteSteamLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSteamLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteSteamLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteSteamLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteSteamLogin(ctx, req.(*DeleteSteamLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EnableXboxLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableXboxLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EnableXboxLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_EnableXboxLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EnableXboxLogin(ctx, req.(*EnableXboxLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ToggleXboxLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleXboxLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ToggleXboxLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ToggleXboxLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ToggleXboxLogin(ctx, req.(*ToggleXboxLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteXboxLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteXboxLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteXboxLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteXboxLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteXboxLogin(ctx, req.(*DeleteXboxLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EnableEpicLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableEpicLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EnableEpicLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_EnableEpicLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EnableEpicLogin(ctx, req.(*EnableEpicLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ToggleEpicLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleEpicLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ToggleEpicLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ToggleEpicLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ToggleEpicLogin(ctx, req.(*ToggleEpicLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteEpicLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEpicLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteEpicLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteEpicLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteEpicLogin(ctx, req.(*DeleteEpicLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EnableDiscordLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableDiscordLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EnableDiscordLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_EnableDiscordLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EnableDiscordLogin(ctx, req.(*EnableDiscordLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ToggleDiscordLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleDiscordLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ToggleDiscordLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ToggleDiscordLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ToggleDiscordLogin(ctx, req.(*ToggleDiscordLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteDiscordLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDiscordLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteDiscordLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteDiscordLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteDiscordLogin(ctx, req.(*DeleteDiscordLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EnableEmailPasswordLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableEmailPasswordLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EnableEmailPasswordLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_EnableEmailPasswordLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EnableEmailPasswordLogin(ctx, req.(*EnableEmailPasswordLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ToggleEmailPasswordLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleEmailPasswordLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ToggleEmailPasswordLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ToggleEmailPasswordLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ToggleEmailPasswordLogin(ctx, req.(*ToggleEmailPasswordLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteEmailPasswordLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmailPasswordLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteEmailPasswordLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteEmailPasswordLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteEmailPasswordLogin(ctx, req.(*DeleteEmailPasswordLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EnableUsernamePasswordLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableUsernamePasswordLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EnableUsernamePasswordLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_EnableUsernamePasswordLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EnableUsernamePasswordLogin(ctx, req.(*EnableUsernamePasswordLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ToggleUsernamePasswordLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleUsernamePasswordLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ToggleUsernamePasswordLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ToggleUsernamePasswordLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ToggleUsernamePasswordLogin(ctx, req.(*ToggleUsernamePasswordLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteUsernamePasswordLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUsernamePasswordLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteUsernamePasswordLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteUsernamePasswordLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteUsernamePasswordLogin(ctx, req.(*DeleteUsernamePasswordLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EnableAppVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableAppVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EnableAppVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_EnableAppVerify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EnableAppVerify(ctx, req.(*EnableAppVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DisableAppVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableAppVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DisableAppVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DisableAppVerify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DisableAppVerify(ctx, req.(*DisableAppVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateSessionTokenValidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSessionTokenValidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateSessionTokenValidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateSessionTokenValidity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateSessionTokenValidity(ctx, req.(*UpdateSessionTokenValidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ExportSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ExportSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ExportSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ExportSettings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ImportSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsImportExportData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ImportSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ImportSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ImportSettings(ctx, req.(*SettingsImportExportData))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ValidateImportSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsImportExportData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ValidateImportSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ValidateImportSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ValidateImportSettings(ctx, req.(*SettingsImportExportData))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SuspendUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SuspendUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_SuspendUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SuspendUser(ctx, req.(*SuspendUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EnableAppAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableAppAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EnableAppAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_EnableAppAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EnableAppAuth(ctx, req.(*EnableAppAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DisableAppAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableAppAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DisableAppAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DisableAppAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DisableAppAuth(ctx, req.(*DisableAppAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateAppKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateAppKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateAppKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateAppKey(ctx, req.(*CreateAppKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetAppKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAppKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetAppKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAppKeys(ctx, req.(*GetAppKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteAppKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteAppKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteAppKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteAppKey(ctx, req.(*DeleteAppKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ValidateAppKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAppKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ValidateAppKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ValidateAppKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ValidateAppKey(ctx, req.(*ValidateAppKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_LogUserEngagmentMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).LogUserEngagmentMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_LogUserEngagmentMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).LogUserEngagmentMetrics(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetEmailTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetEmailTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetEmailTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetEmailTemplates(ctx, req.(*GetEmailTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateEmailTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateEmailTemplate(ctx, req.(*EmailTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmailTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteEmailTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteEmailTemplate(ctx, req.(*DeleteEmailTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateApiKey(ctx, req.(*CreateApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetApiKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetApiKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetApiKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetApiKeys(ctx, req.(*GetApiKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteApiKey(ctx, req.(*DeleteApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateApiKey(ctx, req.(*UpdateApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateUserAuthRestrictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAuthRestrictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateUserAuthRestrictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateUserAuthRestrictions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateUserAuthRestrictions(ctx, req.(*UpdateUserAuthRestrictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetUserAuthRestrictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAuthRestrictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetUserAuthRestrictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetUserAuthRestrictions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetUserAuthRestrictions(ctx, req.(*GetUserAuthRestrictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InviteUser",
			Handler:    _AuthService_InviteUser_Handler,
		},
		{
			MethodName: "GetEmailsByUserIds",
			Handler:    _AuthService_GetEmailsByUserIds_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _AuthService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _AuthService_UpdateUser_Handler,
		},
		{
			MethodName: "BanUser",
			Handler:    _AuthService_BanUser_Handler,
		},
		{
			MethodName: "UnbanUser",
			Handler:    _AuthService_UnbanUser_Handler,
		},
		{
			MethodName: "GetUserIdsByLoginIds",
			Handler:    _AuthService_GetUserIdsByLoginIds_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _AuthService_GetUsers_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _AuthService_DeleteUser_Handler,
		},
		{
			MethodName: "GetUserData",
			Handler:    _AuthService_GetUserData_Handler,
		},
		{
			MethodName: "DeleteUserData",
			Handler:    _AuthService_DeleteUserData_Handler,
		},
		{
			MethodName: "DisassociateLogin",
			Handler:    _AuthService_DisassociateLogin_Handler,
		},
		{
			MethodName: "Otp",
			Handler:    _AuthService_Otp_Handler,
		},
		{
			MethodName: "EmailLogin",
			Handler:    _AuthService_EmailLogin_Handler,
		},
		{
			MethodName: "AnonLogin",
			Handler:    _AuthService_AnonLogin_Handler,
		},
		{
			MethodName: "AppleLogin",
			Handler:    _AuthService_AppleLogin_Handler,
		},
		{
			MethodName: "FacebookLogin",
			Handler:    _AuthService_FacebookLogin_Handler,
		},
		{
			MethodName: "GoogleLogin",
			Handler:    _AuthService_GoogleLogin_Handler,
		},
		{
			MethodName: "SteamLogin",
			Handler:    _AuthService_SteamLogin_Handler,
		},
		{
			MethodName: "SteamOpenIdLogin",
			Handler:    _AuthService_SteamOpenIdLogin_Handler,
		},
		{
			MethodName: "SteamSessionTicketLogin",
			Handler:    _AuthService_SteamSessionTicketLogin_Handler,
		},
		{
			MethodName: "XboxLogin",
			Handler:    _AuthService_XboxLogin_Handler,
		},
		{
			MethodName: "EpicLogin",
			Handler:    _AuthService_EpicLogin_Handler,
		},
		{
			MethodName: "DiscordLogin",
			Handler:    _AuthService_DiscordLogin_Handler,
		},
		{
			MethodName: "EmailPasswordLogin",
			Handler:    _AuthService_EmailPasswordLogin_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _AuthService_VerifyEmail_Handler,
		},
		{
			MethodName: "RecoverEmailAccount",
			Handler:    _AuthService_RecoverEmailAccount_Handler,
		},
		{
			MethodName: "UpdateEmailPassword",
			Handler:    _AuthService_UpdateEmailPassword_Handler,
		},
		{
			MethodName: "UsernamePasswordLogin",
			Handler:    _AuthService_UsernamePasswordLogin_Handler,
		},
		{
			MethodName: "GetUsernameAvailability",
			Handler:    _AuthService_GetUsernameAvailability_Handler,
		},
		{
			MethodName: "UpdateUsernamePassword",
			Handler:    _AuthService_UpdateUsernamePassword_Handler,
		},
		{
			MethodName: "ResetUsernamePassword",
			Handler:    _AuthService_ResetUsernamePassword_Handler,
		},
		{
			MethodName: "AppVerify",
			Handler:    _AuthService_AppVerify_Handler,
		},
		{
			MethodName: "AssociateLogins",
			Handler:    _AuthService_AssociateLogins_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _AuthService_Refresh_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AuthService_Logout_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _AuthService_Validate_Handler,
		},
		{
			MethodName: "ValidateInternal",
			Handler:    _AuthService_ValidateInternal_Handler,
		},
		{
			MethodName: "ValidateApiKey",
			Handler:    _AuthService_ValidateApiKey_Handler,
		},
		{
			MethodName: "DeleteSessions",
			Handler:    _AuthService_DeleteSessions_Handler,
		},
		{
			MethodName: "GetSettings",
			Handler:    _AuthService_GetSettings_Handler,
		},
		{
			MethodName: "EnableEmailLogin",
			Handler:    _AuthService_EnableEmailLogin_Handler,
		},
		{
			MethodName: "ToggleEmailLogin",
			Handler:    _AuthService_ToggleEmailLogin_Handler,
		},
		{
			MethodName: "DeleteEmailLogin",
			Handler:    _AuthService_DeleteEmailLogin_Handler,
		},
		{
			MethodName: "EnableAnonLogin",
			Handler:    _AuthService_EnableAnonLogin_Handler,
		},
		{
			MethodName: "ToggleAnonLogin",
			Handler:    _AuthService_ToggleAnonLogin_Handler,
		},
		{
			MethodName: "DeleteAnonLogin",
			Handler:    _AuthService_DeleteAnonLogin_Handler,
		},
		{
			MethodName: "EnableAppleLogin",
			Handler:    _AuthService_EnableAppleLogin_Handler,
		},
		{
			MethodName: "ToggleAppleLogin",
			Handler:    _AuthService_ToggleAppleLogin_Handler,
		},
		{
			MethodName: "EnableFacebookLogin",
			Handler:    _AuthService_EnableFacebookLogin_Handler,
		},
		{
			MethodName: "ToggleFacebookLogin",
			Handler:    _AuthService_ToggleFacebookLogin_Handler,
		},
		{
			MethodName: "DeleteFacebookLogin",
			Handler:    _AuthService_DeleteFacebookLogin_Handler,
		},
		{
			MethodName: "EnableGoogleLogin",
			Handler:    _AuthService_EnableGoogleLogin_Handler,
		},
		{
			MethodName: "ToggleGoogleLogin",
			Handler:    _AuthService_ToggleGoogleLogin_Handler,
		},
		{
			MethodName: "DeleteGoogleLogin",
			Handler:    _AuthService_DeleteGoogleLogin_Handler,
		},
		{
			MethodName: "EnableSteamLogin",
			Handler:    _AuthService_EnableSteamLogin_Handler,
		},
		{
			MethodName: "ToggleSteamLogin",
			Handler:    _AuthService_ToggleSteamLogin_Handler,
		},
		{
			MethodName: "DeleteSteamLogin",
			Handler:    _AuthService_DeleteSteamLogin_Handler,
		},
		{
			MethodName: "EnableXboxLogin",
			Handler:    _AuthService_EnableXboxLogin_Handler,
		},
		{
			MethodName: "ToggleXboxLogin",
			Handler:    _AuthService_ToggleXboxLogin_Handler,
		},
		{
			MethodName: "DeleteXboxLogin",
			Handler:    _AuthService_DeleteXboxLogin_Handler,
		},
		{
			MethodName: "EnableEpicLogin",
			Handler:    _AuthService_EnableEpicLogin_Handler,
		},
		{
			MethodName: "ToggleEpicLogin",
			Handler:    _AuthService_ToggleEpicLogin_Handler,
		},
		{
			MethodName: "DeleteEpicLogin",
			Handler:    _AuthService_DeleteEpicLogin_Handler,
		},
		{
			MethodName: "EnableDiscordLogin",
			Handler:    _AuthService_EnableDiscordLogin_Handler,
		},
		{
			MethodName: "ToggleDiscordLogin",
			Handler:    _AuthService_ToggleDiscordLogin_Handler,
		},
		{
			MethodName: "DeleteDiscordLogin",
			Handler:    _AuthService_DeleteDiscordLogin_Handler,
		},
		{
			MethodName: "EnableEmailPasswordLogin",
			Handler:    _AuthService_EnableEmailPasswordLogin_Handler,
		},
		{
			MethodName: "ToggleEmailPasswordLogin",
			Handler:    _AuthService_ToggleEmailPasswordLogin_Handler,
		},
		{
			MethodName: "DeleteEmailPasswordLogin",
			Handler:    _AuthService_DeleteEmailPasswordLogin_Handler,
		},
		{
			MethodName: "EnableUsernamePasswordLogin",
			Handler:    _AuthService_EnableUsernamePasswordLogin_Handler,
		},
		{
			MethodName: "ToggleUsernamePasswordLogin",
			Handler:    _AuthService_ToggleUsernamePasswordLogin_Handler,
		},
		{
			MethodName: "DeleteUsernamePasswordLogin",
			Handler:    _AuthService_DeleteUsernamePasswordLogin_Handler,
		},
		{
			MethodName: "EnableAppVerify",
			Handler:    _AuthService_EnableAppVerify_Handler,
		},
		{
			MethodName: "DisableAppVerify",
			Handler:    _AuthService_DisableAppVerify_Handler,
		},
		{
			MethodName: "UpdateSessionTokenValidity",
			Handler:    _AuthService_UpdateSessionTokenValidity_Handler,
		},
		{
			MethodName: "ExportSettings",
			Handler:    _AuthService_ExportSettings_Handler,
		},
		{
			MethodName: "ImportSettings",
			Handler:    _AuthService_ImportSettings_Handler,
		},
		{
			MethodName: "ValidateImportSettings",
			Handler:    _AuthService_ValidateImportSettings_Handler,
		},
		{
			MethodName: "SuspendUser",
			Handler:    _AuthService_SuspendUser_Handler,
		},
		{
			MethodName: "EnableAppAuth",
			Handler:    _AuthService_EnableAppAuth_Handler,
		},
		{
			MethodName: "DisableAppAuth",
			Handler:    _AuthService_DisableAppAuth_Handler,
		},
		{
			MethodName: "CreateAppKey",
			Handler:    _AuthService_CreateAppKey_Handler,
		},
		{
			MethodName: "GetAppKeys",
			Handler:    _AuthService_GetAppKeys_Handler,
		},
		{
			MethodName: "DeleteAppKey",
			Handler:    _AuthService_DeleteAppKey_Handler,
		},
		{
			MethodName: "ValidateAppKey",
			Handler:    _AuthService_ValidateAppKey_Handler,
		},
		{
			MethodName: "LogUserEngagmentMetrics",
			Handler:    _AuthService_LogUserEngagmentMetrics_Handler,
		},
		{
			MethodName: "GetEmailTemplates",
			Handler:    _AuthService_GetEmailTemplates_Handler,
		},
		{
			MethodName: "UpdateEmailTemplate",
			Handler:    _AuthService_UpdateEmailTemplate_Handler,
		},
		{
			MethodName: "DeleteEmailTemplate",
			Handler:    _AuthService_DeleteEmailTemplate_Handler,
		},
		{
			MethodName: "CreateApiKey",
			Handler:    _AuthService_CreateApiKey_Handler,
		},
		{
			MethodName: "GetApiKeys",
			Handler:    _AuthService_GetApiKeys_Handler,
		},
		{
			MethodName: "DeleteApiKey",
			Handler:    _AuthService_DeleteApiKey_Handler,
		},
		{
			MethodName: "UpdateApiKey",
			Handler:    _AuthService_UpdateApiKey_Handler,
		},
		{
			MethodName: "UpdateUserAuthRestrictions",
			Handler:    _AuthService_UpdateUserAuthRestrictions_Handler,
		},
		{
			MethodName: "GetUserAuthRestrictions",
			Handler:    _AuthService_GetUserAuthRestrictions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth_services.proto",
}
