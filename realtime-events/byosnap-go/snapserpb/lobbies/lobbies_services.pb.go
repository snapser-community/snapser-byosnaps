// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v5.26.1
// source: lobbies_services.proto

package proto

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LobbiesSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time to live of a lobby in seconds.
	LobbiesLifetimeTtl int64 `protobuf:"varint,1,opt,name=lobbies_lifetime_ttl,json=lobbiesLifetimeTtl,proto3" json:"lobbies_lifetime_ttl,omitempty"`
	// The time to live of a lobby after the match has started in seconds.
	LobbiesMatchStartTtl int64 `protobuf:"varint,2,opt,name=lobbies_match_start_ttl,json=lobbiesMatchStartTtl,proto3" json:"lobbies_match_start_ttl,omitempty"`
	// The default max members of a lobby.
	LobbiesDefaultMaxMembers int64 `protobuf:"varint,3,opt,name=lobbies_default_max_members,json=lobbiesDefaultMaxMembers,proto3" json:"lobbies_default_max_members,omitempty"`
	// The default max invites of a lobby.
	LobbiesMaxInvites int64 `protobuf:"varint,4,opt,name=lobbies_max_invites,json=lobbiesMaxInvites,proto3" json:"lobbies_max_invites,omitempty"`
	// The allocation target of a lobby. Can be 'relay' or 'fleet'.
	AllocationTarget string `protobuf:"bytes,5,opt,name=allocation_target,json=allocationTarget,proto3" json:"allocation_target,omitempty"`
	// Boolean to determine ready check enabled or not before match start.
	ReadyCheckEnabled bool `protobuf:"varint,6,opt,name=ready_check_enabled,json=readyCheckEnabled,proto3" json:"ready_check_enabled,omitempty"`
	// The time to live of a lobby invite in seconds.
	LobbiesInviteTtl int64 `protobuf:"varint,7,opt,name=lobbies_invite_ttl,json=lobbiesInviteTtl,proto3" json:"lobbies_invite_ttl,omitempty"`
	// kick members upon socket disconnect event from hermes
	KickOnDisconnectEnabled bool `protobuf:"varint,8,opt,name=kick_on_disconnect_enabled,json=kickOnDisconnectEnabled,proto3" json:"kick_on_disconnect_enabled,omitempty"`
}

func (x *LobbiesSettings) Reset() {
	*x = LobbiesSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_services_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LobbiesSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LobbiesSettings) ProtoMessage() {}

func (x *LobbiesSettings) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_services_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LobbiesSettings.ProtoReflect.Descriptor instead.
func (*LobbiesSettings) Descriptor() ([]byte, []int) {
	return file_lobbies_services_proto_rawDescGZIP(), []int{0}
}

func (x *LobbiesSettings) GetLobbiesLifetimeTtl() int64 {
	if x != nil {
		return x.LobbiesLifetimeTtl
	}
	return 0
}

func (x *LobbiesSettings) GetLobbiesMatchStartTtl() int64 {
	if x != nil {
		return x.LobbiesMatchStartTtl
	}
	return 0
}

func (x *LobbiesSettings) GetLobbiesDefaultMaxMembers() int64 {
	if x != nil {
		return x.LobbiesDefaultMaxMembers
	}
	return 0
}

func (x *LobbiesSettings) GetLobbiesMaxInvites() int64 {
	if x != nil {
		return x.LobbiesMaxInvites
	}
	return 0
}

func (x *LobbiesSettings) GetAllocationTarget() string {
	if x != nil {
		return x.AllocationTarget
	}
	return ""
}

func (x *LobbiesSettings) GetReadyCheckEnabled() bool {
	if x != nil {
		return x.ReadyCheckEnabled
	}
	return false
}

func (x *LobbiesSettings) GetLobbiesInviteTtl() int64 {
	if x != nil {
		return x.LobbiesInviteTtl
	}
	return 0
}

func (x *LobbiesSettings) GetKickOnDisconnectEnabled() bool {
	if x != nil {
		return x.KickOnDisconnectEnabled
	}
	return false
}

type GetSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbiesSettings *LobbiesSettings `protobuf:"bytes,1,opt,name=lobbies_settings,json=lobbiesSettings,proto3" json:"lobbies_settings,omitempty"`
}

func (x *GetSettingsResponse) Reset() {
	*x = GetSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_services_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingsResponse) ProtoMessage() {}

func (x *GetSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_services_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingsResponse.ProtoReflect.Descriptor instead.
func (*GetSettingsResponse) Descriptor() ([]byte, []int) {
	return file_lobbies_services_proto_rawDescGZIP(), []int{1}
}

func (x *GetSettingsResponse) GetLobbiesSettings() *LobbiesSettings {
	if x != nil {
		return x.LobbiesSettings
	}
	return nil
}

type UpdateSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbiesSettings *LobbiesSettings `protobuf:"bytes,1,opt,name=lobbies_settings,json=lobbiesSettings,proto3" json:"lobbies_settings,omitempty"`
}

func (x *UpdateSettingsRequest) Reset() {
	*x = UpdateSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_services_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSettingsRequest) ProtoMessage() {}

func (x *UpdateSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_services_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSettingsRequest.ProtoReflect.Descriptor instead.
func (*UpdateSettingsRequest) Descriptor() ([]byte, []int) {
	return file_lobbies_services_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateSettingsRequest) GetLobbiesSettings() *LobbiesSettings {
	if x != nil {
		return x.LobbiesSettings
	}
	return nil
}

type UpdateSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success         bool             `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	LobbiesSettings *LobbiesSettings `protobuf:"bytes,2,opt,name=lobbies_settings,json=lobbiesSettings,proto3" json:"lobbies_settings,omitempty"`
}

func (x *UpdateSettingsResponse) Reset() {
	*x = UpdateSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_services_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSettingsResponse) ProtoMessage() {}

func (x *UpdateSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_services_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSettingsResponse.ProtoReflect.Descriptor instead.
func (*UpdateSettingsResponse) Descriptor() ([]byte, []int) {
	return file_lobbies_services_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateSettingsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateSettingsResponse) GetLobbiesSettings() *LobbiesSettings {
	if x != nil {
		return x.LobbiesSettings
	}
	return nil
}

type ToggleEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType LobbiesEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=lobbies.LobbiesEventType" json:"event_type,omitempty"`
}

func (x *ToggleEventRequest) Reset() {
	*x = ToggleEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_services_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleEventRequest) ProtoMessage() {}

func (x *ToggleEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_services_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleEventRequest.ProtoReflect.Descriptor instead.
func (*ToggleEventRequest) Descriptor() ([]byte, []int) {
	return file_lobbies_services_proto_rawDescGZIP(), []int{4}
}

func (x *ToggleEventRequest) GetEventType() LobbiesEventType {
	if x != nil {
		return x.EventType
	}
	return LobbiesEventType_UNKNOWN_EVENT_TYPE
}

type GetEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*EventInfo `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *GetEventsResponse) Reset() {
	*x = GetEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_services_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventsResponse) ProtoMessage() {}

func (x *GetEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_services_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventsResponse.ProtoReflect.Descriptor instead.
func (*GetEventsResponse) Descriptor() ([]byte, []int) {
	return file_lobbies_services_proto_rawDescGZIP(), []int{5}
}

func (x *GetEventsResponse) GetEvents() []*EventInfo {
	if x != nil {
		return x.Events
	}
	return nil
}

type EventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType   LobbiesEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=lobbies.LobbiesEventType" json:"event_type,omitempty"`
	Enabled     bool             `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	EventName   string           `protobuf:"bytes,3,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	Description string           `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *EventInfo) Reset() {
	*x = EventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_services_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventInfo) ProtoMessage() {}

func (x *EventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_services_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventInfo.ProtoReflect.Descriptor instead.
func (*EventInfo) Descriptor() ([]byte, []int) {
	return file_lobbies_services_proto_rawDescGZIP(), []int{6}
}

func (x *EventInfo) GetEventType() LobbiesEventType {
	if x != nil {
		return x.EventType
	}
	return LobbiesEventType_UNKNOWN_EVENT_TYPE
}

func (x *EventInfo) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *EventInfo) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *EventInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type SettingsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbiesSettings *LobbiesSettings `protobuf:"bytes,1,opt,name=lobbies_settings,json=lobbiesSettings,proto3" json:"lobbies_settings,omitempty"`
	EventsSettings  map[string]bool  `protobuf:"bytes,2,rep,name=events_settings,json=eventsSettings,proto3" json:"events_settings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *SettingsData) Reset() {
	*x = SettingsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_services_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingsData) ProtoMessage() {}

func (x *SettingsData) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_services_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingsData.ProtoReflect.Descriptor instead.
func (*SettingsData) Descriptor() ([]byte, []int) {
	return file_lobbies_services_proto_rawDescGZIP(), []int{7}
}

func (x *SettingsData) GetLobbiesSettings() *LobbiesSettings {
	if x != nil {
		return x.LobbiesSettings
	}
	return nil
}

func (x *SettingsData) GetEventsSettings() map[string]bool {
	if x != nil {
		return x.EventsSettings
	}
	return nil
}

type SettingsImportExportData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    string        `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Data       *SettingsData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	ExportedAt int64         `protobuf:"varint,3,opt,name=exported_at,json=exportedAt,proto3" json:"exported_at,omitempty"`
}

func (x *SettingsImportExportData) Reset() {
	*x = SettingsImportExportData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_services_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingsImportExportData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingsImportExportData) ProtoMessage() {}

func (x *SettingsImportExportData) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_services_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingsImportExportData.ProtoReflect.Descriptor instead.
func (*SettingsImportExportData) Descriptor() ([]byte, []int) {
	return file_lobbies_services_proto_rawDescGZIP(), []int{8}
}

func (x *SettingsImportExportData) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SettingsImportExportData) GetData() *SettingsData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SettingsImportExportData) GetExportedAt() int64 {
	if x != nil {
		return x.ExportedAt
	}
	return 0
}

type GetUserDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetUserDataRequest) Reset() {
	*x = GetUserDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_services_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserDataRequest) ProtoMessage() {}

func (x *GetUserDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_services_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserDataRequest.ProtoReflect.Descriptor instead.
func (*GetUserDataRequest) Descriptor() ([]byte, []int) {
	return file_lobbies_services_proto_rawDescGZIP(), []int{9}
}

func (x *GetUserDataRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetUserDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserLobbies []*Lobby `protobuf:"bytes,2,rep,name=user_lobbies,json=userLobbies,proto3" json:"user_lobbies,omitempty"`
}

func (x *GetUserDataResponse) Reset() {
	*x = GetUserDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_services_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserDataResponse) ProtoMessage() {}

func (x *GetUserDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_services_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserDataResponse.ProtoReflect.Descriptor instead.
func (*GetUserDataResponse) Descriptor() ([]byte, []int) {
	return file_lobbies_services_proto_rawDescGZIP(), []int{10}
}

func (x *GetUserDataResponse) GetUserLobbies() []*Lobby {
	if x != nil {
		return x.UserLobbies
	}
	return nil
}

type DeleteUserDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *DeleteUserDataRequest) Reset() {
	*x = DeleteUserDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_services_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserDataRequest) ProtoMessage() {}

func (x *DeleteUserDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_services_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserDataRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserDataRequest) Descriptor() ([]byte, []int) {
	return file_lobbies_services_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteUserDataRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

var File_lobbies_services_proto protoreflect.FileDescriptor

var file_lobbies_services_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65,
	0x73, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x62, 0x6f,
	0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13,
	0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x03, 0x0a, 0x0f, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x6f, 0x62, 0x62, 0x69,
	0x65, 0x73, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x74, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x4c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x74, 0x6c, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x6f, 0x62,
	0x62, 0x69, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6c, 0x6f, 0x62, 0x62,
	0x69, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x74, 0x6c,
	0x12, 0x3d, 0x0a, 0x1b, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6c, 0x6f,
	0x62, 0x62, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12,
	0x2b, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x74,
	0x74, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65,
	0x73, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x74, 0x6c, 0x12, 0x3b, 0x0a, 0x1a, 0x6b, 0x69,
	0x63, 0x6b, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x6b, 0x69, 0x63, 0x6b, 0x4f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x5a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x10, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69,
	0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x0f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x22, 0x5c, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x10,
	0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73,
	0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x0f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0x77, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x43, 0x0a, 0x10, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65,
	0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f, 0x6c, 0x6f, 0x62, 0x62, 0x69,
	0x65, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x4e, 0x0a, 0x12, 0x54, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c,
	0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3f, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x09,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0a, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xea,
	0x01, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x43, 0x0a, 0x10, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x6f, 0x62, 0x62,
	0x69, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x0f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x52, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x41, 0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x18,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x88,
	0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x72, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x59, 0x92, 0x41, 0x37, 0x32, 0x31, 0x55, 0x73, 0x65,
	0x72, 0x20, 0x49, 0x44, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x77, 0x68, 0x6f, 0x73, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x69, 0x73, 0x20,
	0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x9a, 0x02,
	0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11,
	0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a,
	0x24, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73,
	0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62,
	0x69, 0x65, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x71, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x58,
	0x92, 0x41, 0x36, 0x32, 0x30, 0x55, 0x73, 0x65, 0x72, 0x20, 0x49, 0x44, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x77, 0x68, 0x6f, 0x73, 0x65, 0x20,
	0x64, 0x61, 0x74, 0x61, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x19, 0x72,
	0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x32, 0xc5, 0x4e, 0x0a, 0x0e, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0xd2, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x2e,
	0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x6f, 0x62,
	0x62, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7e, 0x92, 0x41, 0x53, 0x12, 0x05, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x1a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32,
	0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69,
	0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54,
	0x45, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x76, 0x31,
	0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x12, 0xd4, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x18, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6c, 0x6f, 0x62, 0x62,
	0x69, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0x92, 0x41, 0x55, 0x12, 0x05, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x1a, 0x11, 0x47, 0x65, 0x74, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x20, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65,
	0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f,
	0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d,
	0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa,
	0xd2, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45,
	0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62,
	0x62, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0xdb, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x2e, 0x6c, 0x6f, 0x62, 0x62,
	0x69, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x86, 0x01, 0x92, 0x41, 0x53, 0x12, 0x05, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x1a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d,
	0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06,
	0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65,
	0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4,
	0x93, 0x02, 0x0c, 0x12, 0x0a, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x2a, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69,
	0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xdf, 0x01,
	0x0a, 0x15, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65,
	0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x8a, 0x01, 0x92, 0x41, 0x54, 0x12, 0x05, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x1a,
	0x10, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61,
	0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79,
	0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93,
	0x02, 0x0c, 0x12, 0x0a, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x1a, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62,
	0x62, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0xdc, 0x01, 0x0a, 0x13, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65,
	0x73, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4a, 0x6f, 0x69,
	0x6e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8d,
	0x01, 0x92, 0x41, 0x52, 0x12, 0x05, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x1a, 0x0e, 0x4a, 0x6f, 0x69,
	0x6e, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x6a, 0x39, 0x0a, 0x14, 0x78,
	0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a,
	0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x44, 0x45,
	0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01,
	0x2a, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x7b,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0xe8,
	0x01, 0x0a, 0x14, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65,
	0x73, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x96, 0x01, 0x92, 0x41, 0x53, 0x12, 0x05, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x1a, 0x0f, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x6a, 0x39,
	0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0c, 0x12,
	0x0a, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x28, 0x2a, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x7b,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x84, 0x02, 0x0a, 0x18, 0x41, 0x64,
	0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73,
	0x2e, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73,
	0x2e, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa6, 0x01, 0x92, 0x41, 0x5e, 0x12, 0x06, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x19, 0x41, 0x64, 0x64, 0x73, 0x20, 0x61, 0x20, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x2e,
	0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75,
	0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a,
	0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02,
	0x0c, 0x12, 0x0a, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62,
	0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x12, 0x8f, 0x02, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x21, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa8, 0x01, 0x92, 0x41, 0x63, 0x12, 0x06, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x1e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x20, 0x61,
	0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x20, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x2e, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32,
	0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69,
	0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54,
	0x45, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x2a, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f,
	0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x12, 0xb8, 0x02, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x29, 0x2e, 0x6c, 0x6f, 0x62,
	0x62, 0x69, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xb9, 0x01, 0x92, 0x41, 0x68, 0x12, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a,
	0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x62, 0x6c, 0x6f,
	0x62, 0x2e, 0x58, 0x01, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65,
	0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f,
	0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d,
	0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa,
	0xd2, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45,
	0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a, 0x01, 0x2a, 0x22, 0x31, 0x2f, 0x76, 0x31, 0x2f,
	0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0xb6, 0x02,
	0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xb4, 0x01, 0x92, 0x41, 0x62, 0x12, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x1d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6a, 0x39, 0x0a, 0x14,
	0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x44,
	0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x3a,
	0x01, 0x2a, 0x22, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f,
	0x7b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xff, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x1b, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaa, 0x01, 0x92, 0x41,
	0x5c, 0x12, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x17, 0x53, 0x65, 0x74, 0x73, 0x20,
	0x61, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x61, 0x73, 0x20, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x2e, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d,
	0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06,
	0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65,
	0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4,
	0x93, 0x02, 0x0c, 0x12, 0x0a, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a, 0x22, 0x2e, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f,
	0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x92, 0x02, 0x0a, 0x1b, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x6f,
	0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xab, 0x01, 0x92, 0x41, 0x61, 0x12, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x1c, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20,
	0x74, 0x6f, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x6a, 0x39, 0x0a, 0x14, 0x78,
	0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a,
	0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x44, 0x45,
	0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01,
	0x2a, 0x22, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x7b,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x2f, 0x7b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xf7, 0x01,
	0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x2e, 0x6c,
	0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x93, 0x01, 0x92, 0x41, 0x58, 0x12, 0x06, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x1a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x20, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65,
	0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f,
	0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d,
	0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa,
	0xd2, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45,
	0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62,
	0x62, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x95, 0x02, 0x0a, 0x1b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x44, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65,
	0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x6f, 0x62,
	0x62, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xae,
	0x01, 0x92, 0x41, 0x63, 0x12, 0x05, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x1a, 0x1f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x6a, 0x39, 0x0a, 0x14,
	0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x44,
	0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a,
	0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f,
	0x7b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2f, 0x7b, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x7d, 0x12,
	0xec, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69,
	0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x9a, 0x01, 0x92, 0x41, 0x5e, 0x12, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x1a,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x20, 0x61, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x69,
	0x6e, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09,
	0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x44, 0x45, 0x50,
	0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a,
	0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0xcd,
	0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x1b,
	0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x6f,
	0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x01, 0x92, 0x41, 0x53, 0x12,
	0x05, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x1a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x20,
	0x61, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61,
	0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x6c,
	0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x12, 0xce,
	0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x18, 0x2e, 0x6c, 0x6f,
	0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x8c, 0x01, 0x92, 0x41, 0x55, 0x12, 0x05, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x1a, 0x11, 0x47,
	0x65, 0x74, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75,
	0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a,
	0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02,
	0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12,
	0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x62,
	0x62, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0xd5, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12,
	0x1b, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c,
	0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a, 0x01, 0x92, 0x41, 0x53,
	0x12, 0x05, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x1a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73,
	0x20, 0x61, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07,
	0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x2a, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62,
	0x62, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xd9, 0x01, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x1b, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65,
	0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x8e, 0x01, 0x92, 0x41, 0x54, 0x12, 0x05, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x1a,
	0x10, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61,
	0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79,
	0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93,
	0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23,
	0x3a, 0x01, 0x2a, 0x1a, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73,
	0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f,
	0x69, 0x64, 0x7d, 0x12, 0xd6, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x62, 0x62,
	0x69, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b,
	0x01, 0x92, 0x41, 0x5f, 0x12, 0x07, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x1a, 0x19, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07,
	0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f,
	0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x8d, 0x02, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6c, 0x6f,
	0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65,
	0x73, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xa7, 0x01, 0x92, 0x41, 0x6c, 0x12, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x1a, 0x27, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6c, 0x6f, 0x62, 0x62,
	0x69, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20,
	0x61, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a,
	0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f,
	0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xd6, 0x01, 0x0a,
	0x09, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x19, 0x2e, 0x6c, 0x6f, 0x62,
	0x62, 0x69, 0x65, 0x73, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e,
	0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x91, 0x01, 0x92, 0x41, 0x52, 0x12, 0x05, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x1a, 0x0e,
	0x4a, 0x6f, 0x69, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x6a, 0x39,
	0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12,
	0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a,
	0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x6f,
	0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0xe2, 0x01, 0x0a, 0x0a, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x12, 0x1a, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9a, 0x01,
	0x92, 0x41, 0x53, 0x12, 0x05, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x1a, 0x0f, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x6a, 0x39, 0x0a, 0x14, 0x78,
	0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a,
	0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x2a, 0x2e, 0x2f, 0x76, 0x31, 0x2f,
	0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f,
	0x7b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x65, 0x61, 0x76, 0x65,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xfe, 0x01, 0x0a, 0x0e, 0x41,
	0x64, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x2e,
	0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaa,
	0x01, 0x92, 0x41, 0x5e, 0x12, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x19, 0x41, 0x64,
	0x64, 0x73, 0x20, 0x61, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x61,
	0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61,
	0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a, 0x22, 0x30, 0x2f, 0x76, 0x31, 0x2f, 0x6c,
	0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x7b,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x89, 0x02, 0x0a, 0x11,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x21, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xac, 0x01, 0x92, 0x41, 0x63, 0x12, 0x06,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x1e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x20,
	0x61, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x20,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21,
	0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70,
	0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x32, 0x2a, 0x30, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69,
	0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb2, 0x02, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbd, 0x01, 0x92,
	0x41, 0x68, 0x12, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x21, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x62, 0x6c, 0x6f, 0x62, 0x2e, 0x58, 0x01, 0x6a,
	0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74,
	0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a,
	0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08,
	0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x3a, 0x01,
	0x2a, 0x22, 0x39, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x6c,
	0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0xb0, 0x02, 0x0a,
	0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x6c, 0x6f,
	0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb8, 0x01, 0x92, 0x41, 0x62, 0x12, 0x06, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x1a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61,
	0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79,
	0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93,
	0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f,
	0x3a, 0x01, 0x2a, 0x22, 0x3a, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73,
	0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0xf9, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1b, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c,
	0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xae, 0x01, 0x92, 0x41, 0x5c,
	0x12, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x17, 0x53, 0x65, 0x74, 0x73, 0x20, 0x61,
	0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x61, 0x73, 0x20, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x2e, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61,
	0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79,
	0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93,
	0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b,
	0x3a, 0x01, 0x2a, 0x22, 0x36, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73,
	0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x8c, 0x02, 0x0a, 0x11,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x21, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaf, 0x01, 0x92, 0x41, 0x61, 0x12, 0x06,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x1c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x20,
	0x61, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x2e, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65,
	0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f,
	0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d,
	0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa,
	0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62,
	0x69, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x2f, 0x7b, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xfa, 0x01, 0x0a, 0x11, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x12, 0x21, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9d, 0x01, 0x92, 0x41, 0x5b, 0x12, 0x06, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x1a, 0x16, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x20, 0x61,
	0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x20, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x6a, 0x39, 0x0a,
	0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22,
	0x26, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0xf1, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x6c,
	0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x97, 0x01, 0x92, 0x41, 0x58, 0x12, 0x06, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x1a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x20, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65,
	0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f,
	0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d,
	0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa,
	0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73,
	0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x8c, 0x02, 0x0a, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa0, 0x01, 0x92, 0x41, 0x63, 0x12, 0x06, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x1a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x20, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x20, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32,
	0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69,
	0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65,
	0x73, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x8f, 0x02, 0x0a, 0x11, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x12, 0x21, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb2, 0x01, 0x92, 0x41, 0x63, 0x12, 0x05, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x1a, 0x1f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x20,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x2e, 0x6a, 0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32,
	0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69,
	0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x38, 0x3a, 0x01, 0x2a, 0x22, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62,
	0x62, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2f, 0x7b, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x7d, 0x12, 0xe6, 0x01, 0x0a,
	0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x2e, 0x6c, 0x6f,
	0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9e, 0x01, 0x92, 0x41, 0x5e, 0x12, 0x05, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x1a, 0x1a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x20, 0x61, 0x20, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x6a, 0x39, 0x0a,
	0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a, 0x1a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22,
	0x24, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x62,
	0x62, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x70, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x6c,
	0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0xfa, 0xd2, 0xe4, 0x93,
	0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1e, 0x2e, 0x6c, 0x6f, 0x62,
	0x62, 0x69, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6c, 0x6f, 0x62,
	0x62, 0x69, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0xfa, 0xd2, 0xe4,
	0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69,
	0x65, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x73, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1a, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0xfa, 0xd2,
	0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73,
	0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x80, 0x01, 0x0a, 0x0b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50,
	0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x1a,
	0x22, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x54,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3d, 0xfa, 0xd2, 0xe4, 0x93, 0x02,
	0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28,
	0x3a, 0x01, 0x2a, 0x1a, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73,
	0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x7f, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x21, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x32, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50,
	0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76,
	0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x0e, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x21, 0x2e, 0x6c,
	0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x35, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12,
	0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01,
	0x2a, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x9e,
	0x01, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x21, 0x2e, 0x6c, 0x6f, 0x62, 0x62,
	0x69, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x21, 0x2e, 0x6c,
	0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x3e, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x6c,
	0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x8a, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1b, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c,
	0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0xfa, 0xd2, 0xe4, 0x93,
	0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2b, 0x12, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x8a, 0x01, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1e, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x40, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12,
	0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x2a, 0x29,
	0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x12, 0xac, 0x01, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x70, 0x69, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x6c, 0x92, 0x41, 0x3b, 0x6a,
	0x39, 0x0a, 0x14, 0x78, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x75, 0x74,
	0x68, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x32, 0x1f, 0x0a, 0x06, 0x1a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x0a, 0x09, 0x1a, 0x07, 0x61, 0x70, 0x69, 0x2d, 0x6b, 0x65, 0x79, 0x0a, 0x0a,
	0x1a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09,
	0x12, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12,
	0x17, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x73, 0x70, 0x65, 0x63, 0x42, 0xc6, 0x01, 0x92, 0x41, 0x90, 0x01, 0x12,
	0x8d, 0x01, 0x0a, 0x07, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x12, 0x27, 0x41, 0x20, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x20, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0x52, 0x0a, 0x0c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x20,
	0x49, 0x6e, 0x63, 0x2e, 0x12, 0x42, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2f, 0x39, 0x35, 0x38, 0x33, 0x37, 0x37, 0x31, 0x30, 0x36, 0x37, 0x37, 0x36, 0x31,
	0x36, 0x32, 0x33, 0x30, 0x34, 0x2f, 0x39, 0x35, 0x38, 0x33, 0x37, 0x37, 0x32, 0x36, 0x31, 0x32,
	0x33, 0x35, 0x35, 0x38, 0x35, 0x30, 0x36, 0x34, 0x32, 0x05, 0x30, 0x2e, 0x31, 0x2e, 0x30, 0x5a,
	0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x65, 0x72, 0x2d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lobbies_services_proto_rawDescOnce sync.Once
	file_lobbies_services_proto_rawDescData = file_lobbies_services_proto_rawDesc
)

func file_lobbies_services_proto_rawDescGZIP() []byte {
	file_lobbies_services_proto_rawDescOnce.Do(func() {
		file_lobbies_services_proto_rawDescData = protoimpl.X.CompressGZIP(file_lobbies_services_proto_rawDescData)
	})
	return file_lobbies_services_proto_rawDescData
}

var file_lobbies_services_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_lobbies_services_proto_goTypes = []interface{}{
	(*LobbiesSettings)(nil),                    // 0: lobbies.LobbiesSettings
	(*GetSettingsResponse)(nil),                // 1: lobbies.GetSettingsResponse
	(*UpdateSettingsRequest)(nil),              // 2: lobbies.UpdateSettingsRequest
	(*UpdateSettingsResponse)(nil),             // 3: lobbies.UpdateSettingsResponse
	(*ToggleEventRequest)(nil),                 // 4: lobbies.ToggleEventRequest
	(*GetEventsResponse)(nil),                  // 5: lobbies.GetEventsResponse
	(*EventInfo)(nil),                          // 6: lobbies.EventInfo
	(*SettingsData)(nil),                       // 7: lobbies.SettingsData
	(*SettingsImportExportData)(nil),           // 8: lobbies.SettingsImportExportData
	(*GetUserDataRequest)(nil),                 // 9: lobbies.GetUserDataRequest
	(*GetUserDataResponse)(nil),                // 10: lobbies.GetUserDataResponse
	(*DeleteUserDataRequest)(nil),              // 11: lobbies.DeleteUserDataRequest
	nil,                                        // 12: lobbies.SettingsData.EventsSettingsEntry
	(LobbiesEventType)(0),                      // 13: lobbies.LobbiesEventType
	(*Lobby)(nil),                              // 14: lobbies.Lobby
	(*CreateLobbyRequest)(nil),                 // 15: lobbies.CreateLobbyRequest
	(*GetLobbyRequest)(nil),                    // 16: lobbies.GetLobbyRequest
	(*DeleteLobbyRequest)(nil),                 // 17: lobbies.DeleteLobbyRequest
	(*ModifyLobbyRequest)(nil),                 // 18: lobbies.ModifyLobbyRequest
	(*JoinLobbyRequest)(nil),                   // 19: lobbies.JoinLobbyRequest
	(*LeaveLobbyRequest)(nil),                  // 20: lobbies.LeaveLobbyRequest
	(*AddLobbyMemberRequest)(nil),              // 21: lobbies.AddLobbyMemberRequest
	(*RemoveLobbyMemberRequest)(nil),           // 22: lobbies.RemoveLobbyMemberRequest
	(*UpdateLobbyMemberMetadataRequest)(nil),   // 23: lobbies.UpdateLobbyMemberMetadataRequest
	(*UpdateLobbyMemberPlacementRequest)(nil),  // 24: lobbies.UpdateLobbyMemberPlacementRequest
	(*ReadyMemberRequest)(nil),                 // 25: lobbies.ReadyMemberRequest
	(*InviteLobbyMemberRequest)(nil),           // 26: lobbies.InviteLobbyMemberRequest
	(*ListLobbyInvitesRequest)(nil),            // 27: lobbies.ListLobbyInvitesRequest
	(*TransferOwnershipRequest)(nil),           // 28: lobbies.TransferOwnershipRequest
	(*StartMatchRequest)(nil),                  // 29: lobbies.StartMatchRequest
	(*ListLobbiesRequest)(nil),                 // 30: lobbies.ListLobbiesRequest
	(*ListLobbiesForMemberRequest)(nil),        // 31: lobbies.ListLobbiesForMemberRequest
	(*AcceptLobbyInviteRequest)(nil),           // 32: lobbies.AcceptLobbyInviteRequest
	(*ListLobbyMemberInvitesRequest)(nil),      // 33: lobbies.ListLobbyMemberInvitesRequest
	(*emptypb.Empty)(nil),                      // 34: google.protobuf.Empty
	(*CreateLobbyResponse)(nil),                // 35: lobbies.CreateLobbyResponse
	(*GetLobbyResponse)(nil),                   // 36: lobbies.GetLobbyResponse
	(*DeleteLobbyResponse)(nil),                // 37: lobbies.DeleteLobbyResponse
	(*ModifyLobbyResponse)(nil),                // 38: lobbies.ModifyLobbyResponse
	(*JoinLobbyResponse)(nil),                  // 39: lobbies.JoinLobbyResponse
	(*LeaveLobbyResponse)(nil),                 // 40: lobbies.LeaveLobbyResponse
	(*AddLobbyMemberResponse)(nil),             // 41: lobbies.AddLobbyMemberResponse
	(*RemoveLobbyMemberResponse)(nil),          // 42: lobbies.RemoveLobbyMemberResponse
	(*UpdateLobbyMemberMetadataResponse)(nil),  // 43: lobbies.UpdateLobbyMemberMetadataResponse
	(*UpdateLobbyMemberPlacementResponse)(nil), // 44: lobbies.UpdateLobbyMemberPlacementResponse
	(*ReadyMemberResponse)(nil),                // 45: lobbies.ReadyMemberResponse
	(*InviteLobbyMemberResponse)(nil),          // 46: lobbies.InviteLobbyMemberResponse
	(*ListLobbyInvitesResponse)(nil),           // 47: lobbies.ListLobbyInvitesResponse
	(*TransferOwnershipResponse)(nil),          // 48: lobbies.TransferOwnershipResponse
	(*StartMatchResponse)(nil),                 // 49: lobbies.StartMatchResponse
	(*ListLobbiesResponse)(nil),                // 50: lobbies.ListLobbiesResponse
	(*ListLobbiesForMemberResponse)(nil),       // 51: lobbies.ListLobbiesForMemberResponse
	(*AcceptLobbyInviteResponse)(nil),          // 52: lobbies.AcceptLobbyInviteResponse
	(*ListLobbyMemberInvitesResponse)(nil),     // 53: lobbies.ListLobbyMemberInvitesResponse
	(*httpbody.HttpBody)(nil),                  // 54: google.api.HttpBody
}
var file_lobbies_services_proto_depIdxs = []int32{
	0,  // 0: lobbies.GetSettingsResponse.lobbies_settings:type_name -> lobbies.LobbiesSettings
	0,  // 1: lobbies.UpdateSettingsRequest.lobbies_settings:type_name -> lobbies.LobbiesSettings
	0,  // 2: lobbies.UpdateSettingsResponse.lobbies_settings:type_name -> lobbies.LobbiesSettings
	13, // 3: lobbies.ToggleEventRequest.event_type:type_name -> lobbies.LobbiesEventType
	6,  // 4: lobbies.GetEventsResponse.events:type_name -> lobbies.EventInfo
	13, // 5: lobbies.EventInfo.event_type:type_name -> lobbies.LobbiesEventType
	0,  // 6: lobbies.SettingsData.lobbies_settings:type_name -> lobbies.LobbiesSettings
	12, // 7: lobbies.SettingsData.events_settings:type_name -> lobbies.SettingsData.EventsSettingsEntry
	7,  // 8: lobbies.SettingsImportExportData.data:type_name -> lobbies.SettingsData
	14, // 9: lobbies.GetUserDataResponse.user_lobbies:type_name -> lobbies.Lobby
	15, // 10: lobbies.LobbiesService.CreateLobbyDeprecated:input_type -> lobbies.CreateLobbyRequest
	16, // 11: lobbies.LobbiesService.GetLobbyDeprecated:input_type -> lobbies.GetLobbyRequest
	17, // 12: lobbies.LobbiesService.DeleteLobbyDeprecated:input_type -> lobbies.DeleteLobbyRequest
	18, // 13: lobbies.LobbiesService.ModifyLobbyDeprecated:input_type -> lobbies.ModifyLobbyRequest
	19, // 14: lobbies.LobbiesService.JoinLobbyDeprecated:input_type -> lobbies.JoinLobbyRequest
	20, // 15: lobbies.LobbiesService.LeaveLobbyDeprecated:input_type -> lobbies.LeaveLobbyRequest
	21, // 16: lobbies.LobbiesService.AddLobbyMemberDeprecated:input_type -> lobbies.AddLobbyMemberRequest
	22, // 17: lobbies.LobbiesService.RemoveLobbyMemberDeprecated:input_type -> lobbies.RemoveLobbyMemberRequest
	23, // 18: lobbies.LobbiesService.UpdateLobbyMemberMetadataDeprecated:input_type -> lobbies.UpdateLobbyMemberMetadataRequest
	24, // 19: lobbies.LobbiesService.UpdateLobbyMemberPlacementDeprecated:input_type -> lobbies.UpdateLobbyMemberPlacementRequest
	25, // 20: lobbies.LobbiesService.ReadyMemberDeprecated:input_type -> lobbies.ReadyMemberRequest
	26, // 21: lobbies.LobbiesService.InviteLobbyMemberDeprecated:input_type -> lobbies.InviteLobbyMemberRequest
	27, // 22: lobbies.LobbiesService.ListLobbyInvitesDeprecated:input_type -> lobbies.ListLobbyInvitesRequest
	28, // 23: lobbies.LobbiesService.TransferOwnershipDeprecated:input_type -> lobbies.TransferOwnershipRequest
	29, // 24: lobbies.LobbiesService.StartMatchDeprecated:input_type -> lobbies.StartMatchRequest
	15, // 25: lobbies.LobbiesService.CreateLobby:input_type -> lobbies.CreateLobbyRequest
	16, // 26: lobbies.LobbiesService.GetLobby:input_type -> lobbies.GetLobbyRequest
	17, // 27: lobbies.LobbiesService.DeleteLobby:input_type -> lobbies.DeleteLobbyRequest
	18, // 28: lobbies.LobbiesService.ModifyLobby:input_type -> lobbies.ModifyLobbyRequest
	30, // 29: lobbies.LobbiesService.ListLobbies:input_type -> lobbies.ListLobbiesRequest
	31, // 30: lobbies.LobbiesService.ListLobbiesForMember:input_type -> lobbies.ListLobbiesForMemberRequest
	19, // 31: lobbies.LobbiesService.JoinLobby:input_type -> lobbies.JoinLobbyRequest
	20, // 32: lobbies.LobbiesService.LeaveLobby:input_type -> lobbies.LeaveLobbyRequest
	21, // 33: lobbies.LobbiesService.AddLobbyMember:input_type -> lobbies.AddLobbyMemberRequest
	22, // 34: lobbies.LobbiesService.RemoveLobbyMember:input_type -> lobbies.RemoveLobbyMemberRequest
	23, // 35: lobbies.LobbiesService.UpdateLobbyMemberMetadata:input_type -> lobbies.UpdateLobbyMemberMetadataRequest
	24, // 36: lobbies.LobbiesService.UpdateLobbyMemberPlacement:input_type -> lobbies.UpdateLobbyMemberPlacementRequest
	25, // 37: lobbies.LobbiesService.ReadyMember:input_type -> lobbies.ReadyMemberRequest
	26, // 38: lobbies.LobbiesService.InviteLobbyMember:input_type -> lobbies.InviteLobbyMemberRequest
	32, // 39: lobbies.LobbiesService.AcceptLobbyInvite:input_type -> lobbies.AcceptLobbyInviteRequest
	27, // 40: lobbies.LobbiesService.ListLobbyInvites:input_type -> lobbies.ListLobbyInvitesRequest
	33, // 41: lobbies.LobbiesService.ListLobbyMemberInvites:input_type -> lobbies.ListLobbyMemberInvitesRequest
	28, // 42: lobbies.LobbiesService.TransferOwnership:input_type -> lobbies.TransferOwnershipRequest
	29, // 43: lobbies.LobbiesService.StartMatch:input_type -> lobbies.StartMatchRequest
	34, // 44: lobbies.LobbiesService.GetSettings:input_type -> google.protobuf.Empty
	2,  // 45: lobbies.LobbiesService.UpdateSettings:input_type -> lobbies.UpdateSettingsRequest
	34, // 46: lobbies.LobbiesService.GetEvents:input_type -> google.protobuf.Empty
	4,  // 47: lobbies.LobbiesService.EnableEvent:input_type -> lobbies.ToggleEventRequest
	4,  // 48: lobbies.LobbiesService.DisableEvent:input_type -> lobbies.ToggleEventRequest
	34, // 49: lobbies.LobbiesService.ExportSettings:input_type -> google.protobuf.Empty
	8,  // 50: lobbies.LobbiesService.ImportSettings:input_type -> lobbies.SettingsImportExportData
	8,  // 51: lobbies.LobbiesService.ValidateImportSettings:input_type -> lobbies.SettingsImportExportData
	9,  // 52: lobbies.LobbiesService.GetUserData:input_type -> lobbies.GetUserDataRequest
	11, // 53: lobbies.LobbiesService.DeleteUserData:input_type -> lobbies.DeleteUserDataRequest
	34, // 54: lobbies.LobbiesService.GetOpenApiSpec:input_type -> google.protobuf.Empty
	35, // 55: lobbies.LobbiesService.CreateLobbyDeprecated:output_type -> lobbies.CreateLobbyResponse
	36, // 56: lobbies.LobbiesService.GetLobbyDeprecated:output_type -> lobbies.GetLobbyResponse
	37, // 57: lobbies.LobbiesService.DeleteLobbyDeprecated:output_type -> lobbies.DeleteLobbyResponse
	38, // 58: lobbies.LobbiesService.ModifyLobbyDeprecated:output_type -> lobbies.ModifyLobbyResponse
	39, // 59: lobbies.LobbiesService.JoinLobbyDeprecated:output_type -> lobbies.JoinLobbyResponse
	40, // 60: lobbies.LobbiesService.LeaveLobbyDeprecated:output_type -> lobbies.LeaveLobbyResponse
	41, // 61: lobbies.LobbiesService.AddLobbyMemberDeprecated:output_type -> lobbies.AddLobbyMemberResponse
	42, // 62: lobbies.LobbiesService.RemoveLobbyMemberDeprecated:output_type -> lobbies.RemoveLobbyMemberResponse
	43, // 63: lobbies.LobbiesService.UpdateLobbyMemberMetadataDeprecated:output_type -> lobbies.UpdateLobbyMemberMetadataResponse
	44, // 64: lobbies.LobbiesService.UpdateLobbyMemberPlacementDeprecated:output_type -> lobbies.UpdateLobbyMemberPlacementResponse
	45, // 65: lobbies.LobbiesService.ReadyMemberDeprecated:output_type -> lobbies.ReadyMemberResponse
	46, // 66: lobbies.LobbiesService.InviteLobbyMemberDeprecated:output_type -> lobbies.InviteLobbyMemberResponse
	47, // 67: lobbies.LobbiesService.ListLobbyInvitesDeprecated:output_type -> lobbies.ListLobbyInvitesResponse
	48, // 68: lobbies.LobbiesService.TransferOwnershipDeprecated:output_type -> lobbies.TransferOwnershipResponse
	49, // 69: lobbies.LobbiesService.StartMatchDeprecated:output_type -> lobbies.StartMatchResponse
	35, // 70: lobbies.LobbiesService.CreateLobby:output_type -> lobbies.CreateLobbyResponse
	36, // 71: lobbies.LobbiesService.GetLobby:output_type -> lobbies.GetLobbyResponse
	37, // 72: lobbies.LobbiesService.DeleteLobby:output_type -> lobbies.DeleteLobbyResponse
	38, // 73: lobbies.LobbiesService.ModifyLobby:output_type -> lobbies.ModifyLobbyResponse
	50, // 74: lobbies.LobbiesService.ListLobbies:output_type -> lobbies.ListLobbiesResponse
	51, // 75: lobbies.LobbiesService.ListLobbiesForMember:output_type -> lobbies.ListLobbiesForMemberResponse
	39, // 76: lobbies.LobbiesService.JoinLobby:output_type -> lobbies.JoinLobbyResponse
	40, // 77: lobbies.LobbiesService.LeaveLobby:output_type -> lobbies.LeaveLobbyResponse
	41, // 78: lobbies.LobbiesService.AddLobbyMember:output_type -> lobbies.AddLobbyMemberResponse
	42, // 79: lobbies.LobbiesService.RemoveLobbyMember:output_type -> lobbies.RemoveLobbyMemberResponse
	43, // 80: lobbies.LobbiesService.UpdateLobbyMemberMetadata:output_type -> lobbies.UpdateLobbyMemberMetadataResponse
	44, // 81: lobbies.LobbiesService.UpdateLobbyMemberPlacement:output_type -> lobbies.UpdateLobbyMemberPlacementResponse
	45, // 82: lobbies.LobbiesService.ReadyMember:output_type -> lobbies.ReadyMemberResponse
	46, // 83: lobbies.LobbiesService.InviteLobbyMember:output_type -> lobbies.InviteLobbyMemberResponse
	52, // 84: lobbies.LobbiesService.AcceptLobbyInvite:output_type -> lobbies.AcceptLobbyInviteResponse
	47, // 85: lobbies.LobbiesService.ListLobbyInvites:output_type -> lobbies.ListLobbyInvitesResponse
	53, // 86: lobbies.LobbiesService.ListLobbyMemberInvites:output_type -> lobbies.ListLobbyMemberInvitesResponse
	48, // 87: lobbies.LobbiesService.TransferOwnership:output_type -> lobbies.TransferOwnershipResponse
	49, // 88: lobbies.LobbiesService.StartMatch:output_type -> lobbies.StartMatchResponse
	1,  // 89: lobbies.LobbiesService.GetSettings:output_type -> lobbies.GetSettingsResponse
	3,  // 90: lobbies.LobbiesService.UpdateSettings:output_type -> lobbies.UpdateSettingsResponse
	5,  // 91: lobbies.LobbiesService.GetEvents:output_type -> lobbies.GetEventsResponse
	34, // 92: lobbies.LobbiesService.EnableEvent:output_type -> google.protobuf.Empty
	34, // 93: lobbies.LobbiesService.DisableEvent:output_type -> google.protobuf.Empty
	8,  // 94: lobbies.LobbiesService.ExportSettings:output_type -> lobbies.SettingsImportExportData
	34, // 95: lobbies.LobbiesService.ImportSettings:output_type -> google.protobuf.Empty
	8,  // 96: lobbies.LobbiesService.ValidateImportSettings:output_type -> lobbies.SettingsImportExportData
	10, // 97: lobbies.LobbiesService.GetUserData:output_type -> lobbies.GetUserDataResponse
	34, // 98: lobbies.LobbiesService.DeleteUserData:output_type -> google.protobuf.Empty
	54, // 99: lobbies.LobbiesService.GetOpenApiSpec:output_type -> google.api.HttpBody
	55, // [55:100] is the sub-list for method output_type
	10, // [10:55] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_lobbies_services_proto_init() }
func file_lobbies_services_proto_init() {
	if File_lobbies_services_proto != nil {
		return
	}
	file_lobbies_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_lobbies_services_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LobbiesSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_services_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_services_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_services_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_services_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_services_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_services_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_services_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_services_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingsImportExportData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_services_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_services_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_services_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lobbies_services_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lobbies_services_proto_goTypes,
		DependencyIndexes: file_lobbies_services_proto_depIdxs,
		MessageInfos:      file_lobbies_services_proto_msgTypes,
	}.Build()
	File_lobbies_services_proto = out.File
	file_lobbies_services_proto_rawDesc = nil
	file_lobbies_services_proto_goTypes = nil
	file_lobbies_services_proto_depIdxs = nil
}
