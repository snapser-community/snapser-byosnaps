// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v5.26.1
// source: auth_types.proto

package proto

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AuthEventType int32

const (
	AuthEventType_UNKNOWN_EVENT_TYPE   AuthEventType = 0
	AuthEventType_AUTH_ANON_USER_ADDED AuthEventType = 1
)

// Enum value maps for AuthEventType.
var (
	AuthEventType_name = map[int32]string{
		0: "UNKNOWN_EVENT_TYPE",
		1: "AUTH_ANON_USER_ADDED",
	}
	AuthEventType_value = map[string]int32{
		"UNKNOWN_EVENT_TYPE":   0,
		"AUTH_ANON_USER_ADDED": 1,
	}
)

func (x AuthEventType) Enum() *AuthEventType {
	p := new(AuthEventType)
	*p = x
	return p
}

func (x AuthEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_auth_types_proto_enumTypes[0].Descriptor()
}

func (AuthEventType) Type() protoreflect.EnumType {
	return &file_auth_types_proto_enumTypes[0]
}

func (x AuthEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthEventType.Descriptor instead.
func (AuthEventType) EnumDescriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{0}
}

type ApiKeyState int32

const (
	ApiKeyState_API_KEY_STATE_UNSPECIFIED     ApiKeyState = 0
	ApiKeyState_API_KEY_STATE_ENABLED         ApiKeyState = 1
	ApiKeyState_API_KEY_STATE_DISABLED        ApiKeyState = 2
	ApiKeyState_API_KEY_STATE_EXPIRED         ApiKeyState = 3
	ApiKeyState_API_KEY_STATE_ROTATE_REQUIRED ApiKeyState = 4
	ApiKeyState_API_KEY_STATE_DELETED         ApiKeyState = 5
)

// Enum value maps for ApiKeyState.
var (
	ApiKeyState_name = map[int32]string{
		0: "API_KEY_STATE_UNSPECIFIED",
		1: "API_KEY_STATE_ENABLED",
		2: "API_KEY_STATE_DISABLED",
		3: "API_KEY_STATE_EXPIRED",
		4: "API_KEY_STATE_ROTATE_REQUIRED",
		5: "API_KEY_STATE_DELETED",
	}
	ApiKeyState_value = map[string]int32{
		"API_KEY_STATE_UNSPECIFIED":     0,
		"API_KEY_STATE_ENABLED":         1,
		"API_KEY_STATE_DISABLED":        2,
		"API_KEY_STATE_EXPIRED":         3,
		"API_KEY_STATE_ROTATE_REQUIRED": 4,
		"API_KEY_STATE_DELETED":         5,
	}
)

func (x ApiKeyState) Enum() *ApiKeyState {
	p := new(ApiKeyState)
	*p = x
	return p
}

func (x ApiKeyState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApiKeyState) Descriptor() protoreflect.EnumDescriptor {
	return file_auth_types_proto_enumTypes[1].Descriptor()
}

func (ApiKeyState) Type() protoreflect.EnumType {
	return &file_auth_types_proto_enumTypes[1]
}

func (x ApiKeyState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApiKeyState.Descriptor instead.
func (ApiKeyState) EnumDescriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{1}
}

type LoginType_Type int32

const (
	LoginType_UNSPECIFIED_LOGIN_TYPE LoginType_Type = 0
	LoginType_EMAIL                  LoginType_Type = 1
	LoginType_PASSWORD               LoginType_Type = 2
	LoginType_ANON                   LoginType_Type = 3
	LoginType_FACEBOOK               LoginType_Type = 4
	LoginType_GOOGLE                 LoginType_Type = 5
	LoginType_APPLE                  LoginType_Type = 6
	LoginType_STEAM                  LoginType_Type = 7
	LoginType_XBOX                   LoginType_Type = 8
	LoginType_EPIC                   LoginType_Type = 9
	LoginType_APP                    LoginType_Type = 10
	LoginType_DISCORD                LoginType_Type = 11
	LoginType_EMAIL_PASSWORD         LoginType_Type = 12
	LoginType_USERNAME_PASSWORD      LoginType_Type = 13
)

// Enum value maps for LoginType_Type.
var (
	LoginType_Type_name = map[int32]string{
		0:  "UNSPECIFIED_LOGIN_TYPE",
		1:  "EMAIL",
		2:  "PASSWORD",
		3:  "ANON",
		4:  "FACEBOOK",
		5:  "GOOGLE",
		6:  "APPLE",
		7:  "STEAM",
		8:  "XBOX",
		9:  "EPIC",
		10: "APP",
		11: "DISCORD",
		12: "EMAIL_PASSWORD",
		13: "USERNAME_PASSWORD",
	}
	LoginType_Type_value = map[string]int32{
		"UNSPECIFIED_LOGIN_TYPE": 0,
		"EMAIL":                  1,
		"PASSWORD":               2,
		"ANON":                   3,
		"FACEBOOK":               4,
		"GOOGLE":                 5,
		"APPLE":                  6,
		"STEAM":                  7,
		"XBOX":                   8,
		"EPIC":                   9,
		"APP":                    10,
		"DISCORD":                11,
		"EMAIL_PASSWORD":         12,
		"USERNAME_PASSWORD":      13,
	}
)

func (x LoginType_Type) Enum() *LoginType_Type {
	p := new(LoginType_Type)
	*p = x
	return p
}

func (x LoginType_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoginType_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_auth_types_proto_enumTypes[2].Descriptor()
}

func (LoginType_Type) Type() protoreflect.EnumType {
	return &file_auth_types_proto_enumTypes[2]
}

func (x LoginType_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoginType_Type.Descriptor instead.
func (LoginType_Type) EnumDescriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{42, 0}
}

type OtpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email              string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	ValidateUserExists bool   `protobuf:"varint,2,opt,name=validate_user_exists,json=validateUserExists,proto3" json:"validate_user_exists,omitempty"`
}

func (x *OtpRequest) Reset() {
	*x = OtpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtpRequest) ProtoMessage() {}

func (x *OtpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtpRequest.ProtoReflect.Descriptor instead.
func (*OtpRequest) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{0}
}

func (x *OtpRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *OtpRequest) GetValidateUserExists() bool {
	if x != nil {
		return x.ValidateUserExists
	}
	return false
}

type EmailLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email      string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Otp        string `protobuf:"bytes,2,opt,name=otp,proto3" json:"otp,omitempty"`
	CreateUser bool   `protobuf:"varint,3,opt,name=create_user,json=createUser,proto3" json:"create_user,omitempty"`
}

func (x *EmailLoginRequest) Reset() {
	*x = EmailLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailLoginRequest) ProtoMessage() {}

func (x *EmailLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailLoginRequest.ProtoReflect.Descriptor instead.
func (*EmailLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{1}
}

func (x *EmailLoginRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *EmailLoginRequest) GetOtp() string {
	if x != nil {
		return x.Otp
	}
	return ""
}

func (x *EmailLoginRequest) GetCreateUser() bool {
	if x != nil {
		return x.CreateUser
	}
	return false
}

type EmailLoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *EmailLoginResponse) Reset() {
	*x = EmailLoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailLoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailLoginResponse) ProtoMessage() {}

func (x *EmailLoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailLoginResponse.ProtoReflect.Descriptor instead.
func (*EmailLoginResponse) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{2}
}

func (x *EmailLoginResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type AnonLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username   string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	CreateUser bool   `protobuf:"varint,2,opt,name=create_user,json=createUser,proto3" json:"create_user,omitempty"`
}

func (x *AnonLoginRequest) Reset() {
	*x = AnonLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnonLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnonLoginRequest) ProtoMessage() {}

func (x *AnonLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnonLoginRequest.ProtoReflect.Descriptor instead.
func (*AnonLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{3}
}

func (x *AnonLoginRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AnonLoginRequest) GetCreateUser() bool {
	if x != nil {
		return x.CreateUser
	}
	return false
}

type AnonLoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *AnonLoginResponse) Reset() {
	*x = AnonLoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnonLoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnonLoginResponse) ProtoMessage() {}

func (x *AnonLoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnonLoginResponse.ProtoReflect.Descriptor instead.
func (*AnonLoginResponse) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{4}
}

func (x *AnonLoginResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type AppleLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token      string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	CreateUser bool   `protobuf:"varint,2,opt,name=create_user,json=createUser,proto3" json:"create_user,omitempty"`
}

func (x *AppleLoginRequest) Reset() {
	*x = AppleLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppleLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppleLoginRequest) ProtoMessage() {}

func (x *AppleLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppleLoginRequest.ProtoReflect.Descriptor instead.
func (*AppleLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{5}
}

func (x *AppleLoginRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AppleLoginRequest) GetCreateUser() bool {
	if x != nil {
		return x.CreateUser
	}
	return false
}

type AppleLoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *AppleLoginResponse) Reset() {
	*x = AppleLoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppleLoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppleLoginResponse) ProtoMessage() {}

func (x *AppleLoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppleLoginResponse.ProtoReflect.Descriptor instead.
func (*AppleLoginResponse) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{6}
}

func (x *AppleLoginResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type SteamLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenidParameters map[string]string `protobuf:"bytes,1,rep,name=openid_parameters,json=openidParameters,proto3" json:"openid_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreateUser       bool              `protobuf:"varint,2,opt,name=create_user,json=createUser,proto3" json:"create_user,omitempty"`
}

func (x *SteamLoginRequest) Reset() {
	*x = SteamLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SteamLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SteamLoginRequest) ProtoMessage() {}

func (x *SteamLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SteamLoginRequest.ProtoReflect.Descriptor instead.
func (*SteamLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{7}
}

func (x *SteamLoginRequest) GetOpenidParameters() map[string]string {
	if x != nil {
		return x.OpenidParameters
	}
	return nil
}

func (x *SteamLoginRequest) GetCreateUser() bool {
	if x != nil {
		return x.CreateUser
	}
	return false
}

type SteamOpenIdLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenidParameters map[string]string `protobuf:"bytes,1,rep,name=openid_parameters,json=openidParameters,proto3" json:"openid_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreateUser       bool              `protobuf:"varint,2,opt,name=create_user,json=createUser,proto3" json:"create_user,omitempty"`
}

func (x *SteamOpenIdLoginRequest) Reset() {
	*x = SteamOpenIdLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SteamOpenIdLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SteamOpenIdLoginRequest) ProtoMessage() {}

func (x *SteamOpenIdLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SteamOpenIdLoginRequest.ProtoReflect.Descriptor instead.
func (*SteamOpenIdLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{8}
}

func (x *SteamOpenIdLoginRequest) GetOpenidParameters() map[string]string {
	if x != nil {
		return x.OpenidParameters
	}
	return nil
}

func (x *SteamOpenIdLoginRequest) GetCreateUser() bool {
	if x != nil {
		return x.CreateUser
	}
	return false
}

type SteamSessionTicketLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionTicket string `protobuf:"bytes,1,opt,name=session_ticket,json=sessionTicket,proto3" json:"session_ticket,omitempty"`
	Identity      string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	CreateUser    bool   `protobuf:"varint,3,opt,name=create_user,json=createUser,proto3" json:"create_user,omitempty"`
}

func (x *SteamSessionTicketLoginRequest) Reset() {
	*x = SteamSessionTicketLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SteamSessionTicketLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SteamSessionTicketLoginRequest) ProtoMessage() {}

func (x *SteamSessionTicketLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SteamSessionTicketLoginRequest.ProtoReflect.Descriptor instead.
func (*SteamSessionTicketLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{9}
}

func (x *SteamSessionTicketLoginRequest) GetSessionTicket() string {
	if x != nil {
		return x.SessionTicket
	}
	return ""
}

func (x *SteamSessionTicketLoginRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *SteamSessionTicketLoginRequest) GetCreateUser() bool {
	if x != nil {
		return x.CreateUser
	}
	return false
}

type SteamLoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *SteamLoginResponse) Reset() {
	*x = SteamLoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SteamLoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SteamLoginResponse) ProtoMessage() {}

func (x *SteamLoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SteamLoginResponse.ProtoReflect.Descriptor instead.
func (*SteamLoginResponse) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{10}
}

func (x *SteamLoginResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type XboxLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	CreateUser  bool   `protobuf:"varint,2,opt,name=create_user,json=createUser,proto3" json:"create_user,omitempty"`
	RedirectUrl string `protobuf:"bytes,3,opt,name=redirect_url,json=redirectUrl,proto3" json:"redirect_url,omitempty"`
}

func (x *XboxLoginRequest) Reset() {
	*x = XboxLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XboxLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XboxLoginRequest) ProtoMessage() {}

func (x *XboxLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XboxLoginRequest.ProtoReflect.Descriptor instead.
func (*XboxLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{11}
}

func (x *XboxLoginRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *XboxLoginRequest) GetCreateUser() bool {
	if x != nil {
		return x.CreateUser
	}
	return false
}

func (x *XboxLoginRequest) GetRedirectUrl() string {
	if x != nil {
		return x.RedirectUrl
	}
	return ""
}

type XboxLoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *XboxLoginResponse) Reset() {
	*x = XboxLoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XboxLoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XboxLoginResponse) ProtoMessage() {}

func (x *XboxLoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XboxLoginResponse.ProtoReflect.Descriptor instead.
func (*XboxLoginResponse) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{12}
}

func (x *XboxLoginResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type EpicLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrantType    string `protobuf:"bytes,1,opt,name=grant_type,json=grantType,proto3" json:"grant_type,omitempty"`
	Code         string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	ExchangeCode string `protobuf:"bytes,3,opt,name=exchange_code,json=exchangeCode,proto3" json:"exchange_code,omitempty"`
	Username     string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Password     string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	CreateUser   bool   `protobuf:"varint,6,opt,name=create_user,json=createUser,proto3" json:"create_user,omitempty"`
}

func (x *EpicLoginRequest) Reset() {
	*x = EpicLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpicLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpicLoginRequest) ProtoMessage() {}

func (x *EpicLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpicLoginRequest.ProtoReflect.Descriptor instead.
func (*EpicLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{13}
}

func (x *EpicLoginRequest) GetGrantType() string {
	if x != nil {
		return x.GrantType
	}
	return ""
}

func (x *EpicLoginRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *EpicLoginRequest) GetExchangeCode() string {
	if x != nil {
		return x.ExchangeCode
	}
	return ""
}

func (x *EpicLoginRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *EpicLoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *EpicLoginRequest) GetCreateUser() bool {
	if x != nil {
		return x.CreateUser
	}
	return false
}

type EpicLoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *EpicLoginResponse) Reset() {
	*x = EpicLoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpicLoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpicLoginResponse) ProtoMessage() {}

func (x *EpicLoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpicLoginResponse.ProtoReflect.Descriptor instead.
func (*EpicLoginResponse) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{14}
}

func (x *EpicLoginResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type FacebookLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token      string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	CreateUser bool   `protobuf:"varint,2,opt,name=create_user,json=createUser,proto3" json:"create_user,omitempty"`
}

func (x *FacebookLoginRequest) Reset() {
	*x = FacebookLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacebookLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacebookLoginRequest) ProtoMessage() {}

func (x *FacebookLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacebookLoginRequest.ProtoReflect.Descriptor instead.
func (*FacebookLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{15}
}

func (x *FacebookLoginRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *FacebookLoginRequest) GetCreateUser() bool {
	if x != nil {
		return x.CreateUser
	}
	return false
}

type FacebookLoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *FacebookLoginResponse) Reset() {
	*x = FacebookLoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacebookLoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacebookLoginResponse) ProtoMessage() {}

func (x *FacebookLoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacebookLoginResponse.ProtoReflect.Descriptor instead.
func (*FacebookLoginResponse) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{16}
}

func (x *FacebookLoginResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type GoogleLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token      string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	CreateUser bool   `protobuf:"varint,2,opt,name=create_user,json=createUser,proto3" json:"create_user,omitempty"`
}

func (x *GoogleLoginRequest) Reset() {
	*x = GoogleLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleLoginRequest) ProtoMessage() {}

func (x *GoogleLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleLoginRequest.ProtoReflect.Descriptor instead.
func (*GoogleLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{17}
}

func (x *GoogleLoginRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GoogleLoginRequest) GetCreateUser() bool {
	if x != nil {
		return x.CreateUser
	}
	return false
}

type GoogleLoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GoogleLoginResponse) Reset() {
	*x = GoogleLoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleLoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleLoginResponse) ProtoMessage() {}

func (x *GoogleLoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleLoginResponse.ProtoReflect.Descriptor instead.
func (*GoogleLoginResponse) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{18}
}

func (x *GoogleLoginResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type DiscordLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	AccessToken string `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	CreateUser  bool   `protobuf:"varint,3,opt,name=create_user,json=createUser,proto3" json:"create_user,omitempty"`
}

func (x *DiscordLoginRequest) Reset() {
	*x = DiscordLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscordLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscordLoginRequest) ProtoMessage() {}

func (x *DiscordLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscordLoginRequest.ProtoReflect.Descriptor instead.
func (*DiscordLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{19}
}

func (x *DiscordLoginRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DiscordLoginRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *DiscordLoginRequest) GetCreateUser() bool {
	if x != nil {
		return x.CreateUser
	}
	return false
}

type DiscordLoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User        *User  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	AccessToken string `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
}

func (x *DiscordLoginResponse) Reset() {
	*x = DiscordLoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscordLoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscordLoginResponse) ProtoMessage() {}

func (x *DiscordLoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscordLoginResponse.ProtoReflect.Descriptor instead.
func (*DiscordLoginResponse) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{20}
}

func (x *DiscordLoginResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *DiscordLoginResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type EmailPasswordLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email      string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password   string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	CreateUser bool   `protobuf:"varint,3,opt,name=create_user,json=createUser,proto3" json:"create_user,omitempty"`
}

func (x *EmailPasswordLoginRequest) Reset() {
	*x = EmailPasswordLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailPasswordLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailPasswordLoginRequest) ProtoMessage() {}

func (x *EmailPasswordLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailPasswordLoginRequest.ProtoReflect.Descriptor instead.
func (*EmailPasswordLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{21}
}

func (x *EmailPasswordLoginRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *EmailPasswordLoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *EmailPasswordLoginRequest) GetCreateUser() bool {
	if x != nil {
		return x.CreateUser
	}
	return false
}

type EmailPasswordLoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User                      *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	EmailVerificationRequired bool  `protobuf:"varint,2,opt,name=email_verification_required,json=emailVerificationRequired,proto3" json:"email_verification_required,omitempty"`
}

func (x *EmailPasswordLoginResponse) Reset() {
	*x = EmailPasswordLoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailPasswordLoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailPasswordLoginResponse) ProtoMessage() {}

func (x *EmailPasswordLoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailPasswordLoginResponse.ProtoReflect.Descriptor instead.
func (*EmailPasswordLoginResponse) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{22}
}

func (x *EmailPasswordLoginResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *EmailPasswordLoginResponse) GetEmailVerificationRequired() bool {
	if x != nil {
		return x.EmailVerificationRequired
	}
	return false
}

type VerifyEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email            string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	VerificationCode string `protobuf:"bytes,2,opt,name=verification_code,json=verificationCode,proto3" json:"verification_code,omitempty"`
}

func (x *VerifyEmailRequest) Reset() {
	*x = VerifyEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyEmailRequest) ProtoMessage() {}

func (x *VerifyEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyEmailRequest.ProtoReflect.Descriptor instead.
func (*VerifyEmailRequest) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{23}
}

func (x *VerifyEmailRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *VerifyEmailRequest) GetVerificationCode() string {
	if x != nil {
		return x.VerificationCode
	}
	return ""
}

type VerifyEmailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *VerifyEmailResponse) Reset() {
	*x = VerifyEmailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyEmailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyEmailResponse) ProtoMessage() {}

func (x *VerifyEmailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyEmailResponse.ProtoReflect.Descriptor instead.
func (*VerifyEmailResponse) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{24}
}

func (x *VerifyEmailResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type RecoverEmailAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *RecoverEmailAccountRequest) Reset() {
	*x = RecoverEmailAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverEmailAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverEmailAccountRequest) ProtoMessage() {}

func (x *RecoverEmailAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverEmailAccountRequest.ProtoReflect.Descriptor instead.
func (*RecoverEmailAccountRequest) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{25}
}

func (x *RecoverEmailAccountRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type UpdateEmailPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email        string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	NewPassword  string `protobuf:"bytes,2,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
	OldPassword  string `protobuf:"bytes,3,opt,name=old_password,json=oldPassword,proto3" json:"old_password,omitempty"`
	RecoveryCode string `protobuf:"bytes,4,opt,name=recovery_code,json=recoveryCode,proto3" json:"recovery_code,omitempty"`
}

func (x *UpdateEmailPasswordRequest) Reset() {
	*x = UpdateEmailPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEmailPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEmailPasswordRequest) ProtoMessage() {}

func (x *UpdateEmailPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEmailPasswordRequest.ProtoReflect.Descriptor instead.
func (*UpdateEmailPasswordRequest) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateEmailPasswordRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdateEmailPasswordRequest) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

func (x *UpdateEmailPasswordRequest) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

func (x *UpdateEmailPasswordRequest) GetRecoveryCode() string {
	if x != nil {
		return x.RecoveryCode
	}
	return ""
}

type UsernamePasswordLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username   string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password   string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	CreateUser bool   `protobuf:"varint,3,opt,name=create_user,json=createUser,proto3" json:"create_user,omitempty"`
}

func (x *UsernamePasswordLoginRequest) Reset() {
	*x = UsernamePasswordLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsernamePasswordLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsernamePasswordLoginRequest) ProtoMessage() {}

func (x *UsernamePasswordLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsernamePasswordLoginRequest.ProtoReflect.Descriptor instead.
func (*UsernamePasswordLoginRequest) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{27}
}

func (x *UsernamePasswordLoginRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UsernamePasswordLoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UsernamePasswordLoginRequest) GetCreateUser() bool {
	if x != nil {
		return x.CreateUser
	}
	return false
}

type UsernamePasswordLoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *UsernamePasswordLoginResponse) Reset() {
	*x = UsernamePasswordLoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsernamePasswordLoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsernamePasswordLoginResponse) ProtoMessage() {}

func (x *UsernamePasswordLoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsernamePasswordLoginResponse.ProtoReflect.Descriptor instead.
func (*UsernamePasswordLoginResponse) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{28}
}

func (x *UsernamePasswordLoginResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type GetUsernameAvailabilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *GetUsernameAvailabilityRequest) Reset() {
	*x = GetUsernameAvailabilityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsernameAvailabilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsernameAvailabilityRequest) ProtoMessage() {}

func (x *GetUsernameAvailabilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsernameAvailabilityRequest.ProtoReflect.Descriptor instead.
func (*GetUsernameAvailabilityRequest) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{29}
}

func (x *GetUsernameAvailabilityRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type GetUsernameAvailabilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available bool `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
}

func (x *GetUsernameAvailabilityResponse) Reset() {
	*x = GetUsernameAvailabilityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsernameAvailabilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsernameAvailabilityResponse) ProtoMessage() {}

func (x *GetUsernameAvailabilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsernameAvailabilityResponse.ProtoReflect.Descriptor instead.
func (*GetUsernameAvailabilityResponse) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{30}
}

func (x *GetUsernameAvailabilityResponse) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

type UpdateUsernamePasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username    string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	NewPassword string `protobuf:"bytes,2,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
	OldPassword string `protobuf:"bytes,3,opt,name=old_password,json=oldPassword,proto3" json:"old_password,omitempty"`
}

func (x *UpdateUsernamePasswordRequest) Reset() {
	*x = UpdateUsernamePasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUsernamePasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUsernamePasswordRequest) ProtoMessage() {}

func (x *UpdateUsernamePasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUsernamePasswordRequest.ProtoReflect.Descriptor instead.
func (*UpdateUsernamePasswordRequest) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateUsernamePasswordRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UpdateUsernamePasswordRequest) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

func (x *UpdateUsernamePasswordRequest) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

type ResetUsernamePasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username    string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	NewPassword string `protobuf:"bytes,2,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
}

func (x *ResetUsernamePasswordRequest) Reset() {
	*x = ResetUsernamePasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetUsernamePasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetUsernamePasswordRequest) ProtoMessage() {}

func (x *ResetUsernamePasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetUsernamePasswordRequest.ProtoReflect.Descriptor instead.
func (*ResetUsernamePasswordRequest) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{32}
}

func (x *ResetUsernamePasswordRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ResetUsernamePasswordRequest) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

type AppVerifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	SessionToken string `protobuf:"bytes,2,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	ClientSecret string `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
}

func (x *AppVerifyRequest) Reset() {
	*x = AppVerifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVerifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVerifyRequest) ProtoMessage() {}

func (x *AppVerifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVerifyRequest.ProtoReflect.Descriptor instead.
func (*AppVerifyRequest) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{33}
}

func (x *AppVerifyRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AppVerifyRequest) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *AppVerifyRequest) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

type AssociateLoginsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeepUserToken    string `protobuf:"bytes,1,opt,name=keep_user_token,json=keepUserToken,proto3" json:"keep_user_token,omitempty"`
	DiscardUserToken string `protobuf:"bytes,2,opt,name=discard_user_token,json=discardUserToken,proto3" json:"discard_user_token,omitempty"`
}

func (x *AssociateLoginsRequest) Reset() {
	*x = AssociateLoginsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssociateLoginsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssociateLoginsRequest) ProtoMessage() {}

func (x *AssociateLoginsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssociateLoginsRequest.ProtoReflect.Descriptor instead.
func (*AssociateLoginsRequest) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{34}
}

func (x *AssociateLoginsRequest) GetKeepUserToken() string {
	if x != nil {
		return x.KeepUserToken
	}
	return ""
}

func (x *AssociateLoginsRequest) GetDiscardUserToken() string {
	if x != nil {
		return x.DiscardUserToken
	}
	return ""
}

type RefreshRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken string `protobuf:"bytes,1,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
}

func (x *RefreshRequest) Reset() {
	*x = RefreshRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshRequest) ProtoMessage() {}

func (x *RefreshRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshRequest.ProtoReflect.Descriptor instead.
func (*RefreshRequest) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{35}
}

func (x *RefreshRequest) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

type RefreshResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *RefreshResponse) Reset() {
	*x = RefreshResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshResponse) ProtoMessage() {}

func (x *RefreshResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshResponse.ProtoReflect.Descriptor instead.
func (*RefreshResponse) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{36}
}

func (x *RefreshResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type LogoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *LogoutRequest) Reset() {
	*x = LogoutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutRequest) ProtoMessage() {}

func (x *LogoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutRequest.ProtoReflect.Descriptor instead.
func (*LogoutRequest) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{37}
}

func (x *LogoutRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ValidateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken string `protobuf:"bytes,1,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	Method       string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Path         string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *ValidateRequest) Reset() {
	*x = ValidateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateRequest) ProtoMessage() {}

func (x *ValidateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateRequest.ProtoReflect.Descriptor instead.
func (*ValidateRequest) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{38}
}

func (x *ValidateRequest) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *ValidateRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *ValidateRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ValidateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *ValidateResponse) Reset() {
	*x = ValidateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateResponse) ProtoMessage() {}

func (x *ValidateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateResponse.ProtoReflect.Descriptor instead.
func (*ValidateResponse) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{39}
}

func (x *ValidateResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int64            `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	SessionToken         string           `protobuf:"bytes,3,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	RefreshedAt          int64            `protobuf:"varint,4,opt,name=refreshed_at,json=refreshedAt,proto3" json:"refreshed_at,omitempty"`
	TokenValiditySeconds int64            `protobuf:"varint,5,opt,name=token_validity_seconds,json=tokenValiditySeconds,proto3" json:"token_validity_seconds,omitempty"`
	IsVerified           bool             `protobuf:"varint,6,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	IsBanned             bool             `protobuf:"varint,7,opt,name=is_banned,json=isBanned,proto3" json:"is_banned,omitempty"`
	Tags                 []string         `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	Created              bool             `protobuf:"varint,9,opt,name=created,proto3" json:"created,omitempty"`
	FirstLogin           int64            `protobuf:"varint,10,opt,name=first_login,json=firstLogin,proto3" json:"first_login,omitempty"`
	LoginTypes           []LoginType_Type `protobuf:"varint,11,rep,packed,name=login_types,json=loginTypes,proto3,enum=auth.LoginType_Type" json:"login_types,omitempty"`
	IsSuspended          bool             `protobuf:"varint,12,opt,name=is_suspended,json=isSuspended,proto3" json:"is_suspended,omitempty"`
	SuspendedUntil       int64            `protobuf:"varint,13,opt,name=suspended_until,json=suspendedUntil,proto3" json:"suspended_until,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{40}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *User) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *User) GetRefreshedAt() int64 {
	if x != nil {
		return x.RefreshedAt
	}
	return 0
}

func (x *User) GetTokenValiditySeconds() int64 {
	if x != nil {
		return x.TokenValiditySeconds
	}
	return 0
}

func (x *User) GetIsVerified() bool {
	if x != nil {
		return x.IsVerified
	}
	return false
}

func (x *User) GetIsBanned() bool {
	if x != nil {
		return x.IsBanned
	}
	return false
}

func (x *User) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *User) GetCreated() bool {
	if x != nil {
		return x.Created
	}
	return false
}

func (x *User) GetFirstLogin() int64 {
	if x != nil {
		return x.FirstLogin
	}
	return 0
}

func (x *User) GetLoginTypes() []LoginType_Type {
	if x != nil {
		return x.LoginTypes
	}
	return nil
}

func (x *User) GetIsSuspended() bool {
	if x != nil {
		return x.IsSuspended
	}
	return false
}

func (x *User) GetSuspendedUntil() int64 {
	if x != nil {
		return x.SuspendedUntil
	}
	return 0
}

type LoginId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type LoginType_Type `protobuf:"varint,1,opt,name=type,proto3,enum=auth.LoginType_Type" json:"type,omitempty"`
	Id   string         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *LoginId) Reset() {
	*x = LoginId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginId) ProtoMessage() {}

func (x *LoginId) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginId.ProtoReflect.Descriptor instead.
func (*LoginId) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{41}
}

func (x *LoginId) GetType() LoginType_Type {
	if x != nil {
		return x.Type
	}
	return LoginType_UNSPECIFIED_LOGIN_TYPE
}

func (x *LoginId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type LoginType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LoginType) Reset() {
	*x = LoginType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginType) ProtoMessage() {}

func (x *LoginType) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginType.ProtoReflect.Descriptor instead.
func (*LoginType) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{42}
}

type AuthSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email                    *EmailLogin                 `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password                 *PasswordLogin              `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Anon                     *AnonLogin                  `protobuf:"bytes,3,opt,name=anon,proto3" json:"anon,omitempty"`
	Apple                    *AppleLogin                 `protobuf:"bytes,4,opt,name=apple,proto3" json:"apple,omitempty"`
	Facebook                 *FacebookLogin              `protobuf:"bytes,5,opt,name=facebook,proto3" json:"facebook,omitempty"`
	Google                   *GoogleLogin                `protobuf:"bytes,6,opt,name=google,proto3" json:"google,omitempty"`
	Steam                    *SteamLogin                 `protobuf:"bytes,8,opt,name=steam,proto3" json:"steam,omitempty"`
	Xbox                     *XboxLogin                  `protobuf:"bytes,9,opt,name=xbox,proto3" json:"xbox,omitempty"`
	Epic                     *EpicLogin                  `protobuf:"bytes,10,opt,name=epic,proto3" json:"epic,omitempty"`
	Discord                  *DiscordLogin               `protobuf:"bytes,17,opt,name=discord,proto3" json:"discord,omitempty"`
	EmailPassword            *EmailPasswordLogin         `protobuf:"bytes,18,opt,name=email_password,json=emailPassword,proto3" json:"email_password,omitempty"`
	UsernamePassword         *UsernamePasswordLogin      `protobuf:"bytes,19,opt,name=username_password,json=usernamePassword,proto3" json:"username_password,omitempty"`
	SessionTokenValidity     int32                       `protobuf:"varint,7,opt,name=session_token_validity,json=sessionTokenValidity,proto3" json:"session_token_validity,omitempty"`
	SessionInactivityTimeout int32                       `protobuf:"varint,11,opt,name=session_inactivity_timeout,json=sessionInactivityTimeout,proto3" json:"session_inactivity_timeout,omitempty"`
	AppAuth                  *AppAuth                    `protobuf:"bytes,12,opt,name=app_auth,json=appAuth,proto3" json:"app_auth,omitempty"`
	AppVerify                *AppVerify                  `protobuf:"bytes,13,opt,name=app_verify,json=appVerify,proto3" json:"app_verify,omitempty"`
	ApiKeys                  []*ApiKey                   `protobuf:"bytes,14,rep,name=api_keys,json=apiKeys,proto3" json:"api_keys,omitempty"`
	UserAuthRestrictions     []*UserAuthRestriction      `protobuf:"bytes,15,rep,name=user_auth_restrictions,json=userAuthRestrictions,proto3" json:"user_auth_restrictions,omitempty"`
	FixedRateLimiterSettings []*FixedRateLimiterSettings `protobuf:"bytes,16,rep,name=fixed_rate_limiter_settings,json=fixedRateLimiterSettings,proto3" json:"fixed_rate_limiter_settings,omitempty"`
	DisableUserCreation      bool                        `protobuf:"varint,20,opt,name=disable_user_creation,json=disableUserCreation,proto3" json:"disable_user_creation,omitempty"`
}

func (x *AuthSettings) Reset() {
	*x = AuthSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthSettings) ProtoMessage() {}

func (x *AuthSettings) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthSettings.ProtoReflect.Descriptor instead.
func (*AuthSettings) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{43}
}

func (x *AuthSettings) GetEmail() *EmailLogin {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *AuthSettings) GetPassword() *PasswordLogin {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *AuthSettings) GetAnon() *AnonLogin {
	if x != nil {
		return x.Anon
	}
	return nil
}

func (x *AuthSettings) GetApple() *AppleLogin {
	if x != nil {
		return x.Apple
	}
	return nil
}

func (x *AuthSettings) GetFacebook() *FacebookLogin {
	if x != nil {
		return x.Facebook
	}
	return nil
}

func (x *AuthSettings) GetGoogle() *GoogleLogin {
	if x != nil {
		return x.Google
	}
	return nil
}

func (x *AuthSettings) GetSteam() *SteamLogin {
	if x != nil {
		return x.Steam
	}
	return nil
}

func (x *AuthSettings) GetXbox() *XboxLogin {
	if x != nil {
		return x.Xbox
	}
	return nil
}

func (x *AuthSettings) GetEpic() *EpicLogin {
	if x != nil {
		return x.Epic
	}
	return nil
}

func (x *AuthSettings) GetDiscord() *DiscordLogin {
	if x != nil {
		return x.Discord
	}
	return nil
}

func (x *AuthSettings) GetEmailPassword() *EmailPasswordLogin {
	if x != nil {
		return x.EmailPassword
	}
	return nil
}

func (x *AuthSettings) GetUsernamePassword() *UsernamePasswordLogin {
	if x != nil {
		return x.UsernamePassword
	}
	return nil
}

func (x *AuthSettings) GetSessionTokenValidity() int32 {
	if x != nil {
		return x.SessionTokenValidity
	}
	return 0
}

func (x *AuthSettings) GetSessionInactivityTimeout() int32 {
	if x != nil {
		return x.SessionInactivityTimeout
	}
	return 0
}

func (x *AuthSettings) GetAppAuth() *AppAuth {
	if x != nil {
		return x.AppAuth
	}
	return nil
}

func (x *AuthSettings) GetAppVerify() *AppVerify {
	if x != nil {
		return x.AppVerify
	}
	return nil
}

func (x *AuthSettings) GetApiKeys() []*ApiKey {
	if x != nil {
		return x.ApiKeys
	}
	return nil
}

func (x *AuthSettings) GetUserAuthRestrictions() []*UserAuthRestriction {
	if x != nil {
		return x.UserAuthRestrictions
	}
	return nil
}

func (x *AuthSettings) GetFixedRateLimiterSettings() []*FixedRateLimiterSettings {
	if x != nil {
		return x.FixedRateLimiterSettings
	}
	return nil
}

func (x *AuthSettings) GetDisableUserCreation() bool {
	if x != nil {
		return x.DisableUserCreation
	}
	return false
}

type AppAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *AppAuth) Reset() {
	*x = AppAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppAuth) ProtoMessage() {}

func (x *AppAuth) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppAuth.ProtoReflect.Descriptor instead.
func (*AppAuth) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{44}
}

func (x *AppAuth) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type EmailLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled     bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	OtpLength   uint32 `protobuf:"varint,2,opt,name=otp_length,json=otpLength,proto3" json:"otp_length,omitempty"`
	OtpValidity uint32 `protobuf:"varint,3,opt,name=otp_validity,json=otpValidity,proto3" json:"otp_validity,omitempty"`
}

func (x *EmailLogin) Reset() {
	*x = EmailLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailLogin) ProtoMessage() {}

func (x *EmailLogin) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailLogin.ProtoReflect.Descriptor instead.
func (*EmailLogin) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{45}
}

func (x *EmailLogin) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *EmailLogin) GetOtpLength() uint32 {
	if x != nil {
		return x.OtpLength
	}
	return 0
}

func (x *EmailLogin) GetOtpValidity() uint32 {
	if x != nil {
		return x.OtpValidity
	}
	return 0
}

type PasswordLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *PasswordLogin) Reset() {
	*x = PasswordLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordLogin) ProtoMessage() {}

func (x *PasswordLogin) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordLogin.ProtoReflect.Descriptor instead.
func (*PasswordLogin) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{46}
}

func (x *PasswordLogin) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type AnonLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *AnonLogin) Reset() {
	*x = AnonLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnonLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnonLogin) ProtoMessage() {}

func (x *AnonLogin) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnonLogin.ProtoReflect.Descriptor instead.
func (*AnonLogin) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{47}
}

func (x *AnonLogin) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type AppleLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled    bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ServiceId  string `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	TeamId     string `protobuf:"bytes,3,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	KeyId      string `protobuf:"bytes,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	PrivateKey string `protobuf:"bytes,5,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
}

func (x *AppleLogin) Reset() {
	*x = AppleLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppleLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppleLogin) ProtoMessage() {}

func (x *AppleLogin) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppleLogin.ProtoReflect.Descriptor instead.
func (*AppleLogin) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{48}
}

func (x *AppleLogin) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AppleLogin) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *AppleLogin) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *AppleLogin) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *AppleLogin) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

type FacebookLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled      bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ClientId     string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret string `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
}

func (x *FacebookLogin) Reset() {
	*x = FacebookLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacebookLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacebookLogin) ProtoMessage() {}

func (x *FacebookLogin) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacebookLogin.ProtoReflect.Descriptor instead.
func (*FacebookLogin) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{49}
}

func (x *FacebookLogin) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *FacebookLogin) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *FacebookLogin) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

type GoogleLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled      bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ClientId     string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret string `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
}

func (x *GoogleLogin) Reset() {
	*x = GoogleLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleLogin) ProtoMessage() {}

func (x *GoogleLogin) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleLogin.ProtoReflect.Descriptor instead.
func (*GoogleLogin) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{50}
}

func (x *GoogleLogin) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GoogleLogin) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *GoogleLogin) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

type SteamLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled         bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	WebApiKey       string `protobuf:"bytes,2,opt,name=web_api_key,json=webApiKey,proto3" json:"web_api_key,omitempty"`
	PublisherApiKey string `protobuf:"bytes,3,opt,name=publisher_api_key,json=publisherApiKey,proto3" json:"publisher_api_key,omitempty"`
	AppId           uint32 `protobuf:"varint,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// Deprecated: Marked as deprecated in auth_types.proto.
	ApiKey string `protobuf:"bytes,5,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *SteamLogin) Reset() {
	*x = SteamLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SteamLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SteamLogin) ProtoMessage() {}

func (x *SteamLogin) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SteamLogin.ProtoReflect.Descriptor instead.
func (*SteamLogin) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{51}
}

func (x *SteamLogin) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *SteamLogin) GetWebApiKey() string {
	if x != nil {
		return x.WebApiKey
	}
	return ""
}

func (x *SteamLogin) GetPublisherApiKey() string {
	if x != nil {
		return x.PublisherApiKey
	}
	return ""
}

func (x *SteamLogin) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

// Deprecated: Marked as deprecated in auth_types.proto.
func (x *SteamLogin) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type XboxLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled      bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ClientId     string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret string `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
}

func (x *XboxLogin) Reset() {
	*x = XboxLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XboxLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XboxLogin) ProtoMessage() {}

func (x *XboxLogin) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XboxLogin.ProtoReflect.Descriptor instead.
func (*XboxLogin) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{52}
}

func (x *XboxLogin) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *XboxLogin) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *XboxLogin) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

type EpicLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled      bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ClientId     string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret string `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
}

func (x *EpicLogin) Reset() {
	*x = EpicLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpicLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpicLogin) ProtoMessage() {}

func (x *EpicLogin) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpicLogin.ProtoReflect.Descriptor instead.
func (*EpicLogin) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{53}
}

func (x *EpicLogin) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *EpicLogin) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *EpicLogin) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

type DiscordLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled      bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ClientId     string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret string `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
}

func (x *DiscordLogin) Reset() {
	*x = DiscordLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscordLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscordLogin) ProtoMessage() {}

func (x *DiscordLogin) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscordLogin.ProtoReflect.Descriptor instead.
func (*DiscordLogin) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{54}
}

func (x *DiscordLogin) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *DiscordLogin) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *DiscordLogin) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

type EmailPasswordLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled                  bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	VerificationCodeLength   uint32 `protobuf:"varint,2,opt,name=verification_code_length,json=verificationCodeLength,proto3" json:"verification_code_length,omitempty"`
	VerificationCodeValidity uint32 `protobuf:"varint,3,opt,name=verification_code_validity,json=verificationCodeValidity,proto3" json:"verification_code_validity,omitempty"`
	EnablePasswordUpdate     bool   `protobuf:"varint,4,opt,name=enable_password_update,json=enablePasswordUpdate,proto3" json:"enable_password_update,omitempty"`
	PasswordRegex            string `protobuf:"bytes,5,opt,name=password_regex,json=passwordRegex,proto3" json:"password_regex,omitempty"`
}

func (x *EmailPasswordLogin) Reset() {
	*x = EmailPasswordLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailPasswordLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailPasswordLogin) ProtoMessage() {}

func (x *EmailPasswordLogin) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailPasswordLogin.ProtoReflect.Descriptor instead.
func (*EmailPasswordLogin) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{55}
}

func (x *EmailPasswordLogin) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *EmailPasswordLogin) GetVerificationCodeLength() uint32 {
	if x != nil {
		return x.VerificationCodeLength
	}
	return 0
}

func (x *EmailPasswordLogin) GetVerificationCodeValidity() uint32 {
	if x != nil {
		return x.VerificationCodeValidity
	}
	return 0
}

func (x *EmailPasswordLogin) GetEnablePasswordUpdate() bool {
	if x != nil {
		return x.EnablePasswordUpdate
	}
	return false
}

func (x *EmailPasswordLogin) GetPasswordRegex() string {
	if x != nil {
		return x.PasswordRegex
	}
	return ""
}

type UsernamePasswordLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled       bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	PasswordRegex string `protobuf:"bytes,2,opt,name=password_regex,json=passwordRegex,proto3" json:"password_regex,omitempty"`
}

func (x *UsernamePasswordLogin) Reset() {
	*x = UsernamePasswordLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsernamePasswordLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsernamePasswordLogin) ProtoMessage() {}

func (x *UsernamePasswordLogin) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsernamePasswordLogin.ProtoReflect.Descriptor instead.
func (*UsernamePasswordLogin) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{56}
}

func (x *UsernamePasswordLogin) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *UsernamePasswordLogin) GetPasswordRegex() string {
	if x != nil {
		return x.PasswordRegex
	}
	return ""
}

type AppVerify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled      bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ClientSecret string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
}

func (x *AppVerify) Reset() {
	*x = AppVerify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVerify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVerify) ProtoMessage() {}

func (x *AppVerify) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVerify.ProtoReflect.Descriptor instead.
func (*AppVerify) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{57}
}

func (x *AppVerify) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AppVerify) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

type FixedRateLimiterSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                     string   `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Limit                    uint32   `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	DurationInSeconds        uint32   `protobuf:"varint,2,opt,name=duration_in_seconds,json=durationInSeconds,proto3" json:"duration_in_seconds,omitempty"`
	LockoutDurationInSeconds uint32   `protobuf:"varint,3,opt,name=lockout_duration_in_seconds,json=lockoutDurationInSeconds,proto3" json:"lockout_duration_in_seconds,omitempty"`
	AllowList                []string `protobuf:"bytes,4,rep,name=allow_list,json=allowList,proto3" json:"allow_list,omitempty"`
	DenyList                 []string `protobuf:"bytes,5,rep,name=deny_list,json=denyList,proto3" json:"deny_list,omitempty"`
}

func (x *FixedRateLimiterSettings) Reset() {
	*x = FixedRateLimiterSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixedRateLimiterSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedRateLimiterSettings) ProtoMessage() {}

func (x *FixedRateLimiterSettings) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedRateLimiterSettings.ProtoReflect.Descriptor instead.
func (*FixedRateLimiterSettings) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{58}
}

func (x *FixedRateLimiterSettings) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FixedRateLimiterSettings) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FixedRateLimiterSettings) GetDurationInSeconds() uint32 {
	if x != nil {
		return x.DurationInSeconds
	}
	return 0
}

func (x *FixedRateLimiterSettings) GetLockoutDurationInSeconds() uint32 {
	if x != nil {
		return x.LockoutDurationInSeconds
	}
	return 0
}

func (x *FixedRateLimiterSettings) GetAllowList() []string {
	if x != nil {
		return x.AllowList
	}
	return nil
}

func (x *FixedRateLimiterSettings) GetDenyList() []string {
	if x != nil {
		return x.DenyList
	}
	return nil
}

type EventAuthAnonUserAdded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *EventAuthAnonUserAdded) Reset() {
	*x = EventAuthAnonUserAdded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventAuthAnonUserAdded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAuthAnonUserAdded) ProtoMessage() {}

func (x *EventAuthAnonUserAdded) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAuthAnonUserAdded.ProtoReflect.Descriptor instead.
func (*EventAuthAnonUserAdded) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{59}
}

func (x *EventAuthAnonUserAdded) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UserAuthRestriction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Environment string `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
	SnapId      string `protobuf:"bytes,3,opt,name=snap_id,json=snapId,proto3" json:"snap_id,omitempty"`
	Method      string `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	Path        string `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	System      bool   `protobuf:"varint,6,opt,name=system,proto3" json:"system,omitempty"`
	CreatedAt   int64  `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *UserAuthRestriction) Reset() {
	*x = UserAuthRestriction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAuthRestriction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuthRestriction) ProtoMessage() {}

func (x *UserAuthRestriction) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuthRestriction.ProtoReflect.Descriptor instead.
func (*UserAuthRestriction) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{60}
}

func (x *UserAuthRestriction) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserAuthRestriction) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *UserAuthRestriction) GetSnapId() string {
	if x != nil {
		return x.SnapId
	}
	return ""
}

func (x *UserAuthRestriction) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *UserAuthRestriction) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *UserAuthRestriction) GetSystem() bool {
	if x != nil {
		return x.System
	}
	return false
}

func (x *UserAuthRestriction) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type ApiKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description      string           `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Environment      string           `protobuf:"bytes,4,opt,name=environment,proto3" json:"environment,omitempty"`
	Key              string           `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	Length           int32            `protobuf:"varint,6,opt,name=length,proto3" json:"length,omitempty"`
	State            ApiKeyState      `protobuf:"varint,7,opt,name=state,proto3,enum=auth.ApiKeyState" json:"state,omitempty"`
	Apis             *ApiKeyEndpoints `protobuf:"bytes,8,opt,name=apis,proto3" json:"apis,omitempty"`
	ExpirySeconds    int64            `protobuf:"varint,9,opt,name=expiry_seconds,json=expirySeconds,proto3" json:"expiry_seconds,omitempty"`
	NeverExpire      bool             `protobuf:"varint,10,opt,name=never_expire,json=neverExpire,proto3" json:"never_expire,omitempty"`
	ExpiresAt        int64            `protobuf:"varint,11,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	CreatedAt        int64            `protobuf:"varint,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	RotatedAt        int64            `protobuf:"varint,13,opt,name=rotated_at,json=rotatedAt,proto3" json:"rotated_at,omitempty"`
	RotatedFrom      string           `protobuf:"bytes,14,opt,name=rotated_from,json=rotatedFrom,proto3" json:"rotated_from,omitempty"`
	LastUsedAt       int64            `protobuf:"varint,15,opt,name=last_used_at,json=lastUsedAt,proto3" json:"last_used_at,omitempty"`
	LastUsedBy       string           `protobuf:"bytes,16,opt,name=last_used_by,json=lastUsedBy,proto3" json:"last_used_by,omitempty"`
	LastUsedOnMethod string           `protobuf:"bytes,17,opt,name=last_used_on_method,json=lastUsedOnMethod,proto3" json:"last_used_on_method,omitempty"`
	LastUsedOnPath   string           `protobuf:"bytes,18,opt,name=last_used_on_path,json=lastUsedOnPath,proto3" json:"last_used_on_path,omitempty"`
}

func (x *ApiKey) Reset() {
	*x = ApiKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiKey) ProtoMessage() {}

func (x *ApiKey) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiKey.ProtoReflect.Descriptor instead.
func (*ApiKey) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{61}
}

func (x *ApiKey) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ApiKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApiKey) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ApiKey) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *ApiKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ApiKey) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *ApiKey) GetState() ApiKeyState {
	if x != nil {
		return x.State
	}
	return ApiKeyState_API_KEY_STATE_UNSPECIFIED
}

func (x *ApiKey) GetApis() *ApiKeyEndpoints {
	if x != nil {
		return x.Apis
	}
	return nil
}

func (x *ApiKey) GetExpirySeconds() int64 {
	if x != nil {
		return x.ExpirySeconds
	}
	return 0
}

func (x *ApiKey) GetNeverExpire() bool {
	if x != nil {
		return x.NeverExpire
	}
	return false
}

func (x *ApiKey) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *ApiKey) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ApiKey) GetRotatedAt() int64 {
	if x != nil {
		return x.RotatedAt
	}
	return 0
}

func (x *ApiKey) GetRotatedFrom() string {
	if x != nil {
		return x.RotatedFrom
	}
	return ""
}

func (x *ApiKey) GetLastUsedAt() int64 {
	if x != nil {
		return x.LastUsedAt
	}
	return 0
}

func (x *ApiKey) GetLastUsedBy() string {
	if x != nil {
		return x.LastUsedBy
	}
	return ""
}

func (x *ApiKey) GetLastUsedOnMethod() string {
	if x != nil {
		return x.LastUsedOnMethod
	}
	return ""
}

func (x *ApiKey) GetLastUsedOnPath() string {
	if x != nil {
		return x.LastUsedOnPath
	}
	return ""
}

type ApiKeyEndpoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapWildcards *SnapWildcards `protobuf:"bytes,1,opt,name=snap_wildcards,json=snapWildcards,proto3" json:"snap_wildcards,omitempty"`
	Endpoints     *Endpoints     `protobuf:"bytes,2,opt,name=endpoints,proto3" json:"endpoints,omitempty"`
}

func (x *ApiKeyEndpoints) Reset() {
	*x = ApiKeyEndpoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiKeyEndpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiKeyEndpoints) ProtoMessage() {}

func (x *ApiKeyEndpoints) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiKeyEndpoints.ProtoReflect.Descriptor instead.
func (*ApiKeyEndpoints) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{62}
}

func (x *ApiKeyEndpoints) GetSnapWildcards() *SnapWildcards {
	if x != nil {
		return x.SnapWildcards
	}
	return nil
}

func (x *ApiKeyEndpoints) GetEndpoints() *Endpoints {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

type SnapWildcards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	All   bool     `protobuf:"varint,1,opt,name=all,proto3" json:"all,omitempty"`
	Snaps []string `protobuf:"bytes,2,rep,name=snaps,proto3" json:"snaps,omitempty"`
}

func (x *SnapWildcards) Reset() {
	*x = SnapWildcards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapWildcards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapWildcards) ProtoMessage() {}

func (x *SnapWildcards) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapWildcards.ProtoReflect.Descriptor instead.
func (*SnapWildcards) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{63}
}

func (x *SnapWildcards) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *SnapWildcards) GetSnaps() []string {
	if x != nil {
		return x.Snaps
	}
	return nil
}

type Endpoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snaps map[string]*SnapEndpoints `protobuf:"bytes,1,rep,name=snaps,proto3" json:"snaps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Endpoints) Reset() {
	*x = Endpoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Endpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoints) ProtoMessage() {}

func (x *Endpoints) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoints.ProtoReflect.Descriptor instead.
func (*Endpoints) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{64}
}

func (x *Endpoints) GetSnaps() map[string]*SnapEndpoints {
	if x != nil {
		return x.Snaps
	}
	return nil
}

type SnapEndpoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Get    []string `protobuf:"bytes,1,rep,name=get,proto3" json:"get,omitempty"`
	Post   []string `protobuf:"bytes,2,rep,name=post,proto3" json:"post,omitempty"`
	Put    []string `protobuf:"bytes,3,rep,name=put,proto3" json:"put,omitempty"`
	Patch  []string `protobuf:"bytes,4,rep,name=patch,proto3" json:"patch,omitempty"`
	Delete []string `protobuf:"bytes,5,rep,name=delete,proto3" json:"delete,omitempty"`
}

func (x *SnapEndpoints) Reset() {
	*x = SnapEndpoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_auth_types_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapEndpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapEndpoints) ProtoMessage() {}

func (x *SnapEndpoints) ProtoReflect() protoreflect.Message {
	mi := &file_auth_types_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapEndpoints.ProtoReflect.Descriptor instead.
func (*SnapEndpoints) Descriptor() ([]byte, []int) {
	return file_auth_types_proto_rawDescGZIP(), []int{65}
}

func (x *SnapEndpoints) GetGet() []string {
	if x != nil {
		return x.Get
	}
	return nil
}

func (x *SnapEndpoints) GetPost() []string {
	if x != nil {
		return x.Post
	}
	return nil
}

func (x *SnapEndpoints) GetPut() []string {
	if x != nil {
		return x.Put
	}
	return nil
}

func (x *SnapEndpoints) GetPatch() []string {
	if x != nil {
		return x.Patch
	}
	return nil
}

func (x *SnapEndpoints) GetDelete() []string {
	if x != nil {
		return x.Delete
	}
	return nil
}

var File_auth_types_proto protoreflect.FileDescriptor

var file_auth_types_proto_rawDesc = []byte{
	0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x04, 0x61, 0x75, 0x74, 0x68, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xca, 0x01, 0x0a, 0x0a, 0x4f, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x45, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2f, 0x92, 0x41, 0x22, 0x32, 0x1c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x20, 0x4f, 0x54, 0x50,
	0x20, 0x74, 0x6f, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x60,
	0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x75, 0x0a, 0x14, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x43, 0x92, 0x41, 0x3d, 0x32, 0x37, 0x49, 0x66, 0x20,
	0x73, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x4f, 0x54, 0x50,
	0x20, 0x77, 0x6f, 0x6e, 0x27, 0x74, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x69,
	0x66, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x6e, 0x27, 0x74, 0x20, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x9a, 0x02, 0x01, 0x02, 0xe0, 0x41, 0x01, 0x52, 0x12, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22,
	0x82, 0x02, 0x0a, 0x11, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x21, 0x32, 0x1b, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x61, 0x73,
	0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x60, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x4a, 0x0a, 0x03, 0x6f,
	0x74, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x23, 0x32, 0x1d, 0x4f,
	0x54, 0x50, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x07,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x0c, 0x72, 0x0a, 0x32, 0x08, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x5d,
	0x2b, 0x24, 0x52, 0x03, 0x6f, 0x74, 0x70, 0x12, 0x5b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3a, 0x92, 0x41,
	0x34, 0x32, 0x2e, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x66, 0x20,
	0x69, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x9a, 0x02, 0x01, 0x02, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x22, 0x34, 0x0a, 0x12, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xc4, 0x01, 0x0a, 0x10, 0x41,
	0x6e, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x53, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x37, 0x92, 0x41, 0x15, 0x32, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x20, 0x49, 0x44, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3a, 0x92, 0x41, 0x34, 0x32, 0x2e,
	0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x66, 0x20, 0x69, 0x74, 0x20,
	0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x9a, 0x02,
	0x01, 0x02, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x22, 0x33, 0x0a, 0x11, 0x41, 0x6e, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xbe, 0x01, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x6c, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x29,
	0x32, 0x23, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x5b, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x3a, 0x92, 0x41, 0x34, 0x32, 0x2e, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x6f,
	0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2c, 0x20,
	0x69, 0x66, 0x20, 0x69, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x9a, 0x02, 0x01, 0x02, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x22, 0x34, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x6c, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xd0, 0x02,
	0x0a, 0x11, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x98, 0x01, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x3c,
	0x92, 0x41, 0x2e, 0x32, 0x28, 0x4b, 0x65, 0x79, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x70,
	0x61, 0x69, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x64, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x9a, 0x02, 0x01,
	0x06, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x10, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5b,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x3a, 0x92, 0x41, 0x34, 0x32, 0x2e, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x2c, 0x20, 0x69, 0x66, 0x20, 0x69, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e,
	0x6f, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x9a, 0x02, 0x01, 0x02, 0xe0, 0x41, 0x01, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x43, 0x0a, 0x15, 0x4f,
	0x70, 0x65, 0x6e, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xdc, 0x02, 0x0a, 0x17, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x9e, 0x01, 0x0a,
	0x11, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x3c, 0x92,
	0x41, 0x2e, 0x32, 0x28, 0x4b, 0x65, 0x79, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x70, 0x61,
	0x69, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x64, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x9a, 0x02, 0x01, 0x06,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x10, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5b, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x3a, 0x92, 0x41, 0x34, 0x32, 0x2e, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x2c, 0x20, 0x69, 0x66, 0x20, 0x69, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f,
	0x74, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x9a, 0x02, 0x01, 0x02, 0xe0, 0x41, 0x01, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x43, 0x0a, 0x15, 0x4f, 0x70,
	0x65, 0x6e, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xc8, 0x02, 0x0a, 0x1e, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x60, 0x0a, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x2c, 0x32,
	0x26, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x20,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x67, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4b, 0x92, 0x41, 0x45, 0x32, 0x3f, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x65,
	0x64, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x20, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x28, 0x69, 0x66,
	0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x9a, 0x02, 0x01, 0x07,
	0xe0, 0x41, 0x01, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x5b, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x3a, 0x92, 0x41, 0x34, 0x32, 0x2e, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x2c, 0x20, 0x69, 0x66, 0x20, 0x69, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f,
	0x74, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x9a, 0x02, 0x01, 0x02, 0xe0, 0x41, 0x01, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x22, 0x34, 0x0a, 0x12, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x22, 0x83, 0x02, 0x0a, 0x10, 0x58, 0x62, 0x6f, 0x78, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x22, 0x32, 0x1c, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x3a, 0x92, 0x41, 0x34, 0x32, 0x2e, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x6f,
	0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2c, 0x20,
	0x69, 0x66, 0x20, 0x69, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x9a, 0x02, 0x01, 0x02, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92,
	0x41, 0x1d, 0x32, 0x17, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x20, 0x75, 0x72, 0x6c,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x9a, 0x02, 0x01, 0x07, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x22, 0x33, 0x0a, 0x11, 0x58, 0x62, 0x6f, 0x78, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x93, 0x04, 0x0a, 0x10,
	0x45, 0x70, 0x69, 0x63, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x7a, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x5b, 0x92, 0x41, 0x23, 0x32, 0x1d, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x2f, 0x72, 0x2d, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x09, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x22, 0x32,
	0x1c, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x9a, 0x02, 0x01,
	0x07, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e,
	0x92, 0x41, 0x2b, 0x32, 0x25, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x0c,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e,
	0x92, 0x41, 0x2b, 0x32, 0x25, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32,
	0x25, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x5b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3a, 0x92, 0x41, 0x34, 0x32, 0x2e,
	0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x66, 0x20, 0x69, 0x74, 0x20,
	0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x9a, 0x02,
	0x01, 0x02, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x22, 0x33, 0x0a, 0x11, 0x45, 0x70, 0x69, 0x63, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xc4, 0x01, 0x0a, 0x14, 0x46, 0x61, 0x63, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4f, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39,
	0x92, 0x41, 0x2c, 0x32, 0x26, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x20, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x9a, 0x02, 0x01, 0x07, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x5b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3a, 0x92, 0x41, 0x34, 0x32, 0x2e, 0x57, 0x68, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x66, 0x20, 0x69, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x9a, 0x02, 0x01, 0x02, 0xe0, 0x41,
	0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x22, 0x37, 0x0a,
	0x15, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xc2, 0x01, 0x0a, 0x12, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41,
	0x2c, 0x32, 0x26, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x20, 0x49, 0x44, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x5b,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x3a, 0x92, 0x41, 0x34, 0x32, 0x2e, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x2c, 0x20, 0x69, 0x66, 0x20, 0x69, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e,
	0x6f, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x9a, 0x02, 0x01, 0x02, 0xe0, 0x41, 0x01, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x22, 0x35, 0x0a, 0x13, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x22, 0xfc, 0x02, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x77, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x63, 0x92, 0x41, 0x53, 0x32, 0x4d, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x20, 0x4f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x64, 0x65,
	0x20, 0x6f, 0x72, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x07,
	0xe0, 0x41, 0x01, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6b, 0x92, 0x41, 0x5b, 0x32,
	0x55, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x20, 0x4f,
	0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x01, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x5b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3a, 0x92, 0x41, 0x34, 0x32, 0x2e,
	0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x66, 0x20, 0x69, 0x74, 0x20,
	0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x9a, 0x02,
	0x01, 0x02, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x22, 0x59, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x86, 0x02, 0x0a,
	0x19, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x21, 0x32, 0x1b,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x75, 0x73,
	0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x9a, 0x02, 0x01, 0x07, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x60, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x46, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x1d, 0x32, 0x17, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x5b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3a, 0x92,
	0x41, 0x34, 0x32, 0x2e, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x66,
	0x20, 0x69, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x9a, 0x02, 0x01, 0x02, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x22, 0xf5, 0x01, 0x0a, 0x1a, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x3f,
	0x92, 0x41, 0x3c, 0x32, 0x36, 0x55, 0x73, 0x65, 0x72, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x20, 0x53, 0x65, 0x74, 0x20, 0x69, 0x66, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x61,
	0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x64, 0x6f, 0x6e, 0x65, 0x9a, 0x02, 0x01, 0x06, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x76, 0x0a, 0x1b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x36, 0x92, 0x41, 0x33, 0x32,
	0x2d, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x9a, 0x02,
	0x01, 0x02, 0x52, 0x19, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0xbe, 0x01,
	0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x1d, 0x32, 0x17, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x60, 0x01, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x66, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x39, 0x92, 0x41, 0x2c, 0x32, 0x26, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02,
	0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x10, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x35,
	0x0a, 0x13, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x5f, 0x0a, 0x1a, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1e, 0x32, 0x18, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x60, 0x01, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xc7, 0x03, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x1d, 0x32, 0x17, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x60, 0x01,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x4c, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92,
	0x41, 0x1c, 0x32, 0x16, 0x4e, 0x65, 0x77, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65, 0x74, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x86, 0x01, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x63, 0x92, 0x41,
	0x53, 0x32, 0x4d, 0x4f, 0x6c, 0x64, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2e, 0x20,
	0x4f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x01, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0xd0, 0x01,
	0x01, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x8f,
	0x01, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6a, 0x92, 0x41, 0x5a, 0x32, 0x54, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x20, 0x4f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x01, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0xd0,
	0x01, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x98, 0x02, 0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x53, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x15, 0x32, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x27, 0x73,
	0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x49, 0x44, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e,
	0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x1d, 0x32, 0x17, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x5b,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x3a, 0x92, 0x41, 0x34, 0x32, 0x2e, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x2c, 0x20, 0x69, 0x66, 0x20, 0x69, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e,
	0x6f, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x9a, 0x02, 0x01, 0x02, 0xe0, 0x41, 0x01, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x22, 0x3f, 0x0a, 0x1d, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x77, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x39, 0x92, 0x41, 0x17, 0x32, 0x11, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20,
	0x74, 0x6f, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x72, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x31, 0x92, 0x41, 0x2e,
	0x32, 0x28, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x9a, 0x02, 0x01, 0x02, 0x52, 0x09,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x95, 0x02, 0x0a, 0x1d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92,
	0x41, 0x15, 0x32, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x20, 0x49, 0x44, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10,
	0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x4c, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x1c, 0x32, 0x16, 0x4e, 0x65, 0x77,
	0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20,
	0x73, 0x65, 0x74, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x51,
	0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x21, 0x32, 0x1b, 0x4f, 0x6c, 0x64, 0x20, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0xc1, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x53, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x15, 0x32, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x27,
	0x73, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x49, 0x44, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92,
	0x41, 0x1c, 0x32, 0x16, 0x4e, 0x65, 0x77, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65, 0x74, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xa3, 0x02, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6e, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5a, 0x92, 0x41, 0x57, 0x32, 0x51, 0x54,
	0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x70, 0x70, 0x20, 0x74, 0x72, 0x79, 0x69, 0x6e,
	0x67, 0x20, 0x74, 0x6f, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x20, 0x4f,
	0x6e, 0x6c, 0x79, 0x20, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x20, 0x69, 0x73, 0x20, 0x27, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x27,
	0x9a, 0x02, 0x01, 0x07, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x19, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x56, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32,
	0x28, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x20, 0x75,
	0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x0c, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x16,
	0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0f, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2d, 0x92, 0x41, 0x1f, 0x32, 0x19, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x6b, 0x65, 0x65, 0x70, 0x9a,
	0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0d,
	0x6b, 0x65, 0x65, 0x70, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x5e, 0x0a,
	0x12, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x22, 0x32, 0x1c,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x9a, 0x02, 0x01, 0x07,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x10, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x03, 0x92,
	0x41, 0x00, 0x22, 0x63, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x1e,
	0x32, 0x18, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20,
	0x74, 0x6f, 0x20, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x31, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x52, 0x0a, 0x0d, 0x4c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1d, 0x32,
	0x17, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x74,
	0x6f, 0x20, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xeb,
	0x02, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x1f, 0x32, 0x19,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x74, 0x6f,
	0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x86, 0x01, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6e, 0x92, 0x41, 0x68, 0x32, 0x62, 0x48, 0x54,
	0x54, 0x50, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x72,
	0x20, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x20, 0x28, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x3a, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x61, 0x75,
	0x74, 0x68, 0x20, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x29,
	0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x7b, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x67, 0x92,
	0x41, 0x61, 0x32, 0x5b, 0x50, 0x61, 0x74, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x20, 0x28, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x3a, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x61, 0x75, 0x74,
	0x68, 0x20, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x29, 0x9a,
	0x02, 0x01, 0x07, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x32, 0x0a, 0x10,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x22, 0xe7, 0x08, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x14, 0x55, 0x73, 0x65, 0x72,
	0x20, 0x49, 0x44, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x9a, 0x02, 0x01, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x34, 0x92, 0x41,
	0x31, 0x32, 0x2b, 0x55, 0x6e, 0x69, 0x78, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x20, 0x6f, 0x66, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x77, 0x61, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x9a, 0x02,
	0x01, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x57, 0x0a,
	0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x32, 0x29, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x20, 0x28, 0x49, 0x66, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x62, 0x6c, 0x65, 0x29, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x71, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x4e, 0x92, 0x41,
	0x4b, 0x32, 0x45, 0x55, 0x6e, 0x69, 0x78, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x20, 0x6f, 0x66, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x61, 0x73, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x64, 0x20, 0x28, 0x49, 0x66, 0x20, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x0b, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x6f, 0x0a, 0x16, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x39, 0x92, 0x41, 0x36, 0x32, 0x30,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x20, 0x28, 0x49, 0x66, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x29,
	0x9a, 0x02, 0x01, 0x03, 0x52, 0x14, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x28, 0x92, 0x41, 0x25, 0x32, 0x1f, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x6f,
	0x72, 0x20, 0x6e, 0x6f, 0x74, 0x9a, 0x02, 0x01, 0x02, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x1d, 0x57,
	0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x62,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x9a, 0x02, 0x01, 0x02,
	0x52, 0x08, 0x69, 0x73, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x62, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x4e, 0x92, 0x41, 0x36, 0x32, 0x30, 0x44,
	0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x61, 0x67, 0x73, 0x20, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x9a,
	0x02, 0x01, 0x01, 0xfa, 0x42, 0x12, 0x92, 0x01, 0x0f, 0x18, 0x01, 0x22, 0x0b, 0x72, 0x09, 0x52,
	0x07, 0x66, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x42,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x28, 0x92, 0x41, 0x25, 0x32, 0x1f, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x77, 0x61, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6f,
	0x72, 0x20, 0x6e, 0x6f, 0x74, 0x9a, 0x02, 0x01, 0x02, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x5d, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x32, 0x33, 0x55, 0x6e,
	0x69, 0x78, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x6f, 0x66, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x77, 0x61,
	0x73, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x20, 0x69,
	0x6e, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x12, 0x53, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x1c, 0x92, 0x41,
	0x11, 0x32, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x9a, 0x02,
	0x01, 0x01, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x29, 0x92, 0x41,
	0x26, 0x32, 0x20, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x69, 0x73, 0x20, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x6f, 0x72, 0x20,
	0x6e, 0x6f, 0x74, 0x9a, 0x02, 0x01, 0x02, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x75, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x12, 0x64, 0x0a, 0x0f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x42, 0x3b, 0x92,
	0x41, 0x38, 0x32, 0x32, 0x55, 0x6e, 0x69, 0x78, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x20, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x0e, 0x73, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x22, 0x43, 0x0a, 0x07, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xd8, 0x01, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xca, 0x01,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x41,
	0x4e, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x41, 0x43, 0x45, 0x42, 0x4f, 0x4f,
	0x4b, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x10, 0x05, 0x12,
	0x09, 0x0a, 0x05, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54,
	0x45, 0x41, 0x4d, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x58, 0x42, 0x4f, 0x58, 0x10, 0x08, 0x12,
	0x08, 0x0a, 0x04, 0x45, 0x50, 0x49, 0x43, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x50, 0x50,
	0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x0b, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52,
	0x44, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x0d, 0x22, 0xa8, 0x08, 0x0a, 0x0c, 0x41,
	0x75, 0x74, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x61, 0x6e, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x6e, 0x6f, 0x6e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x04, 0x61, 0x6e, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x05, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x12, 0x2f, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x08, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x12, 0x29, 0x0a, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x12, 0x26, 0x0a,
	0x05, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x05,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x04, 0x78, 0x62, 0x6f, 0x78, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x58, 0x62, 0x6f, 0x78, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x04, 0x78, 0x62, 0x6f, 0x78, 0x12, 0x23, 0x0a, 0x04, 0x65, 0x70,
	0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x45, 0x70, 0x69, 0x63, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x04, 0x65, 0x70, 0x69, 0x63, 0x12,
	0x2c, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x07, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3f, 0x0a,
	0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x48,
	0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x16, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28,
	0x00, 0x52, 0x14, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x1a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x1a, 0x02, 0x28, 0x00, 0x52, 0x18, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x28,
	0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x70, 0x70, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x07, 0x61, 0x70, 0x70, 0x41, 0x75, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x5f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x09, 0x61,
	0x70, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x27, 0x0a, 0x08, 0x61, 0x70, 0x69, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79,
	0x73, 0x12, 0x4f, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x5d, 0x0a, 0x1b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x18, 0x66, 0x69, 0x78, 0x65, 0x64, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x23, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x68, 0x0a, 0x0a, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x74, 0x70, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x74, 0x70, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x74, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x74, 0x70, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x22, 0x29, 0x0a, 0x0d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0x25, 0x0a, 0x09, 0x41, 0x6e, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x22,
	0x6b, 0x0a, 0x0d, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x69, 0x0a, 0x0b,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x1e, 0x0a, 0x0b, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79,
	0x22, 0x67, 0x0a, 0x09, 0x58, 0x62, 0x6f, 0x78, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x67, 0x0a, 0x09, 0x45, 0x70, 0x69,
	0x63, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x22, 0x6a, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x83,
	0x02, 0x0a, 0x12, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x38, 0x0a, 0x18, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x16, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x1a, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x67, 0x65, 0x78, 0x22, 0x58, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x67, 0x65, 0x78, 0x22, 0x4a,
	0x0a, 0x09, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0xe4, 0x04, 0x0a, 0x18, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x6c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x58, 0x92, 0x41, 0x1a, 0x32, 0x14, 0x74, 0x79, 0x70, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x72, 0x61, 0x74, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72,
	0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x35, 0x72, 0x33, 0x52, 0x0b, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x12, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x44, 0x92, 0x41, 0x37, 0x32, 0x31, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x64, 0x20, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x9a, 0x02, 0x01, 0x03,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x56, 0x0a, 0x13, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26,
	0x92, 0x41, 0x19, 0x32, 0x13, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e,
	0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x11, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x1b, 0x6c, 0x6f,
	0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x45, 0x92, 0x41, 0x38, 0x32, 0x32, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x20, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x20, 0x69, 0x66, 0x20, 0x72, 0x61, 0x74, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20,
	0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x18, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x4d, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x28, 0x32, 0x22, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x20, 0x72, 0x61, 0x74, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x74, 0x9a, 0x02, 0x01,
	0x01, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x50, 0x0a, 0x09, 0x64, 0x65, 0x6e, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x2d, 0x32, 0x27, 0x64, 0x65, 0x6e, 0x79, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x20, 0x64, 0x65,
	0x6e, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x74, 0x70,
	0x9a, 0x02, 0x01, 0x01, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x64, 0x65, 0x6e, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x31, 0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x41, 0x6e,
	0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x8d, 0x02, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0b,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x52, 0x03, 0x64, 0x65, 0x76, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x6e, 0x61, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10,
	0x01, 0x18, 0x64, 0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39,
	0x5f, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x06, 0x73, 0x6e, 0x61, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x0a, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0xd6, 0x04, 0x0a, 0x06, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x61, 0x70,
	0x69, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52,
	0x04, 0x61, 0x70, 0x69, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x6e, 0x65, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x20, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x22, 0x7c, 0x0a,
	0x0f, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x6e, 0x61, 0x70, 0x5f, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x53, 0x6e, 0x61, 0x70, 0x57, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x73, 0x52, 0x0d, 0x73,
	0x6e, 0x61, 0x70, 0x57, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x09,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x37, 0x0a, 0x0d, 0x53,
	0x6e, 0x61, 0x70, 0x57, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x09, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x1a, 0x4d, 0x0a, 0x0a, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x75, 0x0a, 0x0d, 0x53, 0x6e, 0x61, 0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x75,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2a, 0x41, 0x0a, 0x0d, 0x41, 0x75,
	0x74, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x41, 0x4e, 0x4f, 0x4e,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x45, 0x44, 0x10, 0x01, 0x2a, 0xbc, 0x01,
	0x0a, 0x0b, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x19, 0x41, 0x50, 0x49, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x41, 0x50, 0x49, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x50, 0x49, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x50, 0x49, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x21,
	0x0a, 0x1d, 0x41, 0x50, 0x49, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x52, 0x4f, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x50, 0x49, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x42, 0x2f, 0x5a, 0x2d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x65, 0x72, 0x2d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_auth_types_proto_rawDescOnce sync.Once
	file_auth_types_proto_rawDescData = file_auth_types_proto_rawDesc
)

func file_auth_types_proto_rawDescGZIP() []byte {
	file_auth_types_proto_rawDescOnce.Do(func() {
		file_auth_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_auth_types_proto_rawDescData)
	})
	return file_auth_types_proto_rawDescData
}

var file_auth_types_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_auth_types_proto_msgTypes = make([]protoimpl.MessageInfo, 69)
var file_auth_types_proto_goTypes = []interface{}{
	(AuthEventType)(0),                      // 0: auth.AuthEventType
	(ApiKeyState)(0),                        // 1: auth.ApiKeyState
	(LoginType_Type)(0),                     // 2: auth.LoginType.Type
	(*OtpRequest)(nil),                      // 3: auth.OtpRequest
	(*EmailLoginRequest)(nil),               // 4: auth.EmailLoginRequest
	(*EmailLoginResponse)(nil),              // 5: auth.EmailLoginResponse
	(*AnonLoginRequest)(nil),                // 6: auth.AnonLoginRequest
	(*AnonLoginResponse)(nil),               // 7: auth.AnonLoginResponse
	(*AppleLoginRequest)(nil),               // 8: auth.AppleLoginRequest
	(*AppleLoginResponse)(nil),              // 9: auth.AppleLoginResponse
	(*SteamLoginRequest)(nil),               // 10: auth.SteamLoginRequest
	(*SteamOpenIdLoginRequest)(nil),         // 11: auth.SteamOpenIdLoginRequest
	(*SteamSessionTicketLoginRequest)(nil),  // 12: auth.SteamSessionTicketLoginRequest
	(*SteamLoginResponse)(nil),              // 13: auth.SteamLoginResponse
	(*XboxLoginRequest)(nil),                // 14: auth.XboxLoginRequest
	(*XboxLoginResponse)(nil),               // 15: auth.XboxLoginResponse
	(*EpicLoginRequest)(nil),                // 16: auth.EpicLoginRequest
	(*EpicLoginResponse)(nil),               // 17: auth.EpicLoginResponse
	(*FacebookLoginRequest)(nil),            // 18: auth.FacebookLoginRequest
	(*FacebookLoginResponse)(nil),           // 19: auth.FacebookLoginResponse
	(*GoogleLoginRequest)(nil),              // 20: auth.GoogleLoginRequest
	(*GoogleLoginResponse)(nil),             // 21: auth.GoogleLoginResponse
	(*DiscordLoginRequest)(nil),             // 22: auth.DiscordLoginRequest
	(*DiscordLoginResponse)(nil),            // 23: auth.DiscordLoginResponse
	(*EmailPasswordLoginRequest)(nil),       // 24: auth.EmailPasswordLoginRequest
	(*EmailPasswordLoginResponse)(nil),      // 25: auth.EmailPasswordLoginResponse
	(*VerifyEmailRequest)(nil),              // 26: auth.VerifyEmailRequest
	(*VerifyEmailResponse)(nil),             // 27: auth.VerifyEmailResponse
	(*RecoverEmailAccountRequest)(nil),      // 28: auth.RecoverEmailAccountRequest
	(*UpdateEmailPasswordRequest)(nil),      // 29: auth.UpdateEmailPasswordRequest
	(*UsernamePasswordLoginRequest)(nil),    // 30: auth.UsernamePasswordLoginRequest
	(*UsernamePasswordLoginResponse)(nil),   // 31: auth.UsernamePasswordLoginResponse
	(*GetUsernameAvailabilityRequest)(nil),  // 32: auth.GetUsernameAvailabilityRequest
	(*GetUsernameAvailabilityResponse)(nil), // 33: auth.GetUsernameAvailabilityResponse
	(*UpdateUsernamePasswordRequest)(nil),   // 34: auth.UpdateUsernamePasswordRequest
	(*ResetUsernamePasswordRequest)(nil),    // 35: auth.ResetUsernamePasswordRequest
	(*AppVerifyRequest)(nil),                // 36: auth.AppVerifyRequest
	(*AssociateLoginsRequest)(nil),          // 37: auth.AssociateLoginsRequest
	(*RefreshRequest)(nil),                  // 38: auth.RefreshRequest
	(*RefreshResponse)(nil),                 // 39: auth.RefreshResponse
	(*LogoutRequest)(nil),                   // 40: auth.LogoutRequest
	(*ValidateRequest)(nil),                 // 41: auth.ValidateRequest
	(*ValidateResponse)(nil),                // 42: auth.ValidateResponse
	(*User)(nil),                            // 43: auth.User
	(*LoginId)(nil),                         // 44: auth.LoginId
	(*LoginType)(nil),                       // 45: auth.LoginType
	(*AuthSettings)(nil),                    // 46: auth.AuthSettings
	(*AppAuth)(nil),                         // 47: auth.AppAuth
	(*EmailLogin)(nil),                      // 48: auth.EmailLogin
	(*PasswordLogin)(nil),                   // 49: auth.PasswordLogin
	(*AnonLogin)(nil),                       // 50: auth.AnonLogin
	(*AppleLogin)(nil),                      // 51: auth.AppleLogin
	(*FacebookLogin)(nil),                   // 52: auth.FacebookLogin
	(*GoogleLogin)(nil),                     // 53: auth.GoogleLogin
	(*SteamLogin)(nil),                      // 54: auth.SteamLogin
	(*XboxLogin)(nil),                       // 55: auth.XboxLogin
	(*EpicLogin)(nil),                       // 56: auth.EpicLogin
	(*DiscordLogin)(nil),                    // 57: auth.DiscordLogin
	(*EmailPasswordLogin)(nil),              // 58: auth.EmailPasswordLogin
	(*UsernamePasswordLogin)(nil),           // 59: auth.UsernamePasswordLogin
	(*AppVerify)(nil),                       // 60: auth.AppVerify
	(*FixedRateLimiterSettings)(nil),        // 61: auth.FixedRateLimiterSettings
	(*EventAuthAnonUserAdded)(nil),          // 62: auth.EventAuthAnonUserAdded
	(*UserAuthRestriction)(nil),             // 63: auth.UserAuthRestriction
	(*ApiKey)(nil),                          // 64: auth.ApiKey
	(*ApiKeyEndpoints)(nil),                 // 65: auth.ApiKeyEndpoints
	(*SnapWildcards)(nil),                   // 66: auth.SnapWildcards
	(*Endpoints)(nil),                       // 67: auth.Endpoints
	(*SnapEndpoints)(nil),                   // 68: auth.SnapEndpoints
	nil,                                     // 69: auth.SteamLoginRequest.OpenidParametersEntry
	nil,                                     // 70: auth.SteamOpenIdLoginRequest.OpenidParametersEntry
	nil,                                     // 71: auth.Endpoints.SnapsEntry
}
var file_auth_types_proto_depIdxs = []int32{
	43, // 0: auth.EmailLoginResponse.user:type_name -> auth.User
	43, // 1: auth.AnonLoginResponse.user:type_name -> auth.User
	43, // 2: auth.AppleLoginResponse.user:type_name -> auth.User
	69, // 3: auth.SteamLoginRequest.openid_parameters:type_name -> auth.SteamLoginRequest.OpenidParametersEntry
	70, // 4: auth.SteamOpenIdLoginRequest.openid_parameters:type_name -> auth.SteamOpenIdLoginRequest.OpenidParametersEntry
	43, // 5: auth.SteamLoginResponse.user:type_name -> auth.User
	43, // 6: auth.XboxLoginResponse.user:type_name -> auth.User
	43, // 7: auth.EpicLoginResponse.user:type_name -> auth.User
	43, // 8: auth.FacebookLoginResponse.user:type_name -> auth.User
	43, // 9: auth.GoogleLoginResponse.user:type_name -> auth.User
	43, // 10: auth.DiscordLoginResponse.user:type_name -> auth.User
	43, // 11: auth.EmailPasswordLoginResponse.user:type_name -> auth.User
	43, // 12: auth.VerifyEmailResponse.user:type_name -> auth.User
	43, // 13: auth.UsernamePasswordLoginResponse.user:type_name -> auth.User
	43, // 14: auth.RefreshResponse.user:type_name -> auth.User
	43, // 15: auth.ValidateResponse.user:type_name -> auth.User
	2,  // 16: auth.User.login_types:type_name -> auth.LoginType.Type
	2,  // 17: auth.LoginId.type:type_name -> auth.LoginType.Type
	48, // 18: auth.AuthSettings.email:type_name -> auth.EmailLogin
	49, // 19: auth.AuthSettings.password:type_name -> auth.PasswordLogin
	50, // 20: auth.AuthSettings.anon:type_name -> auth.AnonLogin
	51, // 21: auth.AuthSettings.apple:type_name -> auth.AppleLogin
	52, // 22: auth.AuthSettings.facebook:type_name -> auth.FacebookLogin
	53, // 23: auth.AuthSettings.google:type_name -> auth.GoogleLogin
	54, // 24: auth.AuthSettings.steam:type_name -> auth.SteamLogin
	55, // 25: auth.AuthSettings.xbox:type_name -> auth.XboxLogin
	56, // 26: auth.AuthSettings.epic:type_name -> auth.EpicLogin
	57, // 27: auth.AuthSettings.discord:type_name -> auth.DiscordLogin
	58, // 28: auth.AuthSettings.email_password:type_name -> auth.EmailPasswordLogin
	59, // 29: auth.AuthSettings.username_password:type_name -> auth.UsernamePasswordLogin
	47, // 30: auth.AuthSettings.app_auth:type_name -> auth.AppAuth
	60, // 31: auth.AuthSettings.app_verify:type_name -> auth.AppVerify
	64, // 32: auth.AuthSettings.api_keys:type_name -> auth.ApiKey
	63, // 33: auth.AuthSettings.user_auth_restrictions:type_name -> auth.UserAuthRestriction
	61, // 34: auth.AuthSettings.fixed_rate_limiter_settings:type_name -> auth.FixedRateLimiterSettings
	1,  // 35: auth.ApiKey.state:type_name -> auth.ApiKeyState
	65, // 36: auth.ApiKey.apis:type_name -> auth.ApiKeyEndpoints
	66, // 37: auth.ApiKeyEndpoints.snap_wildcards:type_name -> auth.SnapWildcards
	67, // 38: auth.ApiKeyEndpoints.endpoints:type_name -> auth.Endpoints
	71, // 39: auth.Endpoints.snaps:type_name -> auth.Endpoints.SnapsEntry
	68, // 40: auth.Endpoints.SnapsEntry.value:type_name -> auth.SnapEndpoints
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_auth_types_proto_init() }
func file_auth_types_proto_init() {
	if File_auth_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_auth_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailLoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnonLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnonLoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppleLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppleLoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SteamLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SteamOpenIdLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SteamSessionTicketLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SteamLoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XboxLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XboxLoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpicLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpicLoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacebookLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacebookLoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleLoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscordLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscordLoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailPasswordLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailPasswordLoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyEmailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverEmailAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEmailPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsernamePasswordLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsernamePasswordLoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsernameAvailabilityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsernameAvailabilityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUsernamePasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetUsernamePasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVerifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssociateLoginsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnonLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppleLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacebookLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SteamLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XboxLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpicLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscordLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailPasswordLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsernamePasswordLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVerify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixedRateLimiterSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventAuthAnonUserAdded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAuthRestriction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiKeyEndpoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapWildcards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Endpoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_auth_types_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapEndpoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_auth_types_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   69,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_auth_types_proto_goTypes,
		DependencyIndexes: file_auth_types_proto_depIdxs,
		EnumInfos:         file_auth_types_proto_enumTypes,
		MessageInfos:      file_auth_types_proto_msgTypes,
	}.Build()
	File_auth_types_proto = out.File
	file_auth_types_proto_rawDesc = nil
	file_auth_types_proto_goTypes = nil
	file_auth_types_proto_depIdxs = nil
}
