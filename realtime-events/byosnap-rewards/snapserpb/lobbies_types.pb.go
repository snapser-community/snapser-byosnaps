// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v5.26.1
// source: lobbies_types.proto

package proto

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LobbyVisibility int32

const (
	LobbyVisibility_VISIBILITY_UNKNOWN LobbyVisibility = 0
	LobbyVisibility_PUBLIC             LobbyVisibility = 1
	LobbyVisibility_PRIVATE            LobbyVisibility = 2
)

// Enum value maps for LobbyVisibility.
var (
	LobbyVisibility_name = map[int32]string{
		0: "VISIBILITY_UNKNOWN",
		1: "PUBLIC",
		2: "PRIVATE",
	}
	LobbyVisibility_value = map[string]int32{
		"VISIBILITY_UNKNOWN": 0,
		"PUBLIC":             1,
		"PRIVATE":            2,
	}
)

func (x LobbyVisibility) Enum() *LobbyVisibility {
	p := new(LobbyVisibility)
	*p = x
	return p
}

func (x LobbyVisibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LobbyVisibility) Descriptor() protoreflect.EnumDescriptor {
	return file_lobbies_types_proto_enumTypes[0].Descriptor()
}

func (LobbyVisibility) Type() protoreflect.EnumType {
	return &file_lobbies_types_proto_enumTypes[0]
}

func (x LobbyVisibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LobbyVisibility.Descriptor instead.
func (LobbyVisibility) EnumDescriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{0}
}

type LobbyAccessibility int32

const (
	LobbyAccessibility_ACCESSIBILITY_UNKNOWN      LobbyAccessibility = 0
	LobbyAccessibility_ALLOW_ALL                  LobbyAccessibility = 1
	LobbyAccessibility_INVITE_ONLY                LobbyAccessibility = 2
	LobbyAccessibility_DISALLOW_ALL               LobbyAccessibility = 3
	LobbyAccessibility_OWNER_ADMISSION_ONLY       LobbyAccessibility = 4
	LobbyAccessibility_OWNER_ADMISSION_AND_INVITE LobbyAccessibility = 5
)

// Enum value maps for LobbyAccessibility.
var (
	LobbyAccessibility_name = map[int32]string{
		0: "ACCESSIBILITY_UNKNOWN",
		1: "ALLOW_ALL",
		2: "INVITE_ONLY",
		3: "DISALLOW_ALL",
		4: "OWNER_ADMISSION_ONLY",
		5: "OWNER_ADMISSION_AND_INVITE",
	}
	LobbyAccessibility_value = map[string]int32{
		"ACCESSIBILITY_UNKNOWN":      0,
		"ALLOW_ALL":                  1,
		"INVITE_ONLY":                2,
		"DISALLOW_ALL":               3,
		"OWNER_ADMISSION_ONLY":       4,
		"OWNER_ADMISSION_AND_INVITE": 5,
	}
)

func (x LobbyAccessibility) Enum() *LobbyAccessibility {
	p := new(LobbyAccessibility)
	*p = x
	return p
}

func (x LobbyAccessibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LobbyAccessibility) Descriptor() protoreflect.EnumDescriptor {
	return file_lobbies_types_proto_enumTypes[1].Descriptor()
}

func (LobbyAccessibility) Type() protoreflect.EnumType {
	return &file_lobbies_types_proto_enumTypes[1]
}

func (x LobbyAccessibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LobbyAccessibility.Descriptor instead.
func (LobbyAccessibility) EnumDescriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{1}
}

type PlacementStrategy int32

const (
	PlacementStrategy_UNKNOWN_PLACEMENT_STRATEGY PlacementStrategy = 0
	PlacementStrategy_PLACEMENT_RANDOM           PlacementStrategy = 1
	PlacementStrategy_PLACEMENT_BALANCED         PlacementStrategy = 2
)

// Enum value maps for PlacementStrategy.
var (
	PlacementStrategy_name = map[int32]string{
		0: "UNKNOWN_PLACEMENT_STRATEGY",
		1: "PLACEMENT_RANDOM",
		2: "PLACEMENT_BALANCED",
	}
	PlacementStrategy_value = map[string]int32{
		"UNKNOWN_PLACEMENT_STRATEGY": 0,
		"PLACEMENT_RANDOM":           1,
		"PLACEMENT_BALANCED":         2,
	}
)

func (x PlacementStrategy) Enum() *PlacementStrategy {
	p := new(PlacementStrategy)
	*p = x
	return p
}

func (x PlacementStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlacementStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_lobbies_types_proto_enumTypes[2].Descriptor()
}

func (PlacementStrategy) Type() protoreflect.EnumType {
	return &file_lobbies_types_proto_enumTypes[2]
}

func (x PlacementStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlacementStrategy.Descriptor instead.
func (PlacementStrategy) EnumDescriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{2}
}

// Service Events & Pub/Sub
type LobbiesEventType int32

const (
	LobbiesEventType_UNKNOWN_EVENT_TYPE               LobbiesEventType = 0
	LobbiesEventType_LOBBIES_MEMBER_JOINED            LobbiesEventType = 1
	LobbiesEventType_LOBBIES_MEMBER_LEFT              LobbiesEventType = 2
	LobbiesEventType_LOBBIES_LOBBY_DISBANDED          LobbiesEventType = 3
	LobbiesEventType_LOBBIES_OWNER_CHANGED            LobbiesEventType = 4
	LobbiesEventType_LOBBIES_MEMBER_READY             LobbiesEventType = 5
	LobbiesEventType_LOBBIES_MATCH_STARTED            LobbiesEventType = 6
	LobbiesEventType_LOBBIES_MEMBER_INVITED           LobbiesEventType = 7
	LobbiesEventType_LOBBIES_MEMBER_METADATA_UPDATED  LobbiesEventType = 8
	LobbiesEventType_LOBBIES_MEMBER_PLACEMENT_UPDATED LobbiesEventType = 9
	LobbiesEventType_LOBBIES_MATCH_START_ERROR        LobbiesEventType = 10
	LobbiesEventType_LOBBIES_MEMBER_KICKED            LobbiesEventType = 11
	LobbiesEventType_LOBBIES_LOBBY_CREATED            LobbiesEventType = 12
)

// Enum value maps for LobbiesEventType.
var (
	LobbiesEventType_name = map[int32]string{
		0:  "UNKNOWN_EVENT_TYPE",
		1:  "LOBBIES_MEMBER_JOINED",
		2:  "LOBBIES_MEMBER_LEFT",
		3:  "LOBBIES_LOBBY_DISBANDED",
		4:  "LOBBIES_OWNER_CHANGED",
		5:  "LOBBIES_MEMBER_READY",
		6:  "LOBBIES_MATCH_STARTED",
		7:  "LOBBIES_MEMBER_INVITED",
		8:  "LOBBIES_MEMBER_METADATA_UPDATED",
		9:  "LOBBIES_MEMBER_PLACEMENT_UPDATED",
		10: "LOBBIES_MATCH_START_ERROR",
		11: "LOBBIES_MEMBER_KICKED",
		12: "LOBBIES_LOBBY_CREATED",
	}
	LobbiesEventType_value = map[string]int32{
		"UNKNOWN_EVENT_TYPE":               0,
		"LOBBIES_MEMBER_JOINED":            1,
		"LOBBIES_MEMBER_LEFT":              2,
		"LOBBIES_LOBBY_DISBANDED":          3,
		"LOBBIES_OWNER_CHANGED":            4,
		"LOBBIES_MEMBER_READY":             5,
		"LOBBIES_MATCH_STARTED":            6,
		"LOBBIES_MEMBER_INVITED":           7,
		"LOBBIES_MEMBER_METADATA_UPDATED":  8,
		"LOBBIES_MEMBER_PLACEMENT_UPDATED": 9,
		"LOBBIES_MATCH_START_ERROR":        10,
		"LOBBIES_MEMBER_KICKED":            11,
		"LOBBIES_LOBBY_CREATED":            12,
	}
)

func (x LobbiesEventType) Enum() *LobbiesEventType {
	p := new(LobbiesEventType)
	*p = x
	return p
}

func (x LobbiesEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LobbiesEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_lobbies_types_proto_enumTypes[3].Descriptor()
}

func (LobbiesEventType) Type() protoreflect.EnumType {
	return &file_lobbies_types_proto_enumTypes[3]
}

func (x LobbiesEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LobbiesEventType.Descriptor instead.
func (LobbiesEventType) EnumDescriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{3}
}

// Type Definitions
type Lobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the lobby
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the lobby
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the lobby
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The user id of the lobby owner
	Owner string `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	// Indicates if the lobby is private. This means it will not be listed and is not searchable.  Private lobbies can only be joined by invite, direct addition from the lobby owner, or - if configured - being in a party that was invited/added.
	Private *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=private,proto3" json:"private,omitempty"`
	// If true, parties can be invited or use a password to join the lobby together.  All members of the party will be joined to the lobby (provided the max players allows it) by the party owner using the password or invite url.  The Lobby owner may also add the party to the lobby specifically.
	AllowPartyJoin *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=allow_party_join,json=allowPartyJoin,proto3" json:"allow_party_join,omitempty"`
	// The Lobby cap on members. So sorry, weâ€™re full.
	MaxMembers int64 `protobuf:"varint,8,opt,name=max_members,json=maxMembers,proto3" json:"max_members,omitempty"`
	// The current number of members in the lobby.
	MemberCount int64 `protobuf:"varint,9,opt,name=member_count,json=memberCount,proto3" json:"member_count,omitempty"`
	// If set, the lobby will require a password when joining. This is a way to socially provide access to your Public lobby.
	Password string `protobuf:"bytes,10,opt,name=password,proto3" json:"password,omitempty"`
	// Direct access to the party API with a token attached that will allow membership to the lobby.
	InviteUrl string `protobuf:"bytes,11,opt,name=invite_url,json=inviteUrl,proto3" json:"invite_url,omitempty"`
	// The players that have joined the lobby.
	Members map[string]*Member `protobuf:"bytes,12,rep,name=members,proto3" json:"members,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The metadata of the lobby. Arbitrary, json serializable data that can be searched on.
	SearchMetadata *structpb.Struct `protobuf:"bytes,13,opt,name=search_metadata,json=searchMetadata,proto3" json:"search_metadata,omitempty"`
	// Metadata that is passed into the gameserver upon allocation.
	AllocationMetadata map[string]string `protobuf:"bytes,14,rep,name=allocation_metadata,json=allocationMetadata,proto3" json:"allocation_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Indicates if the lobby has been allocated.
	Allocated *wrapperspb.BoolValue `protobuf:"bytes,15,opt,name=allocated,proto3" json:"allocated,omitempty"`
	// Placement settings for the lobby
	PlacementSettings *PlacementSettings `protobuf:"bytes,16,opt,name=placement_settings,json=placementSettings,proto3" json:"placement_settings,omitempty"`
	Visibility        LobbyVisibility    `protobuf:"varint,17,opt,name=visibility,proto3,enum=lobbies.LobbyVisibility" json:"visibility,omitempty"`
	Accessibility     LobbyAccessibility `protobuf:"varint,18,opt,name=accessibility,proto3,enum=lobbies.LobbyAccessibility" json:"accessibility,omitempty"`
}

func (x *Lobby) Reset() {
	*x = Lobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lobby) ProtoMessage() {}

func (x *Lobby) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lobby.ProtoReflect.Descriptor instead.
func (*Lobby) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{0}
}

func (x *Lobby) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Lobby) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Lobby) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Lobby) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Lobby) GetPrivate() *wrapperspb.BoolValue {
	if x != nil {
		return x.Private
	}
	return nil
}

func (x *Lobby) GetAllowPartyJoin() *wrapperspb.BoolValue {
	if x != nil {
		return x.AllowPartyJoin
	}
	return nil
}

func (x *Lobby) GetMaxMembers() int64 {
	if x != nil {
		return x.MaxMembers
	}
	return 0
}

func (x *Lobby) GetMemberCount() int64 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *Lobby) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Lobby) GetInviteUrl() string {
	if x != nil {
		return x.InviteUrl
	}
	return ""
}

func (x *Lobby) GetMembers() map[string]*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *Lobby) GetSearchMetadata() *structpb.Struct {
	if x != nil {
		return x.SearchMetadata
	}
	return nil
}

func (x *Lobby) GetAllocationMetadata() map[string]string {
	if x != nil {
		return x.AllocationMetadata
	}
	return nil
}

func (x *Lobby) GetAllocated() *wrapperspb.BoolValue {
	if x != nil {
		return x.Allocated
	}
	return nil
}

func (x *Lobby) GetPlacementSettings() *PlacementSettings {
	if x != nil {
		return x.PlacementSettings
	}
	return nil
}

func (x *Lobby) GetVisibility() LobbyVisibility {
	if x != nil {
		return x.Visibility
	}
	return LobbyVisibility_VISIBILITY_UNKNOWN
}

func (x *Lobby) GetAccessibility() LobbyAccessibility {
	if x != nil {
		return x.Accessibility
	}
	return LobbyAccessibility_ACCESSIBILITY_UNKNOWN
}

type PlacementSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of teams that can be created in the lobby
	NumPlacements *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=num_placements,json=numPlacements,proto3" json:"num_placements,omitempty"`
	// If true, members can update their placement.
	AllowMemberPlacementUpdates *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=allow_member_placement_updates,json=allowMemberPlacementUpdates,proto3" json:"allow_member_placement_updates,omitempty"`
	// The strategy used to place members in the lobby.
	PlacementStrategy PlacementStrategy `protobuf:"varint,5,opt,name=placement_strategy,json=placementStrategy,proto3,enum=lobbies.PlacementStrategy" json:"placement_strategy,omitempty"`
	// If true, members can update their placement outside of the range of the num_placements.
	AllowPlacementUpdatesOutsideRange *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=allow_placement_updates_outside_range,json=allowPlacementUpdatesOutsideRange,proto3" json:"allow_placement_updates_outside_range,omitempty"`
}

func (x *PlacementSettings) Reset() {
	*x = PlacementSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlacementSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacementSettings) ProtoMessage() {}

func (x *PlacementSettings) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacementSettings.ProtoReflect.Descriptor instead.
func (*PlacementSettings) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{1}
}

func (x *PlacementSettings) GetNumPlacements() *wrapperspb.Int32Value {
	if x != nil {
		return x.NumPlacements
	}
	return nil
}

func (x *PlacementSettings) GetAllowMemberPlacementUpdates() *wrapperspb.BoolValue {
	if x != nil {
		return x.AllowMemberPlacementUpdates
	}
	return nil
}

func (x *PlacementSettings) GetPlacementStrategy() PlacementStrategy {
	if x != nil {
		return x.PlacementStrategy
	}
	return PlacementStrategy_UNKNOWN_PLACEMENT_STRATEGY
}

func (x *PlacementSettings) GetAllowPlacementUpdatesOutsideRange() *wrapperspb.BoolValue {
	if x != nil {
		return x.AllowPlacementUpdatesOutsideRange
	}
	return nil
}

type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user id of the member
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Boolean indicating if the member is the
	ReadyCheck *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=ready_check,json=readyCheck,proto3" json:"ready_check,omitempty"`
	// The metadata of the member. Arbitrary, json serializable data.
	Metadata *structpb.Struct `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Placement of the member
	Placement *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=placement,proto3" json:"placement,omitempty"`
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{2}
}

func (x *Member) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Member) GetReadyCheck() *wrapperspb.BoolValue {
	if x != nil {
		return x.ReadyCheck
	}
	return nil
}

func (x *Member) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Member) GetPlacement() *wrapperspb.Int32Value {
	if x != nil {
		return x.Placement
	}
	return nil
}

type Invite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the invite
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The user id of the invitee
	InviteeId string `protobuf:"bytes,2,opt,name=invitee_id,json=inviteeId,proto3" json:"invitee_id,omitempty"`
	// The user id of the inviter
	InviterId string `protobuf:"bytes,3,opt,name=inviter_id,json=inviterId,proto3" json:"inviter_id,omitempty"`
	// The lobby id of the lobby the invite is for
	LobbyId string `protobuf:"bytes,4,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	// The time the invite was last updated
	Metadata *structpb.Struct `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Invite) Reset() {
	*x = Invite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Invite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Invite) ProtoMessage() {}

func (x *Invite) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Invite.ProtoReflect.Descriptor instead.
func (*Invite) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{3}
}

func (x *Invite) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Invite) GetInviteeId() string {
	if x != nil {
		return x.InviteeId
	}
	return ""
}

func (x *Invite) GetInviterId() string {
	if x != nil {
		return x.InviterId
	}
	return ""
}

func (x *Invite) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

func (x *Invite) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type EventLobbiesMemberJoined struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType          LobbiesEventType       `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=lobbies.LobbiesEventType" json:"event_type,omitempty"`
	PublishedAt        int64                  `protobuf:"varint,2,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	JoinedUserId       string                 `protobuf:"bytes,3,opt,name=joined_user_id,json=joinedUserId,proto3" json:"joined_user_id,omitempty"`
	JoinedUserMetadata *structpb.Struct       `protobuf:"bytes,4,opt,name=joined_user_metadata,json=joinedUserMetadata,proto3" json:"joined_user_metadata,omitempty"`
	Placement          *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=placement,proto3" json:"placement,omitempty"`
	LobbyId            string                 `protobuf:"bytes,6,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
}

func (x *EventLobbiesMemberJoined) Reset() {
	*x = EventLobbiesMemberJoined{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLobbiesMemberJoined) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLobbiesMemberJoined) ProtoMessage() {}

func (x *EventLobbiesMemberJoined) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLobbiesMemberJoined.ProtoReflect.Descriptor instead.
func (*EventLobbiesMemberJoined) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{4}
}

func (x *EventLobbiesMemberJoined) GetEventType() LobbiesEventType {
	if x != nil {
		return x.EventType
	}
	return LobbiesEventType_UNKNOWN_EVENT_TYPE
}

func (x *EventLobbiesMemberJoined) GetPublishedAt() int64 {
	if x != nil {
		return x.PublishedAt
	}
	return 0
}

func (x *EventLobbiesMemberJoined) GetJoinedUserId() string {
	if x != nil {
		return x.JoinedUserId
	}
	return ""
}

func (x *EventLobbiesMemberJoined) GetJoinedUserMetadata() *structpb.Struct {
	if x != nil {
		return x.JoinedUserMetadata
	}
	return nil
}

func (x *EventLobbiesMemberJoined) GetPlacement() *wrapperspb.Int32Value {
	if x != nil {
		return x.Placement
	}
	return nil
}

func (x *EventLobbiesMemberJoined) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

type EventLobbiesMemberLeft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType        LobbiesEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=lobbies.LobbiesEventType" json:"event_type,omitempty"`
	PublishedAt      int64            `protobuf:"varint,2,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	LeftUserId       string           `protobuf:"bytes,3,opt,name=left_user_id,json=leftUserId,proto3" json:"left_user_id,omitempty"`
	Reason           string           `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	LeftUserMetadata *structpb.Struct `protobuf:"bytes,5,opt,name=left_user_metadata,json=leftUserMetadata,proto3" json:"left_user_metadata,omitempty"`
	LobbyId          string           `protobuf:"bytes,6,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
}

func (x *EventLobbiesMemberLeft) Reset() {
	*x = EventLobbiesMemberLeft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLobbiesMemberLeft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLobbiesMemberLeft) ProtoMessage() {}

func (x *EventLobbiesMemberLeft) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLobbiesMemberLeft.ProtoReflect.Descriptor instead.
func (*EventLobbiesMemberLeft) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{5}
}

func (x *EventLobbiesMemberLeft) GetEventType() LobbiesEventType {
	if x != nil {
		return x.EventType
	}
	return LobbiesEventType_UNKNOWN_EVENT_TYPE
}

func (x *EventLobbiesMemberLeft) GetPublishedAt() int64 {
	if x != nil {
		return x.PublishedAt
	}
	return 0
}

func (x *EventLobbiesMemberLeft) GetLeftUserId() string {
	if x != nil {
		return x.LeftUserId
	}
	return ""
}

func (x *EventLobbiesMemberLeft) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *EventLobbiesMemberLeft) GetLeftUserMetadata() *structpb.Struct {
	if x != nil {
		return x.LeftUserMetadata
	}
	return nil
}

func (x *EventLobbiesMemberLeft) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

type EventLobbiesLobbyDisbanded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType   LobbiesEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=lobbies.LobbiesEventType" json:"event_type,omitempty"`
	PublishedAt int64            `protobuf:"varint,2,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	LobbyId     string           `protobuf:"bytes,3,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	OwnerUserId string           `protobuf:"bytes,4,opt,name=owner_user_id,json=ownerUserId,proto3" json:"owner_user_id,omitempty"`
}

func (x *EventLobbiesLobbyDisbanded) Reset() {
	*x = EventLobbiesLobbyDisbanded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLobbiesLobbyDisbanded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLobbiesLobbyDisbanded) ProtoMessage() {}

func (x *EventLobbiesLobbyDisbanded) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLobbiesLobbyDisbanded.ProtoReflect.Descriptor instead.
func (*EventLobbiesLobbyDisbanded) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{6}
}

func (x *EventLobbiesLobbyDisbanded) GetEventType() LobbiesEventType {
	if x != nil {
		return x.EventType
	}
	return LobbiesEventType_UNKNOWN_EVENT_TYPE
}

func (x *EventLobbiesLobbyDisbanded) GetPublishedAt() int64 {
	if x != nil {
		return x.PublishedAt
	}
	return 0
}

func (x *EventLobbiesLobbyDisbanded) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

func (x *EventLobbiesLobbyDisbanded) GetOwnerUserId() string {
	if x != nil {
		return x.OwnerUserId
	}
	return ""
}

type EventLobbiesOwnerChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType      LobbiesEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=lobbies.LobbiesEventType" json:"event_type,omitempty"`
	PublishedAt    int64            `protobuf:"varint,2,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	LobbyId        string           `protobuf:"bytes,3,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	OldOwnerUserId string           `protobuf:"bytes,4,opt,name=old_owner_user_id,json=oldOwnerUserId,proto3" json:"old_owner_user_id,omitempty"`
	NewOwnerUserId string           `protobuf:"bytes,5,opt,name=new_owner_user_id,json=newOwnerUserId,proto3" json:"new_owner_user_id,omitempty"`
}

func (x *EventLobbiesOwnerChanged) Reset() {
	*x = EventLobbiesOwnerChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLobbiesOwnerChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLobbiesOwnerChanged) ProtoMessage() {}

func (x *EventLobbiesOwnerChanged) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLobbiesOwnerChanged.ProtoReflect.Descriptor instead.
func (*EventLobbiesOwnerChanged) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{7}
}

func (x *EventLobbiesOwnerChanged) GetEventType() LobbiesEventType {
	if x != nil {
		return x.EventType
	}
	return LobbiesEventType_UNKNOWN_EVENT_TYPE
}

func (x *EventLobbiesOwnerChanged) GetPublishedAt() int64 {
	if x != nil {
		return x.PublishedAt
	}
	return 0
}

func (x *EventLobbiesOwnerChanged) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

func (x *EventLobbiesOwnerChanged) GetOldOwnerUserId() string {
	if x != nil {
		return x.OldOwnerUserId
	}
	return ""
}

func (x *EventLobbiesOwnerChanged) GetNewOwnerUserId() string {
	if x != nil {
		return x.NewOwnerUserId
	}
	return ""
}

type EventLobbiesMemberReady struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType   LobbiesEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=lobbies.LobbiesEventType" json:"event_type,omitempty"`
	PublishedAt int64            `protobuf:"varint,2,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	UserId      string           `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsReady     bool             `protobuf:"varint,4,opt,name=is_ready,json=isReady,proto3" json:"is_ready,omitempty"`
	LobbyId     string           `protobuf:"bytes,5,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
}

func (x *EventLobbiesMemberReady) Reset() {
	*x = EventLobbiesMemberReady{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLobbiesMemberReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLobbiesMemberReady) ProtoMessage() {}

func (x *EventLobbiesMemberReady) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLobbiesMemberReady.ProtoReflect.Descriptor instead.
func (*EventLobbiesMemberReady) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{8}
}

func (x *EventLobbiesMemberReady) GetEventType() LobbiesEventType {
	if x != nil {
		return x.EventType
	}
	return LobbiesEventType_UNKNOWN_EVENT_TYPE
}

func (x *EventLobbiesMemberReady) GetPublishedAt() int64 {
	if x != nil {
		return x.PublishedAt
	}
	return 0
}

func (x *EventLobbiesMemberReady) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EventLobbiesMemberReady) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

func (x *EventLobbiesMemberReady) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

type EventLobbiesMatchStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType        LobbiesEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=lobbies.LobbiesEventType" json:"event_type,omitempty"`
	PublishedAt      int64            `protobuf:"varint,2,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	LobbyId          string           `protobuf:"bytes,3,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	ConnectionString string           `protobuf:"bytes,4,opt,name=connection_string,json=connectionString,proto3" json:"connection_string,omitempty"`
	JoinCode         string           `protobuf:"bytes,5,opt,name=join_code,json=joinCode,proto3" json:"join_code,omitempty"`
}

func (x *EventLobbiesMatchStarted) Reset() {
	*x = EventLobbiesMatchStarted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLobbiesMatchStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLobbiesMatchStarted) ProtoMessage() {}

func (x *EventLobbiesMatchStarted) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLobbiesMatchStarted.ProtoReflect.Descriptor instead.
func (*EventLobbiesMatchStarted) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{9}
}

func (x *EventLobbiesMatchStarted) GetEventType() LobbiesEventType {
	if x != nil {
		return x.EventType
	}
	return LobbiesEventType_UNKNOWN_EVENT_TYPE
}

func (x *EventLobbiesMatchStarted) GetPublishedAt() int64 {
	if x != nil {
		return x.PublishedAt
	}
	return 0
}

func (x *EventLobbiesMatchStarted) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

func (x *EventLobbiesMatchStarted) GetConnectionString() string {
	if x != nil {
		return x.ConnectionString
	}
	return ""
}

func (x *EventLobbiesMatchStarted) GetJoinCode() string {
	if x != nil {
		return x.JoinCode
	}
	return ""
}

type EventLobbiesMemberInvited struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType     LobbiesEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=lobbies.LobbiesEventType" json:"event_type,omitempty"`
	PublishedAt   int64            `protobuf:"varint,2,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	LobbyId       string           `protobuf:"bytes,3,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	InviteeUserId string           `protobuf:"bytes,4,opt,name=invitee_user_id,json=inviteeUserId,proto3" json:"invitee_user_id,omitempty"`
	InviterUserId string           `protobuf:"bytes,5,opt,name=inviter_user_id,json=inviterUserId,proto3" json:"inviter_user_id,omitempty"`
	InviteId      string           `protobuf:"bytes,6,opt,name=invite_id,json=inviteId,proto3" json:"invite_id,omitempty"`
}

func (x *EventLobbiesMemberInvited) Reset() {
	*x = EventLobbiesMemberInvited{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLobbiesMemberInvited) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLobbiesMemberInvited) ProtoMessage() {}

func (x *EventLobbiesMemberInvited) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLobbiesMemberInvited.ProtoReflect.Descriptor instead.
func (*EventLobbiesMemberInvited) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{10}
}

func (x *EventLobbiesMemberInvited) GetEventType() LobbiesEventType {
	if x != nil {
		return x.EventType
	}
	return LobbiesEventType_UNKNOWN_EVENT_TYPE
}

func (x *EventLobbiesMemberInvited) GetPublishedAt() int64 {
	if x != nil {
		return x.PublishedAt
	}
	return 0
}

func (x *EventLobbiesMemberInvited) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

func (x *EventLobbiesMemberInvited) GetInviteeUserId() string {
	if x != nil {
		return x.InviteeUserId
	}
	return ""
}

func (x *EventLobbiesMemberInvited) GetInviterUserId() string {
	if x != nil {
		return x.InviterUserId
	}
	return ""
}

func (x *EventLobbiesMemberInvited) GetInviteId() string {
	if x != nil {
		return x.InviteId
	}
	return ""
}

type EventLobbiesMemberMetadataUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType    LobbiesEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=lobbies.LobbiesEventType" json:"event_type,omitempty"`
	PublishedAt  int64            `protobuf:"varint,2,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	LobbyId      string           `protobuf:"bytes,3,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	UserId       string           `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserMetadata *structpb.Struct `protobuf:"bytes,5,opt,name=user_metadata,json=userMetadata,proto3" json:"user_metadata,omitempty"`
}

func (x *EventLobbiesMemberMetadataUpdated) Reset() {
	*x = EventLobbiesMemberMetadataUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLobbiesMemberMetadataUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLobbiesMemberMetadataUpdated) ProtoMessage() {}

func (x *EventLobbiesMemberMetadataUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLobbiesMemberMetadataUpdated.ProtoReflect.Descriptor instead.
func (*EventLobbiesMemberMetadataUpdated) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{11}
}

func (x *EventLobbiesMemberMetadataUpdated) GetEventType() LobbiesEventType {
	if x != nil {
		return x.EventType
	}
	return LobbiesEventType_UNKNOWN_EVENT_TYPE
}

func (x *EventLobbiesMemberMetadataUpdated) GetPublishedAt() int64 {
	if x != nil {
		return x.PublishedAt
	}
	return 0
}

func (x *EventLobbiesMemberMetadataUpdated) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

func (x *EventLobbiesMemberMetadataUpdated) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EventLobbiesMemberMetadataUpdated) GetUserMetadata() *structpb.Struct {
	if x != nil {
		return x.UserMetadata
	}
	return nil
}

type EventLobbiesMemberPlacementUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType   LobbiesEventType       `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=lobbies.LobbiesEventType" json:"event_type,omitempty"`
	PublishedAt int64                  `protobuf:"varint,2,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	LobbyId     string                 `protobuf:"bytes,3,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	UserId      string                 `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Placement   *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=placement,proto3" json:"placement,omitempty"`
}

func (x *EventLobbiesMemberPlacementUpdated) Reset() {
	*x = EventLobbiesMemberPlacementUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLobbiesMemberPlacementUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLobbiesMemberPlacementUpdated) ProtoMessage() {}

func (x *EventLobbiesMemberPlacementUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLobbiesMemberPlacementUpdated.ProtoReflect.Descriptor instead.
func (*EventLobbiesMemberPlacementUpdated) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{12}
}

func (x *EventLobbiesMemberPlacementUpdated) GetEventType() LobbiesEventType {
	if x != nil {
		return x.EventType
	}
	return LobbiesEventType_UNKNOWN_EVENT_TYPE
}

func (x *EventLobbiesMemberPlacementUpdated) GetPublishedAt() int64 {
	if x != nil {
		return x.PublishedAt
	}
	return 0
}

func (x *EventLobbiesMemberPlacementUpdated) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

func (x *EventLobbiesMemberPlacementUpdated) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EventLobbiesMemberPlacementUpdated) GetPlacement() *wrapperspb.Int32Value {
	if x != nil {
		return x.Placement
	}
	return nil
}

type EventLobbiesMatchStartError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType    LobbiesEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=lobbies.LobbiesEventType" json:"event_type,omitempty"`
	PublishedAt  int64            `protobuf:"varint,2,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	LobbyId      string           `protobuf:"bytes,3,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	ErrorMessage string           `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *EventLobbiesMatchStartError) Reset() {
	*x = EventLobbiesMatchStartError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLobbiesMatchStartError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLobbiesMatchStartError) ProtoMessage() {}

func (x *EventLobbiesMatchStartError) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLobbiesMatchStartError.ProtoReflect.Descriptor instead.
func (*EventLobbiesMatchStartError) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{13}
}

func (x *EventLobbiesMatchStartError) GetEventType() LobbiesEventType {
	if x != nil {
		return x.EventType
	}
	return LobbiesEventType_UNKNOWN_EVENT_TYPE
}

func (x *EventLobbiesMatchStartError) GetPublishedAt() int64 {
	if x != nil {
		return x.PublishedAt
	}
	return 0
}

func (x *EventLobbiesMatchStartError) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

func (x *EventLobbiesMatchStartError) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type EventLobbiesMemberKicked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType   LobbiesEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=lobbies.LobbiesEventType" json:"event_type,omitempty"`
	PublishedAt int64            `protobuf:"varint,2,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	LobbyId     string           `protobuf:"bytes,3,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	UserId      string           `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *EventLobbiesMemberKicked) Reset() {
	*x = EventLobbiesMemberKicked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLobbiesMemberKicked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLobbiesMemberKicked) ProtoMessage() {}

func (x *EventLobbiesMemberKicked) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLobbiesMemberKicked.ProtoReflect.Descriptor instead.
func (*EventLobbiesMemberKicked) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{14}
}

func (x *EventLobbiesMemberKicked) GetEventType() LobbiesEventType {
	if x != nil {
		return x.EventType
	}
	return LobbiesEventType_UNKNOWN_EVENT_TYPE
}

func (x *EventLobbiesMemberKicked) GetPublishedAt() int64 {
	if x != nil {
		return x.PublishedAt
	}
	return 0
}

func (x *EventLobbiesMemberKicked) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

func (x *EventLobbiesMemberKicked) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type EventLobbiesLobbyCreated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType LobbiesEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=lobbies.LobbiesEventType" json:"event_type,omitempty"`
	LobbyId   string           `protobuf:"bytes,2,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
}

func (x *EventLobbiesLobbyCreated) Reset() {
	*x = EventLobbiesLobbyCreated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLobbiesLobbyCreated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLobbiesLobbyCreated) ProtoMessage() {}

func (x *EventLobbiesLobbyCreated) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLobbiesLobbyCreated.ProtoReflect.Descriptor instead.
func (*EventLobbiesLobbyCreated) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{15}
}

func (x *EventLobbiesLobbyCreated) GetEventType() LobbiesEventType {
	if x != nil {
		return x.EventType
	}
	return LobbiesEventType_UNKNOWN_EVENT_TYPE
}

func (x *EventLobbiesLobbyCreated) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

// Service Requests & Responses
type CreateLobbyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Deprecated: Marked as deprecated in lobbies_types.proto.
	Private            bool                   `protobuf:"varint,3,opt,name=private,proto3" json:"private,omitempty"`
	AllowPartyJoin     bool                   `protobuf:"varint,4,opt,name=allow_party_join,json=allowPartyJoin,proto3" json:"allow_party_join,omitempty"`
	MaxMembers         int64                  `protobuf:"varint,5,opt,name=max_members,json=maxMembers,proto3" json:"max_members,omitempty"`
	Password           string                 `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	InviteUrl          string                 `protobuf:"bytes,7,opt,name=invite_url,json=inviteUrl,proto3" json:"invite_url,omitempty"`
	SearchMetadata     *structpb.Struct       `protobuf:"bytes,8,opt,name=search_metadata,json=searchMetadata,proto3" json:"search_metadata,omitempty"`
	OwnerMetadata      *structpb.Struct       `protobuf:"bytes,9,opt,name=owner_metadata,json=ownerMetadata,proto3" json:"owner_metadata,omitempty"`
	AllocationMetadata map[string]string      `protobuf:"bytes,10,rep,name=allocation_metadata,json=allocationMetadata,proto3" json:"allocation_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PlacementSettings  *PlacementSettings     `protobuf:"bytes,11,opt,name=placement_settings,json=placementSettings,proto3" json:"placement_settings,omitempty"`
	OwnerPlacement     *wrapperspb.Int32Value `protobuf:"bytes,12,opt,name=owner_placement,json=ownerPlacement,proto3" json:"owner_placement,omitempty"`
	StartAfterSeconds  int32                  `protobuf:"varint,13,opt,name=start_after_seconds,json=startAfterSeconds,proto3" json:"start_after_seconds,omitempty"`
	Visibility         LobbyVisibility        `protobuf:"varint,14,opt,name=visibility,proto3,enum=lobbies.LobbyVisibility" json:"visibility,omitempty"`
	Accessibility      LobbyAccessibility     `protobuf:"varint,15,opt,name=accessibility,proto3,enum=lobbies.LobbyAccessibility" json:"accessibility,omitempty"`
}

func (x *CreateLobbyRequest) Reset() {
	*x = CreateLobbyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLobbyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLobbyRequest) ProtoMessage() {}

func (x *CreateLobbyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLobbyRequest.ProtoReflect.Descriptor instead.
func (*CreateLobbyRequest) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{16}
}

func (x *CreateLobbyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateLobbyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Deprecated: Marked as deprecated in lobbies_types.proto.
func (x *CreateLobbyRequest) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

func (x *CreateLobbyRequest) GetAllowPartyJoin() bool {
	if x != nil {
		return x.AllowPartyJoin
	}
	return false
}

func (x *CreateLobbyRequest) GetMaxMembers() int64 {
	if x != nil {
		return x.MaxMembers
	}
	return 0
}

func (x *CreateLobbyRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateLobbyRequest) GetInviteUrl() string {
	if x != nil {
		return x.InviteUrl
	}
	return ""
}

func (x *CreateLobbyRequest) GetSearchMetadata() *structpb.Struct {
	if x != nil {
		return x.SearchMetadata
	}
	return nil
}

func (x *CreateLobbyRequest) GetOwnerMetadata() *structpb.Struct {
	if x != nil {
		return x.OwnerMetadata
	}
	return nil
}

func (x *CreateLobbyRequest) GetAllocationMetadata() map[string]string {
	if x != nil {
		return x.AllocationMetadata
	}
	return nil
}

func (x *CreateLobbyRequest) GetPlacementSettings() *PlacementSettings {
	if x != nil {
		return x.PlacementSettings
	}
	return nil
}

func (x *CreateLobbyRequest) GetOwnerPlacement() *wrapperspb.Int32Value {
	if x != nil {
		return x.OwnerPlacement
	}
	return nil
}

func (x *CreateLobbyRequest) GetStartAfterSeconds() int32 {
	if x != nil {
		return x.StartAfterSeconds
	}
	return 0
}

func (x *CreateLobbyRequest) GetVisibility() LobbyVisibility {
	if x != nil {
		return x.Visibility
	}
	return LobbyVisibility_VISIBILITY_UNKNOWN
}

func (x *CreateLobbyRequest) GetAccessibility() LobbyAccessibility {
	if x != nil {
		return x.Accessibility
	}
	return LobbyAccessibility_ACCESSIBILITY_UNKNOWN
}

type CreateLobbyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lobby *Lobby `protobuf:"bytes,1,opt,name=lobby,proto3" json:"lobby,omitempty"`
}

func (x *CreateLobbyResponse) Reset() {
	*x = CreateLobbyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLobbyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLobbyResponse) ProtoMessage() {}

func (x *CreateLobbyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLobbyResponse.ProtoReflect.Descriptor instead.
func (*CreateLobbyResponse) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{17}
}

func (x *CreateLobbyResponse) GetLobby() *Lobby {
	if x != nil {
		return x.Lobby
	}
	return nil
}

type GetLobbyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId string `protobuf:"bytes,1,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
}

func (x *GetLobbyRequest) Reset() {
	*x = GetLobbyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLobbyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLobbyRequest) ProtoMessage() {}

func (x *GetLobbyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLobbyRequest.ProtoReflect.Descriptor instead.
func (*GetLobbyRequest) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{18}
}

func (x *GetLobbyRequest) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

type GetLobbyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lobby *Lobby `protobuf:"bytes,1,opt,name=lobby,proto3" json:"lobby,omitempty"`
}

func (x *GetLobbyResponse) Reset() {
	*x = GetLobbyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLobbyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLobbyResponse) ProtoMessage() {}

func (x *GetLobbyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLobbyResponse.ProtoReflect.Descriptor instead.
func (*GetLobbyResponse) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{19}
}

func (x *GetLobbyResponse) GetLobby() *Lobby {
	if x != nil {
		return x.Lobby
	}
	return nil
}

type DeleteLobbyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId string `protobuf:"bytes,1,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	Owner   string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *DeleteLobbyRequest) Reset() {
	*x = DeleteLobbyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLobbyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLobbyRequest) ProtoMessage() {}

func (x *DeleteLobbyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLobbyRequest.ProtoReflect.Descriptor instead.
func (*DeleteLobbyRequest) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteLobbyRequest) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

func (x *DeleteLobbyRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type DeleteLobbyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteLobbyResponse) Reset() {
	*x = DeleteLobbyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLobbyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLobbyResponse) ProtoMessage() {}

func (x *DeleteLobbyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLobbyResponse.ProtoReflect.Descriptor instead.
func (*DeleteLobbyResponse) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteLobbyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ModifyLobbyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId            string                `protobuf:"bytes,1,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	Name               string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description        string                `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Private            *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=private,proto3" json:"private,omitempty"`
	AllowPartyJoin     *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=allow_party_join,json=allowPartyJoin,proto3" json:"allow_party_join,omitempty"`
	MaxMembers         int64                 `protobuf:"varint,6,opt,name=max_members,json=maxMembers,proto3" json:"max_members,omitempty"`
	Password           string                `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
	InviteUrl          string                `protobuf:"bytes,8,opt,name=invite_url,json=inviteUrl,proto3" json:"invite_url,omitempty"`
	SearchMetadata     *structpb.Struct      `protobuf:"bytes,9,opt,name=search_metadata,json=searchMetadata,proto3" json:"search_metadata,omitempty"`
	AllocationMetadata map[string]string     `protobuf:"bytes,10,rep,name=allocation_metadata,json=allocationMetadata,proto3" json:"allocation_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Owner              string                `protobuf:"bytes,11,opt,name=owner,proto3" json:"owner,omitempty"`
	PlacementSettings  *PlacementSettings    `protobuf:"bytes,12,opt,name=placement_settings,json=placementSettings,proto3" json:"placement_settings,omitempty"`
	Visibility         LobbyVisibility       `protobuf:"varint,13,opt,name=visibility,proto3,enum=lobbies.LobbyVisibility" json:"visibility,omitempty"`
	Accessibility      LobbyAccessibility    `protobuf:"varint,14,opt,name=accessibility,proto3,enum=lobbies.LobbyAccessibility" json:"accessibility,omitempty"`
}

func (x *ModifyLobbyRequest) Reset() {
	*x = ModifyLobbyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyLobbyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyLobbyRequest) ProtoMessage() {}

func (x *ModifyLobbyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyLobbyRequest.ProtoReflect.Descriptor instead.
func (*ModifyLobbyRequest) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{22}
}

func (x *ModifyLobbyRequest) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

func (x *ModifyLobbyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModifyLobbyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ModifyLobbyRequest) GetPrivate() *wrapperspb.BoolValue {
	if x != nil {
		return x.Private
	}
	return nil
}

func (x *ModifyLobbyRequest) GetAllowPartyJoin() *wrapperspb.BoolValue {
	if x != nil {
		return x.AllowPartyJoin
	}
	return nil
}

func (x *ModifyLobbyRequest) GetMaxMembers() int64 {
	if x != nil {
		return x.MaxMembers
	}
	return 0
}

func (x *ModifyLobbyRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ModifyLobbyRequest) GetInviteUrl() string {
	if x != nil {
		return x.InviteUrl
	}
	return ""
}

func (x *ModifyLobbyRequest) GetSearchMetadata() *structpb.Struct {
	if x != nil {
		return x.SearchMetadata
	}
	return nil
}

func (x *ModifyLobbyRequest) GetAllocationMetadata() map[string]string {
	if x != nil {
		return x.AllocationMetadata
	}
	return nil
}

func (x *ModifyLobbyRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ModifyLobbyRequest) GetPlacementSettings() *PlacementSettings {
	if x != nil {
		return x.PlacementSettings
	}
	return nil
}

func (x *ModifyLobbyRequest) GetVisibility() LobbyVisibility {
	if x != nil {
		return x.Visibility
	}
	return LobbyVisibility_VISIBILITY_UNKNOWN
}

func (x *ModifyLobbyRequest) GetAccessibility() LobbyAccessibility {
	if x != nil {
		return x.Accessibility
	}
	return LobbyAccessibility_ACCESSIBILITY_UNKNOWN
}

type ModifyLobbyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lobby *Lobby `protobuf:"bytes,1,opt,name=lobby,proto3" json:"lobby,omitempty"`
}

func (x *ModifyLobbyResponse) Reset() {
	*x = ModifyLobbyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyLobbyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyLobbyResponse) ProtoMessage() {}

func (x *ModifyLobbyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyLobbyResponse.ProtoReflect.Descriptor instead.
func (*ModifyLobbyResponse) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{23}
}

func (x *ModifyLobbyResponse) GetLobby() *Lobby {
	if x != nil {
		return x.Lobby
	}
	return nil
}

type MetadataFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string          `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *structpb.Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Op    string          `protobuf:"bytes,3,opt,name=op,proto3" json:"op,omitempty"`
}

func (x *MetadataFilter) Reset() {
	*x = MetadataFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataFilter) ProtoMessage() {}

func (x *MetadataFilter) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataFilter.ProtoReflect.Descriptor instead.
func (*MetadataFilter) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{24}
}

func (x *MetadataFilter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *MetadataFilter) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *MetadataFilter) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

type SortParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Order string `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *SortParams) Reset() {
	*x = SortParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortParams) ProtoMessage() {}

func (x *SortParams) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortParams.ProtoReflect.Descriptor instead.
func (*SortParams) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{25}
}

func (x *SortParams) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SortParams) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type ListLobbiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit           uint32            `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset          uint32            `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	MetadataFilters []*MetadataFilter `protobuf:"bytes,3,rep,name=metadata_filters,json=metadataFilters,proto3" json:"metadata_filters,omitempty"`
	Sort            *SortParams       `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *ListLobbiesRequest) Reset() {
	*x = ListLobbiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLobbiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLobbiesRequest) ProtoMessage() {}

func (x *ListLobbiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLobbiesRequest.ProtoReflect.Descriptor instead.
func (*ListLobbiesRequest) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{26}
}

func (x *ListLobbiesRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListLobbiesRequest) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListLobbiesRequest) GetMetadataFilters() []*MetadataFilter {
	if x != nil {
		return x.MetadataFilters
	}
	return nil
}

func (x *ListLobbiesRequest) GetSort() *SortParams {
	if x != nil {
		return x.Sort
	}
	return nil
}

type ListLobbiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lobbies []*Lobby `protobuf:"bytes,1,rep,name=lobbies,proto3" json:"lobbies,omitempty"`
}

func (x *ListLobbiesResponse) Reset() {
	*x = ListLobbiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLobbiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLobbiesResponse) ProtoMessage() {}

func (x *ListLobbiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLobbiesResponse.ProtoReflect.Descriptor instead.
func (*ListLobbiesResponse) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{27}
}

func (x *ListLobbiesResponse) GetLobbies() []*Lobby {
	if x != nil {
		return x.Lobbies
	}
	return nil
}

type ListLobbiesForMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ListLobbiesForMemberRequest) Reset() {
	*x = ListLobbiesForMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLobbiesForMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLobbiesForMemberRequest) ProtoMessage() {}

func (x *ListLobbiesForMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLobbiesForMemberRequest.ProtoReflect.Descriptor instead.
func (*ListLobbiesForMemberRequest) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{28}
}

func (x *ListLobbiesForMemberRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ListLobbiesForMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lobbies []*Lobby `protobuf:"bytes,1,rep,name=lobbies,proto3" json:"lobbies,omitempty"`
}

func (x *ListLobbiesForMemberResponse) Reset() {
	*x = ListLobbiesForMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLobbiesForMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLobbiesForMemberResponse) ProtoMessage() {}

func (x *ListLobbiesForMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLobbiesForMemberResponse.ProtoReflect.Descriptor instead.
func (*ListLobbiesForMemberResponse) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{29}
}

func (x *ListLobbiesForMemberResponse) GetLobbies() []*Lobby {
	if x != nil {
		return x.Lobbies
	}
	return nil
}

type JoinLobbyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId   string                 `protobuf:"bytes,1,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	UserId    string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Metadata  *structpb.Struct       `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Password  string                 `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	PartyId   string                 `protobuf:"bytes,5,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	Placement *wrapperspb.Int32Value `protobuf:"bytes,6,opt,name=placement,proto3" json:"placement,omitempty"`
}

func (x *JoinLobbyRequest) Reset() {
	*x = JoinLobbyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinLobbyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinLobbyRequest) ProtoMessage() {}

func (x *JoinLobbyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinLobbyRequest.ProtoReflect.Descriptor instead.
func (*JoinLobbyRequest) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{30}
}

func (x *JoinLobbyRequest) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

func (x *JoinLobbyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JoinLobbyRequest) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *JoinLobbyRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *JoinLobbyRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *JoinLobbyRequest) GetPlacement() *wrapperspb.Int32Value {
	if x != nil {
		return x.Placement
	}
	return nil
}

type JoinLobbyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lobby *Lobby `protobuf:"bytes,1,opt,name=lobby,proto3" json:"lobby,omitempty"`
}

func (x *JoinLobbyResponse) Reset() {
	*x = JoinLobbyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinLobbyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinLobbyResponse) ProtoMessage() {}

func (x *JoinLobbyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinLobbyResponse.ProtoReflect.Descriptor instead.
func (*JoinLobbyResponse) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{31}
}

func (x *JoinLobbyResponse) GetLobby() *Lobby {
	if x != nil {
		return x.Lobby
	}
	return nil
}

type LeaveLobbyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId string `protobuf:"bytes,1,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	UserId  string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *LeaveLobbyRequest) Reset() {
	*x = LeaveLobbyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveLobbyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveLobbyRequest) ProtoMessage() {}

func (x *LeaveLobbyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveLobbyRequest.ProtoReflect.Descriptor instead.
func (*LeaveLobbyRequest) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{32}
}

func (x *LeaveLobbyRequest) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

func (x *LeaveLobbyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type LeaveLobbyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *LeaveLobbyResponse) Reset() {
	*x = LeaveLobbyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveLobbyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveLobbyResponse) ProtoMessage() {}

func (x *LeaveLobbyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveLobbyResponse.ProtoReflect.Descriptor instead.
func (*LeaveLobbyResponse) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{33}
}

func (x *LeaveLobbyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type AddLobbyMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId     string           `protobuf:"bytes,1,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	UserId      string           `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RequesterId string           `protobuf:"bytes,3,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	Metadata    *structpb.Struct `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *AddLobbyMemberRequest) Reset() {
	*x = AddLobbyMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLobbyMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLobbyMemberRequest) ProtoMessage() {}

func (x *AddLobbyMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLobbyMemberRequest.ProtoReflect.Descriptor instead.
func (*AddLobbyMemberRequest) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{34}
}

func (x *AddLobbyMemberRequest) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

func (x *AddLobbyMemberRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AddLobbyMemberRequest) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

func (x *AddLobbyMemberRequest) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type AddLobbyMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lobby *Lobby `protobuf:"bytes,1,opt,name=lobby,proto3" json:"lobby,omitempty"`
}

func (x *AddLobbyMemberResponse) Reset() {
	*x = AddLobbyMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLobbyMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLobbyMemberResponse) ProtoMessage() {}

func (x *AddLobbyMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLobbyMemberResponse.ProtoReflect.Descriptor instead.
func (*AddLobbyMemberResponse) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{35}
}

func (x *AddLobbyMemberResponse) GetLobby() *Lobby {
	if x != nil {
		return x.Lobby
	}
	return nil
}

type RemoveLobbyMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId     string `protobuf:"bytes,1,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RequesterId string `protobuf:"bytes,3,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
}

func (x *RemoveLobbyMemberRequest) Reset() {
	*x = RemoveLobbyMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveLobbyMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveLobbyMemberRequest) ProtoMessage() {}

func (x *RemoveLobbyMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveLobbyMemberRequest.ProtoReflect.Descriptor instead.
func (*RemoveLobbyMemberRequest) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{36}
}

func (x *RemoveLobbyMemberRequest) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

func (x *RemoveLobbyMemberRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RemoveLobbyMemberRequest) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

type RemoveLobbyMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lobby *Lobby `protobuf:"bytes,1,opt,name=lobby,proto3" json:"lobby,omitempty"`
}

func (x *RemoveLobbyMemberResponse) Reset() {
	*x = RemoveLobbyMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveLobbyMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveLobbyMemberResponse) ProtoMessage() {}

func (x *RemoveLobbyMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveLobbyMemberResponse.ProtoReflect.Descriptor instead.
func (*RemoveLobbyMemberResponse) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{37}
}

func (x *RemoveLobbyMemberResponse) GetLobby() *Lobby {
	if x != nil {
		return x.Lobby
	}
	return nil
}

type UpdateLobbyMemberMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId  string           `protobuf:"bytes,1,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	UserId   string           `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Metadata *structpb.Struct `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *UpdateLobbyMemberMetadataRequest) Reset() {
	*x = UpdateLobbyMemberMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLobbyMemberMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLobbyMemberMetadataRequest) ProtoMessage() {}

func (x *UpdateLobbyMemberMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLobbyMemberMetadataRequest.ProtoReflect.Descriptor instead.
func (*UpdateLobbyMemberMetadataRequest) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{38}
}

func (x *UpdateLobbyMemberMetadataRequest) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

func (x *UpdateLobbyMemberMetadataRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateLobbyMemberMetadataRequest) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type UpdateLobbyMemberMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpdateLobbyMemberMetadataResponse) Reset() {
	*x = UpdateLobbyMemberMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLobbyMemberMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLobbyMemberMetadataResponse) ProtoMessage() {}

func (x *UpdateLobbyMemberMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLobbyMemberMetadataResponse.ProtoReflect.Descriptor instead.
func (*UpdateLobbyMemberMetadataResponse) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateLobbyMemberMetadataResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type UpdateLobbyMemberPlacementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId   string                 `protobuf:"bytes,1,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	UserId    string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Placement *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=placement,proto3" json:"placement,omitempty"`
}

func (x *UpdateLobbyMemberPlacementRequest) Reset() {
	*x = UpdateLobbyMemberPlacementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLobbyMemberPlacementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLobbyMemberPlacementRequest) ProtoMessage() {}

func (x *UpdateLobbyMemberPlacementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLobbyMemberPlacementRequest.ProtoReflect.Descriptor instead.
func (*UpdateLobbyMemberPlacementRequest) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{40}
}

func (x *UpdateLobbyMemberPlacementRequest) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

func (x *UpdateLobbyMemberPlacementRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateLobbyMemberPlacementRequest) GetPlacement() *wrapperspb.Int32Value {
	if x != nil {
		return x.Placement
	}
	return nil
}

type UpdateLobbyMemberPlacementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpdateLobbyMemberPlacementResponse) Reset() {
	*x = UpdateLobbyMemberPlacementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLobbyMemberPlacementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLobbyMemberPlacementResponse) ProtoMessage() {}

func (x *UpdateLobbyMemberPlacementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLobbyMemberPlacementResponse.ProtoReflect.Descriptor instead.
func (*UpdateLobbyMemberPlacementResponse) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateLobbyMemberPlacementResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ReadyMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId string `protobuf:"bytes,1,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	UserId  string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Ready   bool   `protobuf:"varint,3,opt,name=ready,proto3" json:"ready,omitempty"`
}

func (x *ReadyMemberRequest) Reset() {
	*x = ReadyMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadyMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadyMemberRequest) ProtoMessage() {}

func (x *ReadyMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadyMemberRequest.ProtoReflect.Descriptor instead.
func (*ReadyMemberRequest) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{42}
}

func (x *ReadyMemberRequest) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

func (x *ReadyMemberRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ReadyMemberRequest) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

type ReadyMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lobby *Lobby `protobuf:"bytes,1,opt,name=lobby,proto3" json:"lobby,omitempty"`
}

func (x *ReadyMemberResponse) Reset() {
	*x = ReadyMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadyMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadyMemberResponse) ProtoMessage() {}

func (x *ReadyMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadyMemberResponse.ProtoReflect.Descriptor instead.
func (*ReadyMemberResponse) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{43}
}

func (x *ReadyMemberResponse) GetLobby() *Lobby {
	if x != nil {
		return x.Lobby
	}
	return nil
}

type InviteLobbyMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId   string           `protobuf:"bytes,1,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	InviteeId string           `protobuf:"bytes,2,opt,name=invitee_id,json=inviteeId,proto3" json:"invitee_id,omitempty"`
	InviterId string           `protobuf:"bytes,3,opt,name=inviter_id,json=inviterId,proto3" json:"inviter_id,omitempty"`
	Metadata  *structpb.Struct `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *InviteLobbyMemberRequest) Reset() {
	*x = InviteLobbyMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteLobbyMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteLobbyMemberRequest) ProtoMessage() {}

func (x *InviteLobbyMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteLobbyMemberRequest.ProtoReflect.Descriptor instead.
func (*InviteLobbyMemberRequest) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{44}
}

func (x *InviteLobbyMemberRequest) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

func (x *InviteLobbyMemberRequest) GetInviteeId() string {
	if x != nil {
		return x.InviteeId
	}
	return ""
}

func (x *InviteLobbyMemberRequest) GetInviterId() string {
	if x != nil {
		return x.InviterId
	}
	return ""
}

func (x *InviteLobbyMemberRequest) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type InviteLobbyMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invite *Invite `protobuf:"bytes,1,opt,name=invite,proto3" json:"invite,omitempty"`
}

func (x *InviteLobbyMemberResponse) Reset() {
	*x = InviteLobbyMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteLobbyMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteLobbyMemberResponse) ProtoMessage() {}

func (x *InviteLobbyMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteLobbyMemberResponse.ProtoReflect.Descriptor instead.
func (*InviteLobbyMemberResponse) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{45}
}

func (x *InviteLobbyMemberResponse) GetInvite() *Invite {
	if x != nil {
		return x.Invite
	}
	return nil
}

type AcceptLobbyInviteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteId string           `protobuf:"bytes,1,opt,name=invite_id,json=inviteId,proto3" json:"invite_id,omitempty"`
	UserId   string           `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Metadata *structpb.Struct `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *AcceptLobbyInviteRequest) Reset() {
	*x = AcceptLobbyInviteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptLobbyInviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptLobbyInviteRequest) ProtoMessage() {}

func (x *AcceptLobbyInviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptLobbyInviteRequest.ProtoReflect.Descriptor instead.
func (*AcceptLobbyInviteRequest) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{46}
}

func (x *AcceptLobbyInviteRequest) GetInviteId() string {
	if x != nil {
		return x.InviteId
	}
	return ""
}

func (x *AcceptLobbyInviteRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AcceptLobbyInviteRequest) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type AcceptLobbyInviteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lobby *Lobby `protobuf:"bytes,1,opt,name=lobby,proto3" json:"lobby,omitempty"`
}

func (x *AcceptLobbyInviteResponse) Reset() {
	*x = AcceptLobbyInviteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptLobbyInviteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptLobbyInviteResponse) ProtoMessage() {}

func (x *AcceptLobbyInviteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptLobbyInviteResponse.ProtoReflect.Descriptor instead.
func (*AcceptLobbyInviteResponse) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{47}
}

func (x *AcceptLobbyInviteResponse) GetLobby() *Lobby {
	if x != nil {
		return x.Lobby
	}
	return nil
}

type ListLobbyInvitesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId string `protobuf:"bytes,1,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	Owner   string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *ListLobbyInvitesRequest) Reset() {
	*x = ListLobbyInvitesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLobbyInvitesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLobbyInvitesRequest) ProtoMessage() {}

func (x *ListLobbyInvitesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLobbyInvitesRequest.ProtoReflect.Descriptor instead.
func (*ListLobbyInvitesRequest) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{48}
}

func (x *ListLobbyInvitesRequest) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

func (x *ListLobbyInvitesRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type ListLobbyInvitesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invites []*Invite `protobuf:"bytes,1,rep,name=invites,proto3" json:"invites,omitempty"`
}

func (x *ListLobbyInvitesResponse) Reset() {
	*x = ListLobbyInvitesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLobbyInvitesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLobbyInvitesResponse) ProtoMessage() {}

func (x *ListLobbyInvitesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLobbyInvitesResponse.ProtoReflect.Descriptor instead.
func (*ListLobbyInvitesResponse) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{49}
}

func (x *ListLobbyInvitesResponse) GetInvites() []*Invite {
	if x != nil {
		return x.Invites
	}
	return nil
}

type ListLobbyMemberInvitesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ListLobbyMemberInvitesRequest) Reset() {
	*x = ListLobbyMemberInvitesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLobbyMemberInvitesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLobbyMemberInvitesRequest) ProtoMessage() {}

func (x *ListLobbyMemberInvitesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLobbyMemberInvitesRequest.ProtoReflect.Descriptor instead.
func (*ListLobbyMemberInvitesRequest) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{50}
}

func (x *ListLobbyMemberInvitesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ListLobbyMemberInvitesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invites []*Invite `protobuf:"bytes,1,rep,name=invites,proto3" json:"invites,omitempty"`
}

func (x *ListLobbyMemberInvitesResponse) Reset() {
	*x = ListLobbyMemberInvitesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLobbyMemberInvitesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLobbyMemberInvitesResponse) ProtoMessage() {}

func (x *ListLobbyMemberInvitesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLobbyMemberInvitesResponse.ProtoReflect.Descriptor instead.
func (*ListLobbyMemberInvitesResponse) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{51}
}

func (x *ListLobbyMemberInvitesResponse) GetInvites() []*Invite {
	if x != nil {
		return x.Invites
	}
	return nil
}

type TransferOwnershipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId      string `protobuf:"bytes,1,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	CurrentOwner string `protobuf:"bytes,2,opt,name=current_owner,json=currentOwner,proto3" json:"current_owner,omitempty"`
	NewOwner     string `protobuf:"bytes,3,opt,name=new_owner,json=newOwner,proto3" json:"new_owner,omitempty"`
}

func (x *TransferOwnershipRequest) Reset() {
	*x = TransferOwnershipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferOwnershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferOwnershipRequest) ProtoMessage() {}

func (x *TransferOwnershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferOwnershipRequest.ProtoReflect.Descriptor instead.
func (*TransferOwnershipRequest) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{52}
}

func (x *TransferOwnershipRequest) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

func (x *TransferOwnershipRequest) GetCurrentOwner() string {
	if x != nil {
		return x.CurrentOwner
	}
	return ""
}

func (x *TransferOwnershipRequest) GetNewOwner() string {
	if x != nil {
		return x.NewOwner
	}
	return ""
}

type TransferOwnershipResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lobby *Lobby `protobuf:"bytes,1,opt,name=lobby,proto3" json:"lobby,omitempty"`
}

func (x *TransferOwnershipResponse) Reset() {
	*x = TransferOwnershipResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferOwnershipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferOwnershipResponse) ProtoMessage() {}

func (x *TransferOwnershipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferOwnershipResponse.ProtoReflect.Descriptor instead.
func (*TransferOwnershipResponse) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{53}
}

func (x *TransferOwnershipResponse) GetLobby() *Lobby {
	if x != nil {
		return x.Lobby
	}
	return nil
}

type StartMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId   string `protobuf:"bytes,1,opt,name=lobby_id,json=lobbyId,proto3" json:"lobby_id,omitempty"`
	Owner     string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Region    string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	FleetName string `protobuf:"bytes,4,opt,name=fleetName,proto3" json:"fleetName,omitempty"`
	StartAt   int64  `protobuf:"varint,5,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
}

func (x *StartMatchRequest) Reset() {
	*x = StartMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMatchRequest) ProtoMessage() {}

func (x *StartMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMatchRequest.ProtoReflect.Descriptor instead.
func (*StartMatchRequest) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{54}
}

func (x *StartMatchRequest) GetLobbyId() string {
	if x != nil {
		return x.LobbyId
	}
	return ""
}

func (x *StartMatchRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *StartMatchRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *StartMatchRequest) GetFleetName() string {
	if x != nil {
		return x.FleetName
	}
	return ""
}

func (x *StartMatchRequest) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

type StartMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lobby *Lobby `protobuf:"bytes,1,opt,name=lobby,proto3" json:"lobby,omitempty"`
}

func (x *StartMatchResponse) Reset() {
	*x = StartMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lobbies_types_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMatchResponse) ProtoMessage() {}

func (x *StartMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lobbies_types_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMatchResponse.ProtoReflect.Descriptor instead.
func (*StartMatchResponse) Descriptor() ([]byte, []int) {
	return file_lobbies_types_proto_rawDescGZIP(), []int{55}
}

func (x *StartMatchResponse) GetLobby() *Lobby {
	if x != nil {
		return x.Lobby
	}
	return nil
}

var File_lobbies_types_proto protoreflect.FileDescriptor

var file_lobbies_types_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x07, 0x0a, 0x05, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x07,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x35, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69,
	0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x40,
	0x0a, 0x0f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x57, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x11, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38,
	0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x4b, 0x0a, 0x0c, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c,
	0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x17, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xf1, 0x02, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5f, 0x0a, 0x1e, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73,
	0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x6c, 0x0a, 0x25, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x5f, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x21, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b,
	0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x72, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x33, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x39, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x06,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12,
	0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xbe, 0x02, 0x0a, 0x18, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f,
	0x62, 0x62, 0x69, 0x65, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x38, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e,
	0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x14, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x12, 0x6a, 0x6f, 0x69,
	0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x39, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x49, 0x64, 0x22, 0x91, 0x02, 0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c,
	0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74,
	0x12, 0x38, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c,
	0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a,
	0x0c, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x12, 0x6c, 0x65, 0x66, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x10, 0x6c, 0x65,
	0x66, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x1a, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44,
	0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c,
	0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xe8, 0x01, 0x0a, 0x18, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f,
	0x62, 0x62, 0x69, 0x65, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x12, 0x38, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e,
	0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x6f, 0x6c, 0x64,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x6c, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6e, 0x65, 0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xc5, 0x01, 0x0a, 0x17, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x38, 0x0a, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x22, 0xdc, 0x01, 0x0a, 0x18, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69,
	0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f,
	0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x19, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69,
	0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x64, 0x22, 0xf2, 0x01, 0x0a, 0x21, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x38, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x6f,
	0x62, 0x62, 0x69, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x3c, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf0,
	0x01, 0x0a, 0x22, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x6f, 0x62, 0x62,
	0x69, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0xba, 0x01, 0x0a, 0x1b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x69,
	0x65, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x38, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e,
	0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xab,
	0x01, 0x0a, 0x18, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x18,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c,
	0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x22, 0xaa, 0x10,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x17, 0x32, 0x11, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41,
	0x1e, 0x32, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x9a, 0x02, 0x01, 0x07, 0xe0,
	0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0xd9, 0x02,
	0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6a, 0x6f,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0xae, 0x02, 0x92, 0x41, 0xa7, 0x02, 0x32,
	0xa0, 0x02, 0x49, 0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x64, 0x20, 0x6f, 0x72, 0x20, 0x75, 0x73, 0x65, 0x20, 0x61, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x6a, 0x6f, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x20, 0x74, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x20,
	0x20, 0x41, 0x6c, 0x6c, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x79, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62,
	0x65, 0x20, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x20, 0x28, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x78, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x20,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x69, 0x74, 0x29, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x79, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x20, 0x75, 0x73,
	0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x20, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x20, 0x75, 0x72, 0x6c, 0x2e, 0x20,
	0x20, 0x54, 0x68, 0x65, 0x20, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x20, 0x6d, 0x61, 0x79, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x61, 0x64, 0x64, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6c, 0x6c,
	0x79, 0x2e, 0x9a, 0x02, 0x01, 0x02, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x46, 0x0a, 0x0b, 0x6d, 0x61, 0x78,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x25,
	0x92, 0x41, 0x1f, 0x32, 0x19, 0x54, 0x68, 0x65, 0x20, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x20, 0x63,
	0x61, 0x70, 0x20, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x9a, 0x02,
	0x01, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x9f, 0x01, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x82, 0x01, 0x92, 0x41, 0x7c, 0x32, 0x76, 0x49, 0x66, 0x20, 0x73,
	0x65, 0x74, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x20, 0x77, 0x69,
	0x6c, 0x6c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x20, 0x61, 0x20, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6a, 0x6f, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x77, 0x61,
	0x79, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x79, 0x6f, 0x75, 0x72, 0x20, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x2e, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x88, 0x01, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x69, 0x92, 0x41, 0x63, 0x32, 0x5d, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x79, 0x20, 0x41, 0x50, 0x49, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x61, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x20, 0x74,
	0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x9a, 0x02, 0x01, 0x07,
	0xe0, 0x41, 0x01, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0xa3,
	0x01, 0x0a, 0x0f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x42, 0x61, 0x92, 0x41, 0x5b, 0x32, 0x55, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x2e, 0x20, 0x41, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x72, 0x79, 0x2c, 0x20, 0x6a, 0x73,
	0x6f, 0x6e, 0x20, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x20,
	0x64, 0x61, 0x74, 0x61, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65,
	0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x2e, 0x9a, 0x02, 0x01,
	0x06, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x66, 0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x26, 0x92, 0x41, 0x20, 0x32, 0x1a, 0x54, 0x68, 0x65, 0x20,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2e, 0x9a, 0x02, 0x01, 0x06, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0xae, 0x01, 0x0a,
	0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6c, 0x6f, 0x62,
	0x62, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x48, 0x92, 0x41, 0x42, 0x32, 0x3c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x74,
	0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x20, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x20, 0x69, 0x6e,
	0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x20, 0x75, 0x70, 0x6f, 0x6e, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x9a, 0x02, 0x01, 0x06, 0xe0, 0x41, 0x01, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x77, 0x0a,
	0x12, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x6f, 0x62, 0x62,
	0x69, 0x65, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x2c, 0x92, 0x41, 0x26, 0x32, 0x20, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x9a, 0x02, 0x01, 0x06,
	0xe0, 0x41, 0x01, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x6f, 0x0a, 0x13,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3f, 0x92, 0x41, 0x39, 0x32, 0x37,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0xc0, 0x01,
	0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x85, 0x01, 0x92,
	0x41, 0x77, 0x32, 0x71, 0x54, 0x68, 0x65, 0x20, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x2e,
	0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x20, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x73, 0x20,
	0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x20, 0x69, 0x73, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x6f, 0x72,
	0x20, 0x6e, 0x6f, 0x74, 0x2e, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x01, 0xfa, 0x42, 0x05, 0x82,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0xb0, 0x01, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69,
	0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x6d, 0x92, 0x41, 0x5f, 0x32, 0x59, 0x54, 0x68, 0x65, 0x20,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x61, 0x6c,
	0x6c, 0x2e, 0x20, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68,
	0x6f, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x6a, 0x6f, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x2e, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x01, 0xfa, 0x42, 0x05, 0x82,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x1a, 0x45, 0x0a, 0x17, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3b, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x24, 0x0a, 0x05, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x52, 0x05, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x22, 0x58, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41,
	0x24, 0x32, 0x1e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49,
	0x64, 0x22, 0x38, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x52, 0x05, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x22, 0x9d, 0x01, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x24, 0x32, 0x1e, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02,
	0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x24, 0x32, 0x1e, 0x54,
	0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x9a, 0x02, 0x01,
	0x07, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x2f, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xbd, 0x11, 0x0a,
	0x12, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x15, 0x32, 0x0f, 0x49, 0x44, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x9a, 0x02, 0x01, 0x07, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69,
	0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x07,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x17, 0x32, 0x11, 0x4e, 0x61, 0x6d, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x9a, 0x02, 0x01,
	0x07, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x24, 0x92, 0x41, 0x1e, 0x32, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x9a, 0x02,
	0x01, 0x07, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0xb4, 0x02, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0xfd, 0x01, 0x92, 0x41, 0xf6, 0x01, 0x32, 0xef, 0x01, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79,
	0x20, 0x69, 0x73, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x20, 0x41, 0x20, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x20, 0x77, 0x69, 0x6c,
	0x6c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x20, 0x20, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20,
	0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x6f, 0x6e, 0x6c, 0x79,
	0x20, 0x62, 0x65, 0x20, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x2c, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x20, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x2d,
	0x20, 0x69, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x20, 0x2d,
	0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x64, 0x2f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x2e, 0x9a, 0x02, 0x01, 0x02, 0xe0, 0x41, 0x01,
	0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0xf5, 0x02, 0x0a, 0x10, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0xae, 0x02, 0x92, 0x41, 0xa7, 0x02, 0x32, 0xa0, 0x02, 0x49, 0x66, 0x20, 0x74, 0x72, 0x75,
	0x65, 0x2c, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62,
	0x65, 0x20, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x75, 0x73, 0x65,
	0x20, 0x61, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x6a,
	0x6f, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x20, 0x74, 0x6f,
	0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x20, 0x20, 0x41, 0x6c, 0x6c, 0x20, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64,
	0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x20, 0x28, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x78, 0x20,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x69,
	0x74, 0x29, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x79, 0x20,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x20, 0x75, 0x72, 0x6c, 0x2e, 0x20, 0x20, 0x54, 0x68, 0x65, 0x20, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x61, 0x6c, 0x73,
	0x6f, 0x20, 0x61, 0x64, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x79, 0x20,
	0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x20, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x2e, 0x9a, 0x02, 0x01, 0x02, 0xe0, 0x41,
	0x01, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4a, 0x6f, 0x69,
	0x6e, 0x12, 0x46, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x25, 0x92, 0x41, 0x1f, 0x32, 0x19, 0x54, 0x68, 0x65,
	0x20, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x20, 0x63, 0x61, 0x70, 0x20, 0x6f, 0x6e, 0x20, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x82, 0x01, 0x92,
	0x41, 0x7c, 0x32, 0x76, 0x49, 0x66, 0x20, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x20, 0x61, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x6a, 0x6f, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73,
	0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x77, 0x61, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x20, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41,
	0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x88, 0x01, 0x0a, 0x0a,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x69, 0x92, 0x41, 0x63, 0x32, 0x5d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x20, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x20, 0x41, 0x50, 0x49, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x20, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74,
	0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x2e, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0xa3, 0x01, 0x0a, 0x0f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x61, 0x92, 0x41, 0x5b, 0x32, 0x55,
	0x54, 0x68, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x20, 0x41, 0x72, 0x62, 0x69, 0x74,
	0x72, 0x61, 0x72, 0x79, 0x2c, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x20, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x74, 0x68, 0x61,
	0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x64, 0x20, 0x6f, 0x6e, 0x2e, 0x9a, 0x02, 0x01, 0x06, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0xae, 0x01, 0x0a,
	0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6c, 0x6f, 0x62,
	0x62, 0x69, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x48, 0x92, 0x41, 0x42, 0x32, 0x3c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x74,
	0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x20, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x20, 0x69, 0x6e,
	0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x20, 0x75, 0x70, 0x6f, 0x6e, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x9a, 0x02, 0x01, 0x06, 0xe0, 0x41, 0x01, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41,
	0x24, 0x32, 0x1e, 0x54, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x64, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x20, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x77, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x6f,
	0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x2c, 0x92, 0x41, 0x26, 0x32, 0x20, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x9a, 0x02,
	0x01, 0x06, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0xb3, 0x01, 0x0a, 0x0a, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x79, 0x92, 0x41, 0x73, 0x32, 0x71, 0x54, 0x68,
	0x65, 0x20, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x20, 0x44,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x20, 0x69, 0x73, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x2e, 0xe0,
	0x41, 0x01, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0xa4,
	0x01, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73,
	0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x42, 0x61, 0x92, 0x41, 0x5b, 0x32, 0x59, 0x54, 0x68, 0x65, 0x20, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x61, 0x6c, 0x6c, 0x2e,
	0x20, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x6f, 0x20,
	0x63, 0x61, 0x6e, 0x20, 0x6a, 0x6f, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x2e, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x45, 0x0a, 0x17, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3b, 0x0a, 0x13,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x52, 0x05, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x22, 0x9b, 0x02, 0x0a, 0x0e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x2d, 0x32, 0x27,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x20, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x9a, 0x02, 0x01, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x21,
	0x92, 0x41, 0x16, 0x32, 0x14, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6d, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x5d, 0x92, 0x41, 0x43, 0x32, 0x3d, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x2e, 0x20, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x20, 0x2d, 0x20, 0x4c, 0x49, 0x4b, 0x45, 0x2c, 0x20, 0x3d, 0x2c, 0x20,
	0x3c, 0x3e, 0x2c, 0x20, 0x3e, 0x2c, 0x20, 0x3c, 0x9a, 0x02, 0x01, 0x07, 0xfa, 0x42, 0x14, 0x72,
	0x12, 0x52, 0x01, 0x3d, 0x52, 0x04, 0x4c, 0x49, 0x4b, 0x45, 0x52, 0x01, 0x3e, 0x52, 0x01, 0x3c,
	0x52, 0x01, 0x2a, 0x52, 0x02, 0x6f, 0x70, 0x22, 0xba, 0x01, 0x0a, 0x0a, 0x53, 0x6f, 0x72, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x51, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x31, 0x32, 0x2b, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x20, 0x6f, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65,
	0x20, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x59, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0x92, 0x41, 0x30, 0x32, 0x2a, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x20, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x2d, 0x20,
	0x61, 0x73, 0x63, 0x2c, 0x20, 0x64, 0x65, 0x73, 0x63, 0x9a, 0x02, 0x01, 0x07, 0xfa, 0x42, 0x0d,
	0x72, 0x0b, 0x52, 0x03, 0x61, 0x73, 0x63, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x52, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x22, 0x99, 0x03, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x62,
	0x62, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7f, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x69, 0x92, 0x41, 0x5c, 0x32,
	0x56, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x2e, 0x20, 0x54, 0x68, 0x65,
	0x20, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x20, 0x69, 0x73, 0x20, 0x35, 0x30, 0x2c, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x20, 0x74, 0x6f, 0x20, 0x31, 0x30, 0x20, 0x69, 0x66, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x2e, 0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x01, 0xfa, 0x42,
	0x04, 0x2a, 0x02, 0x18, 0x32, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x5e, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x46, 0x92, 0x41,
	0x40, 0x32, 0x3a, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x6b, 0x69, 0x70, 0x20, 0x66, 0x72, 0x6f,
	0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x73, 0x65, 0x74, 0x9a, 0x02, 0x01,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x60, 0x0a, 0x10,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42,
	0x1c, 0x92, 0x41, 0x16, 0x32, 0x10, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x9a, 0x02, 0x01, 0x01, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x40,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c,
	0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x42, 0x17, 0x92, 0x41, 0x11, 0x32, 0x0b, 0x53, 0x6f, 0x72, 0x74, 0x20, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x9a, 0x02, 0x01, 0x06, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x22, 0x3f, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69,
	0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65,
	0x73, 0x22, 0x6e, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4f, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x36, 0x92, 0x41, 0x14, 0x32, 0x0e, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x19,
	0x72, 0x17, 0x10, 0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x48, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x22, 0xfd, 0x03, 0x0a, 0x10,
	0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x45, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x24, 0x32, 0x1e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0x52, 0x07,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2b, 0x32, 0x25, 0x55,
	0x73, 0x65, 0x72, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x6a, 0x6f, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x32,
	0x92, 0x41, 0x2c, 0x32, 0x26, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6a, 0x6f, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x9a, 0x02, 0x01, 0x06, 0xe0,
	0x41, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26,
	0x92, 0x41, 0x20, 0x32, 0x1a, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x6a, 0x6f, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x9a,
	0x02, 0x01, 0x07, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x4e, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x2d, 0x32, 0x27, 0x50, 0x61, 0x72, 0x74, 0x79, 0x20, 0x69,
	0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x79, 0x20, 0x74,
	0x6f, 0x20, 0x6a, 0x6f, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79,
	0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x59, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x15, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x03,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x39, 0x0a, 0x11, 0x4a,
	0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x05, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52,
	0x05, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x22, 0xa6, 0x01, 0x0a, 0x11, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x08,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a,
	0x92, 0x41, 0x24, 0x32, 0x1e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2b, 0x32, 0x25, 0x55, 0x73, 0x65, 0x72, 0x20,
	0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6c,
	0x65, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79,
	0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x2e, 0x0a, 0x12, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x84, 0x03, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x24,
	0x32, 0x1e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79,
	0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64,
	0x12, 0x51, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x38, 0x92, 0x41, 0x32, 0x32, 0x2c, 0x55, 0x73, 0x65, 0x72, 0x20, 0x69, 0x64, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x62,
	0x65, 0x20, 0x61, 0x64, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3e, 0x92, 0x41, 0x38, 0x32, 0x32,
	0x55, 0x73, 0x65, 0x72, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x20, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x6e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x42, 0x39, 0x92, 0x41, 0x33, 0x32, 0x2d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20,
	0x62, 0x65, 0x20, 0x61, 0x64, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x9a, 0x02, 0x01, 0x06, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3e, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x05, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52,
	0x05, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x22, 0x9f, 0x02, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x24, 0x32, 0x1e, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41,
	0x02, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x92, 0x41, 0x36,
	0x32, 0x30, 0x55, 0x73, 0x65, 0x72, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x65, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0x92, 0x41, 0x3c, 0x32, 0x36, 0x55, 0x73,
	0x65, 0x72, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x52, 0x05, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x22, 0x9f, 0x02, 0x0a, 0x20,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x45, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x24, 0x32, 0x1e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0x52, 0x07,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x30, 0x32, 0x2a, 0x55,
	0x73, 0x65, 0x72, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x66, 0x6f, 0x72, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x42, 0x2e, 0x92, 0x41, 0x28, 0x32, 0x22, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74,
	0x6f, 0x20, 0x62, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x06,
	0xe0, 0x41, 0x02, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3d, 0x0a,
	0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x99, 0x02, 0x0a,
	0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x24, 0x32, 0x1e, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02,
	0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x30, 0x32,
	0x2a, 0x55, 0x73, 0x65, 0x72, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x66, 0x6f, 0x72, 0x9a, 0x02, 0x01, 0x07, 0xe0,
	0x41, 0x02, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x09, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x21, 0x92, 0x41, 0x1b, 0x32,
	0x15, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3e, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xf6, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x45, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2a, 0x92, 0x41, 0x24, 0x32, 0x1e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x2f, 0x32, 0x29, 0x55, 0x73,
	0x65, 0x72, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x20, 0x61,
	0x73, 0x20, 0x72, 0x65, 0x61, 0x64, 0x79, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x33, 0x92, 0x41, 0x2d, 0x32, 0x27, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x69,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x9a, 0x02, 0x01, 0x02, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x22, 0x3b, 0x0a, 0x13, 0x52, 0x65, 0x61, 0x64, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65,
	0x73, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x05, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x22, 0x8f,
	0x03, 0x0a, 0x18, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92,
	0x41, 0x24, 0x32, 0x1e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79,
	0x49, 0x64, 0x12, 0x59, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41, 0x34, 0x32, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x20, 0x74,
	0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x9a, 0x02, 0x01, 0x07, 0xe0,
	0x41, 0x02, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x49, 0x64, 0x12, 0x5f, 0x0a,
	0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x40, 0x92, 0x41, 0x3a, 0x32, 0x34, 0x55, 0x73, 0x65, 0x72, 0x20, 0x69, 0x64, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20,
	0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x9a, 0x02, 0x01, 0x07,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x70,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x3b, 0x92, 0x41, 0x35, 0x32, 0x2f,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x9a,
	0x02, 0x01, 0x06, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x44, 0x0a, 0x19, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a,
	0x06, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x06,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x22, 0xf1, 0x02, 0x0a, 0x18, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x16, 0x32, 0x10, 0x49, 0x44, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x9a, 0x02, 0x01,
	0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x01, 0x18, 0x32, 0x32, 0x10, 0x28,
	0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x2a, 0x24, 0x52,
	0x08, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x92, 0x01, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x79, 0x92, 0x41, 0x57,
	0x32, 0x51, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x75, 0x73, 0x74,
	0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x65, 0x5f, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x10,
	0x01, 0x18, 0x32, 0x32, 0x11, 0x28, 0x3f, 0x69, 0x29, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x6a,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x35, 0x92, 0x41, 0x2f, 0x32, 0x29,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x20, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x9a, 0x02, 0x01, 0x06, 0xe0, 0x41, 0x01,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x41, 0x0a, 0x19, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x6c, 0x6f, 0x62, 0x62, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73,
	0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x05, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x22, 0xaa, 0x01,
	0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x08, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x29,
	0x32, 0x23, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x20, 0x66, 0x6f, 0x72, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x27, 0x32, 0x21, 0x55, 0x73, 0x65, 0x72, 0x20,
	0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x9a, 0x02, 0x01, 0x07,
	0xe0, 0x41, 0x02, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x45, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x73, 0x22, 0x68, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x47, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x28, 0x32, 0x22, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x9a, 0x02, 0x01, 0x07,
	0xe0, 0x41, 0x02, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x1e, 0x4c,
	0x69, 0x73, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52,
	0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x22, 0x82, 0x02, 0x0a, 0x18, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x24, 0x32, 0x1e, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x9a, 0x02, 0x01, 0x07,
	0xe0, 0x41, 0x02, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x22, 0x32, 0x1c, 0x55, 0x73, 0x65, 0x72, 0x20, 0x69,
	0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x09, 0x6e,
	0x65, 0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33,
	0x92, 0x41, 0x2d, 0x32, 0x27, 0x55, 0x73, 0x65, 0x72, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x9a, 0x02, 0x01, 0x07,
	0xe0, 0x41, 0x02, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x41, 0x0a,
	0x19, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x6f, 0x62, 0x62,
	0x69, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x05, 0x6c, 0x6f, 0x62, 0x62, 0x79,
	0x22, 0xa2, 0x03, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x24, 0x32, 0x1e, 0x55,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x9a, 0x02, 0x01,
	0x07, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x3c, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41,
	0x20, 0x32, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x9a, 0x02, 0x01,
	0x07, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x2e,
	0x32, 0x28, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65,
	0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41,
	0x02, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x09, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41,
	0x35, 0x32, 0x2f, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f,
	0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x61, 0x6d,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x44, 0x92, 0x41, 0x3e, 0x32, 0x3c, 0x54, 0x69, 0x6d,
	0x65, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x20, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x73, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x22, 0x3a, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x6f, 0x62,
	0x62, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x05, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x2a, 0x42, 0x0a, 0x0f, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56,
	0x41, 0x54, 0x45, 0x10, 0x02, 0x2a, 0x9b, 0x01, 0x0a, 0x12, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x15,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4c, 0x4c, 0x4f, 0x57,
	0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45,
	0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x53, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x57, 0x4e,
	0x45, 0x52, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x4e, 0x4c,
	0x59, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54,
	0x45, 0x10, 0x05, 0x2a, 0x61, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4c, 0x41, 0x43,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x4c, 0x41,
	0x4e, 0x43, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x87, 0x03, 0x0a, 0x10, 0x4c, 0x6f, 0x62, 0x62, 0x69,
	0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x4f, 0x42, 0x42, 0x49, 0x45, 0x53, 0x5f, 0x4d,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x4c, 0x4f, 0x42, 0x42, 0x49, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x4f, 0x42, 0x42, 0x49,
	0x45, 0x53, 0x5f, 0x4c, 0x4f, 0x42, 0x42, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x42, 0x41, 0x4e, 0x44,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x4f, 0x42, 0x42, 0x49, 0x45, 0x53, 0x5f,
	0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x18, 0x0a, 0x14, 0x4c, 0x4f, 0x42, 0x42, 0x49, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x4f, 0x42,
	0x42, 0x49, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x4f, 0x42, 0x42, 0x49, 0x45, 0x53, 0x5f,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x44, 0x10, 0x07,
	0x12, 0x23, 0x0a, 0x1f, 0x4c, 0x4f, 0x42, 0x42, 0x49, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x24, 0x0a, 0x20, 0x4c, 0x4f, 0x42, 0x42, 0x49, 0x45, 0x53,
	0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x4c,
	0x4f, 0x42, 0x42, 0x49, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x4f,
	0x42, 0x42, 0x49, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x43,
	0x4b, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x4f, 0x42, 0x42, 0x49, 0x45, 0x53,
	0x5f, 0x4c, 0x4f, 0x42, 0x42, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0c,
	0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x65, 0x72, 0x2d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lobbies_types_proto_rawDescOnce sync.Once
	file_lobbies_types_proto_rawDescData = file_lobbies_types_proto_rawDesc
)

func file_lobbies_types_proto_rawDescGZIP() []byte {
	file_lobbies_types_proto_rawDescOnce.Do(func() {
		file_lobbies_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_lobbies_types_proto_rawDescData)
	})
	return file_lobbies_types_proto_rawDescData
}

var file_lobbies_types_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_lobbies_types_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_lobbies_types_proto_goTypes = []interface{}{
	(LobbyVisibility)(0),                       // 0: lobbies.LobbyVisibility
	(LobbyAccessibility)(0),                    // 1: lobbies.LobbyAccessibility
	(PlacementStrategy)(0),                     // 2: lobbies.PlacementStrategy
	(LobbiesEventType)(0),                      // 3: lobbies.LobbiesEventType
	(*Lobby)(nil),                              // 4: lobbies.Lobby
	(*PlacementSettings)(nil),                  // 5: lobbies.PlacementSettings
	(*Member)(nil),                             // 6: lobbies.Member
	(*Invite)(nil),                             // 7: lobbies.Invite
	(*EventLobbiesMemberJoined)(nil),           // 8: lobbies.EventLobbiesMemberJoined
	(*EventLobbiesMemberLeft)(nil),             // 9: lobbies.EventLobbiesMemberLeft
	(*EventLobbiesLobbyDisbanded)(nil),         // 10: lobbies.EventLobbiesLobbyDisbanded
	(*EventLobbiesOwnerChanged)(nil),           // 11: lobbies.EventLobbiesOwnerChanged
	(*EventLobbiesMemberReady)(nil),            // 12: lobbies.EventLobbiesMemberReady
	(*EventLobbiesMatchStarted)(nil),           // 13: lobbies.EventLobbiesMatchStarted
	(*EventLobbiesMemberInvited)(nil),          // 14: lobbies.EventLobbiesMemberInvited
	(*EventLobbiesMemberMetadataUpdated)(nil),  // 15: lobbies.EventLobbiesMemberMetadataUpdated
	(*EventLobbiesMemberPlacementUpdated)(nil), // 16: lobbies.EventLobbiesMemberPlacementUpdated
	(*EventLobbiesMatchStartError)(nil),        // 17: lobbies.EventLobbiesMatchStartError
	(*EventLobbiesMemberKicked)(nil),           // 18: lobbies.EventLobbiesMemberKicked
	(*EventLobbiesLobbyCreated)(nil),           // 19: lobbies.EventLobbiesLobbyCreated
	(*CreateLobbyRequest)(nil),                 // 20: lobbies.CreateLobbyRequest
	(*CreateLobbyResponse)(nil),                // 21: lobbies.CreateLobbyResponse
	(*GetLobbyRequest)(nil),                    // 22: lobbies.GetLobbyRequest
	(*GetLobbyResponse)(nil),                   // 23: lobbies.GetLobbyResponse
	(*DeleteLobbyRequest)(nil),                 // 24: lobbies.DeleteLobbyRequest
	(*DeleteLobbyResponse)(nil),                // 25: lobbies.DeleteLobbyResponse
	(*ModifyLobbyRequest)(nil),                 // 26: lobbies.ModifyLobbyRequest
	(*ModifyLobbyResponse)(nil),                // 27: lobbies.ModifyLobbyResponse
	(*MetadataFilter)(nil),                     // 28: lobbies.MetadataFilter
	(*SortParams)(nil),                         // 29: lobbies.SortParams
	(*ListLobbiesRequest)(nil),                 // 30: lobbies.ListLobbiesRequest
	(*ListLobbiesResponse)(nil),                // 31: lobbies.ListLobbiesResponse
	(*ListLobbiesForMemberRequest)(nil),        // 32: lobbies.ListLobbiesForMemberRequest
	(*ListLobbiesForMemberResponse)(nil),       // 33: lobbies.ListLobbiesForMemberResponse
	(*JoinLobbyRequest)(nil),                   // 34: lobbies.JoinLobbyRequest
	(*JoinLobbyResponse)(nil),                  // 35: lobbies.JoinLobbyResponse
	(*LeaveLobbyRequest)(nil),                  // 36: lobbies.LeaveLobbyRequest
	(*LeaveLobbyResponse)(nil),                 // 37: lobbies.LeaveLobbyResponse
	(*AddLobbyMemberRequest)(nil),              // 38: lobbies.AddLobbyMemberRequest
	(*AddLobbyMemberResponse)(nil),             // 39: lobbies.AddLobbyMemberResponse
	(*RemoveLobbyMemberRequest)(nil),           // 40: lobbies.RemoveLobbyMemberRequest
	(*RemoveLobbyMemberResponse)(nil),          // 41: lobbies.RemoveLobbyMemberResponse
	(*UpdateLobbyMemberMetadataRequest)(nil),   // 42: lobbies.UpdateLobbyMemberMetadataRequest
	(*UpdateLobbyMemberMetadataResponse)(nil),  // 43: lobbies.UpdateLobbyMemberMetadataResponse
	(*UpdateLobbyMemberPlacementRequest)(nil),  // 44: lobbies.UpdateLobbyMemberPlacementRequest
	(*UpdateLobbyMemberPlacementResponse)(nil), // 45: lobbies.UpdateLobbyMemberPlacementResponse
	(*ReadyMemberRequest)(nil),                 // 46: lobbies.ReadyMemberRequest
	(*ReadyMemberResponse)(nil),                // 47: lobbies.ReadyMemberResponse
	(*InviteLobbyMemberRequest)(nil),           // 48: lobbies.InviteLobbyMemberRequest
	(*InviteLobbyMemberResponse)(nil),          // 49: lobbies.InviteLobbyMemberResponse
	(*AcceptLobbyInviteRequest)(nil),           // 50: lobbies.AcceptLobbyInviteRequest
	(*AcceptLobbyInviteResponse)(nil),          // 51: lobbies.AcceptLobbyInviteResponse
	(*ListLobbyInvitesRequest)(nil),            // 52: lobbies.ListLobbyInvitesRequest
	(*ListLobbyInvitesResponse)(nil),           // 53: lobbies.ListLobbyInvitesResponse
	(*ListLobbyMemberInvitesRequest)(nil),      // 54: lobbies.ListLobbyMemberInvitesRequest
	(*ListLobbyMemberInvitesResponse)(nil),     // 55: lobbies.ListLobbyMemberInvitesResponse
	(*TransferOwnershipRequest)(nil),           // 56: lobbies.TransferOwnershipRequest
	(*TransferOwnershipResponse)(nil),          // 57: lobbies.TransferOwnershipResponse
	(*StartMatchRequest)(nil),                  // 58: lobbies.StartMatchRequest
	(*StartMatchResponse)(nil),                 // 59: lobbies.StartMatchResponse
	nil,                                        // 60: lobbies.Lobby.MembersEntry
	nil,                                        // 61: lobbies.Lobby.AllocationMetadataEntry
	nil,                                        // 62: lobbies.CreateLobbyRequest.AllocationMetadataEntry
	nil,                                        // 63: lobbies.ModifyLobbyRequest.AllocationMetadataEntry
	(*wrapperspb.BoolValue)(nil),               // 64: google.protobuf.BoolValue
	(*structpb.Struct)(nil),                    // 65: google.protobuf.Struct
	(*wrapperspb.Int32Value)(nil),              // 66: google.protobuf.Int32Value
	(*structpb.Value)(nil),                     // 67: google.protobuf.Value
}
var file_lobbies_types_proto_depIdxs = []int32{
	64, // 0: lobbies.Lobby.private:type_name -> google.protobuf.BoolValue
	64, // 1: lobbies.Lobby.allow_party_join:type_name -> google.protobuf.BoolValue
	60, // 2: lobbies.Lobby.members:type_name -> lobbies.Lobby.MembersEntry
	65, // 3: lobbies.Lobby.search_metadata:type_name -> google.protobuf.Struct
	61, // 4: lobbies.Lobby.allocation_metadata:type_name -> lobbies.Lobby.AllocationMetadataEntry
	64, // 5: lobbies.Lobby.allocated:type_name -> google.protobuf.BoolValue
	5,  // 6: lobbies.Lobby.placement_settings:type_name -> lobbies.PlacementSettings
	0,  // 7: lobbies.Lobby.visibility:type_name -> lobbies.LobbyVisibility
	1,  // 8: lobbies.Lobby.accessibility:type_name -> lobbies.LobbyAccessibility
	66, // 9: lobbies.PlacementSettings.num_placements:type_name -> google.protobuf.Int32Value
	64, // 10: lobbies.PlacementSettings.allow_member_placement_updates:type_name -> google.protobuf.BoolValue
	2,  // 11: lobbies.PlacementSettings.placement_strategy:type_name -> lobbies.PlacementStrategy
	64, // 12: lobbies.PlacementSettings.allow_placement_updates_outside_range:type_name -> google.protobuf.BoolValue
	64, // 13: lobbies.Member.ready_check:type_name -> google.protobuf.BoolValue
	65, // 14: lobbies.Member.metadata:type_name -> google.protobuf.Struct
	66, // 15: lobbies.Member.placement:type_name -> google.protobuf.Int32Value
	65, // 16: lobbies.Invite.metadata:type_name -> google.protobuf.Struct
	3,  // 17: lobbies.EventLobbiesMemberJoined.event_type:type_name -> lobbies.LobbiesEventType
	65, // 18: lobbies.EventLobbiesMemberJoined.joined_user_metadata:type_name -> google.protobuf.Struct
	66, // 19: lobbies.EventLobbiesMemberJoined.placement:type_name -> google.protobuf.Int32Value
	3,  // 20: lobbies.EventLobbiesMemberLeft.event_type:type_name -> lobbies.LobbiesEventType
	65, // 21: lobbies.EventLobbiesMemberLeft.left_user_metadata:type_name -> google.protobuf.Struct
	3,  // 22: lobbies.EventLobbiesLobbyDisbanded.event_type:type_name -> lobbies.LobbiesEventType
	3,  // 23: lobbies.EventLobbiesOwnerChanged.event_type:type_name -> lobbies.LobbiesEventType
	3,  // 24: lobbies.EventLobbiesMemberReady.event_type:type_name -> lobbies.LobbiesEventType
	3,  // 25: lobbies.EventLobbiesMatchStarted.event_type:type_name -> lobbies.LobbiesEventType
	3,  // 26: lobbies.EventLobbiesMemberInvited.event_type:type_name -> lobbies.LobbiesEventType
	3,  // 27: lobbies.EventLobbiesMemberMetadataUpdated.event_type:type_name -> lobbies.LobbiesEventType
	65, // 28: lobbies.EventLobbiesMemberMetadataUpdated.user_metadata:type_name -> google.protobuf.Struct
	3,  // 29: lobbies.EventLobbiesMemberPlacementUpdated.event_type:type_name -> lobbies.LobbiesEventType
	66, // 30: lobbies.EventLobbiesMemberPlacementUpdated.placement:type_name -> google.protobuf.Int32Value
	3,  // 31: lobbies.EventLobbiesMatchStartError.event_type:type_name -> lobbies.LobbiesEventType
	3,  // 32: lobbies.EventLobbiesMemberKicked.event_type:type_name -> lobbies.LobbiesEventType
	3,  // 33: lobbies.EventLobbiesLobbyCreated.event_type:type_name -> lobbies.LobbiesEventType
	65, // 34: lobbies.CreateLobbyRequest.search_metadata:type_name -> google.protobuf.Struct
	65, // 35: lobbies.CreateLobbyRequest.owner_metadata:type_name -> google.protobuf.Struct
	62, // 36: lobbies.CreateLobbyRequest.allocation_metadata:type_name -> lobbies.CreateLobbyRequest.AllocationMetadataEntry
	5,  // 37: lobbies.CreateLobbyRequest.placement_settings:type_name -> lobbies.PlacementSettings
	66, // 38: lobbies.CreateLobbyRequest.owner_placement:type_name -> google.protobuf.Int32Value
	0,  // 39: lobbies.CreateLobbyRequest.visibility:type_name -> lobbies.LobbyVisibility
	1,  // 40: lobbies.CreateLobbyRequest.accessibility:type_name -> lobbies.LobbyAccessibility
	4,  // 41: lobbies.CreateLobbyResponse.lobby:type_name -> lobbies.Lobby
	4,  // 42: lobbies.GetLobbyResponse.lobby:type_name -> lobbies.Lobby
	64, // 43: lobbies.ModifyLobbyRequest.private:type_name -> google.protobuf.BoolValue
	64, // 44: lobbies.ModifyLobbyRequest.allow_party_join:type_name -> google.protobuf.BoolValue
	65, // 45: lobbies.ModifyLobbyRequest.search_metadata:type_name -> google.protobuf.Struct
	63, // 46: lobbies.ModifyLobbyRequest.allocation_metadata:type_name -> lobbies.ModifyLobbyRequest.AllocationMetadataEntry
	5,  // 47: lobbies.ModifyLobbyRequest.placement_settings:type_name -> lobbies.PlacementSettings
	0,  // 48: lobbies.ModifyLobbyRequest.visibility:type_name -> lobbies.LobbyVisibility
	1,  // 49: lobbies.ModifyLobbyRequest.accessibility:type_name -> lobbies.LobbyAccessibility
	4,  // 50: lobbies.ModifyLobbyResponse.lobby:type_name -> lobbies.Lobby
	67, // 51: lobbies.MetadataFilter.value:type_name -> google.protobuf.Value
	28, // 52: lobbies.ListLobbiesRequest.metadata_filters:type_name -> lobbies.MetadataFilter
	29, // 53: lobbies.ListLobbiesRequest.sort:type_name -> lobbies.SortParams
	4,  // 54: lobbies.ListLobbiesResponse.lobbies:type_name -> lobbies.Lobby
	4,  // 55: lobbies.ListLobbiesForMemberResponse.lobbies:type_name -> lobbies.Lobby
	65, // 56: lobbies.JoinLobbyRequest.metadata:type_name -> google.protobuf.Struct
	66, // 57: lobbies.JoinLobbyRequest.placement:type_name -> google.protobuf.Int32Value
	4,  // 58: lobbies.JoinLobbyResponse.lobby:type_name -> lobbies.Lobby
	65, // 59: lobbies.AddLobbyMemberRequest.metadata:type_name -> google.protobuf.Struct
	4,  // 60: lobbies.AddLobbyMemberResponse.lobby:type_name -> lobbies.Lobby
	4,  // 61: lobbies.RemoveLobbyMemberResponse.lobby:type_name -> lobbies.Lobby
	65, // 62: lobbies.UpdateLobbyMemberMetadataRequest.metadata:type_name -> google.protobuf.Struct
	66, // 63: lobbies.UpdateLobbyMemberPlacementRequest.placement:type_name -> google.protobuf.Int32Value
	4,  // 64: lobbies.ReadyMemberResponse.lobby:type_name -> lobbies.Lobby
	65, // 65: lobbies.InviteLobbyMemberRequest.metadata:type_name -> google.protobuf.Struct
	7,  // 66: lobbies.InviteLobbyMemberResponse.invite:type_name -> lobbies.Invite
	65, // 67: lobbies.AcceptLobbyInviteRequest.metadata:type_name -> google.protobuf.Struct
	4,  // 68: lobbies.AcceptLobbyInviteResponse.lobby:type_name -> lobbies.Lobby
	7,  // 69: lobbies.ListLobbyInvitesResponse.invites:type_name -> lobbies.Invite
	7,  // 70: lobbies.ListLobbyMemberInvitesResponse.invites:type_name -> lobbies.Invite
	4,  // 71: lobbies.TransferOwnershipResponse.lobby:type_name -> lobbies.Lobby
	4,  // 72: lobbies.StartMatchResponse.lobby:type_name -> lobbies.Lobby
	6,  // 73: lobbies.Lobby.MembersEntry.value:type_name -> lobbies.Member
	74, // [74:74] is the sub-list for method output_type
	74, // [74:74] is the sub-list for method input_type
	74, // [74:74] is the sub-list for extension type_name
	74, // [74:74] is the sub-list for extension extendee
	0,  // [0:74] is the sub-list for field type_name
}

func init() { file_lobbies_types_proto_init() }
func file_lobbies_types_proto_init() {
	if File_lobbies_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lobbies_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlacementSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Invite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLobbiesMemberJoined); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLobbiesMemberLeft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLobbiesLobbyDisbanded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLobbiesOwnerChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLobbiesMemberReady); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLobbiesMatchStarted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLobbiesMemberInvited); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLobbiesMemberMetadataUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLobbiesMemberPlacementUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLobbiesMatchStartError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLobbiesMemberKicked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLobbiesLobbyCreated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLobbyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLobbyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLobbyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLobbyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLobbyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLobbyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyLobbyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyLobbyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLobbiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLobbiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLobbiesForMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLobbiesForMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinLobbyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinLobbyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveLobbyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveLobbyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLobbyMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLobbyMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveLobbyMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveLobbyMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLobbyMemberMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLobbyMemberMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLobbyMemberPlacementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLobbyMemberPlacementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadyMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadyMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteLobbyMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteLobbyMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptLobbyInviteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptLobbyInviteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLobbyInvitesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLobbyInvitesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLobbyMemberInvitesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLobbyMemberInvitesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferOwnershipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferOwnershipResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lobbies_types_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lobbies_types_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lobbies_types_proto_goTypes,
		DependencyIndexes: file_lobbies_types_proto_depIdxs,
		EnumInfos:         file_lobbies_types_proto_enumTypes,
		MessageInfos:      file_lobbies_types_proto_msgTypes,
	}.Build()
	File_lobbies_types_proto = out.File
	file_lobbies_types_proto_rawDesc = nil
	file_lobbies_types_proto_goTypes = nil
	file_lobbies_types_proto_depIdxs = nil
}
